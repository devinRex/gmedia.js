{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/flv-g7.js/dist/flv.js","node_modules/recorder-core/src/engine/mp3-engine.js","node_modules/recorder-core/src/engine/mp3.js","node_modules/recorder-core/src/recorder-core.js","src/common/bytearray.js","src/common/util.js","src/gmedia.js","src/index.js","src/player/gplayer-events.js","src/player/gplayer.js","src/player/httpflv-player.js","src/talker/gtalker-events.js","src/talker/gtalker.js","src/talker/httpflv-talker.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","gmediajs","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","flvjs","s","l","process","factory","ES6Promise","objectOrFunction","x","type","isFunction","setScheduler","scheduleFn","customSchedulerFn","setAsap","asapFn","asap","useVertxTimer","vertxNext","flush","useSetTimeout","globalSetTimeout","setTimeout","len","callback","queue","undefined","then","onFulfillment","onRejection","parent","child","constructor","noop","PROMISE_ID","makePromise","_state","arguments","invokeCallback","_result","subscribe","resolve$1","object","Constructor","promise","resolve","selfFulfillment","TypeError","cannotReturnOwn","getThen","error","TRY_CATCH_ERROR","tryThen","then$$1","value","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","sealed","fulfill","reason","reject","_label","handleOwnThenable","FULFILLED","REJECTED","handleMaybeThenable","maybeThenable","publishRejection","_onerror","publish","PENDING","_subscribers","subscribers","settled","detail","tryCatch","hasCallback","succeeded","failed","initializePromise","resolver","nextId","id","validationError","all","entries","Enumerator","race","isArray","_","reject$1","needsResolver","needsNew","polyfill","local","Function","P","Promise","promiseToString","Object","prototype","toString","cast","Promise$1","_isArray","Array","arg","scheduleFlush","browserWindow","browserGlobal","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","MessageChannel","nextTick","iterations","observer","node","document","createTextNode","observe","characterData","data","channel","port1","onmessage","port2","postMessage","vertx","runOnLoop","runOnContext","Math","random","substring","input","_instanceConstructor","_remaining","_enumerate","_eachEntry","entry","resolve$$1","_then","_settledAt","_willSettleAt","state","enumerator","catch","finally","_setScheduler","_setAsap","_asap","_process","2","EventEmitter","_events","_maxListeners","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","emit","er","handler","args","listeners","err","context","slice","apply","addListener","listener","m","newListener","push","warned","console","trace","on","once","removeListener","fired","list","position","splice","removeAllListeners","key","listenerCount","evlistener","emitter","3","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","concat","queueIndex","drainQueue","timeout","run","Item","array","title","browser","env","argv","version","versions","off","prependListener","prependOnceListener","name","binding","cwd","chdir","dir","umask","4","bundleFn","sources","cache","stringify","JSON","fn","options","resolveSources","workerSources","depPath","depKey","wkey","cacheKeys","keys","exp","default","floor","pow","wcache","skey","scache","src","map","join","URL","webkitURL","mozURL","msURL","blob","Blob","bare","workerUrl","createObjectURL","worker","Worker","objectURL","5","createDefaultConfig","assign","defaultConfig","defineProperty","enableWorker","enableStashBuffer","stashInitialSize","isLive","lazyLoad","lazyLoadMaxDuration","lazyLoadRecoverDuration","deferLoadAfterSourceOpen","autoCleanupMaxBackwardDuration","autoCleanupMinBackwardDuration","statisticsInfoReportInterval","fixAudioTimestampGap","accurateSeek","seekType","seekParamStart","seekParamEnd","rangeLoadZeroStart","customSeekHandler","reuseRedirectedURL","headers","customLoader","6","_classCallCheck","instance","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","_ioController","_ioController2","obj","__esModule","_config","Features","MediaSource","isTypeSupported","ioctl","loaderType","destroy","mimeType","videoElement","createElement","canPlay","canPlayType","features","mseFlvPlayback","mseLiveFlvPlayback","networkStreamIO","networkLoaderName","nativeMP4H264Playback","nativeWebmVP8Playback","nativeWebmVP9Playback","supportMSEH264Playback","supportNetworkStreamIO","getNetworkLoaderTypeName","supportNativeMediaPlayback","../config.js","../io/io-controller.js","7","MediaInfo","duration","hasAudio","hasVideo","audioCodec","videoCodec","audioDataRate","videoDataRate","audioSampleRate","audioChannelCount","width","height","fps","profile","level","refFrames","chromaFormat","sarNum","sarDen","metadata","segments","segmentCount","hasKeyframesIndex","keyframesIndex","audioInfoComplete","videoInfoComplete","milliseconds","table","keyframeIdx","_search","times","index","fileposition","filepositions","idx","last","mid","lbound","ubound","8","SampleInfo","dts","pts","originalDts","isSync","isSyncPoint","MediaSegmentInfo","beginDts","endDts","beginPts","endPts","originalBeginDts","originalEndDts","syncPoints","firstSample","lastSample","sampleInfo","IDRSampleList","_list","clear","MediaSegmentInfoList","_type","_lastAppendLocation","_searchNearestSegmentBefore","mediaSegmentInfo","msi","lastAppendIdx","insertIdx","segment","getLastSegmentBefore","segmentIdx","get","9","_interopRequireDefault","_events2","_logger","_logger2","_browser","_browser2","_mseEvents","_mseEvents2","_mediaSegmentInfo","_exception","MSEController","config","TAG","_emitter","autoCleanupSourceBuffer","onSourceOpen","_onSourceOpen","bind","onSourceEnded","_onSourceEnded","onSourceClose","_onSourceClose","onSourceBufferError","_onSourceBufferError","onSourceBufferUpdateEnd","_onSourceBufferUpdateEnd","_mediaSource","_mediaSourceObjectURL","_mediaElement","_isBufferFull","_hasPendingEos","_requireSetMediaDuration","_pendingMediaDuration","_pendingSourceBufferInit","_mimeTypes","video","audio","_sourceBuffers","_lastInitSegments","_pendingSegments","_pendingRemoveRanges","_idrList","detachMediaElement","event","mediaElement","IllegalStateException","ms","addEventListener","ps","sb","readyState","removeSourceBuffer","message","removeEventListener","endOfStream","removeAttribute","revokeObjectURL","initSegment","deferred","is","container","codec","firstInitSegment","v","addSourceBuffer","ERROR","msg","updating","_doAppendSegments","safari","mediaDuration","_updateMediaSourceDuration","mediaSegment","_needCleanupSourceBuffer","_doCleanupSourceBuffer","_hasPendingRemoveRanges","seconds","abort","buffered","start","end","_doRemoveRanges","lastInitSegment","_hasPendingSegments","getLastSyncPointBeforeDts","currentTime","doRemove","removeEnd","current","ranges","range","shift","remove","pendingSegments","timestampOffset","currentOffset","targetOffset","delta","abs","byteLength","appendBuffer","hasOwnProperty","appendArray","info","unshift","BUFFER_FULL","pendings","appendInitSegment","SOURCE_OPEN","SOURCE_END","prr","UPDATE_END","../utils/browser.js","../utils/exception.js","../utils/logger.js","./media-segment-info.js","./mse-events.js","events","10","MSEEvents","11","_loggingControl","_loggingControl2","_transmuxingController","_transmuxingController2","_transmuxingEvents","_transmuxingEvents2","_transmuxingWorker","_transmuxingWorker2","_mediaInfo","_mediaInfo2","Transmuxer","mediaDataSource","work","_worker","_workerDestroying","_onWorkerMessage","cmd","param","onLoggingConfigChanged","_onLoggingConfigChanged","registerListener","getConfig","_controller","ctl","IO_ERROR","_onIOError","DEMUX_ERROR","_onDemuxError","INIT_SEGMENT","_onInitSegment","MEDIA_SEGMENT","_onMediaSegment","LOADING_COMPLETE","_onLoadingComplete","RECOVERED_EARLY_EOF","_onRecoveredEarlyEof","MEDIA_INFO","_onMediaInfo","METADATA_ARRIVED","_onMetaDataArrived","SCRIPTDATA_ARRIVED","_onScriptDataArrived","STATISTICS_INFO","_onStatisticsInfo","RECOMMEND_SEEKPOINT","_onRecommendSeekpoint","STREAM_TIME","_onStreamTime","stop","seek","pause","resume","_this","_this2","_this3","_this4","mediaInfo","_this5","_this6","_this7","statisticsInfo","_this8","_this9","_this10","_this11","time","_this12","terminate","setPrototypeOf","logcat","../utils/logging-control.js","./media-info.js","./transmuxing-controller.js","./transmuxing-events.js","./transmuxing-worker.js","webworkify","12","_flvDemuxer","_flvDemuxer2","_mp4Remuxer","_mp4Remuxer2","_demuxErrors","_demuxErrors2","TransmuxingController","filesize","url","cors","withCredentials","_mediaDataSource","_currentSegmentIndex","totalDuration","forEach","timestampBase","referrerPolicy","_demuxer","_remuxer","_ioctl","_pendingSeekTime","_pendingResolveSeekPoint","_statisticsReporter","_disableStatisticsReporter","_loadSegment","_enableStatisticsReporter","segmentIndex","optionalFrom","dataSource","onError","_onIOException","onSeeked","_onIOSeeked","onComplete","_onIOComplete","onRedirect","_onIORedirect","onRecoveredEarlyEof","_onIORecoveredEarlyEof","bindDataSource","onDataArrival","_onInitChunkArrival","open","_internalAbort","isWorking","isPaused","isSeekable","targetSegmentIndex","_searchSegmentIndexContains","segmentInfo","keyframe","getNearestKeyframe","targetSegmentInfo","insertDiscontinuity","_keyframe","resetMediaInfo","_reportSegmentMediaInfo","byteStart","probeData","consumed","parseChunks","probe","match","mds","overridedDuration","overridedHasAudio","overridedHasVideo","_onDemuxException","onMediaInfo","onMetaDataArrived","onScriptDataArrived","onStreamTime","onInitSegment","_onRemuxerInitSegmentArrival","onMediaSegment","_onRemuxerMediaSegmentArrival","FORMAT_UNSUPPORTED","extraData","nextSegmentIndex","flushStashedSamples","redirectedURL","seekpoint","setInterval","_reportStatisticsInfo","clearInterval","exportInfo","currentURL","hasRedirect","currentRedirectedURL","speed","currentSpeed","currentSegmentIndex","totalSegmentCount","../demux/demux-errors.js","../demux/flv-demuxer.js","../io/loader.js","../remux/mp4-remuxer.js","13","TransmuxingEvents","14","_polyfill","_polyfill2","TransmuxingWorker","onLoadingComplete","onStatisticsInfo","statInfo","onIOError","onDemuxError","onRecommendSeekpoint","onLogcatCallback","str","controller","logcatListener","install","applyConfig","enableCallback","addLogListener","removeLogListener","../utils/polyfill.js","15","_utf8Conv","_utf8Conv2","le","buf","ArrayBuffer","DataView","setInt16","Int16Array","AMF","arrayBuffer","dataOffset","dataSize","parseValue","size","parseString","isObjectEnd","objectEnd","parseObject","getUint16","Uint8Array","getUint32","timestamp","getFloat64","getInt16","Date","offset","getUint8","amfstr","terminal","amfobj","_terminal","amfvar","parseVariable","strictArrayLength","val","date","parseDate","amfLongStr","w","../utils/utf8-conv.js","16","DemuxErrors","OK","FORMAT_ERROR","CODEC_UNSUPPORTED","17","ExpGolomb","uint8array","_buffer","_buffer_index","_total_bytes","_total_bits","_current_word","_current_word_bits_left","buffer_bytes_left","bytes_read","min","word","set","subarray","buffer","bits","InvalidArgumentException","result","bits_need_left","_fillCurrentWord","bits_read_next","result2","readBits","zero_count","_skipLeadingZero","leading_zeros","readUEG","18","ReadBig32","_typeof","Symbol","iterator","_amfParser","_amfParser2","_spsParser","_spsParser2","FLVDemuxer","_onError","_onTrackMetadata","_onDataAvailable","_dataOffset","_firstParse","_dispatch","_hasAudio","hasAudioTrack","_hasVideo","hasVideoTrack","_hasAudioFlagOverrided","_hasVideoFlagOverrided","_audioInitialMetadataDispatched","_videoInitialMetadataDispatched","_metadata","_audioMetadata","_videoMetadata","_naluLengthSize","_timestampBase","_timescale","_duration","_durationOverrided","_referenceFrameRate","fixed","fps_num","fps_den","_flvSoundRateTable","_mpegSamplingRates","_mpegAudioV10SampleRateTable","_mpegAudioV20SampleRateTable","_mpegAudioV25SampleRateTable","_mpegAudioL1BitRateTable","_mpegAudioL2BitRateTable","_mpegAudioL3BitRateTable","_videoTrack","sequenceNumber","samples","_audioTrack","_littleEndian","loader","chunk","_v","tagType","ts2","ts1","ts0","ts3","_parseAudioData","_parseVideoData","_parseScriptData","prevTagSize","_isInitialMetadataDispatched","scriptData","parseScriptData","onMetaData","audiodatarate","videodatarate","framerate","keyframes","_parseKeyframesIndex","isComplete","tagTimestamp","soundSpec","soundFormat","soundRate","soundRateIndex","soundType","meta","track","timescale","channelCount","aacData","_parseAACAudioData","packetType","misc","samplingRate","originalCodec","refSampleDuration","mi","aacSample","unit","_misc","_parseMP3AudioData","_mi","bitRate","_dts","mp3Sample","_parseAACAudioSpecificConfig","audioObjectType","originalAudioObjectType","samplingIndex","extensionSamplingIndex","samplingFrequence","channelConfig","userAgent","navigator","toLowerCase","indexOf","requestHeader","ver","layer","bitrate_index","sampling_freq_index","channel_mode","channel_count","sample_rate","bit_rate","tagPosition","spec","frameType","codecId","_parseAVCVideoPacket","cts_unsigned","cts","_parseAVCDecoderConfigurationRecord","_parseAVCVideoData","avcc","avcProfile","spsCount","sps","parseSPS","codecWidth","codec_size","codecHeight","presentWidth","present_size","presentHeight","profile_string","level_string","bitDepth","bit_depth","chroma_format","sarRatio","sar_ratio","frameRate","frame_rate","codecArray","codecString","j","h","ref_frames","chroma_format_string","ppsCount","_i","_len","units","lengthSize","naluSize","unitType","avcSample","isKeyframe","base","mismatch","../core/media-info.js","./amf-parser.js","./demux-errors.js","./sps-parser.js","19","_expGolomb","_expGolomb2","SPSParser","src_length","dst","dst_idx","rbsp","_ebsp2rbsp","gb","readByte","profile_idc","level_idc","getProfileString","getLevelString","chroma_format_idc","chroma_format_table","readBool","scaling_list_count","_skipScalingList","pic_order_cnt_type","readSEG","num_ref_frames_in_pic_order_cnt_cycle","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","sar_width","sar_height","fps_fixed","aspect_ratio_idc","sar_w_table","sar_h_table","num_units_in_tick","time_scale","sarScale","crop_unit_x","crop_unit_y","sub_wc","sub_hc","codec_width","codec_height","present_width","ceil","getChromaFormatString","count","last_scale","next_scale","delta_scale","toFixed","chroma","./exp-golomb.js","20","createPlayer","optionalConfig","_flvPlayer2","_nativePlayer2","isSupported","_features2","getFeatureList","_features","_loader","_flvPlayer","_nativePlayer","_playerEvents","_playerEvents2","_playerErrors","BaseLoader","LoaderStatus","LoaderErrors","Events","ErrorTypes","ErrorDetails","FlvPlayer","NativePlayer","LoggingControl","./core/features.js","./io/loader.js","./player/flv-player.js","./player/native-player.js","./player/player-errors.js","./player/player-events.js","./utils/exception.js","./utils/logging-control.js","./utils/polyfill.js","21","./flv.js","22","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","__proto__","_get","property","receiver","desc","getOwnPropertyDescriptor","getPrototypeOf","getter","FetchStreamLoader","_BaseLoader","seekHandler","_seekHandler","_needStash","_requestAbort","_contentLength","_receivedLength","isWorkWellEdge","msedge","minor","browserNotBlacklisted","fetch","ReadableStream","_dataSource","_range","sourceURL","seekConfig","Headers","configHeaders","append","params","method","mode","_key","credentials","AbortController","_abortController","signal","_status","kConnecting","res","kIdle","body","cancel","ok","status","_onURLRedirect","removeURLParameters","lengthHeader","parseInt","_onContentLengthKnown","_pump","getReader","kError","RuntimeException","statusText","HTTP_STATUS_CODE_INVALID","aborted","EXCEPTION","kBuffering","chrome","reader","read","done","EARLY_EOF","kComplete","_onComplete","from","_onDataArrival","./loader.js","23","_speedSampler","_speedSampler2","_fetchStreamLoader","_fetchStreamLoader2","_xhrMozChunkedLoader","_xhrMozChunkedLoader2","_xhrMsstreamLoader","_xhrRangeLoader","_xhrRangeLoader2","_websocketLoader","_websocketLoader2","_rangeSeekHandler","_rangeSeekHandler2","_paramSeekHandler","_paramSeekHandler2","IOController","_extraData","_stashInitialSize","_stashUsed","_stashSize","_bufferSize","_stashBuffer","_stashByteStart","_enableStash","_loaderClass","_isWebSocketURL","test","_refTotalLength","_totalLength","_fullRequestFlag","_currentRange","_redirectedURL","_speedNormalized","_speedNormalizeList","_isEarlyEofReconnecting","_paused","_resumeFrom","_onSeeked","_onRedirect","_selectSeekHandler","_selectLoader","_createLoader","paramStart","paramEnd","needStashBuffer","onContentLengthKnown","onURLRedirect","_onLoaderChunkArrival","_onLoaderComplete","_onLoaderError","to","reset","bytes","_internalSeek","dropUnconsumed","_flushStashBuffer","requestRange","expectedBytes","bufferNewSize","newBuffer","stashOldArray","normalized","stashSizeKB","bufferSize","_expandBuffer","chunks","contentLength","receivedLength","addBytes","KBps","lastSecondKBps","_normalizeSpeed","_adjustStashSize","_stashArray2","_stashArray3","_consumed2","_dispatchChunks","_remainArray","_consumed3","_remain","remain","stashArray","_stashArray","_consumed","remainArray","UNRECOVERABLE_EARLY_EOF","nextFrom","CONNECTING_TIMEOUT","./fetch-stream-loader.js","./param-seek-handler.js","./range-seek-handler.js","./speed-sampler.js","./websocket-loader.js","./xhr-moz-chunked-loader.js","./xhr-msstream-loader.js","./xhr-range-loader.js","24","typeName","NotImplementedException","25","ParamSeekHandler","_startName","_endName","baseUrl","needAnd","seekedURL","baseURL","split","queryIndex","resultParams","pairs","pair","requireAnd","26","RangeSeekHandler","zeroStart","_zeroStart","27","SpeedSampler","_firstCheckpoint","_lastCheckpoint","_intervalBytes","_totalBytes","_lastSecondBytes","performance","now","_now","durationSeconds","currentKBps","28","WebSocketLoader","_ws","WebSocket","ws","binaryType","onopen","_onWebSocketOpen","onclose","_onWebSocketClose","_onWebSocketMessage","onerror","_onWebSocketError","close","_dispatchArrayBuffer","FileReader","onload","readAsArrayBuffer","arraybuffer","29","MozChunkedLoader","_xhr","xhr","XMLHttpRequest","responseType","onreadystatechange","onprogress","onloadend","_requestURL","_onReadyStateChange","_onProgress","_onLoadEnd","_onXhrError","setRequestHeader","_headers","send","responseURL","total","response","loaded","30","MSStreamLoader","_reader","_totalRange","_currentRequestURL","_currentRedirectedURL","_bufferLimit","_lastTimeBufferSize","_isReconnecting","MSStream","MSStreamReader","_internalOpen","isSubrange","_msrOnProgress","_msrOnLoad","_msrOnError","_xhrOnReadyStateChange","_xhrOnError","getResponseHeader","msstream","bigbuffer","_doReconnectIfNeeded","31","RangeLoader","_chunkSizeKBList","_currentChunkSizeKB","_currentSpeedNormalized","_zeroSpeedChunkCount","_waitForTotalLength","_totalLengthReceived","_currentRequestRange","_lastTimeLoaded","useRefTotalLength","_openSubRange","chunkSize","_onLoad","openNextRange","reportComplete","32","_transmuxer","_transmuxer2","_mseController","_mseController2","onvLoadedMetadata","_onvLoadedMetadata","onvSeeking","_onvSeeking","onvCanPlay","_onvCanPlay","onvStalled","_onvStalled","onvProgress","_onvProgress","_requestSetTime","_seekpointRecord","_progressChecker","_msectl","_mseSourceOpened","_hasPendingLoad","_receivedCanPlay","_statisticsInfo","chromeNeedIDRFix","major","build","_alwaysSeekKeyframe","msie","callbackStreamTime","_mediaSourceEndCallback","unload","_onmseUpdateEnd","_onmseBufferFull","load","MEDIA_ERROR","MEDIA_MSE_ERROR","attachMediaElement","appendMediaSegment","_suspendTransmuxer","NETWORK_ERROR","_fillStatisticsInfo","ts","_receiveStreamTime","play","playerType","HTMLVideoElement","hasQualityInfo","decoded","dropped","getVideoPlaybackQuality","quality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","decodedFrames","droppedFrames","currentRangeEnd","_checkProgressAndResume","needResume","directSeek","_isTimepointBuffered","directSeekBegin","directSeekBeginTime","videoBeginTime","idr","recordTime","_checkAndApplyUnbufferedSeekpoint","stalled","media","seekPoint","_checkAndResumeStuckPlayback","volume","muted","../core/mse-controller.js","../core/mse-events.js","../core/transmuxer.js","../core/transmuxing-events.js","./player-errors.js","./player-events.js","33","preload","mediaPrefix","HTMLAudioElement","videoWidth","videoHeight","34","OTHER_ERROR","NETWORK_EXCEPTION","NETWORK_STATUS_CODE_INVALID","NETWORK_TIMEOUT","NETWORK_UNRECOVERABLE_EARLY_EOF","MEDIA_FORMAT_ERROR","MEDIA_FORMAT_UNSUPPORTED","MEDIA_CODEC_UNSUPPORTED","35","PlayerEvents","36","AAC","37","MP4","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd",".mp3","charCodeAt","constants","FTYP","STSD_PREFIX","STTS","STSC","STCO","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","datas","arrayCount","box","trackId","xmhd","mp3","sampleRate","configSize","baseMediaDecodeTime","sampleCount","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","isNonSync","init","38","_mp4Generator","_mp4Generator2","_aacSilent","_aacSilent2","MP4Remuxer","_isLive","_dtsBase","_dtsBaseInited","_audioDtsBase","Infinity","_videoDtsBase","_audioNextDts","_videoNextDts","_audioStashedLastSample","_videoStashedLastSample","_audioMeta","_videoMeta","_audioSegmentInfoList","_videoSegmentInfoList","_forceFirstIDR","_fillSilentAfterSeek","_mp3UseMpegAudio","firefox","_fillAudioTimestampGap","producer","onDataAvailable","remux","onTrackMetadata","_onTrackMetadataReceived","audioTrack","videoTrack","_calculateDtsBase","_remuxVideo","_remuxAudio","metabox","generateInitSegment","videoSample","audioSample","force","dtsCorrection","firstDts","lastDts","mpegRawTrack","firstSegmentAfterSeek","insertPrefixSilentFrame","mdatbox","mdatBytes","pop","sample","firstSampleOriginalDts","isEmpty","_lastSample","getLastSampleBefore","distance","expectedDts","firstSampleDts","videoSegment","silentUnit","getSilentFrame","silentFrameDuration","mp4Samples","_sample","needFillSilentFrames","silentFrames","sampleDuration","curRefDts","frameCount","round","_silentUnit","intDts","intDuration","frame","_nextDts","_unit","latest","moofbox","_mergeBoxes","firstPts","lastPts","_lastSample2","_sample2","_nextDts2","syncPoint","appendSyncPoint","_i2","../core/media-segment-info.js","./aac-silent.js","./mp4-generator.js","39","Browser","ua","exec","platform_match","matched","majorVersion","platform","versionArray","string","opr","webkit","rv","iemobile","edge","android","40","_message","_RuntimeException","_RuntimeException2","_RuntimeException3","41","Log","tag","FORCE_GLOBAL_TAG","GLOBAL_TAG","ENABLE_CALLBACK","ENABLE_ERROR","warn","log","ENABLE_INFO","ENABLE_WARN","ENABLE_DEBUG","debug","ENABLE_VERBOSE","42","globalTag","forceGlobalTag","enableVerbose","enableDebug","enableInfo","enableWarn","enableError","_notifyChange","enable","./logger.js","43","Polyfill","proto","output","source","es6-promise","44","checkContinuation","checkLength","decodeUTF8","out","String","fromCharCode","ucs4","_ucs","_ucs2","lamejs","new_byte","Int8Array","new_short","new_int","Int32Array","new_float","Float32Array","new_double","Float64Array","new_float_n","sz","A","new_int_n","new_short_n","new_array_n","ShortBlock","ordinal","VbrMode","MPEGMode","_ordinal","Version","getLameVersion","getLameShortVersion","getLameVeryShortVersion","getPsyVersion","getLameUrl","getLameOsBitness","Takehiro","Bits","b","quantize_lines_xrpow_01","istep","xr","xrPos","ix","ixPos","compareval0","quantize_lines_xrpow","remaining","x0","x1","x2","x3","rx0","rx1","rx2","rx3","qupvt","adj43","quantize_xrpow","xp","pi","codInfo","prevNoise","sfb","sfbmax","prev_data_use","accumulate","accumulate01","xpPos","iData","iDataPos","acc_iData","acc_iDataPos","acc_xp","acc_xpPos","global_gain","block_type","Encoder","SHORT_TYPE","step","NORM_TYPE","scalefac","preflag","pretab","scalefac_scale","subblock_gain","max_nonzero_coeff","usefullsize","Arrays","fill","sfb_count1","ix_max","endPos","max1","max2","count_bit_ESC","t1","t2","sum2","linbits","Tables","ht","xlen","sum","y","largetbl","count_bit_noESC","sum1","hlen1","hlen","count_bit_noESC_from2","table23","table56","count_bit_noESC_from3","sum3","hlen2","hlen3","choose_table","max","huf_tbl_noESC","QuantizePVT","IXMAX_VAL","LARGE_BITS","choice2","linmax","choice","recalc_divide_init","gfc","cod_info","r01_bits","r01_div","r0_tbl","r1_tbl","bigv","big_values","r0","a1","scalefac_band","r0bits","bi","r0t","r1","a2","r1t","recalc_divide_sub","cod_info2","gi","r2","SBMAX_l","count1bits","part2_3_length","r2t","region0_count","region1_count","table_select","scfsi_calc","ch","l3_side","tt","g0","scfsi_band","scfsi","s1","c1","s2","c2","SBPSY_l","slen1_n","slen2_n","slen1_tab","slen2_tab","part2_length","scalefac_compress","setModules","_qupvt","subdv_table","noquant_count_bits","prev_noise","l3_enc","count1","t32l","t33l","count1table_select","bv_scf","use_best_huffman","best_huffman_divide","count_bits","IPOW20","xrpow_max","substep_shaping","gain","roundfac","pseudohalf","k","GrInfo","mode_gr","best_scalefac_store","gr","recalc","scale_bitcount","scale_bitcount_lsf","scale_short","scale_mixed","scale_long","tab","max_slen1","max_slen2","mixed_block_flag","sfbdivide","max_range_sfac_tab","table_number","row_in_table","partition","nr_sfb","over","max_sfac","partition_table","nr_of_sfb_block","slen1","slen2","slen3","slen4","sfb_partition_table","slen","log2tab","System","printf","huffman_init","bv_index","scfb_anz","GainAnalysis","Presets","VBRPresets","qual","comp","compS","shThreshold","shThresholdS","adj","adjShort","lower","curve","sens","inter","joint","mod","fix","vbr_q","quant_comp","quant_comp_s","expY","st_lrm","st_s","masking_adj","masking_adj_short","ath_lower","ath_curve","ath_sensitivity","interch","safejoint","sfb21mod","msfix","ABRPresets","kbps","bass","sc","mask","interCh","sfScale","nsmsfix","nsbass","scale","sfscale","apply_vbr_preset","gfp","enforce","vbr_preset","VBR","vbr_rh","vbr_old_switch_map","vbr_psy_switch_map","VBR_q_frac","q","lame_set_VBR_q","quant_comp_short","experimentalY","internal_flags","nsPsy","attackthre","attackthre_s","maskingadjust","maskingadjust_short","ATHlower","ATHcurve","athaa_sensitivity","interChRatio","exp_nspsytune","VBR_q","apply_abr_preset","preset","actual_bitrate","lame","nearestBitrateFullIndex","vbr_abr","VBR_mean_bitrate_kbps","brate","disable_reservoir","abr_switch_map","noise_shaping","ret","_lame","apply_preset","Lame","R3MIX","V3","vbr_mtrh","MEDIUM","V4","MEDIUM_FAST","STANDARD","V2","STANDARD_FAST","EXTREME","V0","EXTREME_FAST","INSANE","vbr_off","V9","V8","V7","V6","V5","V1","Reservoir","bs","_bs","ResvFrameBegin","mean_bits","maxmp3buf","frameLength","getframebits","sideinfo_len","resvLimit","out_samplerate","strict_ISO","ResvMax","fullFrameBits","ResvSize","resvDrain_pre","pinfo","resvsize","ResvMaxBits","targ_bits","cbr","add_bits","extra_bits","ResvAdjust","ResvFrameEnd","over_bits","stuffingBits","resvDrain_post","mdb_bytes","main_data_begin","VBRTag","crcUpdateLookup","crc","crc16Lookup","updateMusicCRC","bufferPos","BitStream","putheader_bits","arraycopy","header","w_ptr","bufByteIdx","totbit","LameInternalFlags","MAX_HEADER_BUF","putbits2","bufBitIdx","write_timing","putbits_noheaders","drain_into_ancillary","remainingBits","ancillary_flag","writeheader","ptr","h_ptr","CRC_update","CRC16_POLYNOMIAL","encodeSideInfo2","bitsPerFrame","error_protection","channels_out","private_bits","band","CRC_writeheader","old","println","huffman_coder_count1","huffbits","Huffmancode","tableindex","cbits","xbits","ext","linbits_x2","ShortHuffmancodebits","region1Start","LongHuffmancodebits","bigvalues","region2Start","writeMainData","data_bits","tot_bits","sfb_partition","scale_bits","sfbs","TotalBytes","compute_flushbits","total_bytes_output","flushbits","remaining_headers","last_ptr","first_ptr","ga","mpg","vbr","_ga","_mpg","_ver","_vbr","bitrate_table","padding","flush_bitstream","findReplayGain","RadioGain","GetTitleGain","rgdata","findPeakSample","noclipGainChange","Math_log10","PeakSample","EQ","noclipScale","add_dummy_byte","format_bitstream","copy_buffer","mp3data","minimum","nMusicCRC","VBR_seek_table","nBytesWritten","decode_on_the_fly","pcm_buf","mp3_in","samples_out","hip_decode1_unclipped","hip","AnalyzeSamples","GAIN_ANALYSIS_ERROR","init_bit_stream_w","LAME_MAXMP3BUFFER","HuffCodeTab","hl","MeanBits","meanBits","CalcNoiseResult","over_noise","tot_noise","max_noise","over_count","over_SSD","VBRQuantize","tak","_tk","ATH","useAdjust","aaSensitivityP","adjust","adjustLimit","decay","SBMAX_s","psfb21","PSFB21","psfb12","PSFB12","cb_l","CBANDS","cb_s","eql_w","BLKSIZE","LameGlobalFlags","class_id","num_samples","num_channels","in_samplerate","scale_left","scale_right","analysis","bWriteVbrTag","decode_only","STEREO","force_ms","free_format","write_id3tag_automatic","compression_ratio","copyright","original","extension","emphasis","experimentalZ","VBR_min_bitrate_kbps","VBR_max_bitrate_kbps","VBR_hard_min","lowpassfreq","highpassfreq","lowpasswidth","highpasswidth","ATHonly","ATHshort","noATH","ATHtype","athaa_type","athaa_loudapprox","short_blocks","useTemporal","tune","tune_value_a","encoder_delay","encoder_padding","framesize","frameNum","lame_allocated_gfp","CBRNewIterationLoop","_quantize","quantize","iteration_loop","pe","ms_ener_ratio","ratio","max_bits","l3_xmin","L3Side","SFBMAX","xrpow","mb","on_pe","mode_ext","MPG_MD_MS_LR","ms_convert","reduce_side","masking_lower_db","PSY","mask_adjust","mask_adjust_short","masking_lower","init_outer_loop","init_xrpow","calc_xmin","outer_loop","iteration_finish_one","ReplayGain","ScaleFac","arrL","arrS","arr21","arr12","POW20","pow20","Q_MAX2","ATHmdct","ath","psy","ATHformula","NSATHSCALE","compute_ath","ATH_l","ATH_psfb21","ATH_s","ATH_psfb12","samp_freq","Float","MAX_VALUE","freq","ATH_f","StartLine","_rv","_psy","ipow20","PRECALC_SIZE","Q_MAX","sfBandIndex","pow43","iteration_init","iteration_init_init","alto","treble","sfb21","longfact","shortfact","tbits","MAX_BITS_PER_GRANULE","MAX_BITS_PER_CHANNEL","fac","move_bits","athAdjust","athFloor","Util","FAST_LOG10_X","pxmin","gsfb","pxminPos","ath_over","enable_athaa_fix","vbr_mt","psy_lmax","en0","xmin","rh1","rh2","xa","xb","en","thm","max_nonzero","sfb_smin","psymax","tmpATH","SBPSY_s","calc_noise_core","startline","noise","temp","ix01","calc_noise","distort","distortPos","l3_xminPos","over_noise_db","tot_noise_db","scalefacPos","noise_log","sl","FAST_LOG10","tmp","set_pinfo","sfb2","en1","ifqstep","xfsf","sfb_lmax","bw","thr","LAMEsfb","en_s","xfsf_s","thr_s","LAMEsfb_s","LAMEqss","LAMEmainbits","LAMEsfbits","CalcNoiseData","clone_int","clone_float","other","Quantize","init_xrpow_core","upper","sqrt","psfb21_analogsilence","ath21","block","ath12","BinSearchDirection","bin_search_StepSize","desired_rate","nBits","CurrentStep","flagGoneOver","OldValue","Direction","BINSEARCH_NONE","tk","BINSEARCH_DOWN","BINSEARCH_UP","loop_break","penalties","get_klemm_noise","klemm_noise","quant_compare","best","calc","better","amp_scalefac_bands","bRefine","ifqstep34","trigger","noise_shaping_amp","inc_scalefac_scale","inc_subblock_gain","amp","balance_noise","SQRT2","sfb21_extra","ixwork","trancate_smallspectrums","allowedNoise","trancateThreshold","nsame","sort","NEQ","cod_info_w","save_xrpow","best_noise_info","best_part2_3_length","bEndOfSearch","best_ggain_pass1","age","search_limit","noise_info","maxggain","huff_bits","full_outer_loop","VBR_encode_granule","min_bits","dbits","bst_cod_info","bst_xrpow","Max_bits","real_bits","this_bits","found","get_framebits","frameBits","VBR_min_bitrate","VBR_max_bitrate","VBR_old_prepare","bands","analog_silence","avg","mxb","bitpressure_strategy","VBR_new_prepare","maximum_framebits","calc_target_bits","analog_silence_bits","max_frame_bits","res_factor","totbits","NewMDCT","window_subband","x1Pos","wp","enwindow","mdct_short","inout","inoutPos","tc0","tc1","tc2","win","mdct_long","outPos","_in","ct","st","tc3","tc4","ts5","ts6","ts7","ts8","cx","ts4","tc5","tc6","tc7","tc8","tantab_l","ca","cs","order","mdct_sub48","w0","w1","wk","wkPos","mdct_enc","mdct_encPos","samp","sb_sample","sampPos","band0","band1","amp_filter","bu","bd","III_psy_ratio","III_psy_xmin","adjust_ATH","gr2_max","max_pow","loudness_sq","adj_lim_new","updateStats","bitrate_stereoMode_Hist","bt","bitrate_blockType_Hist","lame_encode_frame_init","inbuf","primebuff0","primebuff1","newMDCT","FFTOFFSET","lame_encode_mp3_frame","inbuf_l","inbuf_r","mp3buf","mp3bufPos","mp3buf_size","mp3count","masking_LR","masking_MS","masking","pe_use","tot_ener","pe_MS","slot_lag","frac_SpF","psymodel","bufp","bufpPos","blocktype","L3psycho_anal_vbr","L3psycho_anal_ns","JOINT_STEREO","MPG_MD_LR_LR","sum_pe_MS","sum_pe_LR","gi0","gi1","ms_ratio","ers","energy","pefirbuf","fircoef","addVbrFrame","pcmdata","set_frame_pinfo","VBRSeekInfo","seen","want","pos","bag","nVbrNumFrames","TotalFrameSize","IIISideInfo","iii_psy_xmin","NsPsy","last_en_subshort","lastAttacks","Header","MAX_HEADER_LEN","Class_ID","fill_buffer_resample_init","mfbuf","MFSIZE","channels_in","resample_ratio","mf_samples_to_encode","mf_size","samplerate_index","lowpass1","lowpass2","highpass1","highpass2","noise_shaping_stop","tag_spec","inbuf_old","blackfilt","BPC","itime","SBLIMIT","minval_l","minval_s","nb_1","nb_2","nb_s1","nb_s2","s3_ss","s3_ll","loudness_sq_save","mld_l","mld_s","bm_l","bo_l","bm_s","bo_s","npart_l","npart_s","s3ind","s3ind_s","numlines_s","numlines_l","rnumlines_l","mld_cb_l","mld_cb_s","numlines_s_num1","numlines_l_num1","ms_ratio_s_old","ms_ratio_l_old","ms_ener_ratio_old","blocktype_old","nogap_total","nogap_current","AudiophileGain","in_buffer_nsamples","in_buffer_0","in_buffer_1","FFT","fht","fz","fzPos","k4","fi","tri","k1","k2","k3","kx","f0","f1","f2","f3","costab","g1","g2","g3","window_s","BLKSIZE_s","rv_tbl","fft_short","x_real","chn","bufPos","fft_long","jj","init_fft","cos","PI","PsyModel","NON_LINEAR_SCALE_ENERGY","psycho_loudness_approx","loudness_power","VO_SCALE","compute_ffts","fftenergy","fftenergy_s","wsamp_l","wsamp_lPos","wsamp_s","wsamp_sPos","gr_out","fft","re","im","totalenergy","HBLKSIZE","energy_save","init_mask_add_max_values","ma_max_i1","I1LIMIT","ma_max_i2","I2LIMIT","ma_max_m","mask_add","m1","m2","kk","shortblock","table2","table3","table1","vbrpsy_mask_add","table2_","calc_interchannel_masking","sblock","msfix1","mld","rmid","rside","ns_msfix","athadjust","msfix2","athlower","thmLR","thmM","thmS","convert_partition2scalefac_s","eb","enn","thmm","bo_s_sb","b_lim","w_curr","bo_s_weight","w_next","convert_partition2scalefac_l","bo_l_sb","bo_l_weight","compute_masking_s","ebb","el","ecb","rpelev_s","rpelev2_s","block_type_set","uselongblock","blocktype_d","short_block_coupled","short_block_dispensed","short_block_forced","STOP_TYPE","START_TYPE","NS_INTERP","pecalc_s","mr","pe_s","regcoef_s","LOG10","pecalc_l","pe_l","regcoef_l","calc_energy","calc_mask_index_l","mask_idx","last_tab_entry","vbrpsy_compute_fft_l","vbrpsy_compute_fft_s","vbrpsy_compute_loudness_approximation_l","vbrpsy_attack_detection","masking_ratio","masking_MS_ratio","sub_short_factor","ns_attacks","ns_hpfsmpl","n_chn_out","n_chn_psy","firbuf","firbufPos","NSFIRLEN","fircoef_","attack_intensity","en_subshort","en_short","pf","pfPos","attackThreshold","ns_uselongblock","pfe","factor","ers_save","vbrpsy_skip_masking_s","vbrpsy_skip_masking_l","psyvbr_calc_mask_index_s","vbrpsy_compute_masking_s","float","mask_idx_s","int","dd","dd_n","avg_mask","vbrpsy_compute_masking_l","eb_l","mask_idx_l","ecb_limit","rpelev","NS_PREECHO_ATT2","ecb_limit_2","rpelev2","ecb_limit_1","vbrpsy_compute_block_type","vbrpsy_apply_block_type","vbrpsy_compute_MS_thresholds","cb_mld","ath_cb","ebM","ebS","thmL","thmR","mld_m","thmMS","s3_func_x","bark","hf_slope","tempy","tempx","LN_TO_LOG10","norm_s3_func_x","lim_a","lim_b","s3_func","freq2bark","atan","init_numline","numlines","bo","bm","bval","bval_width","bo_w","sfreq","blksize","scalepos","deltafreq","sbmax","b_frq","sample_freq_frac","ni","bark1","j2","DELBARK","i1","i2","f_tmp","bark2","init_s3_values","npart","norm","use_old_s3","s3","numberOfNoneZero","s3_x_norm","stereo_demask","ATHformula_GB","MLIMIT","percep_entropy","percep_MS_entropy","numchn","pcfact","wsamp_L","wsamp_S","eb_s","HBLKSIZE_s","eb2","ppe","ppePos","ch01","new_thmm","NS_PREECHO_ATT1","psymodel_init","useOldS3","bvl_a","snr_l_a","snr_l_b","snr_s_a","snr_s_b","snr","frame_duration","freq_inc","eql_balance","LowPassHighPass","lowerlimit","BandPass","bitrate","lPass","lowpass","lame_init_old","LAME_ID","NOT_SET","ENCDELAY","POSTDELAY","MDCTDELAY","filter_coef","optimum_samplefreq","input_samplefreq","suggested_samplefreq","SmpFrqIndex","sample_freq","gpf","FindNearestBitrate","bRate","samplerate","BitrateIndex","optimum_bandwidth","lh","freq_map","table_index","lame_init_params_ppflt","lowpass_band","highpass_band","minband","maxband","fc1","fc2","lame_init_qval","lame_init_bitstream","id3","id3tag_write_v2","InitVbrTag","update_inbuffer_size","nsamples","calcNeeded","mf_needed","lame_encode_buffer_sample","buffer_l","buffer_r","mp3out","mp3size","in_buffer","in_bufferPos","in_buffer_ptr","n_in","n_out","inOut","InOut","fill_buffer","buf_size","lame_encode_frame","enc","NumUsed","num_used","gcd","blackman","fcn","wcn","bkwn","sin","fill_buffer_resample","outbuf","outbufPos","desired_len","bpc","intratio","filter_l","BLACKSIZE","time0","joff","xvalue","n_shift","io","numUsed","qu","mpglib","_p","_qu","_id3","_mpglib","lame_init","full_bitrate_table","lower_range","lower_range_kbps","upper_range","upper_range_kbps","lame_init_params","MONO","map2MP3Frequency","linear_int","InitGainAnalysis","INIT_GAIN_ANALYSIS_ERROR","hip_decode_exit","hip_decode_init","cmp","LAME_DEFAULT_QUALITY","VBRNewIterationLoop","VBROldIterationLoop","vbrmode","ABRIterationLoop","short_block_allowed","NSATTACKTHRE","NSATTACKTHRE_S","lame_encode_flush","mp3buffer","mp3bufferPos","mp3buffer_size","mp3buffer_size_remaining","end_padding","frames_left","imp3","samples_to_encode","bunch","frame_num","lame_encode_buffer","id3tag_write_v1","GetAudio","parse","parse2","mpg2","Parse","pre","ver2","id32","pre2","MPGLib","ID3Tag","_bits","Mp3Encoder","channels","gaud","maxSamples","encodeBuffer","left","right","_sz","fromIndex","toIndex","srcPos","dest","destPos","srcEnd","vbr_default","DUAL_CHANNEL","STEPS_per_dB","MAX_dB","GAIN_NOT_ENOUGH_SAMPLES","GAIN_ANALYSIS_OK","INIT_GAIN_ANALYSIS_OK","YULE_ORDER","MAX_ORDER","MAX_SAMP_FREQ","RMS_WINDOW_TIME_NUMERATOR","RMS_WINDOW_TIME_DENOMINATOR","MAX_SAMPLES_PER_WINDOW","NUMTOCENTRIES","MAXFRAMESIZE","t1HB","t2HB","t3HB","t5HB","t6HB","t7HB","t8HB","t9HB","t10HB","t11HB","t12HB","t13HB","t15HB","t16HB","t24HB","t32HB","t33HB","t1l","t2l","t3l","t5l","t6l","t7l","t8l","t9l","t10l","t11l","t12l","t13l","t15l","t16_5l","t16l","t24l","samplerate_table","DECDELAY","MPG_MD_LR_I","MPG_MD_MS_I","Recorder","enc_mp3","stable","testmsg","True","False","This","ctx","mp3_start","mp3_encode","mp3_complete","mp3Size","mp3TrimFix","mp3TrimFixSetMeta","mp3Worker","BindDestroy","mp3_envCheck","envInfo","errMsg","takeoffEncodeChunk","canProcess","newContext","envName","openList","setOrNull","onmsg","ed","cur","wk_ctxs","action","takeoff","pcmSize","encArr","encObj","wk_lame","pcm","wk_mp3TrimFix","jsCode","rm","lamejsCode","takeoffQueue","mp3_stop","startCtx","opens","autoStop","mp3ReadMeta","mp3Buffers","parseInt_ES3","u8arr0","byteAt","u8","substr","b2","b4","00","01","2.5","frameDurationFloat","frameSize","hasPadding","buf8","charAt","pcmLength","pcmSampleRate","pcmDuration","num","arr0","arrs","arr","trimFix","removeDuration","initFn","ID","Traffic","onProcess","NOOP","_S","IsOpen","stream","Stream","tracks","getTracks","audioTracks","LIVE","BufferSize","Destroy","CLog","DestroyList","Support","AC","AudioContext","webkitAudioContext","scope","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Scope","Ctx","Connect","_m","createMediaStreamSource","createScriptProcessor","createJavaScriptNode","connect","destination","calls","_call","onaudioprocess","k0","inputBuffer","getChannelData","Disconnect","disconnect","SampleData","pcmDatas","newSampleRate","prevChunkInfo","option","frameNext","nl","il","before","after","atPoint","beforeVal","afterVal","frameNextSize","u8Pos","PowerLevel","pcmAbsSum","power","getMinutes","getSeconds","getMilliseconds","Sync","O","C","failCall","isUserNotAllow","_SO","codeFail","top","isSecureContext","Lock","lockOpen","lockClose","_O","_O_","lockFail","checkMsg","envCheck","pro","_stop","mock","pcmData","isMock","mockEnvInfo","buffers","recSize","srcSampleRate","envStart","envInLast","envInFirst","envInFix","envInFixTs","engineCtx","envResume","envIn","bufferSampleRate","powerLevel","bufferFirstIdx","buffersThis","bufferFirstIdxThis","pcmTime","d","tsInStart","tsPcm","tsInPrev","tsIn","addTime","fixOpen","disableEnvInFix","addPcm","sizeOld","addSize","chunkInfo","bufferNextIdx","bufferNextIdxThis","asyncEnd","asyncBegin","hasClear","keepEngine","autoClose","LM","TrafficImgUrl","imgUrl","idf","location","href","replace","Image","ByteArray","byteOffset","unit8Arr","rbuf","rbuf_ind","tmpbuf","tmplen","last_len","tmpbuf2","newUint8Array","player","_httpflvPlayer","HttpFlvPlayer","createTalker","downUrl","upUrl","imei","talker","_httpflvTalker","HttpFlvTalker","isHttpFlvSupported","isTalkSupported","_gplayerEvents","_gtalkerEvents","GPlayerEvent","GErrorType","GPlaybackControlStatus","GTalkerEvent","GTalkerConnectStatus","GTalkerConnectErrorType","MEDIA_SOURCE_END","TIMEUPDATE","PLAYBACK_CONTROL_EVENT","SeekStart","SeekFail","SeekSuccess","GPlayer","_gplayer","_flvG","PlaybackControl","None","Active","Passive","element","playbackPlan","playbackControl","streamEnd","needSeek","seeking","seekTime","newPlayStartTime","lastSendSeekTs","callbackTimeUpdate","callbackStatistics","callbackError","callbackMediaSourceEnd","callbackPlaybackControlEvent","checkerSeek","onTimeUpdate","_onElementTime","_checkConfig","_checkIfLive","_checkPlaybackControl","_flvG2","setMediaSourceEndCallback","_onMediaSourceEnd","setStreamTimeCallback","canvas","getContext","drawImage","toDataURL","_seekByCached","_seekByActive","_seekByPassive","bCached","getTime","errObj","gsubtype","curPlayTime","CONNECT_STATUS","ConnectSuccess","ConnectError","DeviceNotResponding","DeviceStopedResponding","DownLinkFail","UpLinkFail","WaitOpenMicrophoneTimeout","NotAllowOpenMicrophone","GTalker","_gtalker","_bytearray","_util","_recorderCore","recorder","sender","callbackConnectStatus","byteArray","timerCheck","timerSend","hasReceiveServerData","hasSendClientData","hasWaitOpenMicrophoneTimeout","hasDestory","_checkInputParam","_startPlayer","_onPlayerLoadedData","_onPlayerError","_onPlayerMediaSourceEnd","_startSender","_destroyPlayer","_destroySender","_destroyRecorder","_destroySendProc","isEmptyString","_onSenderOpen","_onSenderMsg","_onSenderClose","_onSenderError","_startRecorder","_recorderCore2","_onReceiveMicrophoneData","_timeoutCheckIfAllowOpenMicrophone","_onAllowOpenMicrophone","_onNotAllowOpenMicrophone","_sendProc","bufferDuration","arrayBuf","u8buf","audioBuf","readBytes","packer","arrImeiChar","AudioBufLen","totalLen"],"mappings":"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,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,MACA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,MACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,GAAAA,IAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,MACA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,MACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,GAAAA,IAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,MACA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,MACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,GAAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,MACA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,MACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,GAAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,MACA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,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A,mBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAA,mBAEA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,iBACA,kBAAA,mBAEA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,mBAEA,mBACA,mBACA,oBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,kBAAA,mBAEA,kBACA,iBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,kBACA,kBACA,mBACA,oBACA,oBACA,oBACA,iBACA,mBACA,kBAAA,kBAEA,kBACA,kBACA,oBACA,kBACA,kBACA,mBACA,kBACA,mBACA,oBACA,iBACA,kBACA,mBACA,oBACA,oBACA,mBACA,kBACA,kBAAA,kBAEA,kBACA,kBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,iBAAA,mBAEA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,mBACA,mBACA,kBACA,kBAAA,mBAEA,kBACA,iBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,oBACA,oBACA,mBACA,kBACA,mBAAA,mBAEA,iBACA,kBACA,oBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,oBACA,oBACA,oBACA,kBACA,mBAAA,kBAEA,WAAAlJ,EAAA+F,MAAA,GAAA,QACA,WAAA/F,EAAA+F,MAAA,GAAA,QACA,WAAA/F,EAAA+F,MAAA,GAAA,QACA,WAAA/F,EAAA+F,MAAA,GAAA,QACA,UAAA/F,EAAA+F,MAAA,GAAA,QACA,UAAA/F,EAAA+F,MAAA,GAAA,QACA,UAAA/F,EAAA+F,MAAA,GAAA,QACA,SAAA/F,EAAA+F,MAAA,GAAA,QAEA,mBAAA,mBACA,kBAAA,SAAA,QACA,mBAAA,SAAA,SACA,SAAA,SAMA0D,IAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,sBACA,wBAGA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,sBACA,sBAEA,EACA,EACA,EACA,EACA,EACA,GACA,uBACA,uBACA,wBAGA,kBACA,iBACA,kBAEA,kBACA,kBACA,iBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBAEA,iBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,IAEA,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBAEA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,iBACA,oBAGA,EACA,EACA,EACA,EACA,EACA,EACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,wBAIAkB,EAAAlB,EAAA5qB,EAAAC,YACAurB,EAAAZ,EAAA5qB,EAAAC,YACA8rB,EAAAnB,EAAA5qB,EAAAC,YACA+rB,EAAApB,EAAA5qB,EAAAC,YAaAgsB,GACA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GA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A,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EACA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAGAttC,GAAAutC,OACA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GACA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,EACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GACA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EACA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GACA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GACA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EACA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EACA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GACA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,EACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,IAAA,IAAA,EACA,GAAA,GAAA,EAAA,GAAA,GAAA,GA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A,GAAA,GAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAGA1uC,GAAAgF,MACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAA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","file":"gmedia.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.flvjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (process,global){\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof _dereq_ === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":3}],2:[function(_dereq_,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(_dereq_,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            'function(require,module,exports){' + fn + '(self); }',\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        'function(require,module,exports){' +\n            // try to call default if defined to also support babel esmodule exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);' +\n        '}',\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n\n},{}],5:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createDefaultConfig = createDefaultConfig;\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar defaultConfig = exports.defaultConfig = {\n    enableWorker: false,\n    enableStashBuffer: true,\n    stashInitialSize: undefined,\n\n    isLive: false,\n\n    lazyLoad: true,\n    lazyLoadMaxDuration: 3 * 60,\n    lazyLoadRecoverDuration: 30,\n    deferLoadAfterSourceOpen: true,\n\n    // autoCleanupSourceBuffer: default as false, leave unspecified\n    autoCleanupMaxBackwardDuration: 3 * 60,\n    autoCleanupMinBackwardDuration: 2 * 60,\n\n    statisticsInfoReportInterval: 600,\n\n    fixAudioTimestampGap: true,\n\n    accurateSeek: false,\n    seekType: 'range', // [range, param, custom]\n    seekParamStart: 'bstart',\n    seekParamEnd: 'bend',\n    rangeLoadZeroStart: false,\n    customSeekHandler: undefined,\n    reuseRedirectedURL: false,\n    // referrerPolicy: leave as unspecified\n\n    headers: undefined,\n    customLoader: undefined\n};\n\nfunction createDefaultConfig() {\n    return Object.assign({}, defaultConfig);\n}\n\n},{}],6:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _ioController = _dereq_('../io/io-controller.js');\n\nvar _ioController2 = _interopRequireDefault(_ioController);\n\nvar _config = _dereq_('../config.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Features = function () {\n    function Features() {\n        _classCallCheck(this, Features);\n    }\n\n    _createClass(Features, null, [{\n        key: 'supportMSEH264Playback',\n        value: function supportMSEH264Playback() {\n            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n        }\n    }, {\n        key: 'supportNetworkStreamIO',\n        value: function supportNetworkStreamIO() {\n            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());\n            var loaderType = ioctl.loaderType;\n            ioctl.destroy();\n            return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n        }\n    }, {\n        key: 'getNetworkLoaderTypeName',\n        value: function getNetworkLoaderTypeName() {\n            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());\n            var loaderType = ioctl.loaderType;\n            ioctl.destroy();\n            return loaderType;\n        }\n    }, {\n        key: 'supportNativeMediaPlayback',\n        value: function supportNativeMediaPlayback(mimeType) {\n            if (Features.videoElement == undefined) {\n                Features.videoElement = window.document.createElement('video');\n            }\n            var canPlay = Features.videoElement.canPlayType(mimeType);\n            return canPlay === 'probably' || canPlay == 'maybe';\n        }\n    }, {\n        key: 'getFeatureList',\n        value: function getFeatureList() {\n            var features = {\n                mseFlvPlayback: false,\n                mseLiveFlvPlayback: false,\n                networkStreamIO: false,\n                networkLoaderName: '',\n                nativeMP4H264Playback: false,\n                nativeWebmVP8Playback: false,\n                nativeWebmVP9Playback: false\n            };\n\n            features.mseFlvPlayback = Features.supportMSEH264Playback();\n            features.networkStreamIO = Features.supportNetworkStreamIO();\n            features.networkLoaderName = Features.getNetworkLoaderTypeName();\n            features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n            features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n            features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n            features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n\n            return features;\n        }\n    }]);\n\n    return Features;\n}();\n\nexports.default = Features;\n\n},{\"../config.js\":5,\"../io/io-controller.js\":23}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MediaInfo = function () {\n    function MediaInfo() {\n        _classCallCheck(this, MediaInfo);\n\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.refFrames = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    _createClass(MediaInfo, [{\n        key: \"isComplete\",\n        value: function isComplete() {\n            var audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;\n\n            var videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.refFrames != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;\n\n            // keyframesIndex may not be present\n            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;\n        }\n    }, {\n        key: \"isSeekable\",\n        value: function isSeekable() {\n            return this.hasKeyframesIndex === true;\n        }\n    }, {\n        key: \"getNearestKeyframe\",\n        value: function getNearestKeyframe(milliseconds) {\n            if (this.keyframesIndex == null) {\n                return null;\n            }\n\n            var table = this.keyframesIndex;\n            var keyframeIdx = this._search(table.times, milliseconds);\n\n            return {\n                index: keyframeIdx,\n                milliseconds: table.times[keyframeIdx],\n                fileposition: table.filepositions[keyframeIdx]\n            };\n        }\n    }, {\n        key: \"_search\",\n        value: function _search(list, value) {\n            var idx = 0;\n\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (value < list[0]) {\n                idx = 0;\n                lbound = ubound + 1; // skip search\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || value >= list[mid] && value < list[mid + 1]) {\n                    idx = mid;\n                    break;\n                } else if (list[mid] < value) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n\n            return idx;\n        }\n    }]);\n\n    return MediaInfo;\n}();\n\nexports.default = MediaInfo;\n\n},{}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n// Represents an media sample (audio / video)\nvar SampleInfo = exports.SampleInfo = function SampleInfo(dts, pts, duration, originalDts, isSync) {\n    _classCallCheck(this, SampleInfo);\n\n    this.dts = dts;\n    this.pts = pts;\n    this.duration = duration;\n    this.originalDts = originalDts;\n    this.isSyncPoint = isSync;\n    this.fileposition = null;\n};\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\n\n\nvar MediaSegmentInfo = exports.MediaSegmentInfo = function () {\n    function MediaSegmentInfo() {\n        _classCallCheck(this, MediaSegmentInfo);\n\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    _createClass(MediaSegmentInfo, [{\n        key: \"appendSyncPoint\",\n        value: function appendSyncPoint(sampleInfo) {\n            // also called Random Access Point\n            sampleInfo.isSyncPoint = true;\n            this.syncPoints.push(sampleInfo);\n        }\n    }]);\n\n    return MediaSegmentInfo;\n}();\n\n// Ordered list for recording video IDR frames, sorted by originalDts\n\n\nvar IDRSampleList = exports.IDRSampleList = function () {\n    function IDRSampleList() {\n        _classCallCheck(this, IDRSampleList);\n\n        this._list = [];\n    }\n\n    _createClass(IDRSampleList, [{\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n        }\n    }, {\n        key: \"appendArray\",\n        value: function appendArray(syncPoints) {\n            var list = this._list;\n\n            if (syncPoints.length === 0) {\n                return;\n            }\n\n            if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n                this.clear();\n            }\n\n            Array.prototype.push.apply(list, syncPoints);\n        }\n    }, {\n        key: \"getLastSyncPointBeforeDts\",\n        value: function getLastSyncPointBeforeDts(dts) {\n            if (this._list.length == 0) {\n                return null;\n            }\n\n            var list = this._list;\n            var idx = 0;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (dts < list[0].dts) {\n                idx = 0;\n                lbound = ubound + 1;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || dts >= list[mid].dts && dts < list[mid + 1].dts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].dts < dts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return this._list[idx];\n        }\n    }]);\n\n    return IDRSampleList;\n}();\n\n// Data structure for recording information of media segments in single track.\n\n\nvar MediaSegmentInfoList = exports.MediaSegmentInfoList = function () {\n    function MediaSegmentInfoList(type) {\n        _classCallCheck(this, MediaSegmentInfoList);\n\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    _createClass(MediaSegmentInfoList, [{\n        key: \"isEmpty\",\n        value: function isEmpty() {\n            return this._list.length === 0;\n        }\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n            this._lastAppendLocation = -1;\n        }\n    }, {\n        key: \"_searchNearestSegmentBefore\",\n        value: function _searchNearestSegmentBefore(originalBeginDts) {\n            var list = this._list;\n            if (list.length === 0) {\n                return -2;\n            }\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            var idx = 0;\n\n            if (originalBeginDts < list[0].originalBeginDts) {\n                idx = -1;\n                return idx;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || originalBeginDts > list[mid].lastSample.originalDts && originalBeginDts < list[mid + 1].originalBeginDts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].originalBeginDts < originalBeginDts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: \"_searchNearestSegmentAfter\",\n        value: function _searchNearestSegmentAfter(originalBeginDts) {\n            return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n        }\n    }, {\n        key: \"append\",\n        value: function append(mediaSegmentInfo) {\n            var list = this._list;\n            var msi = mediaSegmentInfo;\n            var lastAppendIdx = this._lastAppendLocation;\n            var insertIdx = 0;\n\n            if (lastAppendIdx !== -1 && lastAppendIdx < list.length && msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts && (lastAppendIdx === list.length - 1 || lastAppendIdx < list.length - 1 && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts)) {\n                insertIdx = lastAppendIdx + 1; // use cached location idx\n            } else {\n                if (list.length > 0) {\n                    insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n                }\n            }\n\n            this._lastAppendLocation = insertIdx;\n            this._list.splice(insertIdx, 0, msi);\n        }\n    }, {\n        key: \"getLastSegmentBefore\",\n        value: function getLastSegmentBefore(originalBeginDts) {\n            var idx = this._searchNearestSegmentBefore(originalBeginDts);\n            if (idx >= 0) {\n                return this._list[idx];\n            } else {\n                // -1\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSampleBefore\",\n        value: function getLastSampleBefore(originalBeginDts) {\n            var segment = this.getLastSegmentBefore(originalBeginDts);\n            if (segment != null) {\n                return segment.lastSample;\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSyncPointBefore\",\n        value: function getLastSyncPointBefore(originalBeginDts) {\n            var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n            var syncPoints = this._list[segmentIdx].syncPoints;\n            while (syncPoints.length === 0 && segmentIdx > 0) {\n                segmentIdx--;\n                syncPoints = this._list[segmentIdx].syncPoints;\n            }\n            if (syncPoints.length > 0) {\n                return syncPoints[syncPoints.length - 1];\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"type\",\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: \"length\",\n        get: function get() {\n            return this._list.length;\n        }\n    }]);\n\n    return MediaSegmentInfoList;\n}();\n\n},{}],9:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mseEvents = _dereq_('./mse-events.js');\n\nvar _mseEvents2 = _interopRequireDefault(_mseEvents);\n\nvar _mediaSegmentInfo = _dereq_('./media-segment-info.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Media Source Extensions controller\nvar MSEController = function () {\n    function MSEController(config) {\n        _classCallCheck(this, MSEController);\n\n        this.TAG = 'MSEController';\n\n        this._config = config;\n        this._emitter = new _events2.default();\n\n        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {\n            // For live stream, do auto cleanup by default\n            this._config.autoCleanupSourceBuffer = true;\n        }\n\n        this.e = {\n            onSourceOpen: this._onSourceOpen.bind(this),\n            onSourceEnded: this._onSourceEnded.bind(this),\n            onSourceClose: this._onSourceClose.bind(this),\n            onSourceBufferError: this._onSourceBufferError.bind(this),\n            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)\n        };\n\n        this._mediaSource = null;\n        this._mediaSourceObjectURL = null;\n        this._mediaElement = null;\n\n        this._isBufferFull = false;\n        this._hasPendingEos = false;\n\n        this._requireSetMediaDuration = false;\n        this._pendingMediaDuration = 0;\n\n        this._pendingSourceBufferInit = [];\n        this._mimeTypes = {\n            video: null,\n            audio: null\n        };\n        this._sourceBuffers = {\n            video: null,\n            audio: null\n        };\n        this._lastInitSegments = {\n            video: null,\n            audio: null\n        };\n        this._pendingSegments = {\n            video: [],\n            audio: []\n        };\n        this._pendingRemoveRanges = {\n            video: [],\n            audio: []\n        };\n        this._idrList = new _mediaSegmentInfo.IDRSampleList();\n    }\n\n    _createClass(MSEController, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._mediaElement || this._mediaSource) {\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            if (this._mediaSource) {\n                throw new _exception.IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');\n            }\n            var ms = this._mediaSource = new window.MediaSource();\n            ms.addEventListener('sourceopen', this.e.onSourceOpen);\n            ms.addEventListener('sourceended', this.e.onSourceEnded);\n            ms.addEventListener('sourceclose', this.e.onSourceClose);\n\n            this._mediaElement = mediaElement;\n            this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);\n            mediaElement.src = this._mediaSourceObjectURL;\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaSource) {\n                var ms = this._mediaSource;\n                for (var type in this._sourceBuffers) {\n                    // pending segments should be discard\n                    var ps = this._pendingSegments[type];\n                    ps.splice(0, ps.length);\n                    this._pendingSegments[type] = null;\n                    this._pendingRemoveRanges[type] = null;\n                    this._lastInitSegments[type] = null;\n\n                    // remove all sourcebuffers\n                    var sb = this._sourceBuffers[type];\n                    if (sb) {\n                        if (ms.readyState !== 'closed') {\n                            // ms edge can throw an error: Unexpected call to method or property access\n                            try {\n                                ms.removeSourceBuffer(sb);\n                            } catch (error) {\n                                _logger2.default.e(this.TAG, error.message);\n                            }\n                            sb.removeEventListener('error', this.e.onSourceBufferError);\n                            sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                        }\n                        this._mimeTypes[type] = null;\n                        this._sourceBuffers[type] = null;\n                    }\n                }\n                if (ms.readyState === 'open') {\n                    try {\n                        ms.endOfStream();\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                    }\n                }\n                ms.removeEventListener('sourceopen', this.e.onSourceOpen);\n                ms.removeEventListener('sourceended', this.e.onSourceEnded);\n                ms.removeEventListener('sourceclose', this.e.onSourceClose);\n                this._pendingSourceBufferInit = [];\n                this._isBufferFull = false;\n                this._idrList.clear();\n                this._mediaSource = null;\n            }\n\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n                this._mediaElement = null;\n            }\n            if (this._mediaSourceObjectURL) {\n                window.URL.revokeObjectURL(this._mediaSourceObjectURL);\n                this._mediaSourceObjectURL = null;\n            }\n        }\n    }, {\n        key: 'appendInitSegment',\n        value: function appendInitSegment(initSegment, deferred) {\n            if (!this._mediaSource || this._mediaSource.readyState !== 'open') {\n                // sourcebuffer creation requires mediaSource.readyState === 'open'\n                // so we defer the sourcebuffer creation, until sourceopen event triggered\n                this._pendingSourceBufferInit.push(initSegment);\n                // make sure that this InitSegment is in the front of pending segments queue\n                this._pendingSegments[initSegment.type].push(initSegment);\n                return;\n            }\n\n            var is = initSegment;\n            var mimeType = '' + is.container;\n            if (is.codec && is.codec.length > 0) {\n                mimeType += ';codecs=' + is.codec;\n            }\n\n            var firstInitSegment = false;\n\n            _logger2.default.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);\n            this._lastInitSegments[is.type] = is;\n\n            if (mimeType !== this._mimeTypes[is.type]) {\n                if (!this._mimeTypes[is.type]) {\n                    // empty, first chance create sourcebuffer\n                    firstInitSegment = true;\n                    try {\n                        var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);\n                        sb.addEventListener('error', this.e.onSourceBufferError);\n                        sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                        this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });\n                        return;\n                    }\n                } else {\n                    _logger2.default.v(this.TAG, 'Notice: ' + is.type + ' mimeType changed, origin: ' + this._mimeTypes[is.type] + ', target: ' + mimeType);\n                }\n                this._mimeTypes[is.type] = mimeType;\n            }\n\n            if (!deferred) {\n                // deferred means this InitSegment has been pushed to pendingSegments queue\n                this._pendingSegments[is.type].push(is);\n            }\n            if (!firstInitSegment) {\n                // append immediately only if init segment in subsequence\n                if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {\n                    this._doAppendSegments();\n                }\n            }\n            if (_browser2.default.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {\n                // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN\n                // Manually correct MediaSource.duration to make progress bar seekable, and report right duration\n                this._requireSetMediaDuration = true;\n                this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds\n                this._updateMediaSourceDuration();\n            }\n        }\n    }, {\n        key: 'appendMediaSegment',\n        value: function appendMediaSegment(mediaSegment) {\n            var ms = mediaSegment;\n            this._pendingSegments[ms.type].push(ms);\n\n            if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {\n                this._doCleanupSourceBuffer();\n            }\n\n            var sb = this._sourceBuffers[ms.type];\n            if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {\n                this._doAppendSegments();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(seconds) {\n            // remove all appended buffers\n            for (var type in this._sourceBuffers) {\n                if (!this._sourceBuffers[type]) {\n                    continue;\n                }\n\n                // abort current buffer append algorithm\n                var sb = this._sourceBuffers[type];\n                if (this._mediaSource.readyState === 'open') {\n                    try {\n                        // If range removal algorithm is running, InvalidStateError will be throwed\n                        // Ignore it.\n                        sb.abort();\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                    }\n                }\n\n                // IDRList should be clear\n                this._idrList.clear();\n\n                // pending segments should be discard\n                var ps = this._pendingSegments[type];\n                ps.splice(0, ps.length);\n\n                if (this._mediaSource.readyState === 'closed') {\n                    // Parent MediaSource object has been detached from HTMLMediaElement\n                    continue;\n                }\n\n                // record ranges to be remove from SourceBuffer\n                for (var i = 0; i < sb.buffered.length; i++) {\n                    var start = sb.buffered.start(i);\n                    var end = sb.buffered.end(i);\n                    this._pendingRemoveRanges[type].push({ start: start, end: end });\n                }\n\n                // if sb is not updating, let's remove ranges now!\n                if (!sb.updating) {\n                    this._doRemoveRanges();\n                }\n\n                // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call\n                // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.\n                // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230\n                if (_browser2.default.safari) {\n                    var lastInitSegment = this._lastInitSegments[type];\n                    if (lastInitSegment) {\n                        this._pendingSegments[type].push(lastInitSegment);\n                        if (!sb.updating) {\n                            this._doAppendSegments();\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'endOfStream',\n        value: function endOfStream() {\n            var ms = this._mediaSource;\n            var sb = this._sourceBuffers;\n            if (!ms || ms.readyState !== 'open') {\n                if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {\n                    // If MediaSource hasn't turned into open state, and there're pending segments\n                    // Mark pending endOfStream, defer call until all pending segments appended complete\n                    this._hasPendingEos = true;\n                }\n                return;\n            }\n            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n                // If any sourcebuffer is updating, defer endOfStream operation\n                // See _onSourceBufferUpdateEnd()\n                this._hasPendingEos = true;\n            } else {\n                this._hasPendingEos = false;\n                // Notify media data loading complete\n                // This is helpful for correcting total duration to match last media segment\n                // Otherwise MediaElement's ended event may not be triggered\n                ms.endOfStream();\n            }\n        }\n    }, {\n        key: 'getNearestKeyframe',\n        value: function getNearestKeyframe(dts) {\n            return this._idrList.getLastSyncPointBeforeDts(dts);\n        }\n    }, {\n        key: '_needCleanupSourceBuffer',\n        value: function _needCleanupSourceBuffer() {\n            if (!this._config.autoCleanupSourceBuffer) {\n                return false;\n            }\n\n            var currentTime = this._mediaElement.currentTime;\n\n            for (var type in this._sourceBuffers) {\n                var sb = this._sourceBuffers[type];\n                if (sb) {\n                    var buffered = sb.buffered;\n                    if (buffered.length >= 1) {\n                        if (currentTime - buffered.start(0) >= this._config.autoCleanupMaxBackwardDuration) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: '_doCleanupSourceBuffer',\n        value: function _doCleanupSourceBuffer() {\n            var currentTime = this._mediaElement.currentTime;\n\n            for (var type in this._sourceBuffers) {\n                var sb = this._sourceBuffers[type];\n                if (sb) {\n                    var buffered = sb.buffered;\n                    var doRemove = false;\n\n                    for (var i = 0; i < buffered.length; i++) {\n                        var start = buffered.start(i);\n                        var end = buffered.end(i);\n\n                        if (start <= currentTime && currentTime < end + 3) {\n                            // padding 3 seconds\n                            if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {\n                                doRemove = true;\n                                var removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;\n                                this._pendingRemoveRanges[type].push({ start: start, end: removeEnd });\n                            }\n                        } else if (end < currentTime) {\n                            doRemove = true;\n                            this._pendingRemoveRanges[type].push({ start: start, end: end });\n                        }\n                    }\n\n                    if (doRemove && !sb.updating) {\n                        this._doRemoveRanges();\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_updateMediaSourceDuration',\n        value: function _updateMediaSourceDuration() {\n            var sb = this._sourceBuffers;\n            if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {\n                return;\n            }\n            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n                return;\n            }\n\n            var current = this._mediaSource.duration;\n            var target = this._pendingMediaDuration;\n\n            if (target > 0 && (isNaN(current) || target > current)) {\n                _logger2.default.v(this.TAG, 'Update MediaSource duration from ' + current + ' to ' + target);\n                this._mediaSource.duration = target;\n            }\n\n            this._requireSetMediaDuration = false;\n            this._pendingMediaDuration = 0;\n        }\n    }, {\n        key: '_doRemoveRanges',\n        value: function _doRemoveRanges() {\n            for (var type in this._pendingRemoveRanges) {\n                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                    continue;\n                }\n                var sb = this._sourceBuffers[type];\n                var ranges = this._pendingRemoveRanges[type];\n                while (ranges.length && !sb.updating) {\n                    var range = ranges.shift();\n                    sb.remove(range.start, range.end);\n                }\n            }\n        }\n    }, {\n        key: '_doAppendSegments',\n        value: function _doAppendSegments() {\n            var pendingSegments = this._pendingSegments;\n\n            for (var type in pendingSegments) {\n                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                    continue;\n                }\n\n                if (pendingSegments[type].length > 0) {\n                    var segment = pendingSegments[type].shift();\n\n                    if (segment.timestampOffset) {\n                        // For MPEG audio stream in MSE, if unbuffered-seeking occurred\n                        // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                        var currentOffset = this._sourceBuffers[type].timestampOffset;\n                        var targetOffset = segment.timestampOffset / 1000; // in seconds\n\n                        var delta = Math.abs(currentOffset - targetOffset);\n                        if (delta > 0.1) {\n                            // If time delta > 100ms\n                            _logger2.default.v(this.TAG, 'Update MPEG audio timestampOffset from ' + currentOffset + ' to ' + targetOffset);\n                            this._sourceBuffers[type].timestampOffset = targetOffset;\n                        }\n                        delete segment.timestampOffset;\n                    }\n\n                    if (!segment.data || segment.data.byteLength === 0) {\n                        // Ignore empty buffer\n                        continue;\n                    }\n\n                    try {\n                        this._sourceBuffers[type].appendBuffer(segment.data);\n                        this._isBufferFull = false;\n                        if (type === 'video' && segment.hasOwnProperty('info')) {\n                            this._idrList.appendArray(segment.info.syncPoints);\n                        }\n                    } catch (error) {\n                        this._pendingSegments[type].unshift(segment);\n                        if (error.code === 22) {\n                            // QuotaExceededError\n                            /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full\r\n                             * Currently we can only do lazy-load to avoid SourceBuffer become scattered.\r\n                             * SourceBuffer eviction policy may be changed in future version of FireFox.\r\n                             *\r\n                             * Related issues:\r\n                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885\r\n                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023\r\n                             */\n\n                            // report buffer full, abort network IO\n                            if (!this._isBufferFull) {\n                                this._emitter.emit(_mseEvents2.default.BUFFER_FULL);\n                            }\n                            this._isBufferFull = true;\n                        } else {\n                            _logger2.default.e(this.TAG, error.message);\n                            this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_onSourceOpen',\n        value: function _onSourceOpen() {\n            _logger2.default.v(this.TAG, 'MediaSource onSourceOpen');\n            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n            // deferred sourcebuffer creation / initialization\n            if (this._pendingSourceBufferInit.length > 0) {\n                var pendings = this._pendingSourceBufferInit;\n                while (pendings.length) {\n                    var segment = pendings.shift();\n                    this.appendInitSegment(segment, true);\n                }\n            }\n            // there may be some pending media segments, append them\n            if (this._hasPendingSegments()) {\n                this._doAppendSegments();\n            }\n            this._emitter.emit(_mseEvents2.default.SOURCE_OPEN);\n        }\n    }, {\n        key: '_onSourceEnded',\n        value: function _onSourceEnded() {\n            // fired on endOfStream\n            _logger2.default.v(this.TAG, 'MediaSource onSourceEnded');\n            this._emitter.emit(_mseEvents2.default.SOURCE_END, 'MediaSource onSourceEnded');\n        }\n    }, {\n        key: '_onSourceClose',\n        value: function _onSourceClose() {\n            // fired on detaching from media element\n            _logger2.default.v(this.TAG, 'MediaSource onSourceClose');\n            if (this._mediaSource && this.e != null) {\n                this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n                this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);\n                this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);\n            }\n        }\n    }, {\n        key: '_hasPendingSegments',\n        value: function _hasPendingSegments() {\n            var ps = this._pendingSegments;\n            return ps.video.length > 0 || ps.audio.length > 0;\n        }\n    }, {\n        key: '_hasPendingRemoveRanges',\n        value: function _hasPendingRemoveRanges() {\n            var prr = this._pendingRemoveRanges;\n            return prr.video.length > 0 || prr.audio.length > 0;\n        }\n    }, {\n        key: '_onSourceBufferUpdateEnd',\n        value: function _onSourceBufferUpdateEnd() {\n            if (this._requireSetMediaDuration) {\n                this._updateMediaSourceDuration();\n            } else if (this._hasPendingRemoveRanges()) {\n                this._doRemoveRanges();\n            } else if (this._hasPendingSegments()) {\n                this._doAppendSegments();\n            } else if (this._hasPendingEos) {\n                this.endOfStream();\n            }\n            this._emitter.emit(_mseEvents2.default.UPDATE_END);\n        }\n    }, {\n        key: '_onSourceBufferError',\n        value: function _onSourceBufferError(e) {\n            _logger2.default.e(this.TAG, 'SourceBuffer Error: ' + e);\n            // this error might not always be fatal, just ignore it\n        }\n    }]);\n\n    return MSEController;\n}();\n\nexports.default = MSEController;\n\n},{\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./media-segment-info.js\":8,\"./mse-events.js\":10,\"events\":2}],10:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MSEEvents = {\n  ERROR: 'error',\n  SOURCE_OPEN: 'source_open',\n  UPDATE_END: 'update_end',\n  BUFFER_FULL: 'buffer_full',\n  SOURCE_END: 'source_end'\n};\n\nexports.default = MSEEvents;\n\n},{}],11:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nnless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loggingControl = _dereq_('../utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _transmuxingController = _dereq_('./transmuxing-controller.js');\n\nvar _transmuxingController2 = _interopRequireDefault(_transmuxingController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _transmuxingWorker = _dereq_('./transmuxing-worker.js');\n\nvar _transmuxingWorker2 = _interopRequireDefault(_transmuxingWorker);\n\nvar _mediaInfo = _dereq_('./media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Transmuxer = function () {\n    function Transmuxer(mediaDataSource, config) {\n        _classCallCheck(this, Transmuxer);\n\n        this.TAG = 'Transmuxer';\n        this._emitter = new _events2.default();\n\n        if (config.enableWorker && typeof Worker !== 'undefined') {\n            try {\n                var work = _dereq_('webworkify');\n                this._worker = work(_transmuxingWorker2.default);\n                this._workerDestroying = false;\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker.postMessage({ cmd: 'init', param: [mediaDataSource, config] });\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                _loggingControl2.default.registerListener(this.e.onLoggingConfigChanged);\n                this._worker.postMessage({ cmd: 'logging_config', param: _loggingControl2.default.getConfig() });\n            } catch (error) {\n                _logger2.default.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n                this._worker = null;\n                this._controller = new _transmuxingController2.default(mediaDataSource, config);\n            }\n        } else {\n            this._controller = new _transmuxingController2.default(mediaDataSource, config);\n        }\n\n        if (this._controller) {\n            var ctl = this._controller;\n            ctl.on(_transmuxingEvents2.default.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(_transmuxingEvents2.default.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(_transmuxingEvents2.default.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(_transmuxingEvents2.default.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(_transmuxingEvents2.default.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(_transmuxingEvents2.default.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(_transmuxingEvents2.default.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n            ctl.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n            ctl.on(_transmuxingEvents2.default.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n            ctl.on(_transmuxingEvents2.default.STREAM_TIME, this._onStreamTime.bind(this));\n        }\n    }\n\n    _createClass(Transmuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._worker) {\n                if (!this._workerDestroying) {\n                    this._workerDestroying = true;\n                    this._worker.postMessage({ cmd: 'destroy' });\n                    _loggingControl2.default.removeListener(this.e.onLoggingConfigChanged);\n                    this.e = null;\n                }\n            } else {\n                this._controller.destroy();\n                this._controller = null;\n            }\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'hasWorker',\n        value: function hasWorker() {\n            return this._worker != null;\n        }\n    }, {\n        key: 'open',\n        value: function open() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'start' });\n            } else {\n                this._controller.start();\n            }\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'stop' });\n            } else {\n                this._controller.stop();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(milliseconds) {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'seek', param: milliseconds });\n            } else {\n                this._controller.seek(milliseconds);\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'pause' });\n            } else {\n                this._controller.pause();\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'resume' });\n            } else {\n                this._controller.resume();\n            }\n        }\n    }, {\n        key: '_onInitSegment',\n        value: function _onInitSegment(type, initSegment) {\n            var _this = this;\n\n            // do async invoke\n            Promise.resolve().then(function () {\n                _this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);\n            });\n        }\n    }, {\n        key: '_onMediaSegment',\n        value: function _onMediaSegment(type, mediaSegment) {\n            var _this2 = this;\n\n            Promise.resolve().then(function () {\n                _this2._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);\n            });\n        }\n    }, {\n        key: '_onLoadingComplete',\n        value: function _onLoadingComplete() {\n            var _this3 = this;\n\n            Promise.resolve().then(function () {\n                _this3._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);\n            });\n        }\n    }, {\n        key: '_onRecoveredEarlyEof',\n        value: function _onRecoveredEarlyEof() {\n            var _this4 = this;\n\n            Promise.resolve().then(function () {\n                _this4._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);\n            });\n        }\n    }, {\n        key: '_onMediaInfo',\n        value: function _onMediaInfo(mediaInfo) {\n            var _this5 = this;\n\n            Promise.resolve().then(function () {\n                _this5._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, mediaInfo);\n            });\n        }\n    }, {\n        key: '_onMetaDataArrived',\n        value: function _onMetaDataArrived(metadata) {\n            var _this6 = this;\n\n            Promise.resolve().then(function () {\n                _this6._emitter.emit(_transmuxingEvents2.default.METADATA_ARRIVED, metadata);\n            });\n        }\n    }, {\n        key: '_onScriptDataArrived',\n        value: function _onScriptDataArrived(data) {\n            var _this7 = this;\n\n            Promise.resolve().then(function () {\n                _this7._emitter.emit(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, data);\n            });\n        }\n    }, {\n        key: '_onStatisticsInfo',\n        value: function _onStatisticsInfo(statisticsInfo) {\n            var _this8 = this;\n\n            Promise.resolve().then(function () {\n                _this8._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, statisticsInfo);\n            });\n        }\n    }, {\n        key: '_onIOError',\n        value: function _onIOError(type, info) {\n            var _this9 = this;\n\n            Promise.resolve().then(function () {\n                _this9._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);\n            });\n        }\n    }, {\n        key: '_onDemuxError',\n        value: function _onDemuxError(type, info) {\n            var _this10 = this;\n\n            Promise.resolve().then(function () {\n                _this10._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);\n            });\n        }\n    }, {\n        key: '_onRecommendSeekpoint',\n        value: function _onRecommendSeekpoint(milliseconds) {\n            var _this11 = this;\n\n            Promise.resolve().then(function () {\n                _this11._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, milliseconds);\n            });\n        }\n    }, {\n        key: '_onStreamTime',\n        value: function _onStreamTime(time) {\n            var _this12 = this;\n\n            Promise.resolve().then(function () {\n                _this12._emitter.emit(_transmuxingEvents2.default.STREAM_TIME, time);\n            });\n        }\n    }, {\n        key: '_onLoggingConfigChanged',\n        value: function _onLoggingConfigChanged(config) {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'logging_config', param: config });\n            }\n        }\n    }, {\n        key: '_onWorkerMessage',\n        value: function _onWorkerMessage(e) {\n            var message = e.data;\n            var data = message.data;\n\n            if (message.msg === 'destroyed' || this._workerDestroying) {\n                this._workerDestroying = false;\n                this._worker.terminate();\n                this._worker = null;\n                return;\n            }\n\n            switch (message.msg) {\n                case _transmuxingEvents2.default.INIT_SEGMENT:\n                case _transmuxingEvents2.default.MEDIA_SEGMENT:\n                    this._emitter.emit(message.msg, data.type, data.data);\n                    break;\n                case _transmuxingEvents2.default.LOADING_COMPLETE:\n                case _transmuxingEvents2.default.RECOVERED_EARLY_EOF:\n                    this._emitter.emit(message.msg);\n                    break;\n                case _transmuxingEvents2.default.MEDIA_INFO:\n                    Object.setPrototypeOf(data, _mediaInfo2.default.prototype);\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case _transmuxingEvents2.default.METADATA_ARRIVED:\n                case _transmuxingEvents2.default.SCRIPTDATA_ARRIVED:\n                case _transmuxingEvents2.default.STATISTICS_INFO:\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case _transmuxingEvents2.default.IO_ERROR:\n                case _transmuxingEvents2.default.DEMUX_ERROR:\n                    this._emitter.emit(message.msg, data.type, data.info);\n                    break;\n                case _transmuxingEvents2.default.RECOMMEND_SEEKPOINT:\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case 'logcat_callback':\n                    _logger2.default.emitter.emit('log', data.type, data.logcat);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }]);\n\n    return Transmuxer;\n}();\n\nexports.default = Transmuxer;\n\n},{\"../utils/logger.js\":41,\"../utils/logging-control.js\":42,\"./media-info.js\":7,\"./transmuxing-controller.js\":12,\"./transmuxing-events.js\":13,\"./transmuxing-worker.js\":14,\"events\":2,\"webworkify\":4}],12:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mediaInfo = _dereq_('./media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _flvDemuxer = _dereq_('../demux/flv-demuxer.js');\n\nvar _flvDemuxer2 = _interopRequireDefault(_flvDemuxer);\n\nvar _mp4Remuxer = _dereq_('../remux/mp4-remuxer.js');\n\nvar _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);\n\nvar _demuxErrors = _dereq_('../demux/demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nvar _ioController = _dereq_('../io/io-controller.js');\n\nvar _ioController2 = _interopRequireDefault(_ioController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _loader = _dereq_('../io/loader.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support\nvar TransmuxingController = function () {\n    function TransmuxingController(mediaDataSource, config) {\n        _classCallCheck(this, TransmuxingController);\n\n        this.TAG = 'TransmuxingController';\n        this._emitter = new _events2.default();\n\n        this._config = config;\n\n        // treat single part media as multipart media, which has only one segment\n        if (!mediaDataSource.segments) {\n            mediaDataSource.segments = [{\n                duration: mediaDataSource.duration,\n                filesize: mediaDataSource.filesize,\n                url: mediaDataSource.url\n            }];\n        }\n\n        // fill in default IO params if not exists\n        if (typeof mediaDataSource.cors !== 'boolean') {\n            mediaDataSource.cors = true;\n        }\n        if (typeof mediaDataSource.withCredentials !== 'boolean') {\n            mediaDataSource.withCredentials = false;\n        }\n\n        this._mediaDataSource = mediaDataSource;\n        this._currentSegmentIndex = 0;\n        var totalDuration = 0;\n\n        this._mediaDataSource.segments.forEach(function (segment) {\n            // timestampBase for each segment, and calculate total duration\n            segment.timestampBase = totalDuration;\n            totalDuration += segment.duration;\n            // params needed by IOController\n            segment.cors = mediaDataSource.cors;\n            segment.withCredentials = mediaDataSource.withCredentials;\n            // referrer policy control, if exist\n            if (config.referrerPolicy) {\n                segment.referrerPolicy = config.referrerPolicy;\n            }\n        });\n\n        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {\n            this._mediaDataSource.duration = totalDuration;\n        }\n\n        this._mediaInfo = null;\n        this._demuxer = null;\n        this._remuxer = null;\n        this._ioctl = null;\n\n        this._pendingSeekTime = null;\n        this._pendingResolveSeekPoint = null;\n\n        this._statisticsReporter = null;\n    }\n\n    _createClass(TransmuxingController, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._mediaInfo = null;\n            this._mediaDataSource = null;\n\n            if (this._statisticsReporter) {\n                this._disableStatisticsReporter();\n            }\n            if (this._ioctl) {\n                this._ioctl.destroy();\n                this._ioctl = null;\n            }\n            if (this._demuxer) {\n                this._demuxer.destroy();\n                this._demuxer = null;\n            }\n            if (this._remuxer) {\n                this._remuxer.destroy();\n                this._remuxer = null;\n            }\n\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            this._loadSegment(0);\n            this._enableStatisticsReporter();\n        }\n    }, {\n        key: '_loadSegment',\n        value: function _loadSegment(segmentIndex, optionalFrom) {\n            this._currentSegmentIndex = segmentIndex;\n            var dataSource = this._mediaDataSource.segments[segmentIndex];\n\n            var ioctl = this._ioctl = new _ioController2.default(dataSource, this._config, segmentIndex);\n            ioctl.onError = this._onIOException.bind(this);\n            ioctl.onSeeked = this._onIOSeeked.bind(this);\n            ioctl.onComplete = this._onIOComplete.bind(this);\n            ioctl.onRedirect = this._onIORedirect.bind(this);\n            ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);\n\n            if (optionalFrom) {\n                this._demuxer.bindDataSource(this._ioctl);\n            } else {\n                ioctl.onDataArrival = this._onInitChunkArrival.bind(this);\n            }\n\n            ioctl.open(optionalFrom);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this._internalAbort();\n            this._disableStatisticsReporter();\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._ioctl) {\n                this._ioctl.destroy();\n                this._ioctl = null;\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            // take a rest\n            if (this._ioctl && this._ioctl.isWorking()) {\n                this._ioctl.pause();\n                this._disableStatisticsReporter();\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._ioctl && this._ioctl.isPaused()) {\n                this._ioctl.resume();\n                this._enableStatisticsReporter();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(milliseconds) {\n            if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {\n                return;\n            }\n\n            var targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);\n\n            if (targetSegmentIndex === this._currentSegmentIndex) {\n                // intra-segment seeking\n                var segmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n                if (segmentInfo == undefined) {\n                    // current segment loading started, but mediainfo hasn't received yet\n                    // wait for the metadata loaded, then seek to expected position\n                    this._pendingSeekTime = milliseconds;\n                } else {\n                    var keyframe = segmentInfo.getNearestKeyframe(milliseconds);\n                    this._remuxer.seek(keyframe.milliseconds);\n                    this._ioctl.seek(keyframe.fileposition);\n                    // Will be resolved in _onRemuxerMediaSegmentArrival()\n                    this._pendingResolveSeekPoint = keyframe.milliseconds;\n                }\n            } else {\n                // cross-segment seeking\n                var targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n                if (targetSegmentInfo == undefined) {\n                    // target segment hasn't been loaded. We need metadata then seek to expected time\n                    this._pendingSeekTime = milliseconds;\n                    this._internalAbort();\n                    this._remuxer.seek();\n                    this._remuxer.insertDiscontinuity();\n                    this._loadSegment(targetSegmentIndex);\n                    // Here we wait for the metadata loaded, then seek to expected position\n                } else {\n                    // We have target segment's metadata, direct seek to target position\n                    var _keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);\n                    this._internalAbort();\n                    this._remuxer.seek(milliseconds);\n                    this._remuxer.insertDiscontinuity();\n                    this._demuxer.resetMediaInfo();\n                    this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;\n                    this._loadSegment(targetSegmentIndex, _keyframe.fileposition);\n                    this._pendingResolveSeekPoint = _keyframe.milliseconds;\n                    this._reportSegmentMediaInfo(targetSegmentIndex);\n                }\n            }\n\n            this._enableStatisticsReporter();\n        }\n    }, {\n        key: '_searchSegmentIndexContains',\n        value: function _searchSegmentIndexContains(milliseconds) {\n            var segments = this._mediaDataSource.segments;\n            var idx = segments.length - 1;\n\n            for (var i = 0; i < segments.length; i++) {\n                if (milliseconds < segments[i].timestampBase) {\n                    idx = i - 1;\n                    break;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: '_onInitChunkArrival',\n        value: function _onInitChunkArrival(data, byteStart) {\n            var _this = this;\n\n            var probeData = null;\n            var consumed = 0;\n\n            if (byteStart > 0) {\n                // IOController seeked immediately after opened, byteStart > 0 callback may received\n                this._demuxer.bindDataSource(this._ioctl);\n                this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;\n\n                consumed = this._demuxer.parseChunks(data, byteStart);\n            } else if ((probeData = _flvDemuxer2.default.probe(data)).match) {\n                // Always create new FLVDemuxer\n                this._demuxer = new _flvDemuxer2.default(probeData, this._config);\n\n                if (!this._remuxer) {\n                    this._remuxer = new _mp4Remuxer2.default(this._config);\n                }\n\n                var mds = this._mediaDataSource;\n                if (mds.duration != undefined && !isNaN(mds.duration)) {\n                    this._demuxer.overridedDuration = mds.duration;\n                }\n                if (typeof mds.hasAudio === 'boolean') {\n                    this._demuxer.overridedHasAudio = mds.hasAudio;\n                }\n                if (typeof mds.hasVideo === 'boolean') {\n                    this._demuxer.overridedHasVideo = mds.hasVideo;\n                }\n\n                this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;\n\n                this._demuxer.onError = this._onDemuxException.bind(this);\n                this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);\n                this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this);\n                this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this);\n                this._demuxer.onStreamTime = this._onStreamTime.bind(this);\n\n                this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl));\n\n                this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);\n                this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);\n\n                consumed = this._demuxer.parseChunks(data, byteStart);\n            } else {\n                probeData = null;\n                _logger2.default.e(this.TAG, 'Non-FLV, Unsupported media type!');\n                Promise.resolve().then(function () {\n                    _this._internalAbort();\n                });\n                this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, _demuxErrors2.default.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');\n\n                consumed = 0;\n            }\n\n            return consumed;\n        }\n    }, {\n        key: '_onMediaInfo',\n        value: function _onMediaInfo(mediaInfo) {\n            var _this2 = this;\n\n            if (this._mediaInfo == null) {\n                // Store first segment's mediainfo as global mediaInfo\n                this._mediaInfo = Object.assign({}, mediaInfo);\n                this._mediaInfo.keyframesIndex = null;\n                this._mediaInfo.segments = [];\n                this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;\n                Object.setPrototypeOf(this._mediaInfo, _mediaInfo2.default.prototype);\n            }\n\n            var segmentInfo = Object.assign({}, mediaInfo);\n            Object.setPrototypeOf(segmentInfo, _mediaInfo2.default.prototype);\n            this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;\n\n            // notify mediaInfo update\n            this._reportSegmentMediaInfo(this._currentSegmentIndex);\n\n            if (this._pendingSeekTime != null) {\n                Promise.resolve().then(function () {\n                    var target = _this2._pendingSeekTime;\n                    _this2._pendingSeekTime = null;\n                    _this2.seek(target);\n                });\n            }\n        }\n    }, {\n        key: '_onMetaDataArrived',\n        value: function _onMetaDataArrived(metadata) {\n            this._emitter.emit(_transmuxingEvents2.default.METADATA_ARRIVED, metadata);\n        }\n    }, {\n        key: '_onScriptDataArrived',\n        value: function _onScriptDataArrived(data) {\n            this._emitter.emit(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, data);\n        }\n    }, {\n        key: '_onStreamTime',\n        value: function _onStreamTime(time) {\n            this._emitter.emit(_transmuxingEvents2.default.STREAM_TIME, time);\n        }\n    }, {\n        key: '_onIOSeeked',\n        value: function _onIOSeeked() {\n            this._remuxer.insertDiscontinuity();\n        }\n    }, {\n        key: '_onIOComplete',\n        value: function _onIOComplete(extraData) {\n            var segmentIndex = extraData;\n            var nextSegmentIndex = segmentIndex + 1;\n\n            if (nextSegmentIndex < this._mediaDataSource.segments.length) {\n                this._internalAbort();\n                this._remuxer.flushStashedSamples();\n                this._loadSegment(nextSegmentIndex);\n            } else {\n                this._remuxer.flushStashedSamples();\n                this._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);\n                this._disableStatisticsReporter();\n            }\n        }\n    }, {\n        key: '_onIORedirect',\n        value: function _onIORedirect(redirectedURL) {\n            var segmentIndex = this._ioctl.extraData;\n            this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;\n        }\n    }, {\n        key: '_onIORecoveredEarlyEof',\n        value: function _onIORecoveredEarlyEof() {\n            this._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);\n        }\n    }, {\n        key: '_onIOException',\n        value: function _onIOException(type, info) {\n            _logger2.default.e(this.TAG, 'IOException: type = ' + type + ', code = ' + info.code + ', msg = ' + info.msg);\n            this._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);\n            this._disableStatisticsReporter();\n        }\n    }, {\n        key: '_onDemuxException',\n        value: function _onDemuxException(type, info) {\n            _logger2.default.e(this.TAG, 'DemuxException: type = ' + type + ', info = ' + info);\n            this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);\n        }\n    }, {\n        key: '_onRemuxerInitSegmentArrival',\n        value: function _onRemuxerInitSegmentArrival(type, initSegment) {\n            this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);\n        }\n    }, {\n        key: '_onRemuxerMediaSegmentArrival',\n        value: function _onRemuxerMediaSegmentArrival(type, mediaSegment) {\n            if (this._pendingSeekTime != null) {\n                // Media segments after new-segment cross-seeking should be dropped.\n                return;\n            }\n            this._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);\n\n            // Resolve pending seekPoint\n            if (this._pendingResolveSeekPoint != null && type === 'video') {\n                var syncPoints = mediaSegment.info.syncPoints;\n                var seekpoint = this._pendingResolveSeekPoint;\n                this._pendingResolveSeekPoint = null;\n\n                // Safari: Pass PTS for recommend_seekpoint\n                if (_browser2.default.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {\n                    seekpoint = syncPoints[0].pts;\n                }\n                // else: use original DTS (keyframe.milliseconds)\n\n                this._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, seekpoint);\n            }\n        }\n    }, {\n        key: '_enableStatisticsReporter',\n        value: function _enableStatisticsReporter() {\n            if (this._statisticsReporter == null) {\n                this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n            }\n        }\n    }, {\n        key: '_disableStatisticsReporter',\n        value: function _disableStatisticsReporter() {\n            if (this._statisticsReporter) {\n                self.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: '_reportSegmentMediaInfo',\n        value: function _reportSegmentMediaInfo(segmentIndex) {\n            var segmentInfo = this._mediaInfo.segments[segmentIndex];\n            var exportInfo = Object.assign({}, segmentInfo);\n\n            exportInfo.duration = this._mediaInfo.duration;\n            exportInfo.segmentCount = this._mediaInfo.segmentCount;\n            delete exportInfo.segments;\n            delete exportInfo.keyframesIndex;\n\n            this._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, exportInfo);\n        }\n    }, {\n        key: '_reportStatisticsInfo',\n        value: function _reportStatisticsInfo() {\n            var info = {};\n\n            info.url = this._ioctl.currentURL;\n            info.hasRedirect = this._ioctl.hasRedirect;\n            if (info.hasRedirect) {\n                info.redirectedURL = this._ioctl.currentRedirectedURL;\n            }\n\n            info.speed = this._ioctl.currentSpeed;\n            info.loaderType = this._ioctl.loaderType;\n            info.currentSegmentIndex = this._currentSegmentIndex;\n            info.totalSegmentCount = this._mediaDataSource.segments.length;\n\n            this._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, info);\n        }\n    }]);\n\n    return TransmuxingController;\n}();\n\nexports.default = TransmuxingController;\n\n},{\"../demux/demux-errors.js\":16,\"../demux/flv-demuxer.js\":18,\"../io/io-controller.js\":23,\"../io/loader.js\":24,\"../remux/mp4-remuxer.js\":38,\"../utils/browser.js\":39,\"../utils/logger.js\":41,\"./media-info.js\":7,\"./transmuxing-events.js\":13,\"events\":2}],13:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar TransmuxingEvents = {\n  IO_ERROR: 'io_error',\n  DEMUX_ERROR: 'demux_error',\n  INIT_SEGMENT: 'init_segment',\n  MEDIA_SEGMENT: 'media_segment',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  METADATA_ARRIVED: 'metadata_arrived',\n  SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n  STATISTICS_INFO: 'statistics_info',\n  RECOMMEND_SEEKPOINT: 'recommend_seekpoint',\n  STREAM_TIME: 'stream_time'\n};\n\nexports.default = TransmuxingEvents;\n\n},{}],14:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loggingControl = _dereq_('../utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _polyfill = _dereq_('../utils/polyfill.js');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _transmuxingController = _dereq_('./transmuxing-controller.js');\n\nvar _transmuxingController2 = _interopRequireDefault(_transmuxingController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* post message to worker:\r\n   data: {\r\n       cmd: string\r\n       param: any\r\n   }\r\n\r\n   receive message from worker:\r\n   data: {\r\n       msg: string,\r\n       data: any\r\n   }\r\n */\n\nvar TransmuxingWorker = function TransmuxingWorker(self) {\n\n    var TAG = 'TransmuxingWorker';\n    var controller = null;\n    var logcatListener = onLogcatCallback.bind(this);\n\n    _polyfill2.default.install();\n\n    self.addEventListener('message', function (e) {\n        switch (e.data.cmd) {\n            case 'init':\n                controller = new _transmuxingController2.default(e.data.param[0], e.data.param[1]);\n                controller.on(_transmuxingEvents2.default.IO_ERROR, onIOError.bind(this));\n                controller.on(_transmuxingEvents2.default.DEMUX_ERROR, onDemuxError.bind(this));\n                controller.on(_transmuxingEvents2.default.INIT_SEGMENT, onInitSegment.bind(this));\n                controller.on(_transmuxingEvents2.default.MEDIA_SEGMENT, onMediaSegment.bind(this));\n                controller.on(_transmuxingEvents2.default.LOADING_COMPLETE, onLoadingComplete.bind(this));\n                controller.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n                controller.on(_transmuxingEvents2.default.MEDIA_INFO, onMediaInfo.bind(this));\n                controller.on(_transmuxingEvents2.default.METADATA_ARRIVED, onMetaDataArrived.bind(this));\n                controller.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\n                controller.on(_transmuxingEvents2.default.STATISTICS_INFO, onStatisticsInfo.bind(this));\n                controller.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n                break;\n            case 'destroy':\n                if (controller) {\n                    controller.destroy();\n                    controller = null;\n                }\n                self.postMessage({ msg: 'destroyed' });\n                break;\n            case 'start':\n                controller.start();\n                break;\n            case 'stop':\n                controller.stop();\n                break;\n            case 'seek':\n                controller.seek(e.data.param);\n                break;\n            case 'pause':\n                controller.pause();\n                break;\n            case 'resume':\n                controller.resume();\n                break;\n            case 'logging_config':\n                {\n                    var config = e.data.param;\n                    _loggingControl2.default.applyConfig(config);\n\n                    if (config.enableCallback === true) {\n                        _loggingControl2.default.addLogListener(logcatListener);\n                    } else {\n                        _loggingControl2.default.removeLogListener(logcatListener);\n                    }\n                    break;\n                }\n        }\n    });\n\n    function onInitSegment(type, initSegment) {\n        var obj = {\n            msg: _transmuxingEvents2.default.INIT_SEGMENT,\n            data: {\n                type: type,\n                data: initSegment\n            }\n        };\n        self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer\n    }\n\n    function onMediaSegment(type, mediaSegment) {\n        var obj = {\n            msg: _transmuxingEvents2.default.MEDIA_SEGMENT,\n            data: {\n                type: type,\n                data: mediaSegment\n            }\n        };\n        self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer\n    }\n\n    function onLoadingComplete() {\n        var obj = {\n            msg: _transmuxingEvents2.default.LOADING_COMPLETE\n        };\n        self.postMessage(obj);\n    }\n\n    function onRecoveredEarlyEof() {\n        var obj = {\n            msg: _transmuxingEvents2.default.RECOVERED_EARLY_EOF\n        };\n        self.postMessage(obj);\n    }\n\n    function onMediaInfo(mediaInfo) {\n        var obj = {\n            msg: _transmuxingEvents2.default.MEDIA_INFO,\n            data: mediaInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onMetaDataArrived(metadata) {\n        var obj = {\n            msg: _transmuxingEvents2.default.METADATA_ARRIVED,\n            data: metadata\n        };\n        self.postMessage(obj);\n    }\n\n    function onScriptDataArrived(data) {\n        var obj = {\n            msg: _transmuxingEvents2.default.SCRIPTDATA_ARRIVED,\n            data: data\n        };\n        self.postMessage(obj);\n    }\n\n    function onStatisticsInfo(statInfo) {\n        var obj = {\n            msg: _transmuxingEvents2.default.STATISTICS_INFO,\n            data: statInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onIOError(type, info) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.IO_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onDemuxError(type, info) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.DEMUX_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onRecommendSeekpoint(milliseconds) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.RECOMMEND_SEEKPOINT,\n            data: milliseconds\n        });\n    }\n\n    function onLogcatCallback(type, str) {\n        self.postMessage({\n            msg: 'logcat_callback',\n            data: {\n                type: type,\n                logcat: str\n            }\n        });\n    }\n}; /*\r\n    * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n    *\r\n    * @author zheng qian <xqq@xqq.im>\r\n    *\r\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License.\r\n    * You may obtain a copy of the License at\r\n    *\r\n    *     http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software\r\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    * See the License for the specific language governing permissions and\r\n    * limitations under the License.\r\n    */\n\nexports.default = TransmuxingWorker;\n\n},{\"../utils/logger.js\":41,\"../utils/logging-control.js\":42,\"../utils/polyfill.js\":43,\"./transmuxing-controller.js\":12,\"./transmuxing-events.js\":13}],15:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _utf8Conv = _dereq_('../utils/utf8-conv.js');\n\nvar _utf8Conv2 = _interopRequireDefault(_utf8Conv);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar le = function () {\n    var buf = new ArrayBuffer(2);\n    new DataView(buf).setInt16(0, 256, true); // little-endian write\n    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n}();\n\nvar AMF = function () {\n    function AMF() {\n        _classCallCheck(this, AMF);\n    }\n\n    _createClass(AMF, null, [{\n        key: 'parseScriptData',\n        value: function parseScriptData(arrayBuffer, dataOffset, dataSize) {\n            var data = {};\n\n            try {\n                var name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);\n                var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n\n                data[name.data] = value.data;\n            } catch (e) {\n                _logger2.default.e('AMF', e.toString());\n            }\n\n            return data;\n        }\n    }, {\n        key: 'parseObject',\n        value: function parseObject(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 3) {\n                throw new _exception.IllegalStateException('Data not enough when parse ScriptDataObject');\n            }\n            var name = AMF.parseString(arrayBuffer, dataOffset, dataSize);\n            var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n            var isObjectEnd = value.objectEnd;\n\n            return {\n                data: {\n                    name: name.data,\n                    value: value.data\n                },\n                size: name.size + value.size,\n                objectEnd: isObjectEnd\n            };\n        }\n    }, {\n        key: 'parseVariable',\n        value: function parseVariable(arrayBuffer, dataOffset, dataSize) {\n            return AMF.parseObject(arrayBuffer, dataOffset, dataSize);\n        }\n    }, {\n        key: 'parseString',\n        value: function parseString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 2) {\n                throw new _exception.IllegalStateException('Data not enough when parse String');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var length = v.getUint16(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 2 + length\n            };\n        }\n    }, {\n        key: 'parseLongString',\n        value: function parseLongString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 4) {\n                throw new _exception.IllegalStateException('Data not enough when parse LongString');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var length = v.getUint32(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 4 + length\n            };\n        }\n    }, {\n        key: 'parseDate',\n        value: function parseDate(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 10) {\n                throw new _exception.IllegalStateException('Data size invalid when parse Date');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var timestamp = v.getFloat64(0, !le);\n            var localTimeOffset = v.getInt16(8, !le);\n            timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n            return {\n                data: new Date(timestamp),\n                size: 8 + 2\n            };\n        }\n    }, {\n        key: 'parseValue',\n        value: function parseValue(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 1) {\n                throw new _exception.IllegalStateException('Data not enough when parse Value');\n            }\n\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var offset = 1;\n            var type = v.getUint8(0);\n            var value = void 0;\n            var objectEnd = false;\n\n            try {\n                switch (type) {\n                    case 0:\n                        // Number(Double) type\n                        value = v.getFloat64(1, !le);\n                        offset += 8;\n                        break;\n                    case 1:\n                        {\n                            // Boolean type\n                            var b = v.getUint8(1);\n                            value = b ? true : false;\n                            offset += 1;\n                            break;\n                        }\n                    case 2:\n                        {\n                            // String type\n                            var amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = amfstr.data;\n                            offset += amfstr.size;\n                            break;\n                        }\n                    case 3:\n                        {\n                            // Object(s) type\n                            value = {};\n                            var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                                terminal = 3;\n                            }\n                            while (offset < dataSize - 4) {\n                                // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                                var amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\n                                if (amfobj.objectEnd) break;\n                                value[amfobj.data.name] = amfobj.data.value;\n                                offset += amfobj.size;\n                            }\n                            if (offset <= dataSize - 3) {\n                                var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                                if (marker === 9) {\n                                    offset += 3;\n                                }\n                            }\n                            break;\n                        }\n                    case 8:\n                        {\n                            // ECMA array type (Mixed array)\n                            value = {};\n                            offset += 4; // ECMAArrayLength(UI32)\n                            var _terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                                _terminal = 3;\n                            }\n                            while (offset < dataSize - 8) {\n                                // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                                var amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - _terminal);\n                                if (amfvar.objectEnd) break;\n                                value[amfvar.data.name] = amfvar.data.value;\n                                offset += amfvar.size;\n                            }\n                            if (offset <= dataSize - 3) {\n                                var _marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                                if (_marker === 9) {\n                                    offset += 3;\n                                }\n                            }\n                            break;\n                        }\n                    case 9:\n                        // ScriptDataObjectEnd\n                        value = undefined;\n                        offset = 1;\n                        objectEnd = true;\n                        break;\n                    case 10:\n                        {\n                            // Strict array type\n                            // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                            value = [];\n                            var strictArrayLength = v.getUint32(1, !le);\n                            offset += 4;\n                            for (var i = 0; i < strictArrayLength; i++) {\n                                var val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);\n                                value.push(val.data);\n                                offset += val.size;\n                            }\n                            break;\n                        }\n                    case 11:\n                        {\n                            // Date type\n                            var date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = date.data;\n                            offset += date.size;\n                            break;\n                        }\n                    case 12:\n                        {\n                            // Long string type\n                            var amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = amfLongStr.data;\n                            offset += amfLongStr.size;\n                            break;\n                        }\n                    default:\n                        // ignore and skip\n                        offset = dataSize;\n                        _logger2.default.w('AMF', 'Unsupported AMF value type ' + type);\n                }\n            } catch (e) {\n                _logger2.default.e('AMF', e.toString());\n            }\n\n            return {\n                data: value,\n                size: offset,\n                objectEnd: objectEnd\n            };\n        }\n    }]);\n\n    return AMF;\n}();\n\nexports.default = AMF;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"../utils/utf8-conv.js\":44}],16:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DemuxErrors = {\n  OK: 'OK',\n  FORMAT_ERROR: 'FormatError',\n  FORMAT_UNSUPPORTED: 'FormatUnsupported',\n  CODEC_UNSUPPORTED: 'CodecUnsupported'\n};\n\nexports.default = DemuxErrors;\n\n},{}],17:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Exponential-Golomb buffer decoder\nvar ExpGolomb = function () {\n    function ExpGolomb(uint8array) {\n        _classCallCheck(this, ExpGolomb);\n\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    _createClass(ExpGolomb, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._buffer = null;\n        }\n    }, {\n        key: '_fillCurrentWord',\n        value: function _fillCurrentWord() {\n            var buffer_bytes_left = this._total_bytes - this._buffer_index;\n            if (buffer_bytes_left <= 0) throw new _exception.IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n            var bytes_read = Math.min(4, buffer_bytes_left);\n            var word = new Uint8Array(4);\n            word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n            this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n            this._buffer_index += bytes_read;\n            this._current_word_bits_left = bytes_read * 8;\n        }\n    }, {\n        key: 'readBits',\n        value: function readBits(bits) {\n            if (bits > 32) throw new _exception.InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n            if (bits <= this._current_word_bits_left) {\n                var _result = this._current_word >>> 32 - bits;\n                this._current_word <<= bits;\n                this._current_word_bits_left -= bits;\n                return _result;\n            }\n\n            var result = this._current_word_bits_left ? this._current_word : 0;\n            result = result >>> 32 - this._current_word_bits_left;\n            var bits_need_left = bits - this._current_word_bits_left;\n\n            this._fillCurrentWord();\n            var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n            var result2 = this._current_word >>> 32 - bits_read_next;\n            this._current_word <<= bits_read_next;\n            this._current_word_bits_left -= bits_read_next;\n\n            result = result << bits_read_next | result2;\n            return result;\n        }\n    }, {\n        key: 'readBool',\n        value: function readBool() {\n            return this.readBits(1) === 1;\n        }\n    }, {\n        key: 'readByte',\n        value: function readByte() {\n            return this.readBits(8);\n        }\n    }, {\n        key: '_skipLeadingZero',\n        value: function _skipLeadingZero() {\n            var zero_count = void 0;\n            for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n                if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n                    this._current_word <<= zero_count;\n                    this._current_word_bits_left -= zero_count;\n                    return zero_count;\n                }\n            }\n            this._fillCurrentWord();\n            return zero_count + this._skipLeadingZero();\n        }\n    }, {\n        key: 'readUEG',\n        value: function readUEG() {\n            // unsigned exponential golomb\n            var leading_zeros = this._skipLeadingZero();\n            return this.readBits(leading_zeros + 1) - 1;\n        }\n    }, {\n        key: 'readSEG',\n        value: function readSEG() {\n            // signed exponential golomb\n            var value = this.readUEG();\n            if (value & 0x01) {\n                return value + 1 >>> 1;\n            } else {\n                return -1 * (value >>> 1);\n            }\n        }\n    }]);\n\n    return ExpGolomb;\n}();\n\nexports.default = ExpGolomb;\n\n},{\"../utils/exception.js\":40}],18:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _amfParser = _dereq_('./amf-parser.js');\n\nvar _amfParser2 = _interopRequireDefault(_amfParser);\n\nvar _spsParser = _dereq_('./sps-parser.js');\n\nvar _spsParser2 = _interopRequireDefault(_spsParser);\n\nvar _demuxErrors = _dereq_('./demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nvar _mediaInfo = _dereq_('../core/media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Swap16(src) {\n    return src >>> 8 & 0xFF | (src & 0xFF) << 8;\n}\n\nfunction Swap32(src) {\n    return (src & 0xFF000000) >>> 24 | (src & 0x00FF0000) >>> 8 | (src & 0x0000FF00) << 8 | (src & 0x000000FF) << 24;\n}\n\nfunction ReadBig32(array, index) {\n    return array[index] << 24 | array[index + 1] << 16 | array[index + 2] << 8 | array[index + 3];\n}\n\nvar FLVDemuxer = function () {\n    function FLVDemuxer(probeData, config) {\n        _classCallCheck(this, FLVDemuxer);\n\n        this.TAG = 'FLVDemuxer';\n\n        this._config = config;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n        this._onStreamTime = null;\n\n        this._dataOffset = probeData.dataOffset;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = probeData.hasAudioTrack;\n        this._hasVideo = probeData.hasVideoTrack;\n\n        this._hasAudioFlagOverrided = false;\n        this._hasVideoFlagOverrided = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new _mediaInfo2.default();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n        this._mpegSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];\n\n        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];\n        this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1];\n        this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1];\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0 };\n\n        this._littleEndian = function () {\n            var buf = new ArrayBuffer(2);\n            new DataView(buf).setInt16(0, 256, true); // little-endian write\n            return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n        }();\n    }\n\n    _createClass(FLVDemuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._mediaInfo = null;\n            this._metadata = null;\n            this._audioMetadata = null;\n            this._videoMetadata = null;\n            this._videoTrack = null;\n            this._audioTrack = null;\n\n            this._onError = null;\n            this._onMediaInfo = null;\n            this._onMetaDataArrived = null;\n            this._onScriptDataArrived = null;\n            this._onTrackMetadata = null;\n            this._onDataAvailable = null;\n            this._onStreamTime = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(loader) {\n            loader.onDataArrival = this.parseChunks.bind(this);\n            return this;\n        }\n\n        // prototype: function(type: string, metadata: any): void\n\n    }, {\n        key: 'resetMediaInfo',\n        value: function resetMediaInfo() {\n            this._mediaInfo = new _mediaInfo2.default();\n        }\n    }, {\n        key: '_isInitialMetadataDispatched',\n        value: function _isInitialMetadataDispatched() {\n            if (this._hasAudio && this._hasVideo) {\n                // both audio & video\n                return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n            }\n            if (this._hasAudio && !this._hasVideo) {\n                // audio only\n                return this._audioInitialMetadataDispatched;\n            }\n            if (!this._hasAudio && this._hasVideo) {\n                // video only\n                return this._videoInitialMetadataDispatched;\n            }\n            return false;\n        }\n\n        // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;\n\n    }, {\n        key: 'parseChunks',\n        value: function parseChunks(chunk, byteStart) {\n            if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {\n                throw new _exception.IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');\n            }\n\n            var offset = 0;\n            var le = this._littleEndian;\n\n            if (byteStart === 0) {\n                // buffer with FLV header\n                if (chunk.byteLength > 13) {\n                    var probeData = FLVDemuxer.probe(chunk);\n                    offset = probeData.dataOffset;\n                } else {\n                    return 0;\n                }\n            }\n\n            if (this._firstParse) {\n                // handle PreviousTagSize0 before Tag1\n                this._firstParse = false;\n                if (byteStart + offset !== this._dataOffset) {\n                    _logger2.default.w(this.TAG, 'First time parsing but chunk byteStart invalid!');\n                }\n\n                var v = new DataView(chunk, offset);\n                var prevTagSize0 = v.getUint32(0, !le);\n                if (prevTagSize0 !== 0) {\n                    _logger2.default.w(this.TAG, 'PrevTagSize0 !== 0 !!!');\n                }\n                offset += 4;\n            }\n\n            while (offset < chunk.byteLength) {\n                this._dispatch = true;\n\n                var _v = new DataView(chunk, offset);\n\n                if (offset + 11 + 4 > chunk.byteLength) {\n                    // data not enough for parsing an flv tag\n                    break;\n                }\n\n                var tagType = _v.getUint8(0);\n                var dataSize = _v.getUint32(0, !le) & 0x00FFFFFF;\n\n                if (offset + 11 + dataSize + 4 > chunk.byteLength) {\n                    // data not enough for parsing actual data body\n                    break;\n                }\n\n                if (tagType !== 8 && tagType !== 9 && tagType !== 18) {\n                    _logger2.default.w(this.TAG, 'Unsupported tag type ' + tagType + ', skipped');\n                    // consume the whole tag (skip it)\n                    offset += 11 + dataSize + 4;\n                    continue;\n                }\n\n                var ts2 = _v.getUint8(4);\n                var ts1 = _v.getUint8(5);\n                var ts0 = _v.getUint8(6);\n                var ts3 = _v.getUint8(7);\n\n                var timestamp = ts0 | ts1 << 8 | ts2 << 16 | ts3 << 24;\n\n                var streamId = _v.getUint32(7, !le) & 0x00FFFFFF;\n                if (streamId !== 0) {\n                    _logger2.default.w(this.TAG, 'Meet tag which has StreamID != 0!');\n                }\n\n                var dataOffset = offset + 11;\n\n                switch (tagType) {\n                    case 8:\n                        // Audio\n                        this._parseAudioData(chunk, dataOffset, dataSize, timestamp);\n                        break;\n                    case 9:\n                        // Video\n                        if (this._onStreamTime != null) {\n                            this._onStreamTime(timestamp);\n                        }\n                        this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);\n                        break;\n                    case 18:\n                        // ScriptDataObject\n                        this._parseScriptData(chunk, dataOffset, dataSize);\n                        break;\n                }\n\n                var prevTagSize = _v.getUint32(11 + dataSize, !le);\n                if (prevTagSize !== 11 + dataSize) {\n                    _logger2.default.w(this.TAG, 'Invalid PrevTagSize ' + prevTagSize);\n                }\n\n                offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize\n            }\n\n            // dispatch parsed frames to consumer (typically, the remuxer)\n            if (this._isInitialMetadataDispatched()) {\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            }\n\n            return offset; // consumed bytes, just equals latest offset index\n        }\n    }, {\n        key: '_parseScriptData',\n        value: function _parseScriptData(arrayBuffer, dataOffset, dataSize) {\n            var scriptData = _amfParser2.default.parseScriptData(arrayBuffer, dataOffset, dataSize);\n\n            if (scriptData.hasOwnProperty('onMetaData')) {\n                if (scriptData.onMetaData == null || _typeof(scriptData.onMetaData) !== 'object') {\n                    _logger2.default.w(this.TAG, 'Invalid onMetaData structure!');\n                    return;\n                }\n                if (this._metadata) {\n                    _logger2.default.w(this.TAG, 'Found another onMetaData tag!');\n                }\n                this._metadata = scriptData;\n                var onMetaData = this._metadata.onMetaData;\n\n                if (this._onMetaDataArrived) {\n                    this._onMetaDataArrived(Object.assign({}, onMetaData));\n                }\n\n                if (typeof onMetaData.hasAudio === 'boolean') {\n                    // hasAudio\n                    if (this._hasAudioFlagOverrided === false) {\n                        this._hasAudio = onMetaData.hasAudio;\n                        this._mediaInfo.hasAudio = this._hasAudio;\n                    }\n                }\n                if (typeof onMetaData.hasVideo === 'boolean') {\n                    // hasVideo\n                    if (this._hasVideoFlagOverrided === false) {\n                        this._hasVideo = onMetaData.hasVideo;\n                        this._mediaInfo.hasVideo = this._hasVideo;\n                    }\n                }\n                if (typeof onMetaData.audiodatarate === 'number') {\n                    // audiodatarate\n                    this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n                }\n                if (typeof onMetaData.videodatarate === 'number') {\n                    // videodatarate\n                    this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n                }\n                if (typeof onMetaData.width === 'number') {\n                    // width\n                    this._mediaInfo.width = onMetaData.width;\n                }\n                if (typeof onMetaData.height === 'number') {\n                    // height\n                    this._mediaInfo.height = onMetaData.height;\n                }\n                if (typeof onMetaData.duration === 'number') {\n                    // duration\n                    if (!this._durationOverrided) {\n                        var duration = Math.floor(onMetaData.duration * this._timescale);\n                        this._duration = duration;\n                        this._mediaInfo.duration = duration;\n                    }\n                } else {\n                    this._mediaInfo.duration = 0;\n                }\n                if (typeof onMetaData.framerate === 'number') {\n                    // framerate\n                    var fps_num = Math.floor(onMetaData.framerate * 1000);\n                    if (fps_num > 0) {\n                        var fps = fps_num / 1000;\n                        this._referenceFrameRate.fixed = true;\n                        this._referenceFrameRate.fps = fps;\n                        this._referenceFrameRate.fps_num = fps_num;\n                        this._referenceFrameRate.fps_den = 1000;\n                        this._mediaInfo.fps = fps;\n                    }\n                }\n                if (_typeof(onMetaData.keyframes) === 'object') {\n                    // keyframes\n                    this._mediaInfo.hasKeyframesIndex = true;\n                    var keyframes = onMetaData.keyframes;\n                    this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                    onMetaData.keyframes = null; // keyframes has been extracted, remove it\n                } else {\n                    this._mediaInfo.hasKeyframesIndex = false;\n                }\n                this._dispatch = false;\n                this._mediaInfo.metadata = onMetaData;\n                _logger2.default.v(this.TAG, 'Parsed onMetaData');\n                if (this._mediaInfo.isComplete()) {\n                    this._onMediaInfo(this._mediaInfo);\n                }\n            }\n\n            if (Object.keys(scriptData).length > 0) {\n                if (this._onScriptDataArrived) {\n                    this._onScriptDataArrived(Object.assign({}, scriptData));\n                }\n            }\n        }\n    }, {\n        key: '_parseKeyframesIndex',\n        value: function _parseKeyframesIndex(keyframes) {\n            var times = [];\n            var filepositions = [];\n\n            // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n            for (var i = 1; i < keyframes.times.length; i++) {\n                var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n                times.push(time);\n                filepositions.push(keyframes.filepositions[i]);\n            }\n\n            return {\n                times: times,\n                filepositions: filepositions\n            };\n        }\n    }, {\n        key: '_parseAudioData',\n        value: function _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n                return;\n            }\n\n            if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {\n                // If hasAudio: false indicated explicitly in MediaDataSource,\n                // Ignore all the audio packets\n                return;\n            }\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var soundSpec = v.getUint8(0);\n\n            var soundFormat = soundSpec >>> 4;\n            if (soundFormat !== 2 && soundFormat !== 10) {\n                // MP3 or AAC\n                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                return;\n            }\n\n            var soundRate = 0;\n            var soundRateIndex = (soundSpec & 12) >>> 2;\n            if (soundRateIndex >= 0 && soundRateIndex <= 4) {\n                soundRate = this._flvSoundRateTable[soundRateIndex];\n            } else {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                return;\n            }\n\n            var soundSize = (soundSpec & 2) >>> 1; // unused\n            var soundType = soundSpec & 1;\n\n            var meta = this._audioMetadata;\n            var track = this._audioTrack;\n\n            if (!meta) {\n                if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {\n                    this._hasAudio = true;\n                    this._mediaInfo.hasAudio = true;\n                }\n\n                // initial metadata\n                meta = this._audioMetadata = {};\n                meta.type = 'audio';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n                meta.audioSampleRate = soundRate;\n                meta.channelCount = soundType === 0 ? 1 : 2;\n            }\n\n            if (soundFormat === 10) {\n                // AAC\n                var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n                if (aacData == undefined) {\n                    return;\n                }\n\n                if (aacData.packetType === 0) {\n                    // AAC sequence header (AudioSpecificConfig)\n                    if (meta.config) {\n                        _logger2.default.w(this.TAG, 'Found another AudioSpecificConfig!');\n                    }\n                    var misc = aacData.data;\n                    meta.audioSampleRate = misc.samplingRate;\n                    meta.channelCount = misc.channelCount;\n                    meta.codec = misc.codec;\n                    meta.originalCodec = misc.originalCodec;\n                    meta.config = misc.config;\n                    // The decode result of an aac sample is 1024 PCM samples\n                    meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;\n                    _logger2.default.v(this.TAG, 'Parsed AudioSpecificConfig');\n\n                    if (this._isInitialMetadataDispatched()) {\n                        // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                        if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                            this._onDataAvailable(this._audioTrack, this._videoTrack);\n                        }\n                    } else {\n                        this._audioInitialMetadataDispatched = true;\n                    }\n                    // then notify new metadata\n                    this._dispatch = false;\n                    this._onTrackMetadata('audio', meta);\n\n                    var mi = this._mediaInfo;\n                    mi.audioCodec = meta.originalCodec;\n                    mi.audioSampleRate = meta.audioSampleRate;\n                    mi.audioChannelCount = meta.channelCount;\n                    if (mi.hasVideo) {\n                        if (mi.videoCodec != null) {\n                            mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                        }\n                    } else {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                    }\n                    if (mi.isComplete()) {\n                        this._onMediaInfo(mi);\n                    }\n                } else if (aacData.packetType === 1) {\n                    // AAC raw frame data\n                    var dts = this._timestampBase + tagTimestamp;\n                    var aacSample = { unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts };\n                    track.samples.push(aacSample);\n                    track.length += aacData.data.length;\n                } else {\n                    _logger2.default.e(this.TAG, 'Flv: Unsupported AAC data type ' + aacData.packetType);\n                }\n            } else if (soundFormat === 2) {\n                // MP3\n                if (!meta.codec) {\n                    // We need metadata for mp3 audio track, extract info from frame header\n                    var _misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);\n                    if (_misc == undefined) {\n                        return;\n                    }\n                    meta.audioSampleRate = _misc.samplingRate;\n                    meta.channelCount = _misc.channelCount;\n                    meta.codec = _misc.codec;\n                    meta.originalCodec = _misc.originalCodec;\n                    // The decode result of an mp3 sample is 1152 PCM samples\n                    meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;\n                    _logger2.default.v(this.TAG, 'Parsed MPEG Audio Frame Header');\n\n                    this._audioInitialMetadataDispatched = true;\n                    this._onTrackMetadata('audio', meta);\n\n                    var _mi = this._mediaInfo;\n                    _mi.audioCodec = meta.codec;\n                    _mi.audioSampleRate = meta.audioSampleRate;\n                    _mi.audioChannelCount = meta.channelCount;\n                    _mi.audioDataRate = _misc.bitRate;\n                    if (_mi.hasVideo) {\n                        if (_mi.videoCodec != null) {\n                            _mi.mimeType = 'video/x-flv; codecs=\"' + _mi.videoCodec + ',' + _mi.audioCodec + '\"';\n                        }\n                    } else {\n                        _mi.mimeType = 'video/x-flv; codecs=\"' + _mi.audioCodec + '\"';\n                    }\n                    if (_mi.isComplete()) {\n                        this._onMediaInfo(_mi);\n                    }\n                }\n\n                // This packet is always a valid audio packet, extract it\n                var data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);\n                if (data == undefined) {\n                    return;\n                }\n                var _dts = this._timestampBase + tagTimestamp;\n                var mp3Sample = { unit: data, length: data.byteLength, dts: _dts, pts: _dts };\n                track.samples.push(mp3Sample);\n                track.length += data.length;\n            }\n        }\n    }, {\n        key: '_parseAACAudioData',\n        value: function _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n                return;\n            }\n\n            var result = {};\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n            result.packetType = array[0];\n\n            if (array[0] === 0) {\n                result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n            } else {\n                result.data = array.subarray(1);\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseAACAudioSpecificConfig',\n        value: function _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var config = null;\n\n            /* Audio Object Type:\r\n               0: Null\r\n               1: AAC Main\r\n               2: AAC LC\r\n               3: AAC SSR (Scalable Sample Rate)\r\n               4: AAC LTP (Long Term Prediction)\r\n               5: HE-AAC / SBR (Spectral Band Replication)\r\n               6: AAC Scalable\r\n            */\n\n            var audioObjectType = 0;\n            var originalAudioObjectType = 0;\n            var audioExtensionObjectType = null;\n            var samplingIndex = 0;\n            var extensionSamplingIndex = null;\n\n            // 5 bits\n            audioObjectType = originalAudioObjectType = array[0] >>> 3;\n            // 4 bits\n            samplingIndex = (array[0] & 0x07) << 1 | array[1] >>> 7;\n            if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n                return;\n            }\n\n            var samplingFrequence = this._mpegSamplingRates[samplingIndex];\n\n            // 4 bits\n            var channelConfig = (array[1] & 0x78) >>> 3;\n            if (channelConfig < 0 || channelConfig >= 8) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n                return;\n            }\n\n            if (audioObjectType === 5) {\n                // HE-AAC?\n                // 4 bits\n                extensionSamplingIndex = (array[1] & 0x07) << 1 | array[2] >>> 7;\n                // 5 bits\n                audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n            }\n\n            // workarounds for various browsers\n            var userAgent = self.navigator.userAgent.toLowerCase();\n\n            if (userAgent.indexOf('firefox') !== -1) {\n                // firefox: use SBR (HE-AAC) if freq less than 24kHz\n                if (samplingIndex >= 6) {\n                    audioObjectType = 5;\n                    config = new Array(4);\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else {\n                    // use LC-AAC\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            } else if (userAgent.indexOf('android') !== -1) {\n                // android: always use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            } else {\n                // for other browsers, e.g. chrome...\n                // Always use HE-AAC to make it easier to switch aac codec profile\n                audioObjectType = 5;\n                extensionSamplingIndex = samplingIndex;\n                config = new Array(4);\n\n                if (samplingIndex >= 6) {\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else if (channelConfig === 1) {\n                    // Mono channel\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            }\n\n            config[0] = audioObjectType << 3;\n            config[0] |= (samplingIndex & 0x0F) >>> 1;\n            config[1] = (samplingIndex & 0x0F) << 7;\n            config[1] |= (channelConfig & 0x0F) << 3;\n            if (audioObjectType === 5) {\n                config[1] |= (extensionSamplingIndex & 0x0F) >>> 1;\n                config[2] = (extensionSamplingIndex & 0x01) << 7;\n                // extended audio object type: force to 2 (LC-AAC)\n                config[2] |= 2 << 2;\n                config[3] = 0;\n            }\n\n            return {\n                config: config,\n                samplingRate: samplingFrequence,\n                channelCount: channelConfig,\n                codec: 'mp4a.40.' + audioObjectType,\n                originalCodec: 'mp4a.40.' + originalAudioObjectType\n            };\n        }\n    }, {\n        key: '_parseMP3AudioData',\n        value: function _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {\n            if (dataSize < 4) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var result = null;\n\n            if (requestHeader) {\n                if (array[0] !== 0xFF) {\n                    return;\n                }\n                var ver = array[1] >>> 3 & 0x03;\n                var layer = (array[1] & 0x06) >> 1;\n\n                var bitrate_index = (array[2] & 0xF0) >>> 4;\n                var sampling_freq_index = (array[2] & 0x0C) >>> 2;\n\n                var channel_mode = array[3] >>> 6 & 0x03;\n                var channel_count = channel_mode !== 3 ? 2 : 1;\n\n                var sample_rate = 0;\n                var bit_rate = 0;\n                var object_type = 34; // Layer-3, listed in MPEG-4 Audio Object Types\n\n                var codec = 'mp3';\n\n                switch (ver) {\n                    case 0:\n                        // MPEG 2.5\n                        sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];\n                        break;\n                    case 2:\n                        // MPEG 2\n                        sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];\n                        break;\n                    case 3:\n                        // MPEG 1\n                        sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];\n                        break;\n                }\n\n                switch (layer) {\n                    case 1:\n                        // Layer 3\n                        object_type = 34;\n                        if (bitrate_index < this._mpegAudioL3BitRateTable.length) {\n                            bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];\n                        }\n                        break;\n                    case 2:\n                        // Layer 2\n                        object_type = 33;\n                        if (bitrate_index < this._mpegAudioL2BitRateTable.length) {\n                            bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];\n                        }\n                        break;\n                    case 3:\n                        // Layer 1\n                        object_type = 32;\n                        if (bitrate_index < this._mpegAudioL1BitRateTable.length) {\n                            bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];\n                        }\n                        break;\n                }\n\n                result = {\n                    bitRate: bit_rate,\n                    samplingRate: sample_rate,\n                    channelCount: channel_count,\n                    codec: codec,\n                    originalCodec: codec\n                };\n            } else {\n                result = array;\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseVideoData',\n        value: function _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n                return;\n            }\n\n            if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {\n                // If hasVideo: false indicated explicitly in MediaDataSource,\n                // Ignore all the video packets\n                return;\n            }\n\n            var spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];\n\n            var frameType = (spec & 240) >>> 4;\n            var codecId = spec & 15;\n\n            if (codecId !== 7) {\n                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported codec in video frame: ' + codecId);\n                return;\n            }\n\n            this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n        }\n    }, {\n        key: '_parseAVCVideoPacket',\n        value: function _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n            if (dataSize < 4) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var packetType = v.getUint8(0);\n            var cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;\n            var cts = cts_unsigned << 8 >> 8; // convert to 24-bit signed int\n\n            if (packetType === 0) {\n                // AVCDecoderConfigurationRecord\n                this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n            } else if (packetType === 1) {\n                // One or more Nalus\n                this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n            } else if (packetType === 2) {\n                // empty, AVC end of sequence\n            } else {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid video packet type ' + packetType);\n                return;\n            }\n        }\n    }, {\n        key: '_parseAVCDecoderConfigurationRecord',\n        value: function _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 7) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n                return;\n            }\n\n            var meta = this._videoMetadata;\n            var track = this._videoTrack;\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            if (!meta) {\n                if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {\n                    this._hasVideo = true;\n                    this._mediaInfo.hasVideo = true;\n                }\n\n                meta = this._videoMetadata = {};\n                meta.type = 'video';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n            } else {\n                if (typeof meta.avcc !== 'undefined') {\n                    _logger2.default.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n                }\n            }\n\n            var version = v.getUint8(0); // configurationVersion\n            var avcProfile = v.getUint8(1); // avcProfileIndication\n            var profileCompatibility = v.getUint8(2); // profile_compatibility\n            var avcLevel = v.getUint8(3); // AVCLevelIndication\n\n            if (version !== 1 || avcProfile === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n                return;\n            }\n\n            this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n            if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n                // holy shit!!!\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Strange NaluLengthSizeMinusOne: ' + (this._naluLengthSize - 1));\n                return;\n            }\n\n            var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n            if (spsCount === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\n                return;\n            } else if (spsCount > 1) {\n                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ' + spsCount);\n            }\n\n            var offset = 6;\n\n            for (var i = 0; i < spsCount; i++) {\n                var len = v.getUint16(offset, !le); // sequenceParameterSetLength\n                offset += 2;\n\n                if (len === 0) {\n                    continue;\n                }\n\n                // Notice: Nalu without startcode header (00 00 00 01)\n                var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n                offset += len;\n\n                var config = _spsParser2.default.parseSPS(sps);\n                if (i !== 0) {\n                    // ignore other sps's config\n                    continue;\n                }\n\n                meta.codecWidth = config.codec_size.width;\n                meta.codecHeight = config.codec_size.height;\n                meta.presentWidth = config.present_size.width;\n                meta.presentHeight = config.present_size.height;\n\n                meta.profile = config.profile_string;\n                meta.level = config.level_string;\n                meta.bitDepth = config.bit_depth;\n                meta.chromaFormat = config.chroma_format;\n                meta.sarRatio = config.sar_ratio;\n                meta.frameRate = config.frame_rate;\n\n                if (config.frame_rate.fixed === false || config.frame_rate.fps_num === 0 || config.frame_rate.fps_den === 0) {\n                    meta.frameRate = this._referenceFrameRate;\n                }\n\n                var fps_den = meta.frameRate.fps_den;\n                var fps_num = meta.frameRate.fps_num;\n                meta.refSampleDuration = meta.timescale * (fps_den / fps_num);\n\n                var codecArray = sps.subarray(1, 4);\n                var codecString = 'avc1.';\n                for (var j = 0; j < 3; j++) {\n                    var h = codecArray[j].toString(16);\n                    if (h.length < 2) {\n                        h = '0' + h;\n                    }\n                    codecString += h;\n                }\n                meta.codec = codecString;\n\n                var mi = this._mediaInfo;\n                mi.width = meta.codecWidth;\n                mi.height = meta.codecHeight;\n                mi.fps = meta.frameRate.fps;\n                mi.profile = meta.profile;\n                mi.level = meta.level;\n                mi.refFrames = config.ref_frames;\n                mi.chromaFormat = config.chroma_format_string;\n                mi.sarNum = meta.sarRatio.width;\n                mi.sarDen = meta.sarRatio.height;\n                mi.videoCodec = codecString;\n\n                if (mi.hasAudio) {\n                    if (mi.audioCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            }\n\n            var ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n            if (ppsCount === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\n                return;\n            } else if (ppsCount > 1) {\n                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ' + ppsCount);\n            }\n\n            offset++;\n\n            for (var _i = 0; _i < ppsCount; _i++) {\n                var _len = v.getUint16(offset, !le); // pictureParameterSetLength\n                offset += 2;\n\n                if (_len === 0) {\n                    continue;\n                }\n\n                // pps is useless for extracting video information\n                offset += _len;\n            }\n\n            meta.avcc = new Uint8Array(dataSize);\n            meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n            _logger2.default.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n            if (this._isInitialMetadataDispatched()) {\n                // flush parsed frames\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._videoInitialMetadataDispatched = true;\n            }\n            // notify new metadata\n            this._dispatch = false;\n            this._onTrackMetadata('video', meta);\n        }\n    }, {\n        key: '_parseAVCVideoData',\n        value: function _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var units = [],\n                length = 0;\n\n            var offset = 0;\n            var lengthSize = this._naluLengthSize;\n            var dts = this._timestampBase + tagTimestamp;\n            var keyframe = frameType === 1; // from FLV Frame Type constants\n\n            while (offset < dataSize) {\n                if (offset + 4 >= dataSize) {\n                    _logger2.default.w(this.TAG, 'Malformed Nalu near timestamp ' + dts + ', offset = ' + offset + ', dataSize = ' + dataSize);\n                    break; // data not enough for next Nalu\n                }\n                // Nalu with length-header (AVC1)\n                var naluSize = v.getUint32(offset, !le); // Big-Endian read\n                if (lengthSize === 3) {\n                    naluSize >>>= 8;\n                }\n                if (naluSize > dataSize - lengthSize) {\n                    _logger2.default.w(this.TAG, 'Malformed Nalus near timestamp ' + dts + ', NaluSize > DataSize!');\n                    return;\n                }\n\n                var unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n                if (unitType === 5) {\n                    // IDR\n                    keyframe = true;\n                }\n\n                var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n                var unit = { type: unitType, data: data };\n                units.push(unit);\n                length += data.byteLength;\n\n                offset += lengthSize + naluSize;\n            }\n\n            if (units.length) {\n                var track = this._videoTrack;\n                var avcSample = {\n                    units: units,\n                    length: length,\n                    isKeyframe: keyframe,\n                    dts: dts,\n                    cts: cts,\n                    pts: dts + cts\n                };\n                if (keyframe) {\n                    avcSample.fileposition = tagPosition;\n                }\n                track.samples.push(avcSample);\n                track.length += length;\n            }\n        }\n    }, {\n        key: 'onTrackMetadata',\n        get: function get() {\n            return this._onTrackMetadata;\n        },\n        set: function set(callback) {\n            this._onTrackMetadata = callback;\n        }\n\n        // prototype: function(mediaInfo: MediaInfo): void\n\n    }, {\n        key: 'onMediaInfo',\n        get: function get() {\n            return this._onMediaInfo;\n        },\n        set: function set(callback) {\n            this._onMediaInfo = callback;\n        }\n    }, {\n        key: 'onMetaDataArrived',\n        get: function get() {\n            return this._onMetaDataArrived;\n        },\n        set: function set(callback) {\n            this._onMetaDataArrived = callback;\n        }\n    }, {\n        key: 'onScriptDataArrived',\n        get: function get() {\n            return this._onScriptDataArrived;\n        },\n        set: function set(callback) {\n            this._onScriptDataArrived = callback;\n        }\n\n        // prototype: function(type: number, info: string): void\n\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n\n        // prototype: function(videoTrack: any, audioTrack: any): void\n\n    }, {\n        key: 'onDataAvailable',\n        get: function get() {\n            return this._onDataAvailable;\n        },\n        set: function set(callback) {\n            this._onDataAvailable = callback;\n        }\n    }, {\n        key: 'onStreamTime',\n        get: function get() {\n            return this._onStreamTime;\n        },\n        set: function set(callback) {\n            this._onStreamTime = callback;\n        }\n\n        // timestamp base for output samples, must be in milliseconds\n\n    }, {\n        key: 'timestampBase',\n        get: function get() {\n            return this._timestampBase;\n        },\n        set: function set(base) {\n            this._timestampBase = base;\n        }\n    }, {\n        key: 'overridedDuration',\n        get: function get() {\n            return this._duration;\n        }\n\n        // Force-override media duration. Must be in milliseconds, int32\n        ,\n        set: function set(duration) {\n            this._durationOverrided = true;\n            this._duration = duration;\n            this._mediaInfo.duration = duration;\n        }\n\n        // Force-override audio track present flag, boolean\n\n    }, {\n        key: 'overridedHasAudio',\n        set: function set(hasAudio) {\n            this._hasAudioFlagOverrided = true;\n            this._hasAudio = hasAudio;\n            this._mediaInfo.hasAudio = hasAudio;\n        }\n\n        // Force-override video track present flag, boolean\n\n    }, {\n        key: 'overridedHasVideo',\n        set: function set(hasVideo) {\n            this._hasVideoFlagOverrided = true;\n            this._hasVideo = hasVideo;\n            this._mediaInfo.hasVideo = hasVideo;\n        }\n    }], [{\n        key: 'probe',\n        value: function probe(buffer) {\n            var data = new Uint8Array(buffer);\n            var mismatch = { match: false };\n\n            if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n                return mismatch;\n            }\n\n            var hasAudio = (data[4] & 4) >>> 2 !== 0;\n            var hasVideo = (data[4] & 1) !== 0;\n\n            var offset = ReadBig32(data, 5);\n\n            if (offset < 9) {\n                return mismatch;\n            }\n\n            return {\n                match: true,\n                consumed: offset,\n                dataOffset: offset,\n                hasAudioTrack: hasAudio,\n                hasVideoTrack: hasVideo\n            };\n        }\n    }]);\n\n    return FLVDemuxer;\n}();\n\nexports.default = FLVDemuxer;\n\n},{\"../core/media-info.js\":7,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./amf-parser.js\":15,\"./demux-errors.js\":16,\"./sps-parser.js\":19}],19:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _expGolomb = _dereq_('./exp-golomb.js');\n\nvar _expGolomb2 = _interopRequireDefault(_expGolomb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SPSParser = function () {\n    function SPSParser() {\n        _classCallCheck(this, SPSParser);\n    }\n\n    _createClass(SPSParser, null, [{\n        key: '_ebsp2rbsp',\n        value: function _ebsp2rbsp(uint8array) {\n            var src = uint8array;\n            var src_length = src.byteLength;\n            var dst = new Uint8Array(src_length);\n            var dst_idx = 0;\n\n            for (var i = 0; i < src_length; i++) {\n                if (i >= 2) {\n                    // Unescape: Skip 0x03 after 00 00\n                    if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                        continue;\n                    }\n                }\n                dst[dst_idx] = src[i];\n                dst_idx++;\n            }\n\n            return new Uint8Array(dst.buffer, 0, dst_idx);\n        }\n    }, {\n        key: 'parseSPS',\n        value: function parseSPS(uint8array) {\n            var rbsp = SPSParser._ebsp2rbsp(uint8array);\n            var gb = new _expGolomb2.default(rbsp);\n\n            gb.readByte();\n            var profile_idc = gb.readByte(); // profile_idc\n            gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n            var level_idc = gb.readByte(); // level_idc\n            gb.readUEG(); // seq_parameter_set_id\n\n            var profile_string = SPSParser.getProfileString(profile_idc);\n            var level_string = SPSParser.getLevelString(level_idc);\n            var chroma_format_idc = 1;\n            var chroma_format = 420;\n            var chroma_format_table = [0, 420, 422, 444];\n            var bit_depth = 8;\n\n            if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {\n\n                chroma_format_idc = gb.readUEG();\n                if (chroma_format_idc === 3) {\n                    gb.readBits(1); // separate_colour_plane_flag\n                }\n                if (chroma_format_idc <= 3) {\n                    chroma_format = chroma_format_table[chroma_format_idc];\n                }\n\n                bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8\n                gb.readUEG(); // bit_depth_chroma_minus8\n                gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n                if (gb.readBool()) {\n                    // seq_scaling_matrix_present_flag\n                    var scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;\n                    for (var i = 0; i < scaling_list_count; i++) {\n                        if (gb.readBool()) {\n                            // seq_scaling_list_present_flag\n                            if (i < 6) {\n                                SPSParser._skipScalingList(gb, 16);\n                            } else {\n                                SPSParser._skipScalingList(gb, 64);\n                            }\n                        }\n                    }\n                }\n            }\n            gb.readUEG(); // log2_max_frame_num_minus4\n            var pic_order_cnt_type = gb.readUEG();\n            if (pic_order_cnt_type === 0) {\n                gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n            } else if (pic_order_cnt_type === 1) {\n                gb.readBits(1); // delta_pic_order_always_zero_flag\n                gb.readSEG(); // offset_for_non_ref_pic\n                gb.readSEG(); // offset_for_top_to_bottom_field\n                var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n                for (var _i = 0; _i < num_ref_frames_in_pic_order_cnt_cycle; _i++) {\n                    gb.readSEG(); // offset_for_ref_frame\n                }\n            }\n            var ref_frames = gb.readUEG(); // max_num_ref_frames\n            gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n            var pic_width_in_mbs_minus1 = gb.readUEG();\n            var pic_height_in_map_units_minus1 = gb.readUEG();\n\n            var frame_mbs_only_flag = gb.readBits(1);\n            if (frame_mbs_only_flag === 0) {\n                gb.readBits(1); // mb_adaptive_frame_field_flag\n            }\n            gb.readBits(1); // direct_8x8_inference_flag\n\n            var frame_crop_left_offset = 0;\n            var frame_crop_right_offset = 0;\n            var frame_crop_top_offset = 0;\n            var frame_crop_bottom_offset = 0;\n\n            var frame_cropping_flag = gb.readBool();\n            if (frame_cropping_flag) {\n                frame_crop_left_offset = gb.readUEG();\n                frame_crop_right_offset = gb.readUEG();\n                frame_crop_top_offset = gb.readUEG();\n                frame_crop_bottom_offset = gb.readUEG();\n            }\n\n            var sar_width = 1,\n                sar_height = 1;\n            var fps = 0,\n                fps_fixed = true,\n                fps_num = 0,\n                fps_den = 0;\n\n            var vui_parameters_present_flag = gb.readBool();\n            if (vui_parameters_present_flag) {\n                if (gb.readBool()) {\n                    // aspect_ratio_info_present_flag\n                    var aspect_ratio_idc = gb.readByte();\n                    var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                    var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                    if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                        sar_width = sar_w_table[aspect_ratio_idc - 1];\n                        sar_height = sar_h_table[aspect_ratio_idc - 1];\n                    } else if (aspect_ratio_idc === 255) {\n                        sar_width = gb.readByte() << 8 | gb.readByte();\n                        sar_height = gb.readByte() << 8 | gb.readByte();\n                    }\n                }\n\n                if (gb.readBool()) {\n                    // overscan_info_present_flag\n                    gb.readBool(); // overscan_appropriate_flag\n                }\n                if (gb.readBool()) {\n                    // video_signal_type_present_flag\n                    gb.readBits(4); // video_format & video_full_range_flag\n                    if (gb.readBool()) {\n                        // colour_description_present_flag\n                        gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                    }\n                }\n                if (gb.readBool()) {\n                    // chroma_loc_info_present_flag\n                    gb.readUEG(); // chroma_sample_loc_type_top_field\n                    gb.readUEG(); // chroma_sample_loc_type_bottom_field\n                }\n                if (gb.readBool()) {\n                    // timing_info_present_flag\n                    var num_units_in_tick = gb.readBits(32);\n                    var time_scale = gb.readBits(32);\n                    fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n                    fps_num = time_scale;\n                    fps_den = num_units_in_tick * 2;\n                    fps = fps_num / fps_den;\n                }\n            }\n\n            var sarScale = 1;\n            if (sar_width !== 1 || sar_height !== 1) {\n                sarScale = sar_width / sar_height;\n            }\n\n            var crop_unit_x = 0,\n                crop_unit_y = 0;\n            if (chroma_format_idc === 0) {\n                crop_unit_x = 1;\n                crop_unit_y = 2 - frame_mbs_only_flag;\n            } else {\n                var sub_wc = chroma_format_idc === 3 ? 1 : 2;\n                var sub_hc = chroma_format_idc === 1 ? 2 : 1;\n                crop_unit_x = sub_wc;\n                crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n            }\n\n            var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n            var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n            codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n            codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n            var present_width = Math.ceil(codec_width * sarScale);\n\n            gb.destroy();\n            gb = null;\n\n            return {\n                profile_string: profile_string, // baseline, high, high10, ...\n                level_string: level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n                bit_depth: bit_depth, // 8bit, 10bit, ...\n                ref_frames: ref_frames,\n                chroma_format: chroma_format, // 4:2:0, 4:2:2, ...\n                chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n                frame_rate: {\n                    fixed: fps_fixed,\n                    fps: fps,\n                    fps_den: fps_den,\n                    fps_num: fps_num\n                },\n\n                sar_ratio: {\n                    width: sar_width,\n                    height: sar_height\n                },\n\n                codec_size: {\n                    width: codec_width,\n                    height: codec_height\n                },\n\n                present_size: {\n                    width: present_width,\n                    height: codec_height\n                }\n            };\n        }\n    }, {\n        key: '_skipScalingList',\n        value: function _skipScalingList(gb, count) {\n            var last_scale = 8,\n                next_scale = 8;\n            var delta_scale = 0;\n            for (var i = 0; i < count; i++) {\n                if (next_scale !== 0) {\n                    delta_scale = gb.readSEG();\n                    next_scale = (last_scale + delta_scale + 256) % 256;\n                }\n                last_scale = next_scale === 0 ? last_scale : next_scale;\n            }\n        }\n    }, {\n        key: 'getProfileString',\n        value: function getProfileString(profile_idc) {\n            switch (profile_idc) {\n                case 66:\n                    return 'Baseline';\n                case 77:\n                    return 'Main';\n                case 88:\n                    return 'Extended';\n                case 100:\n                    return 'High';\n                case 110:\n                    return 'High10';\n                case 122:\n                    return 'High422';\n                case 244:\n                    return 'High444';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }, {\n        key: 'getLevelString',\n        value: function getLevelString(level_idc) {\n            return (level_idc / 10).toFixed(1);\n        }\n    }, {\n        key: 'getChromaFormatString',\n        value: function getChromaFormatString(chroma) {\n            switch (chroma) {\n                case 420:\n                    return '4:2:0';\n                case 422:\n                    return '4:2:2';\n                case 444:\n                    return '4:4:4';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }]);\n\n    return SPSParser;\n}();\n\nexports.default = SPSParser;\n\n},{\"./exp-golomb.js\":17}],20:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\r\n                                                                                                                                                                                                                                                                               * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               *     http://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                               * limitations under the License.\r\n                                                                                                                                                                                                                                                                               */\n\nvar _polyfill = _dereq_('./utils/polyfill.js');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _features = _dereq_('./core/features.js');\n\nvar _features2 = _interopRequireDefault(_features);\n\nvar _loader = _dereq_('./io/loader.js');\n\nvar _flvPlayer = _dereq_('./player/flv-player.js');\n\nvar _flvPlayer2 = _interopRequireDefault(_flvPlayer);\n\nvar _nativePlayer = _dereq_('./player/native-player.js');\n\nvar _nativePlayer2 = _interopRequireDefault(_nativePlayer);\n\nvar _playerEvents = _dereq_('./player/player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _playerErrors = _dereq_('./player/player-errors.js');\n\nvar _loggingControl = _dereq_('./utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _exception = _dereq_('./utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// here are all the interfaces\n\n// install polyfills\n_polyfill2.default.install();\n\n// factory method\nfunction createPlayer(mediaDataSource, optionalConfig) {\n    var mds = mediaDataSource;\n    if (mds == null || (typeof mds === 'undefined' ? 'undefined' : _typeof(mds)) !== 'object') {\n        throw new _exception.InvalidArgumentException('MediaDataSource must be an javascript object!');\n    }\n\n    if (!mds.hasOwnProperty('type')) {\n        throw new _exception.InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\n    }\n\n    switch (mds.type) {\n        case 'flv':\n            return new _flvPlayer2.default(mds, optionalConfig);\n        default:\n            return new _nativePlayer2.default(mds, optionalConfig);\n    }\n}\n\n// feature detection\nfunction isSupported() {\n    return _features2.default.supportMSEH264Playback();\n}\n\nfunction getFeatureList() {\n    return _features2.default.getFeatureList();\n}\n\n// interfaces\nvar flvjs = {};\n\nflvjs.createPlayer = createPlayer;\nflvjs.isSupported = isSupported;\nflvjs.getFeatureList = getFeatureList;\n\nflvjs.BaseLoader = _loader.BaseLoader;\nflvjs.LoaderStatus = _loader.LoaderStatus;\nflvjs.LoaderErrors = _loader.LoaderErrors;\n\nflvjs.Events = _playerEvents2.default;\nflvjs.ErrorTypes = _playerErrors.ErrorTypes;\nflvjs.ErrorDetails = _playerErrors.ErrorDetails;\n\nflvjs.FlvPlayer = _flvPlayer2.default;\nflvjs.NativePlayer = _nativePlayer2.default;\nflvjs.LoggingControl = _loggingControl2.default;\n\nObject.defineProperty(flvjs, 'version', {\n    enumerable: true,\n    get: function get() {\n        // replaced by browserify-versionify transform\n        return '1.6.1';\n    }\n});\n\nexports.default = flvjs;\n\n},{\"./core/features.js\":6,\"./io/loader.js\":24,\"./player/flv-player.js\":32,\"./player/native-player.js\":33,\"./player/player-errors.js\":34,\"./player/player-events.js\":35,\"./utils/exception.js\":40,\"./utils/logging-control.js\":42,\"./utils/polyfill.js\":43}],21:[function(_dereq_,module,exports){\n'use strict';\n\n// entry/index file\n\n// make it compatible with browserify's umd wrapper\nmodule.exports = _dereq_('./flv.js').default;\n\n},{\"./flv.js\":20}],22:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *     http://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/* fetch + stream IO loader. Currently working on chrome 43+.\r\n * fetch provides a better alternative http API to XMLHttpRequest\r\n *\r\n * fetch spec   https://fetch.spec.whatwg.org/\r\n * stream spec  https://streams.spec.whatwg.org/\r\n */\nvar FetchStreamLoader = function (_BaseLoader) {\n    _inherits(FetchStreamLoader, _BaseLoader);\n\n    _createClass(FetchStreamLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\n                // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\n                // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\n                var isWorkWellEdge = _browser2.default.msedge && _browser2.default.version.minor >= 15048;\n                var browserNotBlacklisted = _browser2.default.msedge ? isWorkWellEdge : true;\n                return self.fetch && self.ReadableStream && browserNotBlacklisted;\n            } catch (e) {\n                return false;\n            }\n        }\n    }]);\n\n    function FetchStreamLoader(seekHandler, config) {\n        _classCallCheck(this, FetchStreamLoader);\n\n        var _this = _possibleConstructorReturn(this, (FetchStreamLoader.__proto__ || Object.getPrototypeOf(FetchStreamLoader)).call(this, 'fetch-stream-loader'));\n\n        _this.TAG = 'FetchStreamLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._requestAbort = false;\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(FetchStreamLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            _get(FetchStreamLoader.prototype.__proto__ || Object.getPrototypeOf(FetchStreamLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            var _this2 = this;\n\n            this._dataSource = dataSource;\n            this._range = range;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n            var headers = new self.Headers();\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var configHeaders = seekConfig.headers;\n                for (var key in configHeaders) {\n                    if (configHeaders.hasOwnProperty(key)) {\n                        headers.append(key, configHeaders[key]);\n                    }\n                }\n            }\n\n            var params = {\n                method: 'GET',\n                headers: headers,\n                mode: 'cors',\n                cache: 'default',\n                // The default policy of Fetch API in the whatwg standard\n                // Safari incorrectly indicates 'no-referrer' as default policy, fuck it\n                referrerPolicy: 'no-referrer-when-downgrade'\n            };\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                for (var _key in this._config.headers) {\n                    headers.append(_key, this._config.headers[_key]);\n                }\n            }\n\n            // cors is enabled by default\n            if (dataSource.cors === false) {\n                // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\n                params.mode = 'same-origin';\n            }\n\n            // withCredentials is disabled by default\n            if (dataSource.withCredentials) {\n                params.credentials = 'include';\n            }\n\n            // referrerPolicy from config\n            if (dataSource.referrerPolicy) {\n                params.referrerPolicy = dataSource.referrerPolicy;\n            }\n\n            // add abort controller, by wmlgl 2019-5-10 12:21:27\n            if (self.AbortController) {\n                this._abortController = new self.AbortController();\n                params.signal = this._abortController.signal;\n            }\n\n            this._status = _loader.LoaderStatus.kConnecting;\n            self.fetch(seekConfig.url, params).then(function (res) {\n                if (_this2._requestAbort) {\n                    _this2._status = _loader.LoaderStatus.kIdle;\n                    res.body.cancel();\n                    return;\n                }\n                if (res.ok && res.status >= 200 && res.status <= 299) {\n                    if (res.url !== seekConfig.url) {\n                        if (_this2._onURLRedirect) {\n                            var redirectedURL = _this2._seekHandler.removeURLParameters(res.url);\n                            _this2._onURLRedirect(redirectedURL);\n                        }\n                    }\n\n                    var lengthHeader = res.headers.get('Content-Length');\n                    if (lengthHeader != null) {\n                        _this2._contentLength = parseInt(lengthHeader);\n                        if (_this2._contentLength !== 0) {\n                            if (_this2._onContentLengthKnown) {\n                                _this2._onContentLengthKnown(_this2._contentLength);\n                            }\n                        }\n                    }\n\n                    return _this2._pump.call(_this2, res.body.getReader());\n                } else {\n                    _this2._status = _loader.LoaderStatus.kError;\n                    if (_this2._onError) {\n                        _this2._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: res.status, msg: res.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\n                    }\n                }\n            }).catch(function (e) {\n                if (_this2._abortController && _this2._abortController.signal.aborted) {\n                    return;\n                }\n\n                _this2._status = _loader.LoaderStatus.kError;\n                if (_this2._onError) {\n                    _this2._onError(_loader.LoaderErrors.EXCEPTION, { code: -1, msg: e.message });\n                } else {\n                    throw e;\n                }\n            });\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n\n            if (this._status !== _loader.LoaderStatus.kBuffering || !_browser2.default.chrome) {\n                // Chrome may throw Exception-like things here, avoid using if is buffering\n                if (this._abortController) {\n                    try {\n                        this._abortController.abort();\n                    } catch (e) {\n                        return;\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_pump',\n        value: function _pump(reader) {\n            var _this3 = this;\n\n            // ReadableStreamReader\n            return reader.read().then(function (result) {\n                if (result.done) {\n                    // First check received length\n                    if (_this3._contentLength !== null && _this3._receivedLength < _this3._contentLength) {\n                        // Report Early-EOF\n                        _this3._status = _loader.LoaderStatus.kError;\n                        var type = _loader.LoaderErrors.EARLY_EOF;\n                        var info = { code: -1, msg: 'Fetch stream meet Early-EOF' };\n                        if (_this3._onError) {\n                            _this3._onError(type, info);\n                        } else {\n                            throw new _exception.RuntimeException(info.msg);\n                        }\n                    } else {\n                        // OK. Download complete\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        if (_this3._onComplete) {\n                            _this3._onComplete(_this3._range.from, _this3._range.from + _this3._receivedLength - 1);\n                        }\n                    }\n                } else {\n                    if (_this3._abortController && _this3._abortController.signal.aborted) {\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        return;\n                    } else if (_this3._requestAbort === true) {\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        return reader.cancel();\n                    }\n\n                    _this3._status = _loader.LoaderStatus.kBuffering;\n\n                    var chunk = result.value.buffer;\n                    var byteStart = _this3._range.from + _this3._receivedLength;\n                    _this3._receivedLength += chunk.byteLength;\n\n                    if (_this3._onDataArrival) {\n                        _this3._onDataArrival(chunk, byteStart, _this3._receivedLength);\n                    }\n\n                    _this3._pump(reader);\n                }\n            }).catch(function (e) {\n                if (_this3._abortController && _this3._abortController.signal.aborted) {\n                    _this3._status = _loader.LoaderStatus.kComplete;\n                    return;\n                }\n\n                if (e.code === 11 && _browser2.default.msedge) {\n                    // InvalidStateError on Microsoft Edge\n                    // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\n                    // Ignore the unknown exception.\n                    // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\n                    return;\n                }\n\n                _this3._status = _loader.LoaderStatus.kError;\n                var type = 0;\n                var info = null;\n\n                if ((e.code === 19 || e.message === 'network error') && ( // NETWORK_ERR\n                _this3._contentLength === null || _this3._contentLength !== null && _this3._receivedLength < _this3._contentLength)) {\n                    type = _loader.LoaderErrors.EARLY_EOF;\n                    info = { code: e.code, msg: 'Fetch stream meet Early-EOF' };\n                } else {\n                    type = _loader.LoaderErrors.EXCEPTION;\n                    info = { code: e.code, msg: e.message };\n                }\n\n                if (_this3._onError) {\n                    _this3._onError(type, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            });\n        }\n    }]);\n\n    return FetchStreamLoader;\n}(_loader.BaseLoader);\n\nexports.default = FetchStreamLoader;\n\n},{\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],23:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _speedSampler = _dereq_('./speed-sampler.js');\n\nvar _speedSampler2 = _interopRequireDefault(_speedSampler);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _fetchStreamLoader = _dereq_('./fetch-stream-loader.js');\n\nvar _fetchStreamLoader2 = _interopRequireDefault(_fetchStreamLoader);\n\nvar _xhrMozChunkedLoader = _dereq_('./xhr-moz-chunked-loader.js');\n\nvar _xhrMozChunkedLoader2 = _interopRequireDefault(_xhrMozChunkedLoader);\n\nvar _xhrMsstreamLoader = _dereq_('./xhr-msstream-loader.js');\n\nvar _xhrMsstreamLoader2 = _interopRequireDefault(_xhrMsstreamLoader);\n\nvar _xhrRangeLoader = _dereq_('./xhr-range-loader.js');\n\nvar _xhrRangeLoader2 = _interopRequireDefault(_xhrRangeLoader);\n\nvar _websocketLoader = _dereq_('./websocket-loader.js');\n\nvar _websocketLoader2 = _interopRequireDefault(_websocketLoader);\n\nvar _rangeSeekHandler = _dereq_('./range-seek-handler.js');\n\nvar _rangeSeekHandler2 = _interopRequireDefault(_rangeSeekHandler);\n\nvar _paramSeekHandler = _dereq_('./param-seek-handler.js');\n\nvar _paramSeekHandler2 = _interopRequireDefault(_paramSeekHandler);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * DataSource: {\r\n *     url: string,\r\n *     filesize: number,\r\n *     cors: boolean,\r\n *     withCredentials: boolean\r\n * }\r\n * \r\n */\n\n// Manage IO Loaders\nvar IOController = function () {\n    function IOController(dataSource, config, extraData) {\n        _classCallCheck(this, IOController);\n\n        this.TAG = 'IOController';\n\n        this._config = config;\n        this._extraData = extraData;\n\n        this._stashInitialSize = 1024 * 384; // default initial size: 384KB\n        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {\n            // apply from config\n            this._stashInitialSize = config.stashInitialSize;\n        }\n\n        this._stashUsed = 0;\n        this._stashSize = this._stashInitialSize;\n        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB\n        this._stashBuffer = new ArrayBuffer(this._bufferSize);\n        this._stashByteStart = 0;\n        this._enableStash = true;\n        if (config.enableStashBuffer === false) {\n            this._enableStash = false;\n        }\n\n        this._loader = null;\n        this._loaderClass = null;\n        this._seekHandler = null;\n\n        this._dataSource = dataSource;\n        this._isWebSocketURL = /wss?:\\/\\/(.+?)/.test(dataSource.url);\n        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;\n        this._totalLength = this._refTotalLength;\n        this._fullRequestFlag = false;\n        this._currentRange = null;\n        this._redirectedURL = null;\n\n        this._speedNormalized = 0;\n        this._speedSampler = new _speedSampler2.default();\n        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];\n\n        this._isEarlyEofReconnecting = false;\n\n        this._paused = false;\n        this._resumeFrom = 0;\n\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n\n        this._selectSeekHandler();\n        this._selectLoader();\n        this._createLoader();\n    }\n\n    _createClass(IOController, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._loader.isWorking()) {\n                this._loader.abort();\n            }\n            this._loader.destroy();\n            this._loader = null;\n            this._loaderClass = null;\n            this._dataSource = null;\n            this._stashBuffer = null;\n            this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;\n            this._currentRange = null;\n            this._speedSampler = null;\n\n            this._isEarlyEofReconnecting = false;\n\n            this._onDataArrival = null;\n            this._onSeeked = null;\n            this._onError = null;\n            this._onComplete = null;\n            this._onRedirect = null;\n            this._onRecoveredEarlyEof = null;\n\n            this._extraData = null;\n        }\n    }, {\n        key: 'isWorking',\n        value: function isWorking() {\n            return this._loader && this._loader.isWorking() && !this._paused;\n        }\n    }, {\n        key: 'isPaused',\n        value: function isPaused() {\n            return this._paused;\n        }\n    }, {\n        key: '_selectSeekHandler',\n        value: function _selectSeekHandler() {\n            var config = this._config;\n\n            if (config.seekType === 'range') {\n                this._seekHandler = new _rangeSeekHandler2.default(this._config.rangeLoadZeroStart);\n            } else if (config.seekType === 'param') {\n                var paramStart = config.seekParamStart || 'bstart';\n                var paramEnd = config.seekParamEnd || 'bend';\n\n                this._seekHandler = new _paramSeekHandler2.default(paramStart, paramEnd);\n            } else if (config.seekType === 'custom') {\n                if (typeof config.customSeekHandler !== 'function') {\n                    throw new _exception.InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');\n                }\n                this._seekHandler = new config.customSeekHandler();\n            } else {\n                throw new _exception.InvalidArgumentException('Invalid seekType in config: ' + config.seekType);\n            }\n        }\n    }, {\n        key: '_selectLoader',\n        value: function _selectLoader() {\n            if (this._config.customLoader != null) {\n                this._loaderClass = this._config.customLoader;\n            } else if (this._isWebSocketURL) {\n                this._loaderClass = _websocketLoader2.default;\n            } else if (_fetchStreamLoader2.default.isSupported()) {\n                this._loaderClass = _fetchStreamLoader2.default;\n            } else if (_xhrMozChunkedLoader2.default.isSupported()) {\n                this._loaderClass = _xhrMozChunkedLoader2.default;\n            } else if (_xhrRangeLoader2.default.isSupported()) {\n                this._loaderClass = _xhrRangeLoader2.default;\n            } else {\n                throw new _exception.RuntimeException('Your browser doesn\\'t support xhr with arraybuffer responseType!');\n            }\n        }\n    }, {\n        key: '_createLoader',\n        value: function _createLoader() {\n            this._loader = new this._loaderClass(this._seekHandler, this._config);\n            if (this._loader.needStashBuffer === false) {\n                this._enableStash = false;\n            }\n            this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);\n            this._loader.onURLRedirect = this._onURLRedirect.bind(this);\n            this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);\n            this._loader.onComplete = this._onLoaderComplete.bind(this);\n            this._loader.onError = this._onLoaderError.bind(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(optionalFrom) {\n            this._currentRange = { from: 0, to: -1 };\n            if (optionalFrom) {\n                this._currentRange.from = optionalFrom;\n            }\n\n            this._speedSampler.reset();\n            if (!optionalFrom) {\n                this._fullRequestFlag = true;\n            }\n\n            this._loader.open(this._dataSource, Object.assign({}, this._currentRange));\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._loader.abort();\n\n            if (this._paused) {\n                this._paused = false;\n                this._resumeFrom = 0;\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (this.isWorking()) {\n                this._loader.abort();\n\n                if (this._stashUsed !== 0) {\n                    this._resumeFrom = this._stashByteStart;\n                    this._currentRange.to = this._stashByteStart - 1;\n                } else {\n                    this._resumeFrom = this._currentRange.to + 1;\n                }\n                this._stashUsed = 0;\n                this._stashByteStart = 0;\n                this._paused = true;\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._paused) {\n                this._paused = false;\n                var bytes = this._resumeFrom;\n                this._resumeFrom = 0;\n                this._internalSeek(bytes, true);\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(bytes) {\n            this._paused = false;\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            this._internalSeek(bytes, true);\n        }\n\n        /**\r\n         * When seeking request is from media seeking, unconsumed stash data should be dropped\r\n         * However, stash data shouldn't be dropped if seeking requested from http reconnection\r\n         *\r\n         * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer\r\n         */\n\n    }, {\n        key: '_internalSeek',\n        value: function _internalSeek(bytes, dropUnconsumed) {\n            if (this._loader.isWorking()) {\n                this._loader.abort();\n            }\n\n            // dispatch & flush stash buffer before seek\n            this._flushStashBuffer(dropUnconsumed);\n\n            this._loader.destroy();\n            this._loader = null;\n\n            var requestRange = { from: bytes, to: -1 };\n            this._currentRange = { from: requestRange.from, to: -1 };\n\n            this._speedSampler.reset();\n            this._stashSize = this._stashInitialSize;\n            this._createLoader();\n            this._loader.open(this._dataSource, requestRange);\n\n            if (this._onSeeked) {\n                this._onSeeked();\n            }\n        }\n    }, {\n        key: 'updateUrl',\n        value: function updateUrl(url) {\n            if (!url || typeof url !== 'string' || url.length === 0) {\n                throw new _exception.InvalidArgumentException('Url must be a non-empty string!');\n            }\n\n            this._dataSource.url = url;\n\n            // TODO: replace with new url\n        }\n    }, {\n        key: '_expandBuffer',\n        value: function _expandBuffer(expectedBytes) {\n            var bufferNewSize = this._stashSize;\n            while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {\n                bufferNewSize *= 2;\n            }\n\n            bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB\n            if (bufferNewSize === this._bufferSize) {\n                return;\n            }\n\n            var newBuffer = new ArrayBuffer(bufferNewSize);\n\n            if (this._stashUsed > 0) {\n                // copy existing data into new buffer\n                var stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);\n                var stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);\n                stashNewArray.set(stashOldArray, 0);\n            }\n\n            this._stashBuffer = newBuffer;\n            this._bufferSize = bufferNewSize;\n        }\n    }, {\n        key: '_normalizeSpeed',\n        value: function _normalizeSpeed(input) {\n            var list = this._speedNormalizeList;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (input < list[0]) {\n                return list[0];\n            }\n\n            // binary search\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || input >= list[mid] && input < list[mid + 1]) {\n                    return list[mid];\n                } else if (list[mid] < input) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n        }\n    }, {\n        key: '_adjustStashSize',\n        value: function _adjustStashSize(normalized) {\n            var stashSizeKB = 0;\n\n            if (this._config.isLive) {\n                // live stream: always use single normalized speed for size of stashSizeKB\n                stashSizeKB = normalized;\n            } else {\n                if (normalized < 512) {\n                    stashSizeKB = normalized;\n                } else if (normalized >= 512 && normalized <= 1024) {\n                    stashSizeKB = Math.floor(normalized * 1.5);\n                } else {\n                    stashSizeKB = normalized * 2;\n                }\n            }\n\n            if (stashSizeKB > 8192) {\n                stashSizeKB = 8192;\n            }\n\n            var bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB\n            if (this._bufferSize < bufferSize) {\n                this._expandBuffer(bufferSize);\n            }\n            this._stashSize = stashSizeKB * 1024;\n        }\n    }, {\n        key: '_dispatchChunks',\n        value: function _dispatchChunks(chunks, byteStart) {\n            this._currentRange.to = byteStart + chunks.byteLength - 1;\n            return this._onDataArrival(chunks, byteStart);\n        }\n    }, {\n        key: '_onURLRedirect',\n        value: function _onURLRedirect(redirectedURL) {\n            this._redirectedURL = redirectedURL;\n            if (this._onRedirect) {\n                this._onRedirect(redirectedURL);\n            }\n        }\n    }, {\n        key: '_onContentLengthKnown',\n        value: function _onContentLengthKnown(contentLength) {\n            if (contentLength && this._fullRequestFlag) {\n                this._totalLength = contentLength;\n                this._fullRequestFlag = false;\n            }\n        }\n    }, {\n        key: '_onLoaderChunkArrival',\n        value: function _onLoaderChunkArrival(chunk, byteStart, receivedLength) {\n            if (!this._onDataArrival) {\n                throw new _exception.IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');\n            }\n            if (this._paused) {\n                return;\n            }\n            if (this._isEarlyEofReconnecting) {\n                // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback\n                this._isEarlyEofReconnecting = false;\n                if (this._onRecoveredEarlyEof) {\n                    this._onRecoveredEarlyEof();\n                }\n            }\n\n            this._speedSampler.addBytes(chunk.byteLength);\n\n            // adjust stash buffer size according to network speed dynamically\n            var KBps = this._speedSampler.lastSecondKBps;\n            if (KBps !== 0) {\n                var normalized = this._normalizeSpeed(KBps);\n                if (this._speedNormalized !== normalized) {\n                    this._speedNormalized = normalized;\n                    this._adjustStashSize(normalized);\n                }\n            }\n\n            if (!this._enableStash) {\n                // disable stash\n                if (this._stashUsed === 0) {\n                    // dispatch chunk directly to consumer;\n                    // check ret value (consumed bytes) and stash unconsumed to stashBuffer\n                    var consumed = this._dispatchChunks(chunk, byteStart);\n                    if (consumed < chunk.byteLength) {\n                        // unconsumed data remain.\n                        var remain = chunk.byteLength - consumed;\n                        if (remain > this._bufferSize) {\n                            this._expandBuffer(remain);\n                        }\n                        var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        stashArray.set(new Uint8Array(chunk, consumed), 0);\n                        this._stashUsed += remain;\n                        this._stashByteStart = byteStart + consumed;\n                    }\n                } else {\n                    // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.\n                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                        this._expandBuffer(this._stashUsed + chunk.byteLength);\n                    }\n                    var _stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    _stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                    var _consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);\n                    if (_consumed < this._stashUsed && _consumed > 0) {\n                        // unconsumed data remain\n                        var remainArray = new Uint8Array(this._stashBuffer, _consumed);\n                        _stashArray.set(remainArray, 0);\n                    }\n                    this._stashUsed -= _consumed;\n                    this._stashByteStart += _consumed;\n                }\n            } else {\n                // enable stash\n                if (this._stashUsed === 0 && this._stashByteStart === 0) {\n                    // seeked? or init chunk?\n                    // This is the first chunk after seek action\n                    this._stashByteStart = byteStart;\n                }\n                if (this._stashUsed + chunk.byteLength <= this._stashSize) {\n                    // just stash\n                    var _stashArray2 = new Uint8Array(this._stashBuffer, 0, this._stashSize);\n                    _stashArray2.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                } else {\n                    // stashUsed + chunkSize > stashSize, size limit exceeded\n                    var _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    if (this._stashUsed > 0) {\n                        // There're stash datas in buffer\n                        // dispatch the whole stashBuffer, and stash remain data\n                        // then append chunk to stashBuffer (stash)\n                        var buffer = this._stashBuffer.slice(0, this._stashUsed);\n                        var _consumed2 = this._dispatchChunks(buffer, this._stashByteStart);\n                        if (_consumed2 < buffer.byteLength) {\n                            if (_consumed2 > 0) {\n                                var _remainArray = new Uint8Array(buffer, _consumed2);\n                                _stashArray3.set(_remainArray, 0);\n                                this._stashUsed = _remainArray.byteLength;\n                                this._stashByteStart += _consumed2;\n                            }\n                        } else {\n                            this._stashUsed = 0;\n                            this._stashByteStart += _consumed2;\n                        }\n                        if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                            this._expandBuffer(this._stashUsed + chunk.byteLength);\n                            _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        }\n                        _stashArray3.set(new Uint8Array(chunk), this._stashUsed);\n                        this._stashUsed += chunk.byteLength;\n                    } else {\n                        // stash buffer empty, but chunkSize > stashSize (oh, holy shit)\n                        // dispatch chunk directly and stash remain data\n                        var _consumed3 = this._dispatchChunks(chunk, byteStart);\n                        if (_consumed3 < chunk.byteLength) {\n                            var _remain = chunk.byteLength - _consumed3;\n                            if (_remain > this._bufferSize) {\n                                this._expandBuffer(_remain);\n                                _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                            }\n                            _stashArray3.set(new Uint8Array(chunk, _consumed3), 0);\n                            this._stashUsed += _remain;\n                            this._stashByteStart = byteStart + _consumed3;\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_flushStashBuffer',\n        value: function _flushStashBuffer(dropUnconsumed) {\n            if (this._stashUsed > 0) {\n                var buffer = this._stashBuffer.slice(0, this._stashUsed);\n                var consumed = this._dispatchChunks(buffer, this._stashByteStart);\n                var remain = buffer.byteLength - consumed;\n\n                if (consumed < buffer.byteLength) {\n                    if (dropUnconsumed) {\n                        _logger2.default.w(this.TAG, remain + ' bytes unconsumed data remain when flush buffer, dropped');\n                    } else {\n                        if (consumed > 0) {\n                            var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                            var remainArray = new Uint8Array(buffer, consumed);\n                            stashArray.set(remainArray, 0);\n                            this._stashUsed = remainArray.byteLength;\n                            this._stashByteStart += consumed;\n                        }\n                        return 0;\n                    }\n                }\n                this._stashUsed = 0;\n                this._stashByteStart = 0;\n                return remain;\n            }\n            return 0;\n        }\n    }, {\n        key: '_onLoaderComplete',\n        value: function _onLoaderComplete(from, to) {\n            // Force-flush stash buffer, and drop unconsumed data\n            this._flushStashBuffer(true);\n\n            if (this._onComplete) {\n                this._onComplete(this._extraData);\n            }\n        }\n    }, {\n        key: '_onLoaderError',\n        value: function _onLoaderError(type, data) {\n            _logger2.default.e(this.TAG, 'Loader error, code = ' + data.code + ', msg = ' + data.msg);\n\n            this._flushStashBuffer(false);\n\n            if (this._isEarlyEofReconnecting) {\n                // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer\n                this._isEarlyEofReconnecting = false;\n                type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n            }\n\n            switch (type) {\n                case _loader.LoaderErrors.EARLY_EOF:\n                    {\n                        if (!this._config.isLive) {\n                            // Do internal http reconnect if not live stream\n                            if (this._totalLength) {\n                                var nextFrom = this._currentRange.to + 1;\n                                if (nextFrom < this._totalLength) {\n                                    _logger2.default.w(this.TAG, 'Connection lost, trying reconnect...');\n                                    this._isEarlyEofReconnecting = true;\n                                    this._internalSeek(nextFrom, false);\n                                }\n                                return;\n                            }\n                            // else: We don't know totalLength, throw UnrecoverableEarlyEof\n                        }\n                        // live stream: throw UnrecoverableEarlyEof error to upper-layer\n                        type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n                        break;\n                    }\n                case _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF:\n                case _loader.LoaderErrors.CONNECTING_TIMEOUT:\n                case _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID:\n                case _loader.LoaderErrors.EXCEPTION:\n                    break;\n            }\n\n            if (this._onError) {\n                this._onError(type, data);\n            } else {\n                throw new _exception.RuntimeException('IOException: ' + data.msg);\n            }\n        }\n    }, {\n        key: 'status',\n        get: function get() {\n            return this._loader.status;\n        }\n    }, {\n        key: 'extraData',\n        get: function get() {\n            return this._extraData;\n        },\n        set: function set(data) {\n            this._extraData = data;\n        }\n\n        // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number\n\n    }, {\n        key: 'onDataArrival',\n        get: function get() {\n            return this._onDataArrival;\n        },\n        set: function set(callback) {\n            this._onDataArrival = callback;\n        }\n    }, {\n        key: 'onSeeked',\n        get: function get() {\n            return this._onSeeked;\n        },\n        set: function set(callback) {\n            this._onSeeked = callback;\n        }\n\n        // prototype: function onError(type: number, info: {code: number, msg: string}): void\n\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n    }, {\n        key: 'onComplete',\n        get: function get() {\n            return this._onComplete;\n        },\n        set: function set(callback) {\n            this._onComplete = callback;\n        }\n    }, {\n        key: 'onRedirect',\n        get: function get() {\n            return this._onRedirect;\n        },\n        set: function set(callback) {\n            this._onRedirect = callback;\n        }\n    }, {\n        key: 'onRecoveredEarlyEof',\n        get: function get() {\n            return this._onRecoveredEarlyEof;\n        },\n        set: function set(callback) {\n            this._onRecoveredEarlyEof = callback;\n        }\n    }, {\n        key: 'currentURL',\n        get: function get() {\n            return this._dataSource.url;\n        }\n    }, {\n        key: 'hasRedirect',\n        get: function get() {\n            return this._redirectedURL != null || this._dataSource.redirectedURL != undefined;\n        }\n    }, {\n        key: 'currentRedirectedURL',\n        get: function get() {\n            return this._redirectedURL || this._dataSource.redirectedURL;\n        }\n\n        // in KB/s\n\n    }, {\n        key: 'currentSpeed',\n        get: function get() {\n            if (this._loaderClass === _xhrRangeLoader2.default) {\n                // SpeedSampler is inaccuracy if loader is RangeLoader\n                return this._loader.currentSpeed;\n            }\n            return this._speedSampler.lastSecondKBps;\n        }\n    }, {\n        key: 'loaderType',\n        get: function get() {\n            return this._loader.type;\n        }\n    }]);\n\n    return IOController;\n}();\n\nexports.default = IOController;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./fetch-stream-loader.js\":22,\"./loader.js\":24,\"./param-seek-handler.js\":25,\"./range-seek-handler.js\":26,\"./speed-sampler.js\":27,\"./websocket-loader.js\":28,\"./xhr-moz-chunked-loader.js\":29,\"./xhr-msstream-loader.js\":30,\"./xhr-range-loader.js\":31}],24:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BaseLoader = exports.LoaderErrors = exports.LoaderStatus = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoaderStatus = exports.LoaderStatus = {\n    kIdle: 0,\n    kConnecting: 1,\n    kBuffering: 2,\n    kError: 3,\n    kComplete: 4\n};\n\nvar LoaderErrors = exports.LoaderErrors = {\n    OK: 'OK',\n    EXCEPTION: 'Exception',\n    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\n    CONNECTING_TIMEOUT: 'ConnectingTimeout',\n    EARLY_EOF: 'EarlyEof',\n    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\n};\n\n/* Loader has callbacks which have following prototypes:\r\n *     function onContentLengthKnown(contentLength: number): void\r\n *     function onURLRedirect(url: string): void\r\n *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void\r\n *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void\r\n *     function onComplete(rangeFrom: number, rangeTo: number): void\r\n */\n\nvar BaseLoader = exports.BaseLoader = function () {\n    function BaseLoader(typeName) {\n        _classCallCheck(this, BaseLoader);\n\n        this._type = typeName || 'undefined';\n        this._status = LoaderStatus.kIdle;\n        this._needStash = false;\n        // callbacks\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    _createClass(BaseLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._status = LoaderStatus.kIdle;\n            this._onContentLengthKnown = null;\n            this._onURLRedirect = null;\n            this._onDataArrival = null;\n            this._onError = null;\n            this._onComplete = null;\n        }\n    }, {\n        key: 'isWorking',\n        value: function isWorking() {\n            return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\n        }\n    }, {\n        key: 'open',\n\n\n        // pure virtual\n        value: function open(dataSource, range) {\n            throw new _exception.NotImplementedException('Unimplemented abstract function!');\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            throw new _exception.NotImplementedException('Unimplemented abstract function!');\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'status',\n        get: function get() {\n            return this._status;\n        }\n    }, {\n        key: 'needStashBuffer',\n        get: function get() {\n            return this._needStash;\n        }\n    }, {\n        key: 'onContentLengthKnown',\n        get: function get() {\n            return this._onContentLengthKnown;\n        },\n        set: function set(callback) {\n            this._onContentLengthKnown = callback;\n        }\n    }, {\n        key: 'onURLRedirect',\n        get: function get() {\n            return this._onURLRedirect;\n        },\n        set: function set(callback) {\n            this._onURLRedirect = callback;\n        }\n    }, {\n        key: 'onDataArrival',\n        get: function get() {\n            return this._onDataArrival;\n        },\n        set: function set(callback) {\n            this._onDataArrival = callback;\n        }\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n    }, {\n        key: 'onComplete',\n        get: function get() {\n            return this._onComplete;\n        },\n        set: function set(callback) {\n            this._onComplete = callback;\n        }\n    }]);\n\n    return BaseLoader;\n}();\n\n},{\"../utils/exception.js\":40}],25:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ParamSeekHandler = function () {\n    function ParamSeekHandler(paramStart, paramEnd) {\n        _classCallCheck(this, ParamSeekHandler);\n\n        this._startName = paramStart;\n        this._endName = paramEnd;\n    }\n\n    _createClass(ParamSeekHandler, [{\n        key: 'getConfig',\n        value: function getConfig(baseUrl, range) {\n            var url = baseUrl;\n\n            if (range.from !== 0 || range.to !== -1) {\n                var needAnd = true;\n                if (url.indexOf('?') === -1) {\n                    url += '?';\n                    needAnd = false;\n                }\n\n                if (needAnd) {\n                    url += '&';\n                }\n\n                url += this._startName + '=' + range.from.toString();\n\n                if (range.to !== -1) {\n                    url += '&' + this._endName + '=' + range.to.toString();\n                }\n            }\n\n            return {\n                url: url,\n                headers: {}\n            };\n        }\n    }, {\n        key: 'removeURLParameters',\n        value: function removeURLParameters(seekedURL) {\n            var baseURL = seekedURL.split('?')[0];\n            var params = undefined;\n\n            var queryIndex = seekedURL.indexOf('?');\n            if (queryIndex !== -1) {\n                params = seekedURL.substring(queryIndex + 1);\n            }\n\n            var resultParams = '';\n\n            if (params != undefined && params.length > 0) {\n                var pairs = params.split('&');\n\n                for (var i = 0; i < pairs.length; i++) {\n                    var pair = pairs[i].split('=');\n                    var requireAnd = i > 0;\n\n                    if (pair[0] !== this._startName && pair[0] !== this._endName) {\n                        if (requireAnd) {\n                            resultParams += '&';\n                        }\n                        resultParams += pairs[i];\n                    }\n                }\n            }\n\n            return resultParams.length === 0 ? baseURL : baseURL + '?' + resultParams;\n        }\n    }]);\n\n    return ParamSeekHandler;\n}();\n\nexports.default = ParamSeekHandler;\n\n},{}],26:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RangeSeekHandler = function () {\n    function RangeSeekHandler(zeroStart) {\n        _classCallCheck(this, RangeSeekHandler);\n\n        this._zeroStart = zeroStart || false;\n    }\n\n    _createClass(RangeSeekHandler, [{\n        key: 'getConfig',\n        value: function getConfig(url, range) {\n            var headers = {};\n\n            if (range.from !== 0 || range.to !== -1) {\n                var param = void 0;\n                if (range.to !== -1) {\n                    param = 'bytes=' + range.from.toString() + '-' + range.to.toString();\n                } else {\n                    param = 'bytes=' + range.from.toString() + '-';\n                }\n                headers['Range'] = param;\n            } else if (this._zeroStart) {\n                headers['Range'] = 'bytes=0-';\n            }\n\n            return {\n                url: url,\n                headers: headers\n            };\n        }\n    }, {\n        key: 'removeURLParameters',\n        value: function removeURLParameters(seekedURL) {\n            return seekedURL;\n        }\n    }]);\n\n    return RangeSeekHandler;\n}();\n\nexports.default = RangeSeekHandler;\n\n},{}],27:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n// Utility class to calculate realtime network I/O speed\nvar SpeedSampler = function () {\n    function SpeedSampler() {\n        _classCallCheck(this, SpeedSampler);\n\n        // milliseconds\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n\n        // compatibility detection\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n    }\n\n    _createClass(SpeedSampler, [{\n        key: \"reset\",\n        value: function reset() {\n            this._firstCheckpoint = this._lastCheckpoint = 0;\n            this._totalBytes = this._intervalBytes = 0;\n            this._lastSecondBytes = 0;\n        }\n    }, {\n        key: \"addBytes\",\n        value: function addBytes(bytes) {\n            if (this._firstCheckpoint === 0) {\n                this._firstCheckpoint = this._now();\n                this._lastCheckpoint = this._firstCheckpoint;\n                this._intervalBytes += bytes;\n                this._totalBytes += bytes;\n            } else if (this._now() - this._lastCheckpoint < 1000) {\n                this._intervalBytes += bytes;\n                this._totalBytes += bytes;\n            } else {\n                // duration >= 1000\n                this._lastSecondBytes = this._intervalBytes;\n                this._intervalBytes = bytes;\n                this._totalBytes += bytes;\n                this._lastCheckpoint = this._now();\n            }\n        }\n    }, {\n        key: \"currentKBps\",\n        get: function get() {\n            this.addBytes(0);\n\n            var durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\n            if (durationSeconds == 0) durationSeconds = 1;\n            return this._intervalBytes / durationSeconds / 1024;\n        }\n    }, {\n        key: \"lastSecondKBps\",\n        get: function get() {\n            this.addBytes(0);\n\n            if (this._lastSecondBytes !== 0) {\n                return this._lastSecondBytes / 1024;\n            } else {\n                // lastSecondBytes === 0\n                if (this._now() - this._lastCheckpoint >= 500) {\n                    // if time interval since last checkpoint has exceeded 500ms\n                    // the speed is nearly accurate\n                    return this.currentKBps;\n                } else {\n                    // We don't know\n                    return 0;\n                }\n            }\n        }\n    }, {\n        key: \"averageKBps\",\n        get: function get() {\n            var durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\n            return this._totalBytes / durationSeconds / 1024;\n        }\n    }]);\n\n    return SpeedSampler;\n}();\n\nexports.default = SpeedSampler;\n\n},{}],28:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// For FLV over WebSocket live stream\nvar WebSocketLoader = function (_BaseLoader) {\n    _inherits(WebSocketLoader, _BaseLoader);\n\n    _createClass(WebSocketLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                return typeof self.WebSocket !== 'undefined';\n            } catch (e) {\n                return false;\n            }\n        }\n    }]);\n\n    function WebSocketLoader() {\n        _classCallCheck(this, WebSocketLoader);\n\n        var _this = _possibleConstructorReturn(this, (WebSocketLoader.__proto__ || Object.getPrototypeOf(WebSocketLoader)).call(this, 'websocket-loader'));\n\n        _this.TAG = 'WebSocketLoader';\n\n        _this._needStash = true;\n\n        _this._ws = null;\n        _this._requestAbort = false;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(WebSocketLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._ws) {\n                this.abort();\n            }\n            _get(WebSocketLoader.prototype.__proto__ || Object.getPrototypeOf(WebSocketLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource) {\n            try {\n                var ws = this._ws = new self.WebSocket(dataSource.url);\n                ws.binaryType = 'arraybuffer';\n                ws.onopen = this._onWebSocketOpen.bind(this);\n                ws.onclose = this._onWebSocketClose.bind(this);\n                ws.onmessage = this._onWebSocketMessage.bind(this);\n                ws.onerror = this._onWebSocketError.bind(this);\n\n                this._status = _loader.LoaderStatus.kConnecting;\n            } catch (e) {\n                this._status = _loader.LoaderStatus.kError;\n\n                var info = { code: e.code, msg: e.message };\n\n                if (this._onError) {\n                    this._onError(_loader.LoaderErrors.EXCEPTION, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            }\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            var ws = this._ws;\n            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {\n                // CONNECTING || OPEN\n                this._requestAbort = true;\n                ws.close();\n            }\n\n            this._ws = null;\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_onWebSocketOpen',\n        value: function _onWebSocketOpen(e) {\n            this._status = _loader.LoaderStatus.kBuffering;\n        }\n    }, {\n        key: '_onWebSocketClose',\n        value: function _onWebSocketClose(e) {\n            if (this._requestAbort === true) {\n                this._requestAbort = false;\n                return;\n            }\n\n            this._status = _loader.LoaderStatus.kComplete;\n\n            if (this._onComplete) {\n                this._onComplete(0, this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_onWebSocketMessage',\n        value: function _onWebSocketMessage(e) {\n            var _this2 = this;\n\n            if (e.data instanceof ArrayBuffer) {\n                this._dispatchArrayBuffer(e.data);\n            } else if (e.data instanceof Blob) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    _this2._dispatchArrayBuffer(reader.result);\n                };\n                reader.readAsArrayBuffer(e.data);\n            } else {\n                this._status = _loader.LoaderStatus.kError;\n                var info = { code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name };\n\n                if (this._onError) {\n                    this._onError(_loader.LoaderErrors.EXCEPTION, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            }\n        }\n    }, {\n        key: '_dispatchArrayBuffer',\n        value: function _dispatchArrayBuffer(arraybuffer) {\n            var chunk = arraybuffer;\n            var byteStart = this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n        }\n    }, {\n        key: '_onWebSocketError',\n        value: function _onWebSocketError(e) {\n            this._status = _loader.LoaderStatus.kError;\n\n            var info = {\n                code: e.code,\n                msg: e.message\n            };\n\n            if (this._onError) {\n                this._onError(_loader.LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return WebSocketLoader;\n}(_loader.BaseLoader);\n\nexports.default = WebSocketLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],29:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *     http://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\nvar MozChunkedLoader = function (_BaseLoader) {\n    _inherits(MozChunkedLoader, _BaseLoader);\n\n    _createClass(MozChunkedLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                var xhr = new XMLHttpRequest();\n                // Firefox 37- requires .open() to be called before setting responseType\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'moz-chunked-arraybuffer';\n                return xhr.responseType === 'moz-chunked-arraybuffer';\n            } catch (e) {\n                _logger2.default.w('MozChunkedLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function MozChunkedLoader(seekHandler, config) {\n        _classCallCheck(this, MozChunkedLoader);\n\n        var _this = _possibleConstructorReturn(this, (MozChunkedLoader.__proto__ || Object.getPrototypeOf(MozChunkedLoader)).call(this, 'xhr-moz-chunked-loader'));\n\n        _this.TAG = 'MozChunkedLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._xhr = null;\n        _this._requestAbort = false;\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(MozChunkedLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onloadend = null;\n                this._xhr.onerror = null;\n                this._xhr = null;\n            }\n            _get(MozChunkedLoader.prototype.__proto__ || Object.getPrototypeOf(MozChunkedLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._dataSource = dataSource;\n            this._range = range;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._requestURL = seekConfig.url;\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'moz-chunked-arraybuffer';\n            xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onloadend = this._onLoadEnd.bind(this);\n            xhr.onerror = this._onXhrError.bind(this);\n\n            // cors is auto detected and enabled by xhr\n\n            // withCredentials is disabled by default\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                var _headers = this._config.headers;\n\n                for (var _key in _headers) {\n                    if (_headers.hasOwnProperty(_key)) {\n                        xhr.setRequestHeader(_key, _headers[_key]);\n                    }\n                }\n            }\n\n            this._status = _loader.LoaderStatus.kConnecting;\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n            if (this._xhr) {\n                this._xhr.abort();\n            }\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_onReadyStateChange',\n        value: function _onReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n                    if (this._onURLRedirect) {\n                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n\n                if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                } else {\n                    this._status = _loader.LoaderStatus.kBuffering;\n                }\n            }\n        }\n    }, {\n        key: '_onProgress',\n        value: function _onProgress(e) {\n            if (this._status === _loader.LoaderStatus.kError) {\n                // Ignore error response\n                return;\n            }\n\n            if (this._contentLength === null) {\n                if (e.total !== null && e.total !== 0) {\n                    this._contentLength = e.total;\n                    if (this._onContentLengthKnown) {\n                        this._onContentLengthKnown(this._contentLength);\n                    }\n                }\n            }\n\n            var chunk = e.target.response;\n            var byteStart = this._range.from + this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n        }\n    }, {\n        key: '_onLoadEnd',\n        value: function _onLoadEnd(e) {\n            if (this._requestAbort === true) {\n                this._requestAbort = false;\n                return;\n            } else if (this._status === _loader.LoaderStatus.kError) {\n                return;\n            }\n\n            this._status = _loader.LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_onXhrError',\n        value: function _onXhrError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && e.loaded < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'Moz-Chunked stream meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EXCEPTION;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return MozChunkedLoader;\n}(_loader.BaseLoader);\n\nexports.default = MozChunkedLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],30:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!\r\n * The browser may crash in wininet.dll. Disable for now.\r\n *\r\n * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`\r\n * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.\r\n *\r\n * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.\r\n * in order to release previous ArrayBuffer to avoid memory leak\r\n *\r\n * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.\r\n */\nvar MSStreamLoader = function (_BaseLoader) {\n    _inherits(MSStreamLoader, _BaseLoader);\n\n    _createClass(MSStreamLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                if (typeof self.MSStream === 'undefined' || typeof self.MSStreamReader === 'undefined') {\n                    return false;\n                }\n\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'ms-stream';\n                return xhr.responseType === 'ms-stream';\n            } catch (e) {\n                _logger2.default.w('MSStreamLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function MSStreamLoader(seekHandler, config) {\n        _classCallCheck(this, MSStreamLoader);\n\n        var _this = _possibleConstructorReturn(this, (MSStreamLoader.__proto__ || Object.getPrototypeOf(MSStreamLoader)).call(this, 'xhr-msstream-loader'));\n\n        _this.TAG = 'MSStreamLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._xhr = null;\n        _this._reader = null; // MSStreamReader\n\n        _this._totalRange = null;\n        _this._currentRange = null;\n\n        _this._currentRequestURL = null;\n        _this._currentRedirectedURL = null;\n\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n\n        _this._bufferLimit = 16 * 1024 * 1024; // 16MB\n        _this._lastTimeBufferSize = 0;\n        _this._isReconnecting = false;\n        return _this;\n    }\n\n    _createClass(MSStreamLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._reader) {\n                this._reader.onprogress = null;\n                this._reader.onload = null;\n                this._reader.onerror = null;\n                this._reader = null;\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr = null;\n            }\n            _get(MSStreamLoader.prototype.__proto__ || Object.getPrototypeOf(MSStreamLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._internalOpen(dataSource, range, false);\n        }\n    }, {\n        key: '_internalOpen',\n        value: function _internalOpen(dataSource, range, isSubrange) {\n            this._dataSource = dataSource;\n\n            if (!isSubrange) {\n                this._totalRange = range;\n            } else {\n                this._currentRange = range;\n            }\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL) {\n                if (this._currentRedirectedURL != undefined) {\n                    sourceURL = this._currentRedirectedURL;\n                } else if (dataSource.redirectedURL != undefined) {\n                    sourceURL = dataSource.redirectedURL;\n                }\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._currentRequestURL = seekConfig.url;\n\n            var reader = this._reader = new self.MSStreamReader();\n            reader.onprogress = this._msrOnProgress.bind(this);\n            reader.onload = this._msrOnLoad.bind(this);\n            reader.onerror = this._msrOnError.bind(this);\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'ms-stream';\n            xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);\n            xhr.onerror = this._xhrOnError.bind(this);\n\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                var _headers = this._config.headers;\n\n                for (var _key in _headers) {\n                    if (_headers.hasOwnProperty(_key)) {\n                        xhr.setRequestHeader(_key, _headers[_key]);\n                    }\n                }\n            }\n\n            if (this._isReconnecting) {\n                this._isReconnecting = false;\n            } else {\n                this._status = _loader.LoaderStatus.kConnecting;\n            }\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._internalAbort();\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._reader) {\n                if (this._reader.readyState === 1) {\n                    // LOADING\n                    this._reader.abort();\n                }\n                this._reader.onprogress = null;\n                this._reader.onload = null;\n                this._reader.onerror = null;\n                this._reader = null;\n            }\n            if (this._xhr) {\n                this._xhr.abort();\n                this._xhr.onreadystatechange = null;\n                this._xhr = null;\n            }\n        }\n    }, {\n        key: '_xhrOnReadyStateChange',\n        value: function _xhrOnReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    this._status = _loader.LoaderStatus.kBuffering;\n\n                    if (xhr.responseURL != undefined) {\n                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                        if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                            this._currentRedirectedURL = redirectedURL;\n                            if (this._onURLRedirect) {\n                                this._onURLRedirect(redirectedURL);\n                            }\n                        }\n                    }\n\n                    var lengthHeader = xhr.getResponseHeader('Content-Length');\n                    if (lengthHeader != null && this._contentLength == null) {\n                        var length = parseInt(lengthHeader);\n                        if (length > 0) {\n                            this._contentLength = length;\n                            if (this._onContentLengthKnown) {\n                                this._onContentLengthKnown(this._contentLength);\n                            }\n                        }\n                    }\n                } else {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                }\n            } else if (xhr.readyState === 3) {\n                // LOADING\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    this._status = _loader.LoaderStatus.kBuffering;\n\n                    var msstream = xhr.response;\n                    this._reader.readAsArrayBuffer(msstream);\n                }\n            }\n        }\n    }, {\n        key: '_xhrOnError',\n        value: function _xhrOnError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = _loader.LoaderErrors.EXCEPTION;\n            var info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }, {\n        key: '_msrOnProgress',\n        value: function _msrOnProgress(e) {\n            var reader = e.target;\n            var bigbuffer = reader.result;\n            if (bigbuffer == null) {\n                // result may be null, workaround for buggy M$\n                this._doReconnectIfNeeded();\n                return;\n            }\n\n            var slice = bigbuffer.slice(this._lastTimeBufferSize);\n            this._lastTimeBufferSize = bigbuffer.byteLength;\n            var byteStart = this._totalRange.from + this._receivedLength;\n            this._receivedLength += slice.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(slice, byteStart, this._receivedLength);\n            }\n\n            if (bigbuffer.byteLength >= this._bufferLimit) {\n                _logger2.default.v(this.TAG, 'MSStream buffer exceeded max size near ' + (byteStart + slice.byteLength) + ', reconnecting...');\n                this._doReconnectIfNeeded();\n            }\n        }\n    }, {\n        key: '_doReconnectIfNeeded',\n        value: function _doReconnectIfNeeded() {\n            if (this._contentLength == null || this._receivedLength < this._contentLength) {\n                this._isReconnecting = true;\n                this._lastTimeBufferSize = 0;\n                this._internalAbort();\n\n                var range = {\n                    from: this._totalRange.from + this._receivedLength,\n                    to: -1\n                };\n                this._internalOpen(this._dataSource, range, true);\n            }\n        }\n    }, {\n        key: '_msrOnLoad',\n        value: function _msrOnLoad(e) {\n            // actually it is onComplete event\n            this._status = _loader.LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_msrOnError',\n        value: function _msrOnError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && this._receivedLength < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'MSStream meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return MSStreamLoader;\n}(_loader.BaseLoader);\n\nexports.default = MSStreamLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],31:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _speedSampler = _dereq_('./speed-sampler.js');\n\nvar _speedSampler2 = _interopRequireDefault(_speedSampler);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// Universal IO Loader, implemented by adding Range header in xhr's request header\nvar RangeLoader = function (_BaseLoader) {\n    _inherits(RangeLoader, _BaseLoader);\n\n    _createClass(RangeLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'arraybuffer';\n                return xhr.responseType === 'arraybuffer';\n            } catch (e) {\n                _logger2.default.w('RangeLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function RangeLoader(seekHandler, config) {\n        _classCallCheck(this, RangeLoader);\n\n        var _this = _possibleConstructorReturn(this, (RangeLoader.__proto__ || Object.getPrototypeOf(RangeLoader)).call(this, 'xhr-range-loader'));\n\n        _this.TAG = 'RangeLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = false;\n\n        _this._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192];\n        _this._currentChunkSizeKB = 384;\n        _this._currentSpeedNormalized = 0;\n        _this._zeroSpeedChunkCount = 0;\n\n        _this._xhr = null;\n        _this._speedSampler = new _speedSampler2.default();\n\n        _this._requestAbort = false;\n        _this._waitForTotalLength = false;\n        _this._totalLengthReceived = false;\n\n        _this._currentRequestURL = null;\n        _this._currentRedirectedURL = null;\n        _this._currentRequestRange = null;\n        _this._totalLength = null; // size of the entire file\n        _this._contentLength = null; // Content-Length of entire request range\n        _this._receivedLength = 0; // total received bytes\n        _this._lastTimeLoaded = 0; // received bytes of current request sub-range\n        return _this;\n    }\n\n    _createClass(RangeLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onload = null;\n                this._xhr.onerror = null;\n                this._xhr = null;\n            }\n            _get(RangeLoader.prototype.__proto__ || Object.getPrototypeOf(RangeLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._dataSource = dataSource;\n            this._range = range;\n            this._status = _loader.LoaderStatus.kConnecting;\n\n            var useRefTotalLength = false;\n            if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {\n                useRefTotalLength = true;\n                this._totalLength = this._dataSource.filesize;\n            }\n\n            if (!this._totalLengthReceived && !useRefTotalLength) {\n                // We need total filesize\n                this._waitForTotalLength = true;\n                this._internalOpen(this._dataSource, { from: 0, to: -1 });\n            } else {\n                // We have filesize, start loading\n                this._openSubRange();\n            }\n        }\n    }, {\n        key: '_openSubRange',\n        value: function _openSubRange() {\n            var chunkSize = this._currentChunkSizeKB * 1024;\n\n            var from = this._range.from + this._receivedLength;\n            var to = from + chunkSize;\n\n            if (this._contentLength != null) {\n                if (to - this._range.from >= this._contentLength) {\n                    to = this._range.from + this._contentLength - 1;\n                }\n            }\n\n            this._currentRequestRange = { from: from, to: to };\n            this._internalOpen(this._dataSource, this._currentRequestRange);\n        }\n    }, {\n        key: '_internalOpen',\n        value: function _internalOpen(dataSource, range) {\n            this._lastTimeLoaded = 0;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL) {\n                if (this._currentRedirectedURL != undefined) {\n                    sourceURL = this._currentRedirectedURL;\n                } else if (dataSource.redirectedURL != undefined) {\n                    sourceURL = dataSource.redirectedURL;\n                }\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._currentRequestURL = seekConfig.url;\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'arraybuffer';\n            xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onload = this._onLoad.bind(this);\n            xhr.onerror = this._onXhrError.bind(this);\n\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                var _headers = this._config.headers;\n\n                for (var _key in _headers) {\n                    if (_headers.hasOwnProperty(_key)) {\n                        xhr.setRequestHeader(_key, _headers[_key]);\n                    }\n                }\n            }\n\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n            this._internalAbort();\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onload = null;\n                this._xhr.onerror = null;\n                this._xhr.abort();\n                this._xhr = null;\n            }\n        }\n    }, {\n        key: '_onReadyStateChange',\n        value: function _onReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.responseURL != undefined) {\n                    // if the browser support this property\n                    var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                        this._currentRedirectedURL = redirectedURL;\n                        if (this._onURLRedirect) {\n                            this._onURLRedirect(redirectedURL);\n                        }\n                    }\n                }\n\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    if (this._waitForTotalLength) {\n                        return;\n                    }\n                    this._status = _loader.LoaderStatus.kBuffering;\n                } else {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_onProgress',\n        value: function _onProgress(e) {\n            if (this._status === _loader.LoaderStatus.kError) {\n                // Ignore error response\n                return;\n            }\n\n            if (this._contentLength === null) {\n                var openNextRange = false;\n\n                if (this._waitForTotalLength) {\n                    this._waitForTotalLength = false;\n                    this._totalLengthReceived = true;\n                    openNextRange = true;\n\n                    var total = e.total;\n                    this._internalAbort();\n                    if (total != null & total !== 0) {\n                        this._totalLength = total;\n                    }\n                }\n\n                // calculate currrent request range's contentLength\n                if (this._range.to === -1) {\n                    this._contentLength = this._totalLength - this._range.from;\n                } else {\n                    // to !== -1\n                    this._contentLength = this._range.to - this._range.from + 1;\n                }\n\n                if (openNextRange) {\n                    this._openSubRange();\n                    return;\n                }\n                if (this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n\n            var delta = e.loaded - this._lastTimeLoaded;\n            this._lastTimeLoaded = e.loaded;\n            this._speedSampler.addBytes(delta);\n        }\n    }, {\n        key: '_normalizeSpeed',\n        value: function _normalizeSpeed(input) {\n            var list = this._chunkSizeKBList;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (input < list[0]) {\n                return list[0];\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || input >= list[mid] && input < list[mid + 1]) {\n                    return list[mid];\n                } else if (list[mid] < input) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n        }\n    }, {\n        key: '_onLoad',\n        value: function _onLoad(e) {\n            if (this._status === _loader.LoaderStatus.kError) {\n                // Ignore error response\n                return;\n            }\n\n            if (this._waitForTotalLength) {\n                this._waitForTotalLength = false;\n                return;\n            }\n\n            this._lastTimeLoaded = 0;\n            var KBps = this._speedSampler.lastSecondKBps;\n            if (KBps === 0) {\n                this._zeroSpeedChunkCount++;\n                if (this._zeroSpeedChunkCount >= 3) {\n                    // Try get currentKBps after 3 chunks\n                    KBps = this._speedSampler.currentKBps;\n                }\n            }\n\n            if (KBps !== 0) {\n                var normalized = this._normalizeSpeed(KBps);\n                if (this._currentSpeedNormalized !== normalized) {\n                    this._currentSpeedNormalized = normalized;\n                    this._currentChunkSizeKB = normalized;\n                }\n            }\n\n            var chunk = e.target.response;\n            var byteStart = this._range.from + this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            var reportComplete = false;\n\n            if (this._contentLength != null && this._receivedLength < this._contentLength) {\n                // continue load next chunk\n                this._openSubRange();\n            } else {\n                reportComplete = true;\n            }\n\n            // dispatch received chunk\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n\n            if (reportComplete) {\n                this._status = _loader.LoaderStatus.kComplete;\n                if (this._onComplete) {\n                    this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n                }\n            }\n        }\n    }, {\n        key: '_onXhrError',\n        value: function _onXhrError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'RangeLoader meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EXCEPTION;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }, {\n        key: 'currentSpeed',\n        get: function get() {\n            return this._speedSampler.lastSecondKBps;\n        }\n    }]);\n\n    return RangeLoader;\n}(_loader.BaseLoader);\n\nexports.default = RangeLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24,\"./speed-sampler.js\":27}],32:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _playerEvents = _dereq_('./player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _transmuxer = _dereq_('../core/transmuxer.js');\n\nvar _transmuxer2 = _interopRequireDefault(_transmuxer);\n\nvar _transmuxingEvents = _dereq_('../core/transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _mseController = _dereq_('../core/mse-controller.js');\n\nvar _mseController2 = _interopRequireDefault(_mseController);\n\nvar _mseEvents = _dereq_('../core/mse-events.js');\n\nvar _mseEvents2 = _interopRequireDefault(_mseEvents);\n\nvar _playerErrors = _dereq_('./player-errors.js');\n\nvar _config = _dereq_('../config.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlvPlayer = function () {\n    function FlvPlayer(mediaDataSource, config) {\n        _classCallCheck(this, FlvPlayer);\n\n        this.TAG = 'FlvPlayer';\n        this._type = 'FlvPlayer';\n        this._emitter = new _events2.default();\n\n        this._config = (0, _config.createDefaultConfig)();\n        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() !== 'flv') {\n            throw new _exception.InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');\n        }\n\n        if (mediaDataSource.isLive === true) {\n            this._config.isLive = true;\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n            onvSeeking: this._onvSeeking.bind(this),\n            onvCanPlay: this._onvCanPlay.bind(this),\n            onvStalled: this._onvStalled.bind(this),\n            onvProgress: this._onvProgress.bind(this)\n        };\n\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n\n        this._pendingSeekTime = null; // in seconds\n        this._requestSetTime = false;\n        this._seekpointRecord = null;\n        this._progressChecker = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n        this._msectl = null;\n        this._transmuxer = null;\n\n        this._mseSourceOpened = false;\n        this._hasPendingLoad = false;\n        this._receivedCanPlay = false;\n\n        this._mediaInfo = null;\n        this._statisticsInfo = null;\n\n        var chromeNeedIDRFix = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661);\n        this._alwaysSeekKeyframe = chromeNeedIDRFix || _browser2.default.msedge || _browser2.default.msie ? true : false;\n\n        if (this._alwaysSeekKeyframe) {\n            this._config.accurateSeek = false;\n        }\n\n        this.callbackStreamTime = null;\n        this._mediaSourceEndCallback = null;\n    }\n\n    _createClass(FlvPlayer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._progressChecker != null) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n            }\n            if (this._transmuxer) {\n                this.unload();\n            }\n            if (this._mediaElement) {\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._mediaDataSource = null;\n\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n\n            this.callbackStreamTime = null;\n            this._mediaSourceEndCallback = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            var _this = this;\n\n            if (event === _playerEvents2.default.MEDIA_INFO) {\n                if (this._mediaInfo != null) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);\n                    });\n                }\n            } else if (event === _playerEvents2.default.STATISTICS_INFO) {\n                if (this._statisticsInfo != null) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);\n                    });\n                }\n            }\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            var _this2 = this;\n\n            this._mediaElement = mediaElement;\n            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            //mediaElement.addEventListener('seeking', this.e.onvSeeking);\n            mediaElement.addEventListener('canplay', this.e.onvCanPlay);\n            mediaElement.addEventListener('stalled', this.e.onvStalled);\n            //mediaElement.addEventListener('progress', this.e.onvProgress);\n\n            this._msectl = new _mseController2.default(this._config);\n\n            this._msectl.on(_mseEvents2.default.UPDATE_END, this._onmseUpdateEnd.bind(this));\n            this._msectl.on(_mseEvents2.default.BUFFER_FULL, this._onmseBufferFull.bind(this));\n            this._msectl.on(_mseEvents2.default.SOURCE_OPEN, function () {\n                _this2._mseSourceOpened = true;\n                if (_this2._hasPendingLoad) {\n                    _this2._hasPendingLoad = false;\n                    _this2.load();\n                }\n            });\n            this._msectl.on(_mseEvents2.default.ERROR, function (info) {\n                _this2._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_MSE_ERROR, info);\n            });\n            this._msectl.on(_mseEvents2.default.SOURCE_END, function (info) {\n                if (_this2._mediaSourceEndCallback != null) {\n                    _this2._mediaSourceEndCallback(info);\n                }\n            });\n\n            this._msectl.attachMediaElement(mediaElement);\n\n            if (this._pendingSeekTime != null) {\n                try {\n                    mediaElement.currentTime = this._pendingSeekTime;\n                    this._pendingSeekTime = null;\n                } catch (e) {\n                    // IE11 may throw InvalidStateError if readyState === 0\n                    // We can defer set currentTime operation after loadedmetadata\n                }\n            }\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaElement) {\n                this._msectl.detachMediaElement();\n                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n                //this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);\n                this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n                this._mediaElement.removeEventListener('stalled', this.e.onvStalled);\n                //this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n                this._mediaElement = null;\n            }\n            if (this._msectl) {\n                this._msectl.destroy();\n                this._msectl = null;\n            }\n        }\n    }, {\n        key: 'load',\n        value: function load() {\n            var _this3 = this;\n\n            if (!this._mediaElement) {\n                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');\n            }\n            if (this._transmuxer) {\n                throw new _exception.IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');\n            }\n            if (this._hasPendingLoad) {\n                return;\n            }\n\n            if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {\n                this._hasPendingLoad = true;\n                return;\n            }\n\n            if (this._mediaElement.readyState > 0) {\n                this._requestSetTime = true;\n                // IE11 may throw InvalidStateError if readyState === 0\n                this._mediaElement.currentTime = 0;\n            }\n\n            this._transmuxer = new _transmuxer2.default(this._mediaDataSource, this._config);\n\n            this._transmuxer.on(_transmuxingEvents2.default.INIT_SEGMENT, function (type, is) {\n                _this3._msectl.appendInitSegment(is);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_SEGMENT, function (type, ms) {\n                _this3._msectl.appendMediaSegment(ms);\n\n                // lazyLoad check\n                if (_this3._config.lazyLoad && !_this3._config.isLive) {\n                    var currentTime = _this3._mediaElement.currentTime;\n                    if (ms.info.endDts >= (currentTime + _this3._config.lazyLoadMaxDuration) * 1000) {\n                        if (_this3._progressChecker == null) {\n                            _logger2.default.v(_this3.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                            _this3._suspendTransmuxer();\n                        }\n                    }\n                }\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.LOADING_COMPLETE, function () {\n                _this3._msectl.endOfStream();\n                _this3._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, function () {\n                _this3._emitter.emit(_playerEvents2.default.RECOVERED_EARLY_EOF);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.IO_ERROR, function (detail, info) {\n                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.DEMUX_ERROR, function (detail, info) {\n                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_INFO, function (mediaInfo) {\n                _this3._mediaInfo = mediaInfo;\n                _this3._emitter.emit(_playerEvents2.default.MEDIA_INFO, Object.assign({}, mediaInfo));\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.METADATA_ARRIVED, function (metadata) {\n                _this3._emitter.emit(_playerEvents2.default.METADATA_ARRIVED, metadata);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, function (data) {\n                _this3._emitter.emit(_playerEvents2.default.SCRIPTDATA_ARRIVED, data);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.STATISTICS_INFO, function (statInfo) {\n                _this3._statisticsInfo = _this3._fillStatisticsInfo(statInfo);\n                _this3._emitter.emit(_playerEvents2.default.STATISTICS_INFO, Object.assign({}, _this3._statisticsInfo));\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, function (milliseconds) {\n                if (_this3._mediaElement && !_this3._config.accurateSeek) {\n                    _this3._requestSetTime = true;\n                    _this3._mediaElement.currentTime = milliseconds / 1000;\n                }\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.STREAM_TIME, function (ts) {\n                _this3._receiveStreamTime(ts);\n            });\n\n            this._transmuxer.open();\n        }\n    }, {\n        key: 'unload',\n        value: function unload() {\n            if (this._mediaElement) {\n                this._mediaElement.pause();\n            }\n            if (this._msectl) {\n                this._msectl.seek(0);\n            }\n            if (this._transmuxer) {\n                this._transmuxer.close();\n                this._transmuxer.destroy();\n                this._transmuxer = null;\n            }\n        }\n    }, {\n        key: 'play',\n        value: function play() {\n            return this._mediaElement.play();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._mediaElement.pause();\n        }\n    }, {\n        key: '_fillStatisticsInfo',\n        value: function _fillStatisticsInfo(statInfo) {\n            statInfo.playerType = this._type;\n\n            if (!(this._mediaElement instanceof HTMLVideoElement)) {\n                return statInfo;\n            }\n\n            var hasQualityInfo = true;\n            var decoded = 0;\n            var dropped = 0;\n\n            if (this._mediaElement.getVideoPlaybackQuality) {\n                var quality = this._mediaElement.getVideoPlaybackQuality();\n                decoded = quality.totalVideoFrames;\n                dropped = quality.droppedVideoFrames;\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n                decoded = this._mediaElement.webkitDecodedFrameCount;\n                dropped = this._mediaElement.webkitDroppedFrameCount;\n            } else {\n                hasQualityInfo = false;\n            }\n\n            if (hasQualityInfo) {\n                statInfo.decodedFrames = decoded;\n                statInfo.droppedFrames = dropped;\n            }\n\n            return statInfo;\n        }\n    }, {\n        key: '_onmseUpdateEnd',\n        value: function _onmseUpdateEnd() {\n            if (!this._config.lazyLoad || this._config.isLive) {\n                return;\n            }\n\n            var buffered = this._mediaElement.buffered;\n            var currentTime = this._mediaElement.currentTime;\n            var currentRangeStart = 0;\n            var currentRangeEnd = 0;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var start = buffered.start(i);\n                var end = buffered.end(i);\n                if (start <= currentTime && currentTime < end) {\n                    currentRangeStart = start;\n                    currentRangeEnd = end;\n                    break;\n                }\n            }\n\n            if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {\n                _logger2.default.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                this._suspendTransmuxer();\n            }\n        }\n    }, {\n        key: '_onmseBufferFull',\n        value: function _onmseBufferFull() {\n            _logger2.default.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');\n            if (this._progressChecker == null) {\n                this._suspendTransmuxer();\n            }\n        }\n    }, {\n        key: '_suspendTransmuxer',\n        value: function _suspendTransmuxer() {\n            if (this._transmuxer) {\n                this._transmuxer.pause();\n\n                if (this._progressChecker == null) {\n                    this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);\n                }\n            }\n        }\n    }, {\n        key: '_checkProgressAndResume',\n        value: function _checkProgressAndResume() {\n            var currentTime = this._mediaElement.currentTime;\n            var buffered = this._mediaElement.buffered;\n\n            var needResume = false;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var from = buffered.start(i);\n                var to = buffered.end(i);\n                if (currentTime >= from && currentTime < to) {\n                    if (currentTime >= to - this._config.lazyLoadRecoverDuration) {\n                        needResume = true;\n                    }\n                    break;\n                }\n            }\n\n            if (needResume) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n                if (needResume) {\n                    _logger2.default.v(this.TAG, 'Continue loading from paused position');\n                    this._transmuxer.resume();\n                }\n            }\n        }\n    }, {\n        key: '_isTimepointBuffered',\n        value: function _isTimepointBuffered(seconds) {\n            var buffered = this._mediaElement.buffered;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var from = buffered.start(i);\n                var to = buffered.end(i);\n                if (seconds >= from && seconds < to) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: '_internalSeek',\n        value: function _internalSeek(seconds) {\n            var directSeek = this._isTimepointBuffered(seconds);\n\n            var directSeekBegin = false;\n            var directSeekBeginTime = 0;\n\n            if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {\n                var videoBeginTime = this._mediaElement.buffered.start(0);\n                if (videoBeginTime < 1.0 && seconds < videoBeginTime || _browser2.default.safari) {\n                    directSeekBegin = true;\n                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                    directSeekBeginTime = _browser2.default.safari ? 0.1 : videoBeginTime;\n                }\n            }\n\n            if (directSeekBegin) {\n                // seek to video begin, set currentTime directly if beginPTS buffered\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = directSeekBeginTime;\n            } else if (directSeek) {\n                // buffered position\n                if (!this._alwaysSeekKeyframe) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = seconds;\n                } else {\n                    var idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));\n                    this._requestSetTime = true;\n                    if (idr != null) {\n                        this._mediaElement.currentTime = idr.dts / 1000;\n                    } else {\n                        this._mediaElement.currentTime = seconds;\n                    }\n                }\n                if (this._progressChecker != null) {\n                    this._checkProgressAndResume();\n                }\n            } else {\n                if (this._progressChecker != null) {\n                    window.clearInterval(this._progressChecker);\n                    this._progressChecker = null;\n                }\n                this._msectl.seek(seconds);\n                this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds\n                // no need to set mediaElement.currentTime if non-accurateSeek,\n                // just wait for the recommend_seekpoint callback\n                if (this._config.accurateSeek) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = seconds;\n                }\n            }\n        }\n    }, {\n        key: '_checkAndApplyUnbufferedSeekpoint',\n        value: function _checkAndApplyUnbufferedSeekpoint() {\n            if (this._seekpointRecord) {\n                if (this._seekpointRecord.recordTime <= this._now() - 100) {\n                    var target = this._mediaElement.currentTime;\n                    this._seekpointRecord = null;\n                    if (!this._isTimepointBuffered(target)) {\n                        if (this._progressChecker != null) {\n                            window.clearTimeout(this._progressChecker);\n                            this._progressChecker = null;\n                        }\n                        // .currentTime is consists with .buffered timestamp\n                        // Chrome/Edge use DTS, while FireFox/Safari use PTS\n                        this._msectl.seek(target);\n                        this._transmuxer.seek(Math.floor(target * 1000));\n                        // set currentTime if accurateSeek, or wait for recommend_seekpoint callback\n                        if (this._config.accurateSeek) {\n                            this._requestSetTime = true;\n                            this._mediaElement.currentTime = target;\n                        }\n                    }\n                } else {\n                    window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n                }\n            }\n        }\n    }, {\n        key: '_checkAndResumeStuckPlayback',\n        value: function _checkAndResumeStuckPlayback(stalled) {\n            var media = this._mediaElement;\n            if (stalled || !this._receivedCanPlay || media.readyState < 2) {\n                // HAVE_CURRENT_DATA\n                var buffered = media.buffered;\n                if (buffered.length > 0 && media.currentTime < buffered.start(0)) {\n                    _logger2.default.w(this.TAG, 'Playback seems stuck at ' + media.currentTime + ', seek to ' + buffered.start(0));\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = buffered.start(0);\n                    this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n                }\n            } else {\n                // Playback didn't stuck, remove progress event listener\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            }\n        }\n    }, {\n        key: '_onvLoadedMetadata',\n        value: function _onvLoadedMetadata(e) {\n            if (this._pendingSeekTime != null) {\n                this._mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            }\n        }\n    }, {\n        key: '_onvSeeking',\n        value: function _onvSeeking(e) {\n            // handle seeking request from browser's progress bar\n            var target = this._mediaElement.currentTime;\n            var buffered = this._mediaElement.buffered;\n\n            if (this._requestSetTime) {\n                this._requestSetTime = false;\n                return;\n            }\n\n            if (target < 1.0 && buffered.length > 0) {\n                // seek to video begin, set currentTime directly if beginPTS buffered\n                var videoBeginTime = buffered.start(0);\n                if (videoBeginTime < 1.0 && target < videoBeginTime || _browser2.default.safari) {\n                    this._requestSetTime = true;\n                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                    this._mediaElement.currentTime = _browser2.default.safari ? 0.1 : videoBeginTime;\n                    return;\n                }\n            }\n\n            if (this._isTimepointBuffered(target)) {\n                if (this._alwaysSeekKeyframe) {\n                    var idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));\n                    if (idr != null) {\n                        this._requestSetTime = true;\n                        this._mediaElement.currentTime = idr.dts / 1000;\n                    }\n                }\n                if (this._progressChecker != null) {\n                    this._checkProgressAndResume();\n                }\n                return;\n            }\n\n            this._seekpointRecord = {\n                seekPoint: target,\n                recordTime: this._now()\n            };\n            window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n        }\n    }, {\n        key: '_onvCanPlay',\n        value: function _onvCanPlay(e) {\n            this._receivedCanPlay = true;\n            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n        }\n    }, {\n        key: '_onvStalled',\n        value: function _onvStalled(e) {\n            this._checkAndResumeStuckPlayback(true);\n        }\n    }, {\n        key: '_onvProgress',\n        value: function _onvProgress(e) {\n            this._checkAndResumeStuckPlayback();\n        }\n    }, {\n        key: 'setMediaSourceEndCallback',\n        value: function setMediaSourceEndCallback(call) {\n            this._mediaSourceEndCallback = call;\n        }\n    }, {\n        key: 'setStreamTimeCallback',\n        value: function setStreamTimeCallback(call) {\n            this.callbackStreamTime = call;\n        }\n    }, {\n        key: '_receiveStreamTime',\n        value: function _receiveStreamTime(ts) {\n            if (this.callbackStreamTime != null) {\n                this.callbackStreamTime(ts);\n            }\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'buffered',\n        get: function get() {\n            return this._mediaElement.buffered;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this._mediaElement.duration;\n        }\n    }, {\n        key: 'volume',\n        get: function get() {\n            return this._mediaElement.volume;\n        },\n        set: function set(value) {\n            this._mediaElement.volume = value;\n        }\n    }, {\n        key: 'muted',\n        get: function get() {\n            return this._mediaElement.muted;\n        },\n        set: function set(muted) {\n            this._mediaElement.muted = muted;\n        }\n    }, {\n        key: 'currentTime',\n        get: function get() {\n            if (this._mediaElement) {\n                return this._mediaElement.currentTime;\n            }\n            return 0;\n        },\n        set: function set(seconds) {\n            if (this._mediaElement) {\n                this._internalSeek(seconds);\n            } else {\n                this._pendingSeekTime = seconds;\n            }\n        }\n    }, {\n        key: 'mediaInfo',\n        get: function get() {\n            return Object.assign({}, this._mediaInfo);\n        }\n    }, {\n        key: 'statisticsInfo',\n        get: function get() {\n            if (this._statisticsInfo == null) {\n                this._statisticsInfo = {};\n            }\n            this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);\n            return Object.assign({}, this._statisticsInfo);\n        }\n    }]);\n\n    return FlvPlayer;\n}();\n\nexports.default = FlvPlayer;\n\n},{\"../config.js\":5,\"../core/mse-controller.js\":9,\"../core/mse-events.js\":10,\"../core/transmuxer.js\":11,\"../core/transmuxing-events.js\":13,\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./player-errors.js\":34,\"./player-events.js\":35,\"events\":2}],33:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _playerEvents = _dereq_('./player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _config = _dereq_('../config.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \nvar NativePlayer = function () {\n    function NativePlayer(mediaDataSource, config) {\n        _classCallCheck(this, NativePlayer);\n\n        this.TAG = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new _events2.default();\n\n        this._config = (0, _config.createDefaultConfig)();\n        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\n            throw new _exception.InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n        }\n        if (mediaDataSource.hasOwnProperty('segments')) {\n            throw new _exception.InvalidArgumentException('NativePlayer(' + mediaDataSource.type + ') doesn\\'t support multipart playback!');\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReporter = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n    }\n\n    _createClass(NativePlayer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._mediaElement) {\n                this.unload();\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._mediaDataSource = null;\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            var _this = this;\n\n            if (event === _playerEvents2.default.MEDIA_INFO) {\n                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                    // HAVE_NOTHING\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);\n                    });\n                }\n            } else if (event === _playerEvents2.default.STATISTICS_INFO) {\n                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);\n                    });\n                }\n            }\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            this._mediaElement = mediaElement;\n            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n            if (this._pendingSeekTime != null) {\n                try {\n                    mediaElement.currentTime = this._pendingSeekTime;\n                    this._pendingSeekTime = null;\n                } catch (e) {\n                    // IE11 may throw InvalidStateError if readyState === 0\n                    // Defer set currentTime operation after loadedmetadata\n                }\n            }\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n                this._mediaElement = null;\n            }\n            if (this._statisticsReporter != null) {\n                window.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: 'load',\n        value: function load() {\n            if (!this._mediaElement) {\n                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');\n            }\n            this._mediaElement.src = this._mediaDataSource.url;\n\n            if (this._mediaElement.readyState > 0) {\n                this._mediaElement.currentTime = 0;\n            }\n\n            this._mediaElement.preload = 'auto';\n            this._mediaElement.load();\n            this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n        }\n    }, {\n        key: 'unload',\n        value: function unload() {\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n            }\n            if (this._statisticsReporter != null) {\n                window.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: 'play',\n        value: function play() {\n            return this._mediaElement.play();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._mediaElement.pause();\n        }\n    }, {\n        key: '_onvLoadedMetadata',\n        value: function _onvLoadedMetadata(e) {\n            if (this._pendingSeekTime != null) {\n                this._mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            }\n            this._emitter.emit(_playerEvents2.default.MEDIA_INFO, this.mediaInfo);\n        }\n    }, {\n        key: '_reportStatisticsInfo',\n        value: function _reportStatisticsInfo() {\n            this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, this.statisticsInfo);\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'buffered',\n        get: function get() {\n            return this._mediaElement.buffered;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this._mediaElement.duration;\n        }\n    }, {\n        key: 'volume',\n        get: function get() {\n            return this._mediaElement.volume;\n        },\n        set: function set(value) {\n            this._mediaElement.volume = value;\n        }\n    }, {\n        key: 'muted',\n        get: function get() {\n            return this._mediaElement.muted;\n        },\n        set: function set(muted) {\n            this._mediaElement.muted = muted;\n        }\n    }, {\n        key: 'currentTime',\n        get: function get() {\n            if (this._mediaElement) {\n                return this._mediaElement.currentTime;\n            }\n            return 0;\n        },\n        set: function set(seconds) {\n            if (this._mediaElement) {\n                this._mediaElement.currentTime = seconds;\n            } else {\n                this._pendingSeekTime = seconds;\n            }\n        }\n    }, {\n        key: 'mediaInfo',\n        get: function get() {\n            var mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n            var info = {\n                mimeType: mediaPrefix + this._mediaDataSource.type\n            };\n            if (this._mediaElement) {\n                info.duration = Math.floor(this._mediaElement.duration * 1000);\n                if (this._mediaElement instanceof HTMLVideoElement) {\n                    info.width = this._mediaElement.videoWidth;\n                    info.height = this._mediaElement.videoHeight;\n                }\n            }\n            return info;\n        }\n    }, {\n        key: 'statisticsInfo',\n        get: function get() {\n            var info = {\n                playerType: this._type,\n                url: this._mediaDataSource.url\n            };\n\n            if (!(this._mediaElement instanceof HTMLVideoElement)) {\n                return info;\n            }\n\n            var hasQualityInfo = true;\n            var decoded = 0;\n            var dropped = 0;\n\n            if (this._mediaElement.getVideoPlaybackQuality) {\n                var quality = this._mediaElement.getVideoPlaybackQuality();\n                decoded = quality.totalVideoFrames;\n                dropped = quality.droppedVideoFrames;\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n                decoded = this._mediaElement.webkitDecodedFrameCount;\n                dropped = this._mediaElement.webkitDroppedFrameCount;\n            } else {\n                hasQualityInfo = false;\n            }\n\n            if (hasQualityInfo) {\n                info.decodedFrames = decoded;\n                info.droppedFrames = dropped;\n            }\n\n            return info;\n        }\n    }]);\n\n    return NativePlayer;\n}();\n\nexports.default = NativePlayer;\n\n},{\"../config.js\":5,\"../utils/exception.js\":40,\"./player-events.js\":35,\"events\":2}],34:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ErrorDetails = exports.ErrorTypes = undefined;\n\nvar _loader = _dereq_('../io/loader.js');\n\nvar _demuxErrors = _dereq_('../demux/demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ErrorTypes = exports.ErrorTypes = {\n    NETWORK_ERROR: 'NetworkError',\n    MEDIA_ERROR: 'MediaError',\n    OTHER_ERROR: 'OtherError'\n};\n\nvar ErrorDetails = exports.ErrorDetails = {\n    NETWORK_EXCEPTION: _loader.LoaderErrors.EXCEPTION,\n    NETWORK_STATUS_CODE_INVALID: _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID,\n    NETWORK_TIMEOUT: _loader.LoaderErrors.CONNECTING_TIMEOUT,\n    NETWORK_UNRECOVERABLE_EARLY_EOF: _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF,\n\n    MEDIA_MSE_ERROR: 'MediaMSEError',\n\n    MEDIA_FORMAT_ERROR: _demuxErrors2.default.FORMAT_ERROR,\n    MEDIA_FORMAT_UNSUPPORTED: _demuxErrors2.default.FORMAT_UNSUPPORTED,\n    MEDIA_CODEC_UNSUPPORTED: _demuxErrors2.default.CODEC_UNSUPPORTED\n};\n\n},{\"../demux/demux-errors.js\":16,\"../io/loader.js\":24}],35:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PlayerEvents = {\n  ERROR: 'error',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  METADATA_ARRIVED: 'metadata_arrived',\n  SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n  STATISTICS_INFO: 'statistics_info'\n};\n\nexports.default = PlayerEvents;\n\n},{}],36:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar AAC = function () {\n    function AAC() {\n        _classCallCheck(this, AAC);\n    }\n\n    _createClass(AAC, null, [{\n        key: 'getSilentFrame',\n        value: function getSilentFrame(codec, channelCount) {\n            if (codec === 'mp4a.40.2') {\n                // handle LC-AAC\n                if (channelCount === 1) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n                } else if (channelCount === 2) {\n                    return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n                } else if (channelCount === 3) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n                } else if (channelCount === 4) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n                } else if (channelCount === 5) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n                } else if (channelCount === 6) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n                }\n            } else {\n                // handle HE-AAC (mp4a.40.5 / mp4a.40.29)\n                if (channelCount === 1) {\n                    // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n                } else if (channelCount === 2) {\n                    // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n                } else if (channelCount === 3) {\n                    // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n                }\n            }\n            return null;\n        }\n    }]);\n\n    return AAC;\n}();\n\nexports.default = AAC;\n\n},{}],37:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nvar MP4 = function () {\n    function MP4() {\n        _classCallCheck(this, MP4);\n    }\n\n    _createClass(MP4, null, [{\n        key: 'init',\n        value: function init() {\n            MP4.types = {\n                avc1: [], avcC: [], btrt: [], dinf: [],\n                dref: [], esds: [], ftyp: [], hdlr: [],\n                mdat: [], mdhd: [], mdia: [], mfhd: [],\n                minf: [], moof: [], moov: [], mp4a: [],\n                mvex: [], mvhd: [], sdtp: [], stbl: [],\n                stco: [], stsc: [], stsd: [], stsz: [],\n                stts: [], tfdt: [], tfhd: [], traf: [],\n                trak: [], trun: [], trex: [], tkhd: [],\n                vmhd: [], smhd: [], '.mp3': []\n            };\n\n            for (var name in MP4.types) {\n                if (MP4.types.hasOwnProperty(name)) {\n                    MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n                }\n            }\n\n            var constants = MP4.constants = {};\n\n            constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\n            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D, // isom\n            0x61, 0x76, 0x63, 0x31 // avc1\n            ]);\n\n            constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01 // entry_count\n            ]);\n\n            constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // entry_count\n            ]);\n\n            constants.STSC = constants.STCO = constants.STTS;\n\n            constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00 // sample_count\n            ]);\n\n            constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler\n            ]);\n\n            constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler\n            ]);\n\n            constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01, // entry_count\n            0x00, 0x00, 0x00, 0x0C, // entry_size\n            0x75, 0x72, 0x6C, 0x20, // type 'url '\n            0x00, 0x00, 0x00, 0x01 // version(0) + flags\n            ]);\n\n            // Sound media header\n            constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)\n            ]);\n\n            // video media header\n            constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags\n            0x00, 0x00, // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes\n            0x00, 0x00]);\n        }\n\n        // Generate a box\n\n    }, {\n        key: 'box',\n        value: function box(type) {\n            var size = 8;\n            var result = null;\n            var datas = Array.prototype.slice.call(arguments, 1);\n            var arrayCount = datas.length;\n\n            for (var i = 0; i < arrayCount; i++) {\n                size += datas[i].byteLength;\n            }\n\n            result = new Uint8Array(size);\n            result[0] = size >>> 24 & 0xFF; // size\n            result[1] = size >>> 16 & 0xFF;\n            result[2] = size >>> 8 & 0xFF;\n            result[3] = size & 0xFF;\n\n            result.set(type, 4); // type\n\n            var offset = 8;\n            for (var _i = 0; _i < arrayCount; _i++) {\n                // data body\n                result.set(datas[_i], offset);\n                offset += datas[_i].byteLength;\n            }\n\n            return result;\n        }\n\n        // emit ftyp & moov\n\n    }, {\n        key: 'generateInitSegment',\n        value: function generateInitSegment(meta) {\n            var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n            var moov = MP4.moov(meta);\n\n            var result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n            result.set(ftyp, 0);\n            result.set(moov, ftyp.byteLength);\n            return result;\n        }\n\n        // Movie metadata box\n\n    }, {\n        key: 'moov',\n        value: function moov(meta) {\n            var mvhd = MP4.mvhd(meta.timescale, meta.duration);\n            var trak = MP4.trak(meta);\n            var mvex = MP4.mvex(meta);\n            return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n        }\n\n        // Movie header box\n\n    }, {\n        key: 'mvhd',\n        value: function mvhd(timescale, duration) {\n            return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID\n            ]));\n        }\n\n        // Track box\n\n    }, {\n        key: 'trak',\n        value: function trak(meta) {\n            return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n        }\n\n        // Track header box\n\n    }, {\n        key: 'tkhd',\n        value: function tkhd(meta) {\n            var trackId = meta.id,\n                duration = meta.duration;\n            var width = meta.presentWidth,\n                height = meta.presentHeight;\n\n            return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            trackId >>> 24 & 0xFF, // track_ID: 4 bytes\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n            duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            width >>> 8 & 0xFF, // width and height\n            width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));\n        }\n\n        // Media Box\n\n    }, {\n        key: 'mdia',\n        value: function mdia(meta) {\n            return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n        }\n\n        // Media header box\n\n    }, {\n        key: 'mdhd',\n        value: function mdhd(meta) {\n            var timescale = meta.timescale;\n            var duration = meta.duration;\n            return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)\n            0x00, 0x00 // pre_defined = 0\n            ]));\n        }\n\n        // Media handler reference box\n\n    }, {\n        key: 'hdlr',\n        value: function hdlr(meta) {\n            var data = null;\n            if (meta.type === 'audio') {\n                data = MP4.constants.HDLR_AUDIO;\n            } else {\n                data = MP4.constants.HDLR_VIDEO;\n            }\n            return MP4.box(MP4.types.hdlr, data);\n        }\n\n        // Media infomation box\n\n    }, {\n        key: 'minf',\n        value: function minf(meta) {\n            var xmhd = null;\n            if (meta.type === 'audio') {\n                xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n            } else {\n                xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n            }\n            return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n        }\n\n        // Data infomation box\n\n    }, {\n        key: 'dinf',\n        value: function dinf() {\n            var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));\n            return result;\n        }\n\n        // Sample table box\n\n    }, {\n        key: 'stbl',\n        value: function stbl(meta) {\n            var result = MP4.box(MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO // Chunk offset\n            ));\n            return result;\n        }\n\n        // Sample description box\n\n    }, {\n        key: 'stsd',\n        value: function stsd(meta) {\n            if (meta.type === 'audio') {\n                if (meta.codec === 'mp3') {\n                    return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n                }\n                // else: aac -> mp4a\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n            } else {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n            }\n        }\n    }, {\n        key: 'mp3',\n        value: function mp3(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4)\n            sampleRate >>> 8 & 0xFF, // Audio sample rate\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types['.mp3'], data);\n        }\n    }, {\n        key: 'mp4a',\n        value: function mp4a(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4)\n            sampleRate >>> 8 & 0xFF, // Audio sample rate\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n        }\n    }, {\n        key: 'esds',\n        value: function esds(meta) {\n            var config = meta.config || [];\n            var configSize = config.length;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags\n\n            0x03, // descriptor_type\n            0x17 + configSize, // length3\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type\n            0x0F + configSize, // length\n            0x40, // codec: mpeg4_audio\n            0x15, // stream_type: Audio\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05 // descriptor_type\n            ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig\n            ]));\n            return MP4.box(MP4.types.esds, data);\n        }\n    }, {\n        key: 'avc1',\n        value: function avc1(meta) {\n            var avcc = meta.avcc;\n            var width = meta.codecWidth,\n                height = meta.codecHeight;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes\n            width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes\n            height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n            0x00, 0x01, // frame_count\n            0x0A, // strlen\n            0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth\n            0xFF, 0xFF // pre_defined = -1\n            ]);\n            return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n        }\n\n        // Movie Extends box\n\n    }, {\n        key: 'mvex',\n        value: function mvex(meta) {\n            return MP4.box(MP4.types.mvex, MP4.trex(meta));\n        }\n\n        // Track Extends box\n\n    }, {\n        key: 'trex',\n        value: function trex(meta) {\n            var trackId = meta.id;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\n            ]);\n            return MP4.box(MP4.types.trex, data);\n        }\n\n        // Movie fragment box\n\n    }, {\n        key: 'moof',\n        value: function moof(track, baseMediaDecodeTime) {\n            return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n        }\n    }, {\n        key: 'mfhd',\n        value: function mfhd(sequenceNumber) {\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32\n            sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);\n            return MP4.box(MP4.types.mfhd, data);\n        }\n\n        // Track fragment box\n\n    }, {\n        key: 'traf',\n        value: function traf(track, baseMediaDecodeTime) {\n            var trackId = track.id;\n\n            // Track fragment header box\n            var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF]));\n            // Track Fragment Decode Time\n            var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32\n            baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));\n            var sdtp = MP4.sdtp(track);\n            var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n            return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n        }\n\n        // Sample Dependency Type box\n\n    }, {\n        key: 'sdtp',\n        value: function sdtp(track) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var data = new Uint8Array(4 + sampleCount);\n            // 0~4 bytes: version(0) & flags\n            for (var i = 0; i < sampleCount; i++) {\n                var flags = samples[i].flags;\n                data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)\n                flags.dependsOn << 4 // sample_depends_on\n                | flags.isDependedOn << 2 // sample_is_depended_on\n                | flags.hasRedundancy; // sample_has_redundancy\n            }\n            return MP4.box(MP4.types.sdtp, data);\n        }\n\n        // Track fragment run box\n\n    }, {\n        key: 'trun',\n        value: function trun(track, offset) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var dataSize = 12 + 16 * sampleCount;\n            var data = new Uint8Array(dataSize);\n            offset += 8 + dataSize;\n\n            data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n            sampleCount >>> 24 & 0xFF, // sample_count\n            sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset\n            offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);\n\n            for (var i = 0; i < sampleCount; i++) {\n                var duration = samples[i].duration;\n                var size = samples[i].size;\n                var flags = samples[i].flags;\n                var cts = samples[i].cts;\n                data.set([duration >>> 24 & 0xFF, // sample_duration\n                duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size\n                size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags\n                flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority\n                cts >>> 24 & 0xFF, // sample_composition_time_offset\n                cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);\n            }\n            return MP4.box(MP4.types.trun, data);\n        }\n    }, {\n        key: 'mdat',\n        value: function mdat(data) {\n            return MP4.box(MP4.types.mdat, data);\n        }\n    }]);\n\n    return MP4;\n}();\n\nMP4.init();\n\nexports.default = MP4;\n\n},{}],38:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _mp4Generator = _dereq_('./mp4-generator.js');\n\nvar _mp4Generator2 = _interopRequireDefault(_mp4Generator);\n\nvar _aacSilent = _dereq_('./aac-silent.js');\n\nvar _aacSilent2 = _interopRequireDefault(_aacSilent);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mediaSegmentInfo = _dereq_('../core/media-segment-info.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Fragmented mp4 remuxer\nvar MP4Remuxer = function () {\n    function MP4Remuxer(config) {\n        _classCallCheck(this, MP4Remuxer);\n\n        this.TAG = 'MP4Remuxer';\n\n        this._config = config;\n        this._isLive = config.isLive === true ? true : false;\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n        this._audioStashedLastSample = null;\n        this._videoStashedLastSample = null;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661) ? true : false;\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = _browser2.default.msedge || _browser2.default.msie;\n\n        // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n        this._mp3UseMpegAudio = !_browser2.default.firefox;\n\n        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;\n    }\n\n    _createClass(MP4Remuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._dtsBase = -1;\n            this._dtsBaseInited = false;\n            this._audioMeta = null;\n            this._videoMeta = null;\n            this._audioSegmentInfoList.clear();\n            this._audioSegmentInfoList = null;\n            this._videoSegmentInfoList.clear();\n            this._videoSegmentInfoList = null;\n            this._onInitSegment = null;\n            this._onMediaSegment = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(producer) {\n            producer.onDataAvailable = this.remux.bind(this);\n            producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n            return this;\n        }\n\n        /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\r\n           InitSegment: {\r\n               type: string,\r\n               data: ArrayBuffer,\r\n               codec: string,\r\n               container: string\r\n           }\r\n        */\n\n    }, {\n        key: 'insertDiscontinuity',\n        value: function insertDiscontinuity() {\n            this._audioNextDts = this._videoNextDts = undefined;\n        }\n    }, {\n        key: 'seek',\n        value: function seek(originalDts) {\n            this._audioStashedLastSample = null;\n            this._videoStashedLastSample = null;\n            this._videoSegmentInfoList.clear();\n            this._audioSegmentInfoList.clear();\n        }\n    }, {\n        key: 'remux',\n        value: function remux(audioTrack, videoTrack) {\n            if (!this._onMediaSegment) {\n                throw new _exception.IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n            }\n            if (!this._dtsBaseInited) {\n                this._calculateDtsBase(audioTrack, videoTrack);\n            }\n            this._remuxVideo(videoTrack);\n            this._remuxAudio(audioTrack);\n        }\n    }, {\n        key: '_onTrackMetadataReceived',\n        value: function _onTrackMetadataReceived(type, metadata) {\n            var metabox = null;\n\n            var container = 'mp4';\n            var codec = metadata.codec;\n\n            if (type === 'audio') {\n                this._audioMeta = metadata;\n                if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\n                    // 'audio/mpeg' for MP3 audio track\n                    container = 'mpeg';\n                    codec = '';\n                    metabox = new Uint8Array();\n                } else {\n                    // 'audio/mp4, codecs=\"codec\"'\n                    metabox = _mp4Generator2.default.generateInitSegment(metadata);\n                }\n            } else if (type === 'video') {\n                this._videoMeta = metadata;\n                metabox = _mp4Generator2.default.generateInitSegment(metadata);\n            } else {\n                return;\n            }\n\n            // dispatch metabox (Initialization Segment)\n            if (!this._onInitSegment) {\n                throw new _exception.IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n            }\n            this._onInitSegment(type, {\n                type: type,\n                data: metabox.buffer,\n                codec: codec,\n                container: type + '/' + container,\n                mediaDuration: metadata.duration // in timescale 1000 (milliseconds)\n            });\n        }\n    }, {\n        key: '_calculateDtsBase',\n        value: function _calculateDtsBase(audioTrack, videoTrack) {\n            if (this._dtsBaseInited) {\n                return;\n            }\n\n            if (audioTrack.samples && audioTrack.samples.length) {\n                this._audioDtsBase = audioTrack.samples[0].dts;\n            }\n            if (videoTrack.samples && videoTrack.samples.length) {\n                this._videoDtsBase = videoTrack.samples[0].dts;\n            }\n\n            this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n            this._dtsBaseInited = true;\n        }\n    }, {\n        key: 'flushStashedSamples',\n        value: function flushStashedSamples() {\n            var videoSample = this._videoStashedLastSample;\n            var audioSample = this._audioStashedLastSample;\n\n            var videoTrack = {\n                type: 'video',\n                id: 1,\n                sequenceNumber: 0,\n                samples: [],\n                length: 0\n            };\n\n            if (videoSample != null) {\n                videoTrack.samples.push(videoSample);\n                videoTrack.length = videoSample.length;\n            }\n\n            var audioTrack = {\n                type: 'audio',\n                id: 2,\n                sequenceNumber: 0,\n                samples: [],\n                length: 0\n            };\n\n            if (audioSample != null) {\n                audioTrack.samples.push(audioSample);\n                audioTrack.length = audioSample.length;\n            }\n\n            this._videoStashedLastSample = null;\n            this._audioStashedLastSample = null;\n\n            this._remuxVideo(videoTrack, true);\n            this._remuxAudio(audioTrack, true);\n        }\n    }, {\n        key: '_remuxAudio',\n        value: function _remuxAudio(audioTrack, force) {\n            if (this._audioMeta == null) {\n                return;\n            }\n\n            var track = audioTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1,\n                lastPts = -1;\n            var refSampleDuration = this._audioMeta.refSampleDuration;\n\n            var mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\n            var firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\n\n            var insertPrefixSilentFrame = false;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n            if (samples.length === 1 && !force) {\n                // If [sample count in current batch] === 1 && (force != true)\n                // Ignore and keep in demuxer's queue\n                return;\n            } // else if (force === true) do remux\n\n            var offset = 0;\n            var mdatbox = null;\n            var mdatBytes = 0;\n\n            // calculate initial mdat size\n            if (mpegRawTrack) {\n                // for raw mpeg buffer\n                offset = 0;\n                mdatBytes = track.length;\n            } else {\n                // for fmp4 mdat box\n                offset = 8; // size + type\n                mdatBytes = 8 + track.length;\n            }\n\n            var lastSample = null;\n\n            // Pop the lastSample and waiting for stash\n            if (samples.length > 1) {\n                lastSample = samples.pop();\n                mdatBytes -= lastSample.length;\n            }\n\n            // Insert [stashed lastSample in the previous batch] to the front\n            if (this._audioStashedLastSample != null) {\n                var sample = this._audioStashedLastSample;\n                this._audioStashedLastSample = null;\n                samples.unshift(sample);\n                mdatBytes += sample.length;\n            }\n\n            // Stash the lastSample of current batch, waiting for next batch\n            if (lastSample != null) {\n                this._audioStashedLastSample = lastSample;\n            }\n\n            var firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n            // calculate dtsCorrection\n            if (this._audioNextDts) {\n                dtsCorrection = firstSampleOriginalDts - this._audioNextDts;\n            } else {\n                // this._audioNextDts == undefined\n                if (this._audioSegmentInfoList.isEmpty()) {\n                    dtsCorrection = 0;\n                    if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                        if (this._audioMeta.originalCodec !== 'mp3') {\n                            insertPrefixSilentFrame = true;\n                        }\n                    }\n                } else {\n                    var _lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                    if (_lastSample != null) {\n                        var distance = firstSampleOriginalDts - (_lastSample.originalDts + _lastSample.duration);\n                        if (distance <= 3) {\n                            distance = 0;\n                        }\n                        var expectedDts = _lastSample.dts + _lastSample.duration + distance;\n                        dtsCorrection = firstSampleOriginalDts - expectedDts;\n                    } else {\n                        // lastSample == null, cannot found\n                        dtsCorrection = 0;\n                    }\n                }\n            }\n\n            if (insertPrefixSilentFrame) {\n                // align audio segment beginDts to match with current video segment's beginDts\n                var firstSampleDts = firstSampleOriginalDts - dtsCorrection;\n                var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);\n                if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {\n                    var silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                    if (silentUnit) {\n                        var dts = videoSegment.beginDts;\n                        var silentFrameDuration = firstSampleDts - videoSegment.beginDts;\n                        _logger2.default.v(this.TAG, 'InsertPrefixSilentAudio: dts: ' + dts + ', duration: ' + silentFrameDuration);\n                        samples.unshift({ unit: silentUnit, dts: dts, pts: dts });\n                        mdatBytes += silentUnit.byteLength;\n                    } // silentUnit == null: Cannot generate, skip\n                } else {\n                    insertPrefixSilentFrame = false;\n                }\n            }\n\n            var mp4Samples = [];\n\n            // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n            for (var i = 0; i < samples.length; i++) {\n                var _sample = samples[i];\n                var unit = _sample.unit;\n                var originalDts = _sample.dts - this._dtsBase;\n                var _dts = originalDts;\n                var needFillSilentFrames = false;\n                var silentFrames = null;\n                var sampleDuration = 0;\n\n                if (originalDts < -0.001) {\n                    continue; //pass the first sample with the invalid dts\n                }\n\n                if (this._audioMeta.codec !== 'mp3') {\n                    // for AAC codec, we need to keep dts increase based on refSampleDuration\n                    var curRefDts = originalDts;\n                    var maxAudioFramesDrift = 3;\n                    if (this._audioNextDts) {\n                        curRefDts = this._audioNextDts;\n                    }\n\n                    dtsCorrection = originalDts - curRefDts;\n                    if (dtsCorrection <= -maxAudioFramesDrift * refSampleDuration) {\n                        // If we're overlapping by more than maxAudioFramesDrift number of frame, drop this sample\n                        //Log.w(this.TAG, `Dropping 1 audio frame (originalDts: ${originalDts} ms ,curRefDts: ${curRefDts} ms)  due to dtsCorrection: ${dtsCorrection} ms overlap.`);\n                        continue;\n                    } else if (dtsCorrection >= maxAudioFramesDrift * refSampleDuration && this._fillAudioTimestampGap && !_browser2.default.safari) {\n                        // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap\n                        needFillSilentFrames = true;\n                        // We need to insert silent frames to fill timestamp gap\n                        var frameCount = Math.floor(dtsCorrection / refSampleDuration);\n                        _logger2.default.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' + 'Silent frames will be generated to avoid unsync.\\n' + ('originalDts: ' + originalDts + ' ms, curRefDts: ' + curRefDts + ' ms, ') + ('dtsCorrection: ' + Math.round(dtsCorrection) + ' ms, generate: ' + frameCount + ' frames'));\n\n                        _dts = Math.floor(curRefDts);\n                        sampleDuration = Math.floor(curRefDts + refSampleDuration) - _dts;\n\n                        var _silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                        if (_silentUnit == null) {\n                            _logger2.default.w(this.TAG, 'Unable to generate silent frame for ' + (this._audioMeta.originalCodec + ' with ' + this._audioMeta.channelCount + ' channels, repeat last frame'));\n                            // Repeat last frame\n                            _silentUnit = unit;\n                        }\n                        silentFrames = [];\n\n                        for (var j = 0; j < frameCount; j++) {\n                            curRefDts = curRefDts + refSampleDuration;\n                            var intDts = Math.floor(curRefDts); // change to integer\n                            var intDuration = Math.floor(curRefDts + refSampleDuration) - intDts;\n                            var frame = {\n                                dts: intDts,\n                                pts: intDts,\n                                cts: 0,\n                                unit: _silentUnit,\n                                size: _silentUnit.byteLength,\n                                duration: intDuration, // wait for next sample\n                                originalDts: originalDts,\n                                flags: {\n                                    isLeading: 0,\n                                    dependsOn: 1,\n                                    isDependedOn: 0,\n                                    hasRedundancy: 0\n                                }\n                            };\n                            silentFrames.push(frame);\n                            mdatBytes += frame.size;\n                        }\n\n                        this._audioNextDts = curRefDts + refSampleDuration;\n                    } else {\n\n                        _dts = Math.floor(curRefDts);\n                        sampleDuration = Math.floor(curRefDts + refSampleDuration) - _dts;\n                        this._audioNextDts = curRefDts + refSampleDuration;\n                    }\n                } else {\n                    // keep the original dts calculate algorithm for mp3\n                    _dts = originalDts - dtsCorrection;\n\n                    if (i !== samples.length - 1) {\n                        var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                        sampleDuration = nextDts - _dts;\n                    } else {\n                        // the last sample\n                        if (lastSample != null) {\n                            // use stashed sample's dts to calculate sample duration\n                            var _nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n                            sampleDuration = _nextDts - _dts;\n                        } else if (mp4Samples.length >= 1) {\n                            // use second last sample duration\n                            sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                        } else {\n                            // the only one sample, use reference sample duration\n                            sampleDuration = Math.floor(refSampleDuration);\n                        }\n                    }\n                    this._audioNextDts = _dts + sampleDuration;\n                }\n\n                if (firstDts === -1) {\n                    firstDts = _dts;\n                }\n                mp4Samples.push({\n                    dts: _dts,\n                    pts: _dts,\n                    cts: 0,\n                    unit: _sample.unit,\n                    size: _sample.unit.byteLength,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: 1,\n                        isDependedOn: 0,\n                        hasRedundancy: 0\n                    }\n                });\n\n                if (needFillSilentFrames) {\n                    // Silent frames should be inserted after wrong-duration frame\n                    mp4Samples.push.apply(mp4Samples, silentFrames);\n                }\n            }\n\n            if (mp4Samples.length === 0) {\n                //no samples need to remux\n                track.samples = [];\n                track.length = 0;\n                return;\n            }\n\n            // allocate mdatbox\n            if (mpegRawTrack) {\n                // allocate for raw mpeg buffer\n                mdatbox = new Uint8Array(mdatBytes);\n            } else {\n                // allocate for fmp4 mdat box\n                mdatbox = new Uint8Array(mdatBytes);\n                // size field\n                mdatbox[0] = mdatBytes >>> 24 & 0xFF;\n                mdatbox[1] = mdatBytes >>> 16 & 0xFF;\n                mdatbox[2] = mdatBytes >>> 8 & 0xFF;\n                mdatbox[3] = mdatBytes & 0xFF;\n                // type field (fourCC)\n                mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n            }\n\n            // Write samples into mdatbox\n            for (var _i = 0; _i < mp4Samples.length; _i++) {\n                var _unit = mp4Samples[_i].unit;\n                mdatbox.set(_unit, offset);\n                offset += _unit.byteLength;\n            }\n\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            //this._audioNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstDts;\n            info.endPts = lastDts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);\n            if (!this._isLive) {\n                this._audioSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber++;\n\n            var moofbox = null;\n\n            if (mpegRawTrack) {\n                // Generate empty buffer, because useless for raw mpeg\n                moofbox = new Uint8Array();\n            } else {\n                // Generate moof for fmp4 segment\n                moofbox = _mp4Generator2.default.moof(track, firstDts);\n            }\n\n            track.samples = [];\n            track.length = 0;\n\n            var segment = {\n                type: 'audio',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            };\n\n            if (mpegRawTrack && firstSegmentAfterSeek) {\n                // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\n                // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                segment.timestampOffset = firstDts;\n            }\n\n            this._onMediaSegment('audio', segment);\n        }\n    }, {\n        key: '_remuxVideo',\n        value: function _remuxVideo(videoTrack, force) {\n            if (this._videoMeta == null) {\n                return;\n            }\n\n            var track = videoTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1;\n            var firstPts = -1,\n                lastPts = -1;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n            if (samples.length === 1 && !force) {\n                // If [sample count in current batch] === 1 && (force != true)\n                // Ignore and keep in demuxer's queue\n                return;\n            } // else if (force === true) do remux\n\n            var offset = 8;\n            var mdatbox = null;\n            var mdatBytes = 8 + videoTrack.length;\n\n            var lastSample = null;\n\n            // Pop the lastSample and waiting for stash\n            if (samples.length > 1) {\n                lastSample = samples.pop();\n                mdatBytes -= lastSample.length;\n            }\n\n            // Insert [stashed lastSample in the previous batch] to the front\n            if (this._videoStashedLastSample != null) {\n                var sample = this._videoStashedLastSample;\n                this._videoStashedLastSample = null;\n                samples.unshift(sample);\n                mdatBytes += sample.length;\n            }\n\n            // Stash the lastSample of current batch, waiting for next batch\n            if (lastSample != null) {\n                this._videoStashedLastSample = lastSample;\n            }\n\n            var firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n            // calculate dtsCorrection\n            if (this._videoNextDts) {\n                dtsCorrection = firstSampleOriginalDts - this._videoNextDts;\n            } else {\n                // this._videoNextDts == undefined\n                if (this._videoSegmentInfoList.isEmpty()) {\n                    dtsCorrection = 0;\n                } else {\n                    var _lastSample2 = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                    if (_lastSample2 != null) {\n                        var distance = firstSampleOriginalDts - (_lastSample2.originalDts + _lastSample2.duration);\n                        if (distance <= 3) {\n                            distance = 0;\n                        }\n                        var expectedDts = _lastSample2.dts + _lastSample2.duration + distance;\n                        dtsCorrection = firstSampleOriginalDts - expectedDts;\n                    } else {\n                        // lastSample == null, cannot found\n                        dtsCorrection = 0;\n                    }\n                }\n            }\n\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n            var mp4Samples = [];\n\n            // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n            for (var i = 0; i < samples.length; i++) {\n                var _sample2 = samples[i];\n                var originalDts = _sample2.dts - this._dtsBase;\n                var isKeyframe = _sample2.isKeyframe;\n                var dts = originalDts - dtsCorrection;\n                var cts = _sample2.cts;\n                var pts = dts + cts;\n\n                if (firstDts === -1) {\n                    firstDts = dts;\n                    firstPts = pts;\n                }\n\n                var sampleDuration = 0;\n\n                if (i !== samples.length - 1) {\n                    var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else {\n                    // the last sample\n                    if (lastSample != null) {\n                        // use stashed sample's dts to calculate sample duration\n                        var _nextDts2 = lastSample.dts - this._dtsBase - dtsCorrection;\n                        sampleDuration = _nextDts2 - dts;\n                    } else if (mp4Samples.length >= 1) {\n                        // use second last sample duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else {\n                        // the only one sample, use reference sample duration\n                        sampleDuration = Math.floor(this._videoMeta.refSampleDuration);\n                    }\n                }\n\n                if (isKeyframe) {\n                    var syncPoint = new _mediaSegmentInfo.SampleInfo(dts, pts, sampleDuration, _sample2.dts, true);\n                    syncPoint.fileposition = _sample2.fileposition;\n                    info.appendSyncPoint(syncPoint);\n                }\n\n                mp4Samples.push({\n                    dts: dts,\n                    pts: pts,\n                    cts: cts,\n                    units: _sample2.units,\n                    size: _sample2.length,\n                    isKeyframe: isKeyframe,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: isKeyframe ? 2 : 1,\n                        isDependedOn: isKeyframe ? 1 : 0,\n                        hasRedundancy: 0,\n                        isNonSync: isKeyframe ? 0 : 1\n                    }\n                });\n            }\n\n            // allocate mdatbox\n            mdatbox = new Uint8Array(mdatBytes);\n            mdatbox[0] = mdatBytes >>> 24 & 0xFF;\n            mdatbox[1] = mdatBytes >>> 16 & 0xFF;\n            mdatbox[2] = mdatBytes >>> 8 & 0xFF;\n            mdatbox[3] = mdatBytes & 0xFF;\n            mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n\n            // Write samples into mdatbox\n            for (var _i2 = 0; _i2 < mp4Samples.length; _i2++) {\n                var units = mp4Samples[_i2].units;\n                while (units.length) {\n                    var unit = units.shift();\n                    var data = unit.data;\n                    mdatbox.set(data, offset);\n                    offset += data.byteLength;\n                }\n            }\n\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            lastPts = latest.pts + latest.duration;\n            this._videoNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstPts;\n            info.endPts = lastPts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);\n            if (!this._isLive) {\n                this._videoSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber++;\n\n            // workaround for chrome < 50: force first sample as a random access point\n            // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n            if (this._forceFirstIDR) {\n                var flags = mp4Samples[0].flags;\n                flags.dependsOn = 2;\n                flags.isNonSync = 0;\n            }\n\n            var moofbox = _mp4Generator2.default.moof(track, firstDts);\n            track.samples = [];\n            track.length = 0;\n\n            this._onMediaSegment('video', {\n                type: 'video',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            });\n        }\n    }, {\n        key: '_mergeBoxes',\n        value: function _mergeBoxes(moof, mdat) {\n            var result = new Uint8Array(moof.byteLength + mdat.byteLength);\n            result.set(moof, 0);\n            result.set(mdat, moof.byteLength);\n            return result;\n        }\n    }, {\n        key: 'onInitSegment',\n        get: function get() {\n            return this._onInitSegment;\n        },\n        set: function set(callback) {\n            this._onInitSegment = callback;\n        }\n\n        /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\r\n           MediaSegment: {\r\n               type: string,\r\n               data: ArrayBuffer,\r\n               sampleCount: int32\r\n               info: MediaSegmentInfo\r\n           }\r\n        */\n\n    }, {\n        key: 'onMediaSegment',\n        get: function get() {\n            return this._onMediaSegment;\n        },\n        set: function set(callback) {\n            this._onMediaSegment = callback;\n        }\n    }]);\n\n    return MP4Remuxer;\n}();\n\nexports.default = MP4Remuxer;\n\n},{\"../core/media-segment-info.js\":8,\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./aac-silent.js\":36,\"./mp4-generator.js\":37}],39:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    var ua = self.navigator.userAgent.toLowerCase();\n\n    var match = /(edge)\\/([\\w.]+)/.exec(ua) || /(opr)[\\/]([\\w.]+)/.exec(ua) || /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(iemobile)[\\/]([\\w.]+)/.exec(ua) || /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(firefox)[ \\/]([\\w.]+)/.exec(ua) || [];\n\n    var platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(android)/.exec(ua) || /(windows)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || [];\n\n    var matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    var browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        var versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        var msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        var msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        var opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        var android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (var key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexports.default = Browser;\n\n},{}],40:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RuntimeException = exports.RuntimeException = function () {\n    function RuntimeException(message) {\n        _classCallCheck(this, RuntimeException);\n\n        this._message = message;\n    }\n\n    _createClass(RuntimeException, [{\n        key: 'toString',\n        value: function toString() {\n            return this.name + ': ' + this.message;\n        }\n    }, {\n        key: 'name',\n        get: function get() {\n            return 'RuntimeException';\n        }\n    }, {\n        key: 'message',\n        get: function get() {\n            return this._message;\n        }\n    }]);\n\n    return RuntimeException;\n}();\n\nvar IllegalStateException = exports.IllegalStateException = function (_RuntimeException) {\n    _inherits(IllegalStateException, _RuntimeException);\n\n    function IllegalStateException(message) {\n        _classCallCheck(this, IllegalStateException);\n\n        return _possibleConstructorReturn(this, (IllegalStateException.__proto__ || Object.getPrototypeOf(IllegalStateException)).call(this, message));\n    }\n\n    _createClass(IllegalStateException, [{\n        key: 'name',\n        get: function get() {\n            return 'IllegalStateException';\n        }\n    }]);\n\n    return IllegalStateException;\n}(RuntimeException);\n\nvar InvalidArgumentException = exports.InvalidArgumentException = function (_RuntimeException2) {\n    _inherits(InvalidArgumentException, _RuntimeException2);\n\n    function InvalidArgumentException(message) {\n        _classCallCheck(this, InvalidArgumentException);\n\n        return _possibleConstructorReturn(this, (InvalidArgumentException.__proto__ || Object.getPrototypeOf(InvalidArgumentException)).call(this, message));\n    }\n\n    _createClass(InvalidArgumentException, [{\n        key: 'name',\n        get: function get() {\n            return 'InvalidArgumentException';\n        }\n    }]);\n\n    return InvalidArgumentException;\n}(RuntimeException);\n\nvar NotImplementedException = exports.NotImplementedException = function (_RuntimeException3) {\n    _inherits(NotImplementedException, _RuntimeException3);\n\n    function NotImplementedException(message) {\n        _classCallCheck(this, NotImplementedException);\n\n        return _possibleConstructorReturn(this, (NotImplementedException.__proto__ || Object.getPrototypeOf(NotImplementedException)).call(this, message));\n    }\n\n    _createClass(NotImplementedException, [{\n        key: 'name',\n        get: function get() {\n            return 'NotImplementedException';\n        }\n    }]);\n\n    return NotImplementedException;\n}(RuntimeException);\n\n},{}],41:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Log = function () {\n    function Log() {\n        _classCallCheck(this, Log);\n    }\n\n    _createClass(Log, null, [{\n        key: 'e',\n        value: function e(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'error', str);\n            }\n\n            if (!Log.ENABLE_ERROR) {\n                return;\n            }\n\n            if (console.error) {\n                console.error(str);\n            } else if (console.warn) {\n                console.warn(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'i',\n        value: function i(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'info', str);\n            }\n\n            if (!Log.ENABLE_INFO) {\n                return;\n            }\n\n            if (console.info) {\n                console.info(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'w',\n        value: function w(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'warn', str);\n            }\n\n            if (!Log.ENABLE_WARN) {\n                return;\n            }\n\n            if (console.warn) {\n                console.warn(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'd',\n        value: function d(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'debug', str);\n            }\n\n            if (!Log.ENABLE_DEBUG) {\n                return;\n            }\n\n            if (console.debug) {\n                console.debug(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'v',\n        value: function v(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'verbose', str);\n            }\n\n            if (!Log.ENABLE_VERBOSE) {\n                return;\n            }\n\n            console.log(str);\n        }\n    }]);\n\n    return Log;\n}();\n\nLog.GLOBAL_TAG = 'flv.js';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nLog.ENABLE_CALLBACK = false;\n\nLog.emitter = new _events2.default();\n\nexports.default = Log;\n\n},{\"events\":2}],42:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('./logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoggingControl = function () {\n    function LoggingControl() {\n        _classCallCheck(this, LoggingControl);\n    }\n\n    _createClass(LoggingControl, null, [{\n        key: 'getConfig',\n        value: function getConfig() {\n            return {\n                globalTag: _logger2.default.GLOBAL_TAG,\n                forceGlobalTag: _logger2.default.FORCE_GLOBAL_TAG,\n                enableVerbose: _logger2.default.ENABLE_VERBOSE,\n                enableDebug: _logger2.default.ENABLE_DEBUG,\n                enableInfo: _logger2.default.ENABLE_INFO,\n                enableWarn: _logger2.default.ENABLE_WARN,\n                enableError: _logger2.default.ENABLE_ERROR,\n                enableCallback: _logger2.default.ENABLE_CALLBACK\n            };\n        }\n    }, {\n        key: 'applyConfig',\n        value: function applyConfig(config) {\n            _logger2.default.GLOBAL_TAG = config.globalTag;\n            _logger2.default.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n            _logger2.default.ENABLE_VERBOSE = config.enableVerbose;\n            _logger2.default.ENABLE_DEBUG = config.enableDebug;\n            _logger2.default.ENABLE_INFO = config.enableInfo;\n            _logger2.default.ENABLE_WARN = config.enableWarn;\n            _logger2.default.ENABLE_ERROR = config.enableError;\n            _logger2.default.ENABLE_CALLBACK = config.enableCallback;\n        }\n    }, {\n        key: '_notifyChange',\n        value: function _notifyChange() {\n            var emitter = LoggingControl.emitter;\n\n            if (emitter.listenerCount('change') > 0) {\n                var config = LoggingControl.getConfig();\n                emitter.emit('change', config);\n            }\n        }\n    }, {\n        key: 'registerListener',\n        value: function registerListener(listener) {\n            LoggingControl.emitter.addListener('change', listener);\n        }\n    }, {\n        key: 'removeListener',\n        value: function removeListener(listener) {\n            LoggingControl.emitter.removeListener('change', listener);\n        }\n    }, {\n        key: 'addLogListener',\n        value: function addLogListener(listener) {\n            _logger2.default.emitter.addListener('log', listener);\n            if (_logger2.default.emitter.listenerCount('log') > 0) {\n                _logger2.default.ENABLE_CALLBACK = true;\n                LoggingControl._notifyChange();\n            }\n        }\n    }, {\n        key: 'removeLogListener',\n        value: function removeLogListener(listener) {\n            _logger2.default.emitter.removeListener('log', listener);\n            if (_logger2.default.emitter.listenerCount('log') === 0) {\n                _logger2.default.ENABLE_CALLBACK = false;\n                LoggingControl._notifyChange();\n            }\n        }\n    }, {\n        key: 'forceGlobalTag',\n        get: function get() {\n            return _logger2.default.FORCE_GLOBAL_TAG;\n        },\n        set: function set(enable) {\n            _logger2.default.FORCE_GLOBAL_TAG = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'globalTag',\n        get: function get() {\n            return _logger2.default.GLOBAL_TAG;\n        },\n        set: function set(tag) {\n            _logger2.default.GLOBAL_TAG = tag;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableAll',\n        get: function get() {\n            return _logger2.default.ENABLE_VERBOSE && _logger2.default.ENABLE_DEBUG && _logger2.default.ENABLE_INFO && _logger2.default.ENABLE_WARN && _logger2.default.ENABLE_ERROR;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_VERBOSE = enable;\n            _logger2.default.ENABLE_DEBUG = enable;\n            _logger2.default.ENABLE_INFO = enable;\n            _logger2.default.ENABLE_WARN = enable;\n            _logger2.default.ENABLE_ERROR = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableDebug',\n        get: function get() {\n            return _logger2.default.ENABLE_DEBUG;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_DEBUG = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableVerbose',\n        get: function get() {\n            return _logger2.default.ENABLE_VERBOSE;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_VERBOSE = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableInfo',\n        get: function get() {\n            return _logger2.default.ENABLE_INFO;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_INFO = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableWarn',\n        get: function get() {\n            return _logger2.default.ENABLE_WARN;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_WARN = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableError',\n        get: function get() {\n            return _logger2.default.ENABLE_ERROR;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_ERROR = enable;\n            LoggingControl._notifyChange();\n        }\n    }]);\n\n    return LoggingControl;\n}();\n\nLoggingControl.emitter = new _events2.default();\n\nexports.default = LoggingControl;\n\n},{\"./logger.js\":41,\"events\":2}],43:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar Polyfill = function () {\n    function Polyfill() {\n        _classCallCheck(this, Polyfill);\n    }\n\n    _createClass(Polyfill, null, [{\n        key: 'install',\n        value: function install() {\n            // ES6 Object.setPrototypeOf\n            Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {\n                obj.__proto__ = proto;\n                return obj;\n            };\n\n            // ES6 Object.assign\n            Object.assign = Object.assign || function (target) {\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert undefined or null to object');\n                }\n\n                var output = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var source = arguments[i];\n                    if (source !== undefined && source !== null) {\n                        for (var key in source) {\n                            if (source.hasOwnProperty(key)) {\n                                output[key] = source[key];\n                            }\n                        }\n                    }\n                }\n                return output;\n            };\n\n            // ES6 Promise (missing support in IE11)\n            if (typeof self.Promise !== 'function') {\n                _dereq_('es6-promise').polyfill();\n            }\n        }\n    }]);\n\n    return Polyfill;\n}();\n\nPolyfill.install();\n\nexports.default = Polyfill;\n\n},{\"es6-promise\":1}],44:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    var array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80) return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction decodeUTF8(uint8array) {\n    var out = [];\n    var input = uint8array;\n    var i = 0;\n    var length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(_ucs & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;\n                if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {\n                    _ucs2 -= 0x10000;\n                    out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));\n                    out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nexports.default = decodeUTF8;\n\n},{}]},{},[21])(21)\n});\n\n//# sourceMappingURL=flv.js.map\n","/*\nmp3编码器用到的lamejs编码引擎，一般都用MP3格式，浏览器支持广泛，此引擎测试的也比较多，稳定\nhttps://github.com/xiangyuecn/Recorder\n*/\n(function(){\n\"use strict\";\n\n//end2 ****开始copy lamejs*****\n/*\nmp3编码依赖lamejs，如果无需mp3支持直接移除此代码\nhttps://github.com/zhuker/lamejs/blob/bfb7f6c6d7877e0fe1ad9e72697a871676119a0e/lame.all.js\n*/\n\nfunction lamejs() {\nvar Math_log10=function(s){//坚决不能用也不要报语言问题的错误\n\treturn Math.log(s)/Math.log(10);\n};\n\nfunction new_byte(count) {\n    return new Int8Array(count);\n}\n\nfunction new_short(count) {\n    return new Int16Array(count);\n}\n\nfunction new_int(count) {\n    return new Int32Array(count);\n}\n\nfunction new_float(count) {\n    return new Float32Array(count);\n}\n\nfunction new_double(count) {\n    return new Float64Array(count);\n}\n\nfunction new_float_n(args) {\n    if (args.length == 1) {\n        return new_float(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n    }\n    return A;\n}\nfunction new_int_n(args) {\n    if (args.length == 1) {\n        return new_int(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n    }\n    return A;\n}\n\nfunction new_short_n(args) {\n    if (args.length == 1) {\n        return new_short(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n    }\n    return A;\n}\n\nfunction new_array_n(args) {\n    if (args.length == 1) {\n        return new Array(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n    }\n    return A;\n}\n\n\nvar Arrays = {};\n\nArrays.fill = function (a, fromIndex, toIndex, val) {\n    if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n            a[i] = arguments[1];\n        }\n    } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n            a[i] = val;\n        }\n    }\n};\n\nvar System = {};\n\nSystem.arraycopy = function (src, srcPos, dest, destPos, length) {\n    var srcEnd = srcPos + length;\n    while (srcPos < srcEnd)\n        dest[destPos++] = src[srcPos++];\n};\n\n\nvar Util = {};\nUtil.SQRT2 = 1.41421356237309504880;\nUtil.FAST_LOG10 = function (x) {\n    return Math_log10(x);\n};\n\nUtil.FAST_LOG10_X = function (x, y) {\n    return Math_log10(x) * y;\n};\n\nfunction ShortBlock(ordinal) {\n    this.ordinal = ordinal;\n}\n/**\n * LAME may use them, even different block types for L/R.\n */\nShortBlock.short_block_allowed = new ShortBlock(0);\n/**\n * LAME may use them, but always same block types in L/R.\n */\nShortBlock.short_block_coupled = new ShortBlock(1);\n/**\n * LAME will not use short blocks, long blocks only.\n */\nShortBlock.short_block_dispensed = new ShortBlock(2);\n/**\n * LAME will not use long blocks, short blocks only.\n */\nShortBlock.short_block_forced = new ShortBlock(3);\n\nvar Float = {};\nFloat.MAX_VALUE = 3.4028235e+38;\n\nfunction VbrMode(ordinal) {\n    this.ordinal = ordinal;\n}\nVbrMode.vbr_off = new VbrMode(0);\nVbrMode.vbr_mt = new VbrMode(1);\nVbrMode.vbr_rh = new VbrMode(2);\nVbrMode.vbr_abr = new VbrMode(3);\nVbrMode.vbr_mtrh = new VbrMode(4);\nVbrMode.vbr_default = VbrMode.vbr_mtrh;\n\nvar assert = function (x) {\n    //console.assert(x);\n};\n\nvar module_exports = {\n    \"System\": System,\n    \"VbrMode\": VbrMode,\n    \"Float\": Float,\n    \"ShortBlock\": ShortBlock,\n    \"Util\": Util,\n    \"Arrays\": Arrays,\n    \"new_array_n\": new_array_n,\n    \"new_byte\": new_byte,\n    \"new_double\": new_double,\n    \"new_float\": new_float,\n    \"new_float_n\": new_float_n,\n    \"new_int\": new_int,\n    \"new_int_n\": new_int_n,\n    \"new_short\": new_short,\n    \"new_short_n\": new_short_n,\n    \"assert\": assert\n};\n//package mp3;\n\n/* MPEG modes */\nfunction MPEGMode(ordinal) {\n    var _ordinal = ordinal;\n    this.ordinal = function () {\n        return _ordinal;\n    }\n}\n\nMPEGMode.STEREO = new MPEGMode(0);\nMPEGMode.JOINT_STEREO = new MPEGMode(1);\nMPEGMode.DUAL_CHANNEL = new MPEGMode(2);\nMPEGMode.MONO = new MPEGMode(3);\nMPEGMode.NOT_SET = new MPEGMode(4);\n\nfunction Version() {\n\n    /**\n     * URL for the LAME website.\n     */\n    var LAME_URL = \"http://www.mp3dev.org/\";\n\n    /**\n     * Major version number.\n     */\n    var LAME_MAJOR_VERSION = 3;\n    /**\n     * Minor version number.\n     */\n    var LAME_MINOR_VERSION = 98;\n    /**\n     * Patch level.\n     */\n    var LAME_PATCH_VERSION = 4;\n\n    /**\n     * Major version number.\n     */\n    var PSY_MAJOR_VERSION = 0;\n    /**\n     * Minor version number.\n     */\n    var PSY_MINOR_VERSION = 93;\n\n    /**\n     * A string which describes the version of LAME.\n     *\n     * @return string which describes the version of LAME\n     */\n    this.getLameVersion = function () {\n        // primary to write screen reports\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The short version of the LAME version string.\n     *\n     * @return short version of the LAME version string\n     */\n    this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The shortest version of the LAME version string.\n     *\n     * @return shortest version of the LAME version string\n     */\n    this.getLameVeryShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        return (\"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\");\n    }\n\n    /**\n     * String which describes the version of GPSYCHO\n     *\n     * @return string which describes the version of GPSYCHO\n     */\n    this.getPsyVersion = function () {\n        return (PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION);\n    }\n\n    /**\n     * String which is a URL for the LAME website.\n     *\n     * @return string which is a URL for the LAME website\n     */\n    this.getLameUrl = function () {\n        return LAME_URL;\n    }\n\n    /**\n     * Quite useless for a java version, however we are compatible ;-)\n     *\n     * @return \"32bits\"\n     */\n    this.getLameOsBitness = function () {\n        return \"32bits\";\n    }\n\n}\n\n/*\n *\tMP3 huffman table selecting and bit counting\n *\n *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\n *\tCopyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\n\nfunction Takehiro() {\n\n    var qupvt = null;\n    this.qupvt = null;\n\n    this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n    }\n\n    function Bits(b) {\n        this.bits = 0 | b;\n    }\n\n    var subdv_table = [[0, 0], /* 0 bands */\n        [0, 0], /* 1 bands */\n        [0, 0], /* 2 bands */\n        [0, 0], /* 3 bands */\n        [0, 0], /* 4 bands */\n        [0, 1], /* 5 bands */\n        [1, 1], /* 6 bands */\n        [1, 1], /* 7 bands */\n        [1, 2], /* 8 bands */\n        [2, 2], /* 9 bands */\n        [2, 3], /* 10 bands */\n        [2, 3], /* 11 bands */\n        [3, 4], /* 12 bands */\n        [3, 4], /* 13 bands */\n        [3, 4], /* 14 bands */\n        [4, 5], /* 15 bands */\n        [4, 5], /* 16 bands */\n        [4, 6], /* 17 bands */\n        [5, 6], /* 18 bands */\n        [5, 6], /* 19 bands */\n        [5, 7], /* 20 bands */\n        [6, 7], /* 21 bands */\n        [6, 7], /* 22 bands */\n    ];\n\n\n    /**\n     * nonlinear quantization of xr More accurate formula than the ISO formula.\n     * Takes into account the fact that we are quantizing xr . ix, but we want\n     * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\n     * mean ix is as close as possible to xr, which is different.)\n     *\n     * From Segher Boessenkool <segher@eastsite.nl> 11/1999\n     *\n     * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\n     * If you need the ASM code, check CVS circa Aug 2000.\n     *\n     * 01/2004: Optimizations by Gabriel Bouvigne\n     */\n    function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n\n        l = l >> 1;\n        while ((l--) != 0) {\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n        }\n    }\n\n    /**\n     * XRPOW_FTOI is a macro to convert floats to ints.<BR>\n     * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\n     * ROUNDFAC= -0.0946<BR>\n     *\n     * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\n     * ROUNDFAC=0.4054<BR>\n     *\n     * Note: using floor() or 0| is extremely slow. On machines where the\n     * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\n     * some ASM for XRPOW_FTOI().\n     */\n    function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n            var x0, x1, x2, x3;\n            var rx0, rx1, rx2, rx3;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            x2 = xr[xrPos++] * istep;\n            rx1 = 0 | x1;\n            x3 = xr[xrPos++] * istep;\n            rx2 = 0 | x2;\n            x0 += qupvt.adj43[rx0];\n            rx3 = 0 | x3;\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            x2 += qupvt.adj43[rx2];\n            ix[ixPos++] = 0 | x1;\n            x3 += qupvt.adj43[rx3];\n            ix[ixPos++] = 0 | x2;\n            ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n            var x0, x1;\n            var rx0, rx1;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            rx1 = 0 | x1;\n            x0 += qupvt.adj43[rx0];\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            ix[ixPos++] = 0 | x1;\n        }\n    }\n\n    /**\n     * Quantization function This function will select which lines to quantize\n     * and call the proper quantization function\n     */\n    function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */\n        var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0;\n\n        /*\n         * Reusing previously computed data does not seems to work if global\n         * gain is changed. Finding why it behaves this way would allow to use a\n         * cache of previously computed values (let's 10 cached values per sfb)\n         * that would probably provide a noticeable speedup\n         */\n        prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\n\n        if (codInfo.block_type == Encoder.SHORT_TYPE)\n            sfbmax = 38;\n        else\n            sfbmax = 21;\n\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n            var step = -1;\n\n            if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n                step = codInfo.global_gain\n                    - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\n                        : 0)) << (codInfo.scalefac_scale + 1))\n                    - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n            }\n            if (prev_data_use && (prevNoise.step[sfb] == step)) {\n                /*\n                 * do not recompute this part, but compute accumulated lines\n                 */\n                if (accumulate != 0) {\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                        acc_iData, acc_iDataPos);\n                    accumulate = 0;\n                }\n                if (accumulate01 != 0) {\n                    quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                        acc_xpPos, acc_iData, acc_iDataPos);\n                    accumulate01 = 0;\n                }\n            } else { /* should compute this part */\n                var l = codInfo.width[sfb];\n\n                if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\n                    /* do not compute upper zero part */\n                    var usefullsize;\n                    usefullsize = codInfo.max_nonzero_coeff - j + 1;\n                    Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n                    l = usefullsize;\n\n                    if (l < 0) {\n                        l = 0;\n                    }\n\n                    /* no need to compute higher sfb values */\n                    sfb = sfbmax + 1;\n                }\n\n                /* accumulate lines to quantize */\n                if (0 == accumulate && 0 == accumulate01) {\n                    acc_iData = iData;\n                    acc_iDataPos = iDataPos;\n                    acc_xp = xp;\n                    acc_xpPos = xpPos;\n                }\n                if (prevNoise != null && prevNoise.sfb_count1 > 0\n                    && sfb >= prevNoise.sfb_count1\n                    && prevNoise.step[sfb] > 0\n                    && step >= prevNoise.step[sfb]) {\n\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate01 += l;\n                } else {\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate += l;\n                }\n\n                if (l <= 0) {\n                    /*\n                     * rh: 20040215 may happen due to \"prev_data_use\"\n                     * optimization\n                     */\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                    }\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                    }\n\n                    break;\n                    /* ends for-loop */\n                }\n            }\n            if (sfb <= sfbmax) {\n                iDataPos += codInfo.width[sfb];\n                xpPos += codInfo.width[sfb];\n                j += codInfo.width[sfb];\n            }\n        }\n        if (accumulate != 0) { /* last data part */\n            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate = 0;\n        }\n        if (accumulate01 != 0) { /* last data part */\n            quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate01 = 0;\n        }\n\n    }\n\n    /**\n     * ix_max\n     */\n    function ix_max(ix, ixPos, endPos) {\n        var max1 = 0, max2 = 0;\n\n        do {\n            var x1 = ix[ixPos++];\n            var x2 = ix[ixPos++];\n            if (max1 < x1)\n                max1 = x1;\n\n            if (max2 < x2)\n                max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2)\n            max1 = max2;\n        return max1;\n    }\n\n    function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */\n        var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0, sum2;\n\n        do {\n            var x = ix[ixPos++];\n            var y = ix[ixPos++];\n\n            if (x != 0) {\n                if (x > 14) {\n                    x = 15;\n                    sum += linbits;\n                }\n                x *= 16;\n            }\n\n            if (y != 0) {\n                if (y > 14) {\n                    y = 15;\n                    sum += linbits;\n                }\n                x += y;\n            }\n\n            sum += Tables.largetbl[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1 = t2;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n        } while (ixPos < end);\n\n        s.bits += sum1;\n        return 1;\n    }\n\n    function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum = 0, sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2)\n            hlen = Tables.table23;\n        else\n            hlen = Tables.table56;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum += hlen[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1++;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n            sum2 += hlen2[x];\n            sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n            sum1 = sum2;\n            t++;\n        }\n        if (sum1 > sum3) {\n            sum1 = sum3;\n            t = t1 + 2;\n        }\n        s.bits += sum1;\n\n        return t;\n    }\n\n    /*************************************************************************/\n    /* choose table */\n    /*************************************************************************/\n\n    var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\n        13, 13, 13, 13, 13, 13];\n\n    /**\n     * Choose the Huffman table that will encode ix[begin..end] with the fewest\n     * bits.\n     *\n     * Note: This code contains knowledge about the sizes and characteristics of\n     * the Huffman tables as defined in the IS (Table B.7), and will not work\n     * with any arbitrary tables.\n     */\n    function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n\n        switch (max) {\n            case 0:\n                return max;\n\n            case 1:\n                return count_bit_noESC(ix, ixPos, endPos, s);\n\n            case 2:\n            case 3:\n                return count_bit_noESC_from2(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                return count_bit_noESC_from3(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            default:\n                /* try tables with linbits */\n                if (max > QuantizePVT.IXMAX_VAL) {\n                    s.bits = QuantizePVT.LARGE_BITS;\n                    return -1;\n                }\n                max -= 15;\n                var choice2;\n                for (choice2 = 24; choice2 < 32; choice2++) {\n                    if (Tables.ht[choice2].linmax >= max) {\n                        break;\n                    }\n                }\n                var choice;\n                for (choice = choice2 - 8; choice < 24; choice++) {\n                    if (Tables.ht[choice].linmax >= max) {\n                        break;\n                    }\n                }\n                return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n    }\n\n    /**\n     * count_bit\n     */\n    this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\n\n        if (prev_noise != null)\n            prev_noise.sfb_count1 = 0;\n\n        /* Determine count1 region */\n        for (; i > 1; i -= 2)\n            if ((ix[i - 1] | ix[i - 2]) != 0)\n                break;\n        gi.count1 = i;\n\n        /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n            var p;\n            /* hack to check if all values <= 1 */\n            //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n            //if (true) {\n            if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n                break;\n            }\n            p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n            bits = a2;\n            gi.count1table_select = 1;\n        }\n\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0)\n            return bits;\n\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n            a1 = 3 * gfc.scalefac_band.s[3];\n            if (a1 > gi.big_values)\n                a1 = gi.big_values;\n            a2 = gi.big_values;\n\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n            /* bv_scf has 576 entries (0..575) */\n            a1 = gi.region0_count = gfc.bv_scf[i - 2];\n            a2 = gi.region1_count = gfc.bv_scf[i - 1];\n\n            a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n            a1 = gfc.scalefac_band.l[a1 + 1];\n            if (a2 < i) {\n                var bi = new Bits(bits);\n                gi.table_select[2] = choose_table(ix, a2, i, bi);\n                bits = bi.bits;\n            }\n        } else {\n            gi.region0_count = 7;\n            /* gi.region1_count = SBPSY_l - 7 - 1; */\n            gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            a2 = i;\n            if (a1 > a2) {\n                a1 = a2;\n            }\n        }\n\n        /* have to allow for the case when bigvalues < region0 < region1 */\n        /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i);\n\n\n        /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n            var bi = new Bits(bits);\n            gi.table_select[0] = choose_table(ix, 0, a1, bi);\n            bits = bi.bits;\n        }\n        if (a1 < a2) {\n            var bi = new Bits(bits);\n            gi.table_select[1] = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n            gi.part2_3_length = bits;\n            best_huffman_divide(gfc, gi);\n            bits = gi.part2_3_length;\n        }\n\n        if (prev_noise != null) {\n            if (gi.block_type == Encoder.NORM_TYPE) {\n                var sfb = 0;\n                while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n                    sfb++;\n                }\n                prev_noise.sfb_count1 = sfb;\n            }\n        }\n\n        return bits;\n    }\n\n    this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc;\n\n        /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\n\n        if (gi.xrpow_max > w)\n            return QuantizePVT.LARGE_BITS;\n\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n\n        if ((gfc.substep_shaping & 2) != 0) {\n            var j = 0;\n            /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\n            var gain = gi.global_gain + gi.scalefac_scale;\n            var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\n            for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\n                var width = gi.width[sfb];\n                if (0 == gfc.pseudohalf[sfb]) {\n                    j += width;\n                } else {\n                    var k;\n                    for (k = j, j += width; k < j; ++k) {\n                        ix[k] = (xr[k] >= roundfac) ? ix[k] : 0;\n                    }\n                }\n            }\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n    }\n\n    /**\n     * re-calculate the best scalefac_compress using scfsi the saved bits are\n     * kept in the bit reservoir.\n     */\n    function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n            r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n\n        for (var r0 = 0; r0 < 16; r0++) {\n            var a1 = gfc.scalefac_band.l[r0 + 1];\n            if (a1 >= bigv)\n                break;\n            var r0bits = 0;\n            var bi = new Bits(r0bits);\n            var r0t = choose_table(ix, 0, a1, bi);\n            r0bits = bi.bits;\n\n            for (var r1 = 0; r1 < 8; r1++) {\n                var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n                if (a2 >= bigv)\n                    break;\n                var bits = r0bits;\n                bi = new Bits(bits);\n                var r1t = choose_table(ix, a1, a2, bi);\n                bits = bi.bits;\n                if (r01_bits[r0 + r1] > bits) {\n                    r01_bits[r0 + r1] = bits;\n                    r01_div[r0 + r1] = r0;\n                    r0_tbl[r0 + r1] = r0t;\n                    r1_tbl[r0 + r1] = r1t;\n                }\n            }\n        }\n    }\n\n    function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n            var a2 = gfc.scalefac_band.l[r2];\n            if (a2 >= bigv)\n                break;\n            var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n            if (gi.part2_3_length <= bits)\n                break;\n\n            var bi = new Bits(bits);\n            var r2t = choose_table(ix, a2, bigv, bi);\n            bits = bi.bits;\n            if (gi.part2_3_length <= bits)\n                continue;\n\n            gi.assign(cod_info2);\n            gi.part2_3_length = bits;\n            gi.region0_count = r01_div[r2 - 2];\n            gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n            gi.table_select[0] = r0_tbl[r2 - 2];\n            gi.table_select[1] = r1_tbl[r2 - 2];\n            gi.table_select[2] = r2t;\n        }\n    }\n\n    this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1);\n\n        /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\n            return;\n\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n            recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\n            return;\n\n        i = gi.count1 + 2;\n        if (i > 576)\n            return;\n\n        /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n\n\n        for (; i > cod_info2.big_values; i -= 4) {\n            var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\n                + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n            a1 = a2;\n            cod_info2.count1table_select = 1;\n        }\n\n        cod_info2.count1bits = a1;\n\n        if (cod_info2.block_type == Encoder.NORM_TYPE)\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        else {\n            /* Count the number of bits necessary to code the bigvalues region. */\n            cod_info2.part2_3_length = a1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            if (a1 > i) {\n                a1 = i;\n            }\n            if (a1 > 0) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (i > a1) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (gi.part2_3_length > cod_info2.part2_3_length)\n                gi.assign(cod_info2);\n        }\n    }\n\n    var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n    var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n    var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n    var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n    Takehiro.slen1_tab = slen1_tab;\n    Takehiro.slen2_tab = slen2_tab;\n\n    function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                if (g0.scalefac[sfb] != gi.scalefac[sfb]\n                    && gi.scalefac[sfb] >= 0)\n                    break;\n            }\n            if (sfb == Tables.scfsi_band[i + 1]) {\n                for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                    gi.scalefac[sfb] = -1;\n                }\n                l3_side.scfsi[ch][i] = 1;\n            }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c1++;\n            if (s1 < gi.scalefac[sfb])\n                s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c2++;\n            if (s2 < gi.scalefac[sfb])\n                s2 = gi.scalefac[sfb];\n        }\n\n        for (var i = 0; i < 16; i++) {\n            if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n                var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n                if (gi.part2_length > c) {\n                    gi.part2_length = c;\n                    gi.scalefac_compress = i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find the optimal way to store the scalefactors. Only call this routine\n     * after final scalefactors have been chosen and the channel/granule will\n     * not be re-encoded.\n     */\n    this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */\n        var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0;\n\n        /*\n         * remove scalefacs from bands with ix=0. This idea comes from the AAC\n         * ISO docs. added mt 3/00\n         */\n        /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            j += width;\n            for (l = -width; l < 0; l++) {\n                if (gi.l3_enc[l + j] != 0)\n                    break;\n            }\n            if (l == 0)\n                gi.scalefac[sfb] = recalc = -2;\n            /* anything goes. */\n            /*\n             * only best_scalefac_store and calc_scfsi know--and only they\n             * should know--about the magic number -2.\n             */\n        }\n\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n            var s = 0;\n            for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                if (gi.scalefac[sfb] > 0)\n                    s |= gi.scalefac[sfb];\n\n            if (0 == (s & 1) && s != 0) {\n                for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] >>= 1;\n\n                gi.scalefac_scale = recalc = 1;\n            }\n        }\n\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\n            && gfc.mode_gr == 2) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                if (gi.scalefac[sfb] < qupvt.pretab[sfb]\n                    && gi.scalefac[sfb] != -2)\n                    break;\n            if (sfb == Encoder.SBPSY_l) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] -= qupvt.pretab[sfb];\n\n                gi.preflag = recalc = 1;\n            }\n        }\n\n        for (i = 0; i < 4; i++)\n            l3_side.scfsi[ch][i] = 0;\n\n        if (gfc.mode_gr == 2 && gr == 1\n            && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\n            && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n            scfsi_calc(ch, l3_side);\n            recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] == -2) {\n                gi.scalefac[sfb] = 0;\n                /* if anything goes, then 0 is a good choice */\n            }\n        }\n        if (recalc != 0) {\n            if (gfc.mode_gr == 2) {\n                this.scale_bitcount(gi);\n            } else {\n                this.scale_bitcount_lsf(gfc, gi);\n            }\n        }\n    }\n\n    function all_scalefactors_not_negative(scalefac, n) {\n        for (var i = 0; i < n; ++i) {\n            if (scalefac[i] < 0)\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 18*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\n        54, 72, 90, 72, 90, 108, 108, 126];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 17*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\n        52, 70, 88, 69, 87, 105, 104, 122];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 11*slen1_tab[i] + 10*slen2_tab[i]\n     */\n    var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\n        52, 43, 53, 63, 64, 74];\n\n    /**\n     * Also calculates the number of bits necessary to code the scalefactors.\n     */\n    this.scale_bitcount = function (cod_info) {\n        var k, sfb, max_slen1 = 0, max_slen2 = 0;\n\n        /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            tab = scale_short;\n            if (cod_info.mixed_block_flag != 0)\n                tab = scale_mixed;\n        } else { /* block_type == 1,2,or 3 */\n            tab = scale_long;\n            if (0 == cod_info.preflag) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (scalefac[sfb] < qupvt.pretab[sfb])\n                        break;\n\n                if (sfb == Encoder.SBPSY_l) {\n                    cod_info.preflag = 1;\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                        scalefac[sfb] -= qupvt.pretab[sfb];\n                }\n            }\n        }\n\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\n            if (max_slen1 < scalefac[sfb])\n                max_slen1 = scalefac[sfb];\n\n        for (; sfb < cod_info.sfbmax; sfb++)\n            if (max_slen2 < scalefac[sfb])\n                max_slen2 = scalefac[sfb];\n\n        /*\n         * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\n         * posible values of scalefac_compress to find the one which uses the\n         * smallest number of bits. ISO would stop at first valid index\n         */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n            if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\n                && cod_info.part2_length > tab[k]) {\n                cod_info.part2_length = tab[k];\n                cod_info.scalefac_compress = k;\n            }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n    }\n\n    /**\n     * table of largest scalefactor values for MPEG2\n     */\n    var max_range_sfac_tab = [[15, 15, 7, 7],\n        [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\n        [7, 7, 7, 0], [3, 3, 0, 0]];\n\n    /**\n     * Also counts the number of bits to encode the scalefacs but for MPEG 2\n     * Lower sampling frequencies (24, 22.05 and 16 kHz.)\n     *\n     * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\n     * \"Audio Decoding Layer III\"\n     */\n    this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4);\n//var partition_table;\n        var scalefac = cod_info.scalefac;\n\n        /*\n         * Set partition table. Note that should try to use table one, but do\n         * not yet...\n         */\n        if (cod_info.preflag != 0)\n            table_number = 2;\n        else\n            table_number = 0;\n\n        for (i = 0; i < 4; i++)\n            max_sfac[i] = 0;\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            row_in_table = 1;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition] / 3;\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    for (window = 0; window < 3; window++)\n                        if (scalefac[sfb * 3 + window] > max_sfac[partition])\n                            max_sfac[partition] = scalefac[sfb * 3 + window];\n            }\n        } else {\n            row_in_table = 0;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition];\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    if (scalefac[sfb] > max_sfac[partition])\n                        max_sfac[partition] = scalefac[sfb];\n            }\n        }\n\n        for (over = false, partition = 0; partition < 4; partition++) {\n            if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\n                over = true;\n        }\n        if (!over) {\n            var slen1, slen2, slen3, slen4;\n\n            cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (partition = 0; partition < 4; partition++)\n                cod_info.slen[partition] = log2tab[max_sfac[partition]];\n\n            /* set scalefac_compress */\n            slen1 = cod_info.slen[0];\n            slen2 = cod_info.slen[1];\n            slen3 = cod_info.slen[2];\n            slen4 = cod_info.slen[3];\n\n            switch (table_number) {\n                case 0:\n                    cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\n                        + (slen3 << 2) + slen4;\n                    break;\n\n                case 1:\n                    cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\n                        + slen3;\n                    break;\n\n                case 2:\n                    cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\n                    break;\n\n                default:\n                    System.err.printf(\"intensity stereo not implemented yet\\n\");\n                    break;\n            }\n        }\n        if (!over) {\n            cod_info.part2_length = 0;\n            for (partition = 0; partition < 4; partition++)\n                cod_info.part2_length += cod_info.slen[partition]\n                    * cod_info.sfb_partition_table[partition];\n        }\n        return over;\n    }\n\n    /*\n     * Since no bands have been over-amplified, we can set scalefac_compress and\n     * slen[] for the formatter\n     */\n    var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\n        4, 4, 4, 4];\n\n    this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n            var scfb_anz = 0, bv_index;\n            while (gfc.scalefac_band.l[++scfb_anz] < i)\n                ;\n\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            while (gfc.scalefac_band.l[bv_index + 1] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                /*\n                 * this is an indication that everything is going to be encoded\n                 * as region0: bigvalues < region0 < region1 so lets set\n                 * region0, region1 to some value larger than bigvalues\n                 */\n                bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            }\n\n            gfc.bv_scf[i - 2] = bv_index;\n\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            }\n\n            gfc.bv_scf[i - 1] = bv_index;\n        }\n    }\n}\n\n/*\n *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\n *  Copyright (C) 2001 David Robinson and Glen Sawyer\n *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller \n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  concept and filter values by David Robinson (David@Robinson.org)\n *    -- blame him if you think the idea is flawed\n *  original coding by Glen Sawyer (mp3gain@hotmail.com)\n *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\n *\n *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\n *    -- credit him for all the _good_ programming ;)\n *\n *\n *  For an explanation of the concepts and the basic algorithms involved, go to:\n *    http://www.replaygain.org/\n */\n\n/*\n *  Here's the deal. Call\n *\n *    InitGainAnalysis ( long samplefreq );\n *\n *  to initialize everything. Call\n *\n *    AnalyzeSamples ( var Float_t*  left_samples,\n *                     var Float_t*  right_samples,\n *                     size_t          num_samples,\n *                     int             num_channels );\n *\n *  as many times as you want, with as many or as few samples as you want.\n *  If mono, pass the sample buffer in through left_samples, leave\n *  right_samples NULL, and make sure num_channels = 1.\n *\n *    GetTitleGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\n *\n *    GetAlbumGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  since InitGainAnalysis() was called and finalized with GetTitleGain().\n *\n *  Pseudo-code to process an album:\n *\n *    Float_t       l_samples [4096];\n *    Float_t       r_samples [4096];\n *    size_t        num_samples;\n *    unsigned int  num_songs;\n *    unsigned int  i;\n *\n *    InitGainAnalysis ( 44100 );\n *    for ( i = 1; i <= num_songs; i++ ) {\n *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\n *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\n *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\n *    }\n *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\n */\n\n/*\n *  So here's the main source of potential code confusion:\n *\n *  The filters applied to the incoming samples are IIR filters,\n *  meaning they rely on up to <filter order> number of previous samples\n *  AND up to <filter order> number of previous filtered samples.\n *\n *  I set up the AnalyzeSamples routine to minimize memory usage and interface\n *  complexity. The speed isn't compromised too much (I don't think), but the\n *  internal complexity is higher than it should be for such a relatively\n *  simple routine.\n *\n *  Optimization/clarity suggestions are welcome.\n */\n\n/**\n * Table entries per dB\n */\nGainAnalysis.STEPS_per_dB = 100.;\n/**\n * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\n */\nGainAnalysis.MAX_dB = 120.;\nGainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\nGainAnalysis.GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.GAIN_ANALYSIS_OK = 1;\nGainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n\nGainAnalysis.YULE_ORDER = 10;\nGainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n\nGainAnalysis.MAX_SAMP_FREQ = 48000;\nGainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\nGainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\nGainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\n\nfunction GainAnalysis() {\n\t//fix 精简\n}\n\n\nfunction Presets() {\n    function VBRPresets(qual, comp, compS,\n                        y, shThreshold, shThresholdS,\n                        adj, adjShort, lower,\n                        curve, sens, inter,\n                        joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n    }\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n    /**\n     * <PRE>\n     * Switch mappings for VBR mode VBR_RH\n     *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_old_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\n        new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\n        new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\n        new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\n        new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\n        new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\n        new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\n        new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\n    ];\n\n    /**\n     * <PRE>\n     *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_psy_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\n        new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\n        new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\n        new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\n        new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\n        new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\n        new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\n        new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\n    ];\n\n    function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\n            : vbr_psy_switch_map;\n\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p;\n\n        // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n        // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s);\n        // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n        // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x\n            * (q.masking_adj_short - p.masking_adj_short);\n        // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n        // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n        // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x\n            * (q.ath_sensitivity - p.ath_sensitivity);\n        // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch);\n        // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix);\n        // LERP(msfix);\n\n        lame_set_VBR_q(gfp, set.vbr_q);\n\n        if (enforce != 0)\n            gfp.quant_comp = set.quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = set.quant_comp;\n        // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = set.quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = set.quant_comp_s;\n        // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n            gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0)\n            gfp.maskingadjust = set.masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = set.masking_adj;\n        // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0)\n            gfp.maskingadjust_short = set.masking_adj_short;\n        else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n            gfp.maskingadjust_short = set.masking_adj_short;\n        // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0)\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = set.ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = set.ath_curve;\n        // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0)\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n            if (enforce != 0)\n                gfp.interChRatio = set.interch;\n            else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n                gfp.interChRatio = set.interch;\n            // SET_OPTION(interChRatio, set.interch, -1);\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\n        }\n        if (enforce != 0)\n            gfp.msfix = set.msfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = set.msfix;\n        // SET_OPTION(msfix, set.msfix, -1);\n\n        if (enforce == 0) {\n            gfp.VBR_q = a;\n            gfp.VBR_q_frac = x;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    /**\n     * VBR quality level.<BR>\n     * 0 = highest<BR>\n     * 9 = lowest\n     */\n    function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n\n        if (0 > VBR_q) {\n            /* Unknown VBR quality level! */\n            ret = -1;\n            VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n            ret = -1;\n            VBR_q = 9;\n        }\n\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n    }\n\n}\n\n/*\n *      bit reservoir source file\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n/**\n * ResvFrameBegin:<BR>\n * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\n * the reservoir, and checks to make sure main_data_begin was set properly by\n * the formatter<BR>\n * Background information:\n * \n * This is the original text from the ISO standard. Because of sooo many bugs\n * and irritations correcting comments are added in brackets []. A '^W' means\n * you should remove the last word.\n * \n * <PRE>\n *  1. The following rule can be used to calculate the maximum\n *     number of bits used for one granule [^W frame]:<BR>\n *     At the highest possible bitrate of Layer III (320 kbps\n *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\n *     [^W^W^W are designed to have] constant length, i.e.\n *     one buffer [^W^W the frame] length is:<BR>\n * \n *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\n * \n *     This value is used as the maximum buffer per channel [^W^W] at\n *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\n *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\n *     [per granule and channel] at 48 kHz sampling frequency.\n *     This means that there is a maximum deviation (short time buffer\n *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\n *     The actual deviation is equal to the number of bytes [with the\n *     meaning of octets] denoted by the main_data_end offset pointer.\n *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\n *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\n *     ... The xchange of buffer bits between the left and right channel\n *     is allowed without restrictions [exception: dual channel].\n *     Because of the [constructed] constraint on the buffer size\n *     main_data_end is always set to 0 in the case of bit_rate_index==14,\n *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\n *     all data are allocated between adjacent header [^W sync] words\n *     [, i.e. there is no buffering at all].\n * </PRE>\n */\n\n\nfunction Reservoir() {\n\tvar bs;\n\n\tthis.setModules  = function(_bs) {\n\t\tbs = _bs;\n\t}\n\n\tthis.ResvFrameBegin = function(gfp, mean_bits) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar maxmp3buf;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar frameLength = bs.getframebits(gfp);\n\t\tmean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\n\n\t\t/**\n\t\t * <PRE>\n\t\t *  Meaning of the variables:\n\t\t *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\n\t\t *          Number of bits can be stored in previous frame(s) due to\n\t\t *          counter size constaints\n\t\t *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\n\t\t *          Number of bits allowed to encode one frame (you can take 8*511 bit\n\t\t *          from the bit reservoir and at most 8*1440 bit from the current\n\t\t *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\n\t\t *          value for MPEG-1 and -2)\n\t\t * \n\t\t *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\n\t\t *          so this is the absolute maximum supported by the format.\n\t\t * \n\t\t * \n\t\t *      fullFrameBits:  maximum number of bits available for encoding\n\t\t *                      the current frame.\n\t\t * \n\t\t *      mean_bits:      target number of bits per granule.\n\t\t * \n\t\t *      frameLength:\n\t\t * \n\t\t *      gfc.ResvMax:   maximum allowed reservoir\n\t\t * \n\t\t *      gfc.ResvSize:  current reservoir size\n\t\t * \n\t\t *      l3_side.resvDrain_pre:\n\t\t *         ancillary data to be added to previous frame:\n\t\t *         (only usefull in VBR modes if it is possible to have\n\t\t *         maxmp3buf < fullFrameBits)).  Currently disabled,\n\t\t *         see #define NEW_DRAIN\n\t\t *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\n\t\t *                     as there exists one example, where the FhG decoder\n\t\t *                     can't decode a -b320 CBR file anymore.\n\t\t * \n\t\t *      l3_side.resvDrain_post:\n\t\t *         ancillary data to be added to this frame:\n\t\t * \n\t\t * </PRE>\n\t\t */\n\n\t\t/* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n\t\tvar resvLimit = (8 * 256) * gfc.mode_gr - 8;\n\n\t\t/*\n\t\t * maximum allowed frame size. dont use more than this number of bits,\n\t\t * even if the frame has the space for them:\n\t\t */\n\t\tif (gfp.brate > 320) {\n\t\t\t/* in freeformat the buffer is constant */\n\t\t\tmaxmp3buf = 8 * ((int) ((gfp.brate * 1000)\n\t\t\t\t\t/ (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t} else {\n\t\t\t/*\n\t\t\t * all mp3 decoders should have enough buffer to handle this value:\n\t\t\t * size of a 320kbps 32kHz frame\n\t\t\t */\n\t\t\tmaxmp3buf = 8 * 1440;\n\n\t\t\t/*\n\t\t\t * Bouvigne suggests this more lax interpretation of the ISO doc\n\t\t\t * instead of using 8*960.\n\t\t\t */\n\n\t\t\tif (gfp.strict_ISO) {\n\t\t\t\tmaxmp3buf = 8 * ((int) (320000 / (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t\t}\n\t\t}\n\n\t\tgfc.ResvMax = maxmp3buf - frameLength;\n\t\tif (gfc.ResvMax > resvLimit)\n\t\t\tgfc.ResvMax = resvLimit;\n\t\tif (gfc.ResvMax < 0 || gfp.disable_reservoir)\n\t\t\tgfc.ResvMax = 0;\n\n\t\tvar fullFrameBits = mean_bits.bits * gfc.mode_gr\n\t\t\t\t+ Math.min(gfc.ResvSize, gfc.ResvMax);\n\n\t\tif (fullFrameBits > maxmp3buf)\n\t\t\tfullFrameBits = maxmp3buf;\n\n\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t// frame analyzer code\n\t\tif (gfc.pinfo != null) {\n\t\t\t/*\n\t\t\t * expected bits per channel per granule [is this also right for\n\t\t\t * mono/stereo, MPEG-1/2 ?]\n\t\t\t */\n\t\t\tgfc.pinfo.mean_bits = mean_bits.bits / 2;\n\t\t\tgfc.pinfo.resvsize = gfc.ResvSize;\n\t\t}\n\n\t\treturn fullFrameBits;\n\t}\n\n\t/**\n\t * returns targ_bits: target number of bits to use for 1 granule<BR>\n\t * extra_bits: amount extra available from reservoir<BR>\n\t * Mark Taylor 4/99\n\t */\n\tthis.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar add_bits;\n        var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\n\n\t\t/* compensate the saved bits used in the 1st granule */\n\t\tif (cbr != 0)\n\t\t\tResvSize += mean_bits;\n\n\t\tif ((gfc.substep_shaping & 1) != 0)\n\t\t\tResvMax *= 0.9;\n\n\t\ttarg_bits.bits = mean_bits;\n\n\t\t/* extra bits if the reservoir is almost full */\n\t\tif (ResvSize * 10 > ResvMax * 9) {\n\t\t\tadd_bits = ResvSize - (ResvMax * 9) / 10;\n\t\t\ttarg_bits.bits += add_bits;\n\t\t\tgfc.substep_shaping |= 0x80;\n\t\t} else {\n\t\t\tadd_bits = 0;\n\t\t\tgfc.substep_shaping &= 0x7f;\n\t\t\t/*\n\t\t\t * build up reservoir. this builds the reservoir a little slower\n\t\t\t * than FhG. It could simple be mean_bits/15, but this was rigged to\n\t\t\t * always produce 100 (the old value) at 128kbs\n\t\t\t */\n\t\t\tif (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\n\t\t\t\ttarg_bits.bits -= .1 * mean_bits;\n\t\t}\n\n\t\t/* amount from the reservoir we are allowed to use. ISO says 6/10 */\n\t\tvar extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\n\t\t\t\t: (gfc.ResvMax * 6) / 10);\n\t\textra_bits -= add_bits;\n\n\t\tif (extra_bits < 0)\n\t\t\textra_bits = 0;\n\t\treturn extra_bits;\n\t}\n\n\t/**\n\t * Called after a granule's bit allocation. Readjusts the size of the\n\t * reservoir to reflect the granule's usage.\n\t */\n\tthis.ResvAdjust = function(gfc, gi) {\n\t\tgfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n\t}\n\n\t/**\n\t * Called after all granules in a frame have been allocated. Makes sure that\n\t * the reservoir size is within limits, possibly by adding stuffing bits.\n\t */\n\tthis.ResvFrameEnd = function(gfc, mean_bits) {\n\t\tvar over_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tgfc.ResvSize += mean_bits * gfc.mode_gr;\n\t\tvar stuffingBits = 0;\n\t\tl3_side.resvDrain_post = 0;\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t/* we must be byte aligned */\n\t\tif ((over_bits = gfc.ResvSize % 8) != 0)\n\t\t\tstuffingBits += over_bits;\n\n\t\tover_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\n\t\tif (over_bits > 0) {\n\t\t\tstuffingBits += over_bits;\n\t\t}\n\n\t\t/*\n\t\t * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\n\t\t * decoder shipped with MS Windows operating systems. Using this, it is\n\t\t * even possible to use Gabriel's lax buffer consideration again, which\n\t\t * assumes, any decoder should have a buffer large enough for a 320 kbps\n\t\t * frame at 32 kHz sample rate.\n\t\t * \n\t\t * old drain code: lame -b320 BlackBird.wav --. does not play with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * new drain code: lame -b320 BlackBird.wav --. plays fine with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * Robert Hegemann, 2010-02-13.\n\t\t */\n\t\t/*\n\t\t * drain as many bits as possible into previous frame ancillary data In\n\t\t * particular, in VBR mode ResvMax may have changed, and we have to make\n\t\t * sure main_data_begin does not create a reservoir bigger than ResvMax\n\t\t * mt 4/00\n\t\t */\n\t\t{\n\t\t\tvar mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n\t\t\tl3_side.resvDrain_pre += 8 * mdb_bytes;\n\t\t\tstuffingBits -= 8 * mdb_bytes;\n\t\t\tgfc.ResvSize -= 8 * mdb_bytes;\n\t\t\tl3_side.main_data_begin -= mdb_bytes;\n\t\t}\n\t\t/* drain the rest into this frames ancillary data */\n\t\tl3_side.resvDrain_post += stuffingBits;\n\t\tgfc.ResvSize -= stuffingBits;\n\t}\n}\n\n\n/**\n * A Vbr header may be present in the ancillary data field of the first frame of\n * an mp3 bitstream<BR>\n * The Vbr header (optionally) contains\n * <UL>\n * <LI>frames total number of audio frames in the bitstream\n * <LI>bytes total number of bytes in the bitstream\n * <LI>toc table of contents\n * </UL>\n *\n * toc (table of contents) gives seek points for random access.<BR>\n * The ith entry determines the seek point for i-percent duration.<BR>\n * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\n * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\n */\nVBRTag.NUMTOCENTRIES = 100;\nVBRTag.MAXFRAMESIZE = 2880;\n\nfunction VBRTag() {\n\n    var lame;\n    var bs;\n    var v;\n\n    this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n    };\n\t\n\t//fix 精简\n\t\n    /**\n     * Lookup table for fast CRC-16 computation. Uses the polynomial\n     * x^16+x^15+x^2+1\n     */\n    var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\n        0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\n        0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\n        0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\n        0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\n        0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\n        0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\n        0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\n        0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\n        0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\n        0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\n        0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\n        0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\n        0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\n        0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\n        0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\n        0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\n        0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\n        0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\n        0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\n        0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\n        0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\n        0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\n        0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\n        0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\n        0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\n        0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\n        0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\n        0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\n        0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\n        0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\n        0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\n        0x4100, 0x81C1, 0x8081, 0x4040];\n\t\t\n\t//fix 精简\n\t\n    /**\n     * Fast CRC-16 computation (uses table crc16Lookup).\n     *\n     * @param value\n     * @param crc\n     * @return\n     */\n    function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\n        return crc;\n    }\n\n    this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i)\n            crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n    }\n\n\t//fix 精简\n}\n\n\n\nBitStream.EQ = function (a, b) {\n    return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\n        .abs(a) * 1e-6))\n        : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\n};\n\nBitStream.NEQ = function (a, b) {\n    return !BitStream.EQ(a, b);\n};\n\nfunction BitStream() {\n    var self = this;\n    var CRC16_POLYNOMIAL = 0x8005;\n\n    /*\n     * we work with ints, so when doing bit manipulation, we limit ourselves to\n     * MAX_LENGTH-2 just to be on the safe side\n     */\n    var MAX_LENGTH = 32;\n\n    //GainAnalysis ga;\n    //MPGLib mpg;\n    //Version ver;\n    //VBRTag vbr;\n    var ga = null;\n    var mpg = null;\n    var ver = null;\n    var vbr = null;\n\n    //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n    //\tVBRTag vbr) {\n\n    this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n    };\n\n    /**\n     * Bit stream buffer.\n     */\n    //private byte[] buf;\n    var buf = null;\n    /**\n     * Bit counter of bit stream.\n     */\n    var totbit = 0;\n    /**\n     * Pointer to top byte in buffer.\n     */\n    var bufByteIdx = 0;\n    /**\n     * Pointer to top bit of top byte in buffer.\n     */\n    var bufBitIdx = 0;\n\n    /**\n     * compute bitsperframe and mean_bits for a layer III frame\n     */\n    this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate;\n\n        /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0)\n            bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        else\n            bit_rate = gfp.brate;\n\n        /* main encoding routine toggles padding on and off */\n        /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n    };\n\n    function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n    }\n\n    /**\n     * write j bits into the bit stream\n     */\n    function putbits2(gfc, val, j) {\n\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n                    putheader_bits(gfc);\n                }\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            /* 32 too large on 32 bit machines */\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * write j bits into the bit stream, ignoring frame headers\n     */\n    function putbits_noheaders(gfc, val, j) {\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            /* 32 too large on 32 bit machines */\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\n     * out a frame using just main_data, due to the limited number of bits to\n     * indicate main_data_length. In these situations, we put stuffing bits into\n     * the ancillary data...\n     */\n    function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4c, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x41, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4d, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x45, 8);\n            remainingBits -= 8;\n        }\n\n        if (remainingBits >= 32) {\n            var version = ver.getLameShortVersion();\n            if (remainingBits >= 32)\n                for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n                    remainingBits -= 8;\n                    putbits2(gfc, version.charCodeAt(i), 8); //fix 错误的使用charAt\n                }\n        }\n\n        for (; remainingBits >= 1; remainingBits -= 1) {\n            putbits2(gfc, gfc.ancillary_flag, 1);\n            gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\n        }\n\n\n    }\n\n    /**\n     * write N bits into the header\n     */\n    function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n\n        while (j > 0) {\n            var k = Math.min(j, 8 - (ptr & 7));\n            j -= k;\n            /* >> 32 too large for 32 bit machines */\n\n            gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\n            ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n    }\n\n    function CRC_update(value, crc) {\n        value <<= 8;\n        for (var i = 0; i < 8; i++) {\n            value <<= 1;\n            crc <<= 1;\n\n            if ((((crc ^ value) & 0x10000) != 0))\n                crc ^= CRC16_POLYNOMIAL;\n        }\n        return crc;\n    }\n\n    this.CRC_writeheader = function (gfc, header) {\n        var crc = 0xffff;\n        /* (jo) init crc16 for error_protection */\n\n        crc = CRC_update(header[2] & 0xff, crc);\n        crc = CRC_update(header[3] & 0xff, crc);\n        for (var i = 6; i < gfc.sideinfo_len; i++) {\n            crc = CRC_update(header[i] & 0xff, crc);\n        }\n\n        header[4] = (byte)(crc >> 8);\n        header[5] = (byte)(crc & 255);\n    };\n\n    function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000)\n            writeheader(gfc, 0xffe, 12);\n        else\n            writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, (gfp.version), 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\n        writeheader(gfc, (gfc.bitrate_index), 4);\n        writeheader(gfc, (gfc.samplerate_index), 2);\n        writeheader(gfc, (gfc.padding), 1);\n        writeheader(gfc, (gfp.extension), 1);\n        writeheader(gfc, (gfp.mode.ordinal()), 2);\n        writeheader(gfc, (gfc.mode_ext), 2);\n        writeheader(gfc, (gfp.copyright), 1);\n        writeheader(gfc, (gfp.original), 1);\n        writeheader(gfc, (gfp.emphasis), 2);\n        if (gfp.error_protection) {\n            writeheader(gfc, 0, 16);\n            /* dummy */\n        }\n\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            writeheader(gfc, (l3_side.main_data_begin), 9);\n\n            if (gfc.channels_out == 2)\n                writeheader(gfc, l3_side.private_bits, 3);\n            else\n                writeheader(gfc, l3_side.private_bits, 5);\n\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var band;\n                for (band = 0; band < 4; band++) {\n                    writeheader(gfc, l3_side.scfsi[ch][band], 1);\n                }\n            }\n\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                    writeheader(gfc, gi.big_values / 2, 9);\n                    writeheader(gfc, gi.global_gain, 8);\n                    writeheader(gfc, gi.scalefac_compress, 4);\n\n                    if (gi.block_type != Encoder.NORM_TYPE) {\n                        writeheader(gfc, 1, 1);\n                        /* window_switching_flag */\n                        writeheader(gfc, gi.block_type, 2);\n                        writeheader(gfc, gi.mixed_block_flag, 1);\n\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n\n                        writeheader(gfc, gi.subblock_gain[0], 3);\n                        writeheader(gfc, gi.subblock_gain[1], 3);\n                        writeheader(gfc, gi.subblock_gain[2], 3);\n                    } else {\n                        writeheader(gfc, 0, 1);\n                        /* window_switching_flag */\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n                        if (gi.table_select[2] == 14)\n                            gi.table_select[2] = 16;\n                        writeheader(gfc, gi.table_select[2], 5);\n\n                        writeheader(gfc, gi.region0_count, 4);\n                        writeheader(gfc, gi.region1_count, 3);\n                    }\n                    writeheader(gfc, gi.preflag, 1);\n                    writeheader(gfc, gi.scalefac_scale, 1);\n                    writeheader(gfc, gi.count1table_select, 1);\n                }\n            }\n        } else {\n            /* MPEG2 */\n            writeheader(gfc, (l3_side.main_data_begin), 8);\n            writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                writeheader(gfc, gi.big_values / 2, 9);\n                writeheader(gfc, gi.global_gain, 8);\n                writeheader(gfc, gi.scalefac_compress, 9);\n\n                if (gi.block_type != Encoder.NORM_TYPE) {\n                    writeheader(gfc, 1, 1);\n                    /* window_switching_flag */\n                    writeheader(gfc, gi.block_type, 2);\n                    writeheader(gfc, gi.mixed_block_flag, 1);\n\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n\n                    writeheader(gfc, gi.subblock_gain[0], 3);\n                    writeheader(gfc, gi.subblock_gain[1], 3);\n                    writeheader(gfc, gi.subblock_gain[2], 3);\n                } else {\n                    writeheader(gfc, 0, 1);\n                    /* window_switching_flag */\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n                    if (gi.table_select[2] == 14)\n                        gi.table_select[2] = 16;\n                    writeheader(gfc, gi.table_select[2], 5);\n\n                    writeheader(gfc, gi.region0_count, 4);\n                    writeheader(gfc, gi.region1_count, 3);\n                }\n\n                writeheader(gfc, gi.scalefac_scale, 1);\n                writeheader(gfc, gi.count1table_select, 1);\n            }\n        }\n\n        if (gfp.error_protection) {\n            /* (jo) error_protection: add crc16 information to header */\n            CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\n        }\n\n        {\n            var old = gfc.h_ptr;\n\n            gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n            gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\n                + bitsPerFrame;\n\n            if (gfc.h_ptr == gfc.w_ptr) {\n                /* yikes! we are out of header buffer space */\n                System.err\n                    .println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n            }\n\n        }\n    }\n\n    function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */\n        var h = Tables.ht[gi.count1table_select + 32];\n        var i, bits = 0;\n\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n            var huffbits = 0;\n            var p = 0, v;\n\n            v = gi.l3_enc[ix + 0];\n            if (v != 0) {\n                p += 8;\n                if (gi.xr[xr + 0] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 1];\n            if (v != 0) {\n                p += 4;\n                huffbits *= 2;\n                if (gi.xr[xr + 1] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 2];\n            if (v != 0) {\n                p += 2;\n                huffbits *= 2;\n                if (gi.xr[xr + 2] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 3];\n            if (v != 0) {\n                p++;\n                huffbits *= 2;\n                if (gi.xr[xr + 3] < 0)\n                    huffbits++;\n            }\n\n            ix += 4;\n            xr += 4;\n            putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n            bits += h.hlen[p];\n        }\n        return bits;\n    }\n\n    /**\n     * Implements the pseudocode of page 98 of the IS\n     */\n    function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n\n        if (0 == tableindex)\n            return bits;\n\n        for (var i = start; i < end; i += 2) {\n            var cbits = 0;\n            var xbits = 0;\n            var linbits = h.xlen;\n            var xlen = h.xlen;\n            var ext = 0;\n            var x1 = gi.l3_enc[i];\n            var x2 = gi.l3_enc[i + 1];\n\n            if (x1 != 0) {\n                if (gi.xr[i] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            if (tableindex > 15) {\n                /* use ESC-words */\n                if (x1 > 14) {\n                    var linbits_x1 = x1 - 15;\n                    ext |= linbits_x1 << 1;\n                    xbits = linbits;\n                    x1 = 15;\n                }\n\n                if (x2 > 14) {\n                    var linbits_x2 = x2 - 15;\n                    ext <<= linbits;\n                    ext |= linbits_x2;\n                    xbits += linbits;\n                    x2 = 15;\n                }\n                xlen = 16;\n            }\n\n            if (x2 != 0) {\n                ext <<= 1;\n                if (gi.xr[i + 1] < 0)\n                    ext++;\n                cbits--;\n            }\n\n\n            x1 = x1 * xlen + x2;\n            xbits -= cbits;\n            cbits += h.hlen[x1];\n\n\n            putbits2(gfc, h.table[x1], cbits);\n            putbits2(gfc, ext, xbits);\n            bits += cbits + xbits;\n        }\n        return bits;\n    }\n\n    /**\n     * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\n     * well as the definitions of the side information on pages 26 and 27.\n     */\n    function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values)\n            region1Start = gi.big_values;\n\n        /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            gi.big_values, gi);\n        return bits;\n    }\n\n    function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n\n        bigvalues = gi.big_values;\n\n        var i = gi.region0_count + 1;\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        region2Start = gfc.scalefac_band.l[i];\n\n        if (region1Start > bigvalues)\n            region1Start = bigvalues;\n\n        if (region2Start > bigvalues)\n            region2Start = bigvalues;\n\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\n            gi);\n        return bits;\n    }\n\n    function writeMainData(gfp) {\n        var gr, ch, sfb, data_bits, tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n\n        if (gfp.version == 1) {\n            /* MPEG 1 */\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n                    var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n                    data_bits = 0;\n                    for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen1);\n                        data_bits += slen1;\n                    }\n                    for (; sfb < gi.sfbmax; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen2);\n                        data_bits += slen2;\n                    }\n\n                    if (gi.block_type == Encoder.SHORT_TYPE) {\n                        data_bits += ShortHuffmancodebits(gfc, gi);\n                    } else {\n                        data_bits += LongHuffmancodebits(gfc, gi);\n                    }\n                    data_bits += huffman_coder_count1(gfc, gi);\n                    /* does bitcount in quantize.c agree with actual bit count? */\n                    tot_bits += data_bits;\n                }\n                /* for ch */\n            }\n            /* for gr */\n        } else {\n            /* MPEG 2 */\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                var i, sfb_partition, scale_bits = 0;\n                data_bits = 0;\n                sfb = 0;\n                sfb_partition = 0;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                            scale_bits += 3 * slen;\n                        }\n                    }\n                    data_bits += ShortHuffmancodebits(gfc, gi);\n                } else {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition];\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                            scale_bits += slen;\n                        }\n                    }\n                    data_bits += LongHuffmancodebits(gfc, gi);\n                }\n                data_bits += huffman_coder_count1(gfc, gi);\n                /* does bitcount in quantize.c agree with actual bit count? */\n                tot_bits += scale_bits + data_bits;\n            }\n            /* for ch */\n        }\n        /* for gf */\n        return tot_bits;\n    }\n\n    /* main_data */\n\n    function TotalBytes() {\n        this.total = 0;\n    }\n\n    /*\n     * compute the number of bits required to flush all mp3 frames currently in\n     * the buffer. This should be the same as the reservoir size. Only call this\n     * routine between frames - i.e. only after all headers and data have been\n     * added to the buffer by format_bitstream().\n     *\n     * Also compute total_bits_output = size of mp3 buffer (including frame\n     * headers which may not have yet been send to the mp3 buffer) + number of\n     * bits needed to flush all mp3 frames.\n     *\n     * total_bytes_output is the size of the mp3 output buffer if\n     * lame_encode_flush_nogap() was called right now.\n     */\n    function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr;\n        /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n\n        /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n\n        if (flushbits >= 0) {\n            /* if flushbits >= 0, some headers have not yet been written */\n            /* reduce flushbits by the size of the headers */\n            remaining_headers = 1 + last_ptr - first_ptr;\n            if (last_ptr < first_ptr)\n                remaining_headers = 1 + last_ptr - first_ptr\n                    + LameInternalFlags.MAX_HEADER_BUF;\n            flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\n        }\n\n        /*\n         * finally, add some bits so that the last frame is complete these bits\n         * are not necessary to decode the last frame, but some decoders will\n         * ignore last frame if these bits are missing\n         */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame;\n        /* round up: */\n        if ((total_bytes_output.total % 8) != 0)\n            total_bytes_output.total = 1 + (total_bytes_output.total / 8);\n        else\n            total_bytes_output.total = (total_bytes_output.total / 8);\n        total_bytes_output.total += bufByteIdx + 1;\n\n        if (flushbits < 0) {\n            System.err.println(\"strange error flushing buffer ... \\n\");\n        }\n        return flushbits;\n    }\n\n    this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\n            return;\n        drain_into_ancillary(gfp, flushbits);\n\n        /* check that the 100% of the last frame has been written to bitstream */\n\n        /*\n         * we have padded out all frames with ancillary data, which is the same\n         * as filling the bitreservoir with ancillary data, so :\n         */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0;\n\n        /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n            var RadioGain = ga.GetTitleGain(gfc.rgdata);\n            gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0;\n            /* round to nearest */\n        }\n\n        /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n            gfc.noclipGainChange = Math.ceil(\n                        Math_log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0;\n            /* round up */\n\n            if (gfc.noclipGainChange > 0) {\n                /* clipping occurs */\n                if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0))\n                    gfc.noclipScale = (Math\n                        .floor((32767.0 / gfc.PeakSample) * 100.0) / 100.0);\n                /* round down */\n                else {\n                    /*\n                     * the user specified his own scaling factor. We could\n                     * suggest the scaling factor of\n                     * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\n                     * very inaccurate. So we'd rather not advice him on the\n                     * scaling factor.\n                     */\n                    gfc.noclipScale = -1;\n                }\n            } else\n            /* no clipping */\n                gfc.noclipScale = -1;\n        }\n    };\n\n    this.add_dummy_byte = function (gfp, val, n) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        while (n-- > 0) {\n            putbits_noheaders(gfc, val, 8);\n\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing += 8;\n        }\n    };\n\n    /**\n     * This is called after a frame of audio has been quantized and coded. It\n     * will write the encoded audio to the bitstream. Note that from a layer3\n     * encoder's perspective the bit stream is primarily a series of main_data()\n     * blocks, with header and side information inserted at the proper locations\n     * to maintain framing. (See Figure A.7 in the IS).\n     */\n    this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\n\n        /*\n         * compare number of bits needed to clear all buffered mp3 frames with\n         * what we think the resvsize is:\n         */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n            System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\n        }\n\n        /*\n         * compare main_data_begin for the next frame with what we think the\n         * resvsize is:\n         */\n        if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\n            System.err.printf(\"bit reservoir error: \\n\"\n                + \"l3_side.main_data_begin: %d \\n\"\n                + \"Resvoir size:             %d \\n\"\n                + \"resv drain (post)         %d \\n\"\n                + \"resv drain (pre)          %d \\n\"\n                + \"header and sideinfo:      %d \\n\"\n                + \"data bits:                %d \\n\"\n                + \"total bits:               %d (remainder: %d) \\n\"\n                + \"bitsperframe:             %d \\n\",\n                8 * l3_side.main_data_begin, gfc.ResvSize,\n                l3_side.resvDrain_post, l3_side.resvDrain_pre,\n                8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8\n                * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\n\n            System.err.println(\"This is a fatal error.  It has several possible causes:\");\n            System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\n            System.err.println(\" 9%%  Your system is overclocked\");\n            System.err.println(\" 1%%  bug in LAME encoding library\");\n\n            gfc.ResvSize = l3_side.main_data_begin * 8;\n        }\n        //;\n\n        if (totbit > 1000000000) {\n            /*\n             * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\n             * bit counter\n             */\n            var i;\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing -= totbit;\n            totbit = 0;\n        }\n\n        return 0;\n    };\n\n    /**\n     * <PRE>\n     * copy data out of the internal MP3 bit buffer into a user supplied\n     *       unsigned char buffer.\n     *\n     *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\n     *       mp3data=1      data is real mp3 frame data.\n     * </PRE>\n     */\n    this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0)\n            return 0;\n        if (size != 0 && minimum > size) {\n            /* buffer is too small */\n            return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n\n        if (mp3data != 0) {\n            var crc = new_int(1);\n            crc[0] = gfc.nMusicCRC;\n            vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n            gfc.nMusicCRC = crc[0];\n\n            /**\n             * sum number of bytes belonging to the mp3 stream this info will be\n             * written into the Xing/LAME header for seeking\n             */\n            if (minimum > 0) {\n                gfc.VBR_seek_table.nBytesWritten += minimum;\n            }\n\n            if (gfc.decode_on_the_fly) { /* decode the frame */\n                var pcm_buf = new_float_n([2, 1152]);\n                var mp3_in = minimum;\n                var samples_out = -1;\n                var i;\n\n                /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\n                while (samples_out != 0) {\n\n                    samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer,\n                        bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]);\n                    /*\n                     * samples_out = 0: need more data to decode samples_out =\n                     * -1: error. Lets assume 0 pcm output samples_out = number\n                     * of samples output\n                     */\n\n                    /*\n                     * set the lenght of the mp3 input buffer to zero, so that\n                     * in the next iteration of the loop we will be querying\n                     * mpglib about buffered data\n                     */\n                    mp3_in = 0;\n\n                    if (samples_out == -1) {\n                        /*\n                         * error decoding. Not fatal, but might screw up the\n                         * ReplayGain tag. What should we do? Ignore for now\n                         */\n                        samples_out = 0;\n                    }\n                    if (samples_out > 0) {\n                        /* process the PCM data */\n\n                        /*\n                         * this should not be possible, and indicates we have\n                         * overflown the pcm_buf buffer\n                         */\n\n                        if (gfc.findPeakSample) {\n                            for (i = 0; i < samples_out; i++) {\n                                if (pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = pcm_buf[0][i];\n                                else if (-pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = -pcm_buf[0][i];\n                            }\n                            if (gfc.channels_out > 1)\n                                for (i = 0; i < samples_out; i++) {\n                                    if (pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = pcm_buf[1][i];\n                                    else if (-pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = -pcm_buf[1][i];\n                                }\n                        }\n\n                        if (gfc.findReplayGain)\n                            if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0,\n                                    pcm_buf[1], 0, samples_out,\n                                    gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                                return -6;\n\n                    }\n                    /* if (samples_out>0) */\n                }\n                /* while (samples_out!=0) */\n            }\n            /* if (gfc.decode_on_the_fly) */\n\n        }\n        /* if (mp3data) */\n        return minimum;\n    };\n\n    this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n    };\n\n    // From machine.h\n\n\n}\n\nfunction HuffCodeTab(len, max, tab, hl) {\n    this.xlen = len;\n    this.linmax = max;\n    this.table = tab;\n    this.hlen = hl;\n}\n\nvar Tables = {};\n\n\nTables.t1HB = [\n    1, 1,\n    1, 0\n];\n\nTables.t2HB = [\n    1, 2, 1,\n    3, 1, 1,\n    3, 2, 0\n];\n\nTables.t3HB = [\n    3, 2, 1,\n    1, 1, 1,\n    3, 2, 0\n];\n\nTables.t5HB = [\n    1, 2, 6, 5,\n    3, 1, 4, 4,\n    7, 5, 7, 1,\n    6, 1, 1, 0\n];\n\nTables.t6HB = [\n    7, 3, 5, 1,\n    6, 2, 3, 2,\n    5, 4, 4, 1,\n    3, 3, 2, 0\n];\n\nTables.t7HB = [\n    1, 2, 10, 19, 16, 10,\n    3, 3, 7, 10, 5, 3,\n    11, 4, 13, 17, 8, 4,\n    12, 11, 18, 15, 11, 2,\n    7, 6, 9, 14, 3, 1,\n    6, 4, 5, 3, 2, 0\n];\n\nTables.t8HB = [\n    3, 4, 6, 18, 12, 5,\n    5, 1, 2, 16, 9, 3,\n    7, 3, 5, 14, 7, 3,\n    19, 17, 15, 13, 10, 4,\n    13, 5, 8, 11, 5, 1,\n    12, 4, 4, 1, 1, 0\n];\n\nTables.t9HB = [\n    7, 5, 9, 14, 15, 7,\n    6, 4, 5, 5, 6, 7,\n    7, 6, 8, 8, 8, 5,\n    15, 6, 9, 10, 5, 1,\n    11, 7, 9, 6, 4, 1,\n    14, 4, 6, 2, 6, 0\n];\n\nTables.t10HB = [\n    1, 2, 10, 23, 35, 30, 12, 17,\n    3, 3, 8, 12, 18, 21, 12, 7,\n    11, 9, 15, 21, 32, 40, 19, 6,\n    14, 13, 22, 34, 46, 23, 18, 7,\n    20, 19, 33, 47, 27, 22, 9, 3,\n    31, 22, 41, 26, 21, 20, 5, 3,\n    14, 13, 10, 11, 16, 6, 5, 1,\n    9, 8, 7, 8, 4, 4, 2, 0\n];\n\nTables.t11HB = [\n    3, 4, 10, 24, 34, 33, 21, 15,\n    5, 3, 4, 10, 32, 17, 11, 10,\n    11, 7, 13, 18, 30, 31, 20, 5,\n    25, 11, 19, 59, 27, 18, 12, 5,\n    35, 33, 31, 58, 30, 16, 7, 5,\n    28, 26, 32, 19, 17, 15, 8, 14,\n    14, 12, 9, 13, 14, 9, 4, 1,\n    11, 4, 6, 6, 6, 3, 2, 0\n];\n\nTables.t12HB = [\n    9, 6, 16, 33, 41, 39, 38, 26,\n    7, 5, 6, 9, 23, 16, 26, 11,\n    17, 7, 11, 14, 21, 30, 10, 7,\n    17, 10, 15, 12, 18, 28, 14, 5,\n    32, 13, 22, 19, 18, 16, 9, 5,\n    40, 17, 31, 29, 17, 13, 4, 2,\n    27, 12, 11, 15, 10, 7, 4, 1,\n    27, 12, 8, 12, 6, 3, 1, 0\n];\n\nTables.t13HB = [\n    1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\n    3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\n    15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\n    22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\n    35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\n    58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\n    47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\n    72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\n    43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\n    53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\n    35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\n    53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\n    34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\n    45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\n    48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\n    16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\n];\n\nTables.t15HB = [\n    7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\n    13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\n    19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\n    29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\n    52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\n    77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\n    125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\n    109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\n    90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\n    71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\n    109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\n    86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\n    118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\n    91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\n    123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\n    71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\n];\n\nTables.t16HB = [\n    1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\n    3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\n    15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\n    45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\n    75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\n    66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\n    111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\n    98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\n    85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\n    154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\n    139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\n    243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\n    202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\n    747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\n    377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\n    12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\n];\n\nTables.t24HB = [\n    15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\n    14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\n    47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\n    81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\n    147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\n    263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\n    249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\n    435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\n    427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\n    335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\n    668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\n    652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\n    648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\n    620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\n    1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\n    43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\n];\n\nTables.t32HB = [\n    1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\n    7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\n];\n\nTables.t33HB = [\n    15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\n    7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\n];\n\nTables.t1l = [\n    1, 4,\n    3, 5\n];\n\nTables.t2l = [\n    1, 4, 7,\n    4, 5, 7,\n    6, 7, 8\n];\n\nTables.t3l = [\n    2, 3, 7,\n    4, 4, 7,\n    6, 7, 8\n];\n\nTables.t5l = [\n    1, 4, 7, 8,\n    4, 5, 8, 9,\n    7, 8, 9, 10,\n    8, 8, 9, 10\n];\n\nTables.t6l = [\n    3, 4, 6, 8,\n    4, 4, 6, 7,\n    5, 6, 7, 8,\n    7, 7, 8, 9\n];\n\nTables.t7l = [\n    1, 4, 7, 9, 9, 10,\n    4, 6, 8, 9, 9, 10,\n    7, 7, 9, 10, 10, 11,\n    8, 9, 10, 11, 11, 11,\n    8, 9, 10, 11, 11, 12,\n    9, 10, 11, 12, 12, 12\n];\n\nTables.t8l = [\n    2, 4, 7, 9, 9, 10,\n    4, 4, 6, 10, 10, 10,\n    7, 6, 8, 10, 10, 11,\n    9, 10, 10, 11, 11, 12,\n    9, 9, 10, 11, 12, 12,\n    10, 10, 11, 11, 13, 13\n];\n\nTables.t9l = [\n    3, 4, 6, 7, 9, 10,\n    4, 5, 6, 7, 8, 10,\n    5, 6, 7, 8, 9, 10,\n    7, 7, 8, 9, 9, 10,\n    8, 8, 9, 9, 10, 11,\n    9, 9, 10, 10, 11, 11\n];\n\nTables.t10l = [\n    1, 4, 7, 9, 10, 10, 10, 11,\n    4, 6, 8, 9, 10, 11, 10, 10,\n    7, 8, 9, 10, 11, 12, 11, 11,\n    8, 9, 10, 11, 12, 12, 11, 12,\n    9, 10, 11, 12, 12, 12, 12, 12,\n    10, 11, 12, 12, 13, 13, 12, 13,\n    9, 10, 11, 12, 12, 12, 13, 13,\n    10, 10, 11, 12, 12, 13, 13, 13\n];\n\nTables.t11l = [\n    2, 4, 6, 8, 9, 10, 9, 10,\n    4, 5, 6, 8, 10, 10, 9, 10,\n    6, 7, 8, 9, 10, 11, 10, 10,\n    8, 8, 9, 11, 10, 12, 10, 11,\n    9, 10, 10, 11, 11, 12, 11, 12,\n    9, 10, 11, 12, 12, 13, 12, 13,\n    9, 9, 9, 10, 11, 12, 12, 12,\n    9, 9, 10, 11, 12, 12, 12, 12\n];\n\nTables.t12l = [\n    4, 4, 6, 8, 9, 10, 10, 10,\n    4, 5, 6, 7, 9, 9, 10, 10,\n    6, 6, 7, 8, 9, 10, 9, 10,\n    7, 7, 8, 8, 9, 10, 10, 10,\n    8, 8, 9, 9, 10, 10, 10, 11,\n    9, 9, 10, 10, 10, 11, 10, 11,\n    9, 9, 9, 10, 10, 11, 11, 12,\n    10, 10, 10, 11, 11, 11, 11, 12\n];\n\nTables.t13l = [\n    1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\n    4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\n    7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\n    8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\n    9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\n    10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\n    10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n    11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\n    10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\n    11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\n    11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\n    12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\n    12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\n    13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\n    14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\n    13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\n];\n\nTables.t15l = [\n    3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\n    5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\n    6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\n    7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\n    10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n    10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\n    12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\n    12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n    13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\n    13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\n];\n\nTables.t16_5l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\n    11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\n];\n\nTables.t16l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\n    10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\n];\n\nTables.t24l = [\n    4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\n    5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\n    7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\n    8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\n    9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\n    10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\n    10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\n    11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\n    12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\n    13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\n    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\n];\n\nTables.t32l = [\n    1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\n    4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\n];\n\nTables.t33l = [\n    4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\n    4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\n];\n\nTables.ht = [\n    /* xlen, linmax, table, hlen */\n    new HuffCodeTab(0, 0, null, null),\n    new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\n    new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\n    new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\n    new HuffCodeTab(0, 0, null, null), /* Apparently not used */\n    new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\n    new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\n    new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\n    new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\n    new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\n    new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\n    new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\n    new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\n    new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\n    new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\n    new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\n\n    new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\n\n    new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\n\n    new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\n    new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 16*16; i++) [\n *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.largetbl = [\n    0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\n    0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\n    0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\n    0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\n    0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\n    0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\n    0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\n    0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\n    0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\n    0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\n    0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\n    0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\n    0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\n    0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\n    0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\n    0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\n    0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\n    0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\n    0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\n    0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\n    0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\n    0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\n    0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\n    0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\n    0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\n    0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\n];\n/**\n * <CODE>\n *  for (i = 0; i < 3*3; i++) [\n *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.table23 = [\n    0x010002, 0x040003, 0x070007,\n    0x040004, 0x050004, 0x070007,\n    0x060006, 0x070007, 0x080008\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 4*4; i++) [\n *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\n *   ]\n * </CODE>\n *\n */\nTables.table56 = [\n    0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\n    0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\n];\n\nTables.bitrate_table = [\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\n    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\n];\n\n/**\n * MPEG 2, MPEG 1, MPEG 2.5.\n */\nTables.samplerate_table = [\n    [22050, 24000, 16000, -1],\n    [44100, 48000, 32000, -1],\n    [11025, 12000, 8000, -1],\n];\n\n/**\n * This is the scfsi_band table from 2.4.2.7 of the IS.\n */\nTables.scfsi_band = [0, 6, 11, 16, 21];\n\nfunction MeanBits(meanBits) {\n    this.bits = meanBits;\n}\n\n//package mp3;\n\nfunction CalcNoiseResult() {\n    /**\n     * sum of quantization noise > masking\n     */\n    this.over_noise = 0.;\n    /**\n     * sum of all quantization noise\n     */\n    this.tot_noise = 0.;\n    /**\n     * max quantization noise\n     */\n    this.max_noise = 0.;\n    /**\n     * number of quantization noise > masking\n     */\n    this.over_count = 0;\n    /**\n     * SSD-like cost of distorted bands\n     */\n    this.over_SSD = 0;\n    this.bits = 0;\n}\n\nfunction VBRQuantize() {\n    var qupvt;\n    var tak;\n\n    this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n    }\n    //TODO\n\n}\n\n\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\n\nfunction LameGlobalFlags() {\n\n    this.class_id = 0;\n\n    /* input description */\n\n    /**\n     * number of samples. default=-1\n     */\n    this.num_samples = 0;\n    /**\n     * input number of channels. default=2\n     */\n    this.num_channels = 0;\n    /**\n     * input_samp_rate in Hz. default=44.1 kHz\n     */\n    this.in_samplerate = 0;\n    /**\n     * output_samp_rate. default: LAME picks best value at least not used for\n     * MP3 decoding: Remember 44.1 kHz MP3s and AC97\n     */\n    this.out_samplerate = 0;\n    /**\n     * scale input by this amount before encoding at least not used for MP3\n     * decoding\n     */\n    this.scale = 0.;\n    /**\n     * scale input of channel 0 (left) by this amount before encoding\n     */\n    this.scale_left = 0.;\n    /**\n     * scale input of channel 1 (right) by this amount before encoding\n     */\n    this.scale_right = 0.;\n\n    /* general control params */\n    /**\n     * collect data for a MP3 frame analyzer?\n     */\n    this.analysis = false;\n    /**\n     * add Xing VBR tag?\n     */\n    this.bWriteVbrTag = false;\n\n    /**\n     * use lame/mpglib to convert mp3 to wav\n     */\n    this.decode_only = false;\n    /**\n     * quality setting 0=best, 9=worst default=5\n     */\n    this.quality = 0;\n    /**\n     * see enum default = LAME picks best value\n     */\n    this.mode = MPEGMode.STEREO;\n    /**\n     * force M/S mode. requires mode=1\n     */\n    this.force_ms = false;\n    /**\n     * use free format? default=0\n     */\n    this.free_format = false;\n    /**\n     * find the RG value? default=0\n     */\n    this.findReplayGain = false;\n    /**\n     * decode on the fly? default=0\n     */\n    this.decode_on_the_fly = false;\n    /**\n     * 1 (default) writes ID3 tags, 0 not\n     */\n    this.write_id3tag_automatic = false;\n\n    /*\n     * set either brate>0 or compression_ratio>0, LAME will compute the value of\n     * the variable not set. Default is compression_ratio = 11.025\n     */\n    /**\n     * bitrate\n     */\n    this.brate = 0;\n    /**\n     * sizeof(wav file)/sizeof(mp3 file)\n     */\n    this.compression_ratio = 0.;\n\n    /* frame params */\n    /**\n     * mark as copyright. default=0\n     */\n    this.copyright = 0;\n    /**\n     * mark as original. default=1\n     */\n    this.original = 0;\n    /**\n     * the MP3 'private extension' bit. Meaningless\n     */\n    this.extension = 0;\n    /**\n     * Input PCM is emphased PCM (for instance from one of the rarely emphased\n     * CDs), it is STRONGLY not recommended to use this, because psycho does not\n     * take it into account, and last but not least many decoders don't care\n     * about these bits\n     */\n    this.emphasis = 0;\n    /**\n     * use 2 bytes per frame for a CRC checksum. default=0\n     */\n    this.error_protection = 0;\n    /**\n     * enforce ISO spec as much as possible\n     */\n    this.strict_ISO = false;\n\n    /**\n     * use bit reservoir?\n     */\n    this.disable_reservoir = false;\n\n    /* quantization/noise shaping */\n    this.quant_comp = 0;\n    this.quant_comp_short = 0;\n    this.experimentalY = false;\n    this.experimentalZ = 0;\n    this.exp_nspsytune = 0;\n\n    this.preset = 0;\n\n    /* VBR control */\n    this.VBR = null;\n    /**\n     * Range [0,...,1[\n     */\n    this.VBR_q_frac = 0.;\n    /**\n     * Range [0,...,9]\n     */\n    this.VBR_q = 0;\n    this.VBR_mean_bitrate_kbps = 0;\n    this.VBR_min_bitrate_kbps = 0;\n    this.VBR_max_bitrate_kbps = 0;\n    /**\n     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\n     * silence\n     */\n    this.VBR_hard_min = 0;\n\n    /* resampling and filtering */\n\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.lowpassfreq = 0;\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.highpassfreq = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.lowpasswidth = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.highpasswidth = 0;\n\n    /*\n     * psycho acoustics and other arguments which you should not change unless\n     * you know what you are doing\n     */\n\n    this.maskingadjust = 0.;\n    this.maskingadjust_short = 0.;\n    /**\n     * only use ATH\n     */\n    this.ATHonly = false;\n    /**\n     * only use ATH for short blocks\n     */\n    this.ATHshort = false;\n    /**\n     * disable ATH\n     */\n    this.noATH = false;\n    /**\n     * select ATH formula\n     */\n    this.ATHtype = 0;\n    /**\n     * change ATH formula 4 shape\n     */\n    this.ATHcurve = 0.;\n    /**\n     * lower ATH by this many db\n     */\n    this.ATHlower = 0.;\n    /**\n     * select ATH auto-adjust scheme\n     */\n    this.athaa_type = 0;\n    /**\n     * select ATH auto-adjust loudness calc\n     */\n    this.athaa_loudapprox = 0;\n    /**\n     * dB, tune active region of auto-level\n     */\n    this.athaa_sensitivity = 0.;\n    this.short_blocks = null;\n    /**\n     * use temporal masking effect\n     */\n    this.useTemporal = false;\n    this.interChRatio = 0.;\n    /**\n     * Naoki's adjustment of Mid/Side maskings\n     */\n    this.msfix = 0.;\n\n    /**\n     * 0 off, 1 on\n     */\n    this.tune = false;\n    /**\n     * used to pass values for debugging and stuff\n     */\n    this.tune_value_a = 0.;\n\n    /************************************************************************/\n    /* internal variables, do not set... */\n    /* provided because they may be of use to calling application */\n    /************************************************************************/\n\n    /**\n     * 0=MPEG-2/2.5 1=MPEG-1\n     */\n    this.version = 0;\n    this.encoder_delay = 0;\n    /**\n     * number of samples of padding appended to input\n     */\n    this.encoder_padding = 0;\n    this.framesize = 0;\n    /**\n     * number of frames encoded\n     */\n    this.frameNum = 0;\n    /**\n     * is this struct owned by calling program or lame?\n     */\n    this.lame_allocated_gfp = 0;\n    /**************************************************************************/\n    /* more internal variables are stored in this structure: */\n    /**************************************************************************/\n    this.internal_flags = null;\n}\n\n\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tthis.quantize.ms_convert(gfc.l3_side, gr);\n\t\t\t\tthis.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\n\t\t\t\t\t\tmean_bits, max_bits);\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\n\n\nfunction ReplayGain() {\n\t//fix 精简\n}\n\n//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\n\n\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n\n    this.l = new_int(1 + Encoder.SBMAX_l);\n    this.s = new_int(1 + Encoder.SBMAX_s);\n    this.psfb21 = new_int(1 + Encoder.PSFB21);\n    this.psfb12 = new_int(1 + Encoder.PSFB12);\n    var l = this.l;\n    var s = this.s;\n\n    if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n    }\n}\n\n/*\n *      quantize_pvt source file\n *\n *      Copyright (c) 1999-2002 Takehiro Tominaga\n *      Copyright (c) 2000-2002 Robert Hegemann\n *      Copyright (c) 2001 Naoki Shibata\n *      Copyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n\nQuantizePVT.Q_MAX = (256 + 1);\nQuantizePVT.Q_MAX2 = 116;\nQuantizePVT.LARGE_BITS = 100000;\nQuantizePVT.IXMAX_VAL = 8206;\n\nfunction QuantizePVT() {\n\n    var tak = null;\n    var rv = null;\n    var psy = null;\n\n    this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n    };\n\n    function POW20(x) {\n        return pow20[x + QuantizePVT.Q_MAX2];\n    }\n\n    this.IPOW20 = function (x) {\n        return ipow20[x];\n    }\n\n    /**\n     * smallest such that 1.0+DBL_EPSILON != 1.0\n     */\n    var DBL_EPSILON = 2.2204460492503131e-016;\n\n    /**\n     * ix always <= 8191+15. see count_bits()\n     */\n    var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n\n    var PRECALC_SIZE = (IXMAX_VAL + 2);\n\n    var Q_MAX = QuantizePVT.Q_MAX;\n\n\n    /**\n     * <CODE>\n     * minimum possible number of\n     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\n     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n     *\n     * for long block, 0+((15+3)<<2) = 18*4 = 72\n     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\n     * </CODE>\n     */\n    var Q_MAX2 = QuantizePVT.Q_MAX2;\n\n    var LARGE_BITS = QuantizePVT.LARGE_BITS;\n\n\n    /**\n     * Assuming dynamic range=96dB, this value should be 92\n     */\n    var NSATHSCALE = 100;\n\n    /**\n     * The following table is used to implement the scalefactor partitioning for\n     * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\n     * to the way the tables are presented in the IS:\n     *\n     * [table_number][row_in_table][column of nr_of_sfb]\n     */\n    this.nr_of_sfb_block = [\n        [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\n        [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\n        [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\n        [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\n        [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\n        [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n\n    /**\n     * Table B.6: layer3 preemphasis\n     */\n    var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n        2, 2, 3, 3, 3, 2, 0];\n    this.pretab = pretab;\n\n    /**\n     * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\n     * bands. <BR>\n     * Index into this using a method such as:<BR>\n     * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\n     */\n    this.sfBandIndex = [\n        // Table B.2.b: 22.05 kHz\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n        ),\n        /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\n                540, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.2.a: 16 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.b: 44.1 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.c: 48 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\n                576],\n            [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.a: 32 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 11.025 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 12 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 8 kHz */\n        new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\n                572, 574, 576],\n            [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\n                492 / 3, 498 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        )\n    ];\n\n    var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n    var ipow20 = new_float(Q_MAX);\n    var pow43 = new_float(PRECALC_SIZE);\n\n    var adj43 = new_float(PRECALC_SIZE);\n    this.adj43 = adj43;\n\n    /**\n     * <PRE>\n     * compute the ATH for each scalefactor band cd range: 0..96db\n     *\n     * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\n     * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\n     * -9db 0db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\n     * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\n     * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\n     *\n     *\n     * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\n     * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\n     * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\n     * -11 - 96 = -107db = ATH at 3.3kHz.\n     *\n     * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\n     * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\n     * </PRE>\n     */\n    function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n\n        ath -= NSATHSCALE;\n\n        /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n    }\n\n    function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            ATH_l[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            var start = gfc.scalefac_band.psfb21[sfb];\n            var end = gfc.scalefac_band.psfb21[sfb + 1];\n            ATH_psfb21[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            ATH_s[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n            }\n            ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            var start = gfc.scalefac_band.psfb12[sfb];\n            var end = gfc.scalefac_band.psfb12[sfb + 1];\n            ATH_psfb12[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n            }\n            /* not sure about the following */\n            ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\n        }\n\n        /*\n         * no-ATH mode: reduce ATH to -200 dB\n         */\n        if (gfp.noATH) {\n            for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n                ATH_l[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n                ATH_psfb21[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n                ATH_s[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n                ATH_psfb12[sfb] = 1E-20;\n            }\n        }\n\n        /*\n         * work in progress, don't rely on it too much\n         */\n        gfc.ATH.floor = 10. * Math_log10(ATHmdct(gfp, -1.));\n    }\n\n    /**\n     * initialization for iteration_loop\n     */\n    this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n\n        if (gfc.iteration_init_init == 0) {\n            gfc.iteration_init_init = 1;\n\n            l3_side.main_data_begin = 0;\n            compute_ath(gfp);\n\n            pow43[0] = 0.0;\n            for (i = 1; i < PRECALC_SIZE; i++)\n                pow43[i] = Math.pow(i, 4.0 / 3.0);\n\n            for (i = 0; i < PRECALC_SIZE - 1; i++)\n                adj43[i] = ((i + 1) - Math.pow(\n                    0.5 * (pow43[i] + pow43[i + 1]), 0.75));\n            adj43[i] = 0.5;\n\n            for (i = 0; i < Q_MAX; i++)\n                ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n            for (i = 0; i <= Q_MAX + Q_MAX2; i++)\n                pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n\n            tak.huffman_init(gfc);\n\n            {\n                var bass, alto, treble, sfb21;\n\n                i = (gfp.exp_nspsytune >> 2) & 63;\n                if (i >= 32)\n                    i -= 64;\n                bass = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 8) & 63;\n                if (i >= 32)\n                    i -= 64;\n                alto = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 14) & 63;\n                if (i >= 32)\n                    i -= 64;\n                treble = Math.pow(10, i / 4.0 / 10.0);\n\n                /*\n                 * to be compatible with Naoki's original code, the next 6 bits\n                 * define only the amount of changing treble for sfb21\n                 */\n                i = (gfp.exp_nspsytune >> 20) & 63;\n                if (i >= 32)\n                    i -= 64;\n                sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n                for (i = 0; i < Encoder.SBMAX_l; i++) {\n                    var f;\n                    if (i <= 6)\n                        f = bass;\n                    else if (i <= 13)\n                        f = alto;\n                    else if (i <= 20)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.longfact[i] = f;\n                }\n                for (i = 0; i < Encoder.SBMAX_s; i++) {\n                    var f;\n                    if (i <= 5)\n                        f = bass;\n                    else if (i <= 10)\n                        f = alto;\n                    else if (i <= 11)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.shortfact[i] = f;\n                }\n            }\n        }\n    }\n\n    /**\n     * allocate bits among 2 channels based on PE<BR>\n     * mt 6/99<BR>\n     * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\n     */\n    this.on_pe = function (gfp, pe,\n                           targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0, bits;\n        var add_bits = new_int(2);\n        var ch;\n\n        /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits;\n        /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            // hard limit per granule\n            max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            /******************************************************************\n             * allocate bits for each channel\n             ******************************************************************/\n            targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\n                tbits / gfc.channels_out);\n\n            add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\n\n            /* at most increase bits by 1.5*average */\n            if (add_bits[ch] > mean_bits * 3 / 4)\n                add_bits[ch] = mean_bits * 3 / 4;\n\n            if (add_bits[ch] < 0)\n                add_bits[ch] = 0;\n\n            if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                add_bits[ch] = Math.max(0,\n                    LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n\n            bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                add_bits[ch] = extra_bits * add_bits[ch] / bits;\n            }\n        }\n\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] += add_bits[ch];\n            extra_bits -= add_bits[ch];\n        }\n\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                targ_bits[ch] /= bits;\n                sum += targ_bits[ch];\n            }\n        }\n\n        return max_bits;\n    }\n\n    this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\n\n        /*\n         * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\n         * allocate 50/50 mid/side fac= 0\n         */\n        /* 75/25 split is fac=.5 */\n        var fac = .33 * (.5 - ms_ener_ratio) / .5;\n        if (fac < 0)\n            fac = 0;\n        if (fac > .5)\n            fac = .5;\n\n        /* number of bits to move from side channel to mid channel */\n        /* move_bits = fac*targ_bits[1]; */\n        var move_bits = 0 | (fac * .5 * (targ_bits[0] + targ_bits[1]));\n\n        if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\n            move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\n        }\n        if (move_bits < 0)\n            move_bits = 0;\n\n        if (targ_bits[1] >= 125) {\n            /* dont reduce side channel below 125 bits */\n            if (targ_bits[1] - move_bits > 125) {\n\n                /* if mid channel already has 2x more than average, dont bother */\n                /* mean_bits = bits per granule (for both channels) */\n                if (targ_bits[0] < mean_bits)\n                    targ_bits[0] += move_bits;\n                targ_bits[1] -= move_bits;\n            } else {\n                targ_bits[0] += targ_bits[1] - 125;\n                targ_bits[1] = 125;\n            }\n        }\n\n        move_bits = targ_bits[0] + targ_bits[1];\n        if (move_bits > max_bits) {\n            targ_bits[0] = (max_bits * targ_bits[0]) / move_bits;\n            targ_bits[1] = (max_bits * targ_bits[1]) / move_bits;\n        }\n    };\n\n    /**\n     *  Robert Hegemann 2001-04-27:\n     *  this adjusts the ATH, keeping the original noise floor\n     *  affects the higher frequencies more than the lower ones\n     */\n    this.athAdjust = function (a, x, athFloor) {\n        /*\n         * work in progress\n         */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor;\n        /* undo scaling */\n        if (v > 1E-20)\n            w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0)\n            w = 0.;\n        u *= w;\n        u += athFloor + o - p;\n        /* redo scaling */\n\n        return Math.pow(10., 0.1 * u);\n    };\n\n    /**\n     * Calculate the allowed distortion for each scalefactor band, as determined\n     * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\n     *\n     * returns number of sfb's with energy > ATH\n     */\n    this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb, j = 0, ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n            /* was already done in PSY-Model */\n            masking_lower = 1.0;\n        }\n\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n            var en0, xmin;\n            var rh1, rh2;\n            var width, l;\n\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\n            else\n                xmin = ATH.adjust * ATH.l[gsfb];\n\n            width = cod_info.width[gsfb];\n            rh1 = xmin / width;\n            rh2 = DBL_EPSILON;\n            l = width >> 1;\n            en0 = 0.0;\n            do {\n                var xa, xb;\n                xa = xr[j] * xr[j];\n                en0 += xa;\n                rh2 += (xa < rh1) ? xa : rh1;\n                j++;\n                xb = xr[j] * xr[j];\n                en0 += xb;\n                rh2 += (xb < rh1) ? xb : rh1;\n                j++;\n            } while (--l > 0);\n            if (en0 > xmin)\n                ath_over++;\n\n            if (gsfb == Encoder.SBPSY_l) {\n                var x = xmin * gfc.nsPsy.longfact[gsfb];\n                if (rh2 < x) {\n                    rh2 = x;\n                }\n            }\n            if (enable_athaa_fix != 0) {\n                xmin = rh2;\n            }\n            if (!gfp.ATHonly) {\n                var e = ratio.en.l[gsfb];\n                if (e > 0.0) {\n                    var x;\n                    x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n                    if (enable_athaa_fix != 0)\n                        x *= gfc.nsPsy.longfact[gsfb];\n                    if (xmin < x)\n                        xmin = x;\n                }\n            }\n            if (enable_athaa_fix != 0)\n                pxmin[pxminPos++] = xmin;\n            else\n                pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        }\n        /* end of long block loop */\n\n        /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            // NORM, START or STOP type, but not SHORT\n            var k = 576;\n            while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n                max_nonzero = k;\n            }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n            var width, b;\n            var tmpATH;\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\n            else\n                tmpATH = ATH.adjust * ATH.s[sfb];\n\n            width = cod_info.width[gsfb];\n            for (b = 0; b < 3; b++) {\n                var en0 = 0.0, xmin;\n                var rh1, rh2;\n                var l = width >> 1;\n\n                rh1 = tmpATH / width;\n                rh2 = DBL_EPSILON;\n                do {\n                    var xa, xb;\n                    xa = xr[j] * xr[j];\n                    en0 += xa;\n                    rh2 += (xa < rh1) ? xa : rh1;\n                    j++;\n                    xb = xr[j] * xr[j];\n                    en0 += xb;\n                    rh2 += (xb < rh1) ? xb : rh1;\n                    j++;\n                } while (--l > 0);\n                if (en0 > tmpATH)\n                    ath_over++;\n                if (sfb == Encoder.SBPSY_s) {\n                    var x = tmpATH * gfc.nsPsy.shortfact[sfb];\n                    if (rh2 < x) {\n                        rh2 = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    xmin = rh2;\n                else\n                    xmin = tmpATH;\n\n                if (!gfp.ATHonly && !gfp.ATHshort) {\n                    var e = ratio.en.s[sfb][b];\n                    if (e > 0.0) {\n                        var x;\n                        x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                        if (enable_athaa_fix != 0)\n                            x *= gfc.nsPsy.shortfact[sfb];\n                        if (xmin < x)\n                            xmin = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    pxmin[pxminPos++] = xmin;\n                else\n                    pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n            }\n            /* b */\n            if (gfp.useTemporal) {\n                if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\n                    pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\n                        * gfc.decay;\n                if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\n                    pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\n                        * gfc.decay;\n            }\n        }\n        /* end of short block sfb loop */\n\n        return ath_over;\n    };\n\n    function StartLine(j) {\n        this.s = j;\n    }\n\n    this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n\n        if (j > cod_info.count1) {\n            while ((l--) != 0) {\n                var temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n            }\n        } else if (j > cod_info.big_values) {\n            var ix01 = new_float(2);\n            ix01[0] = 0;\n            ix01[1] = step;\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n            }\n        } else {\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n            }\n        }\n\n        startline.s = j;\n        return noise;\n    }\n\n    /**\n     * <PRE>\n     * -oo dB  =>  -1.00\n     * - 6 dB  =>  -0.97\n     * - 3 dB  =>  -0.80\n     * - 2 dB  =>  -0.64\n     * - 1 dB  =>  -0.38\n     *   0 dB  =>   0.00\n     * + 1 dB  =>  +0.49\n     * + 2 dB  =>  +1.06\n     * + 3 dB  =>  +1.68\n     * + 6 dB  =>  +3.69\n     * +10 dB  =>  +6.45\n     * </PRE>\n     */\n    this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb, l, over = 0;\n        var over_noise_db = 0;\n        /* 0 dB relative to masking */\n        var tot_noise_db = 0;\n        /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n\n        res.over_SSD = 0;\n\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n            var s = cod_info.global_gain\n                - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\n                    : 0)) << (cod_info.scalefac_scale + 1))\n                - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n            var noise = 0.0;\n\n            if (prev_noise != null && (prev_noise.step[sfb] == s)) {\n\n                /* use previously computed values */\n                noise = prev_noise.noise[sfb];\n                j += cod_info.width[sfb];\n                distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                noise = prev_noise.noise_log[sfb];\n\n            } else {\n                var step = POW20(s);\n                l = cod_info.width[sfb] >> 1;\n\n                if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\n                    var usefullsize;\n                    usefullsize = cod_info.max_nonzero_coeff - j + 1;\n\n                    if (usefullsize > 0)\n                        l = usefullsize >> 1;\n                    else\n                        l = 0;\n                }\n\n                var sl = new StartLine(j);\n                noise = this.calc_noise_core(cod_info, sl, l, step);\n                j = sl.s;\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.step[sfb] = s;\n                    prev_noise.noise[sfb] = noise;\n                }\n\n                noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                /* multiplying here is adding in dB, but can overflow */\n                noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.noise_log[sfb] = noise;\n                }\n            }\n\n            if (prev_noise != null) {\n                /* save noise values */\n                prev_noise.global_gain = cod_info.global_gain;\n            }\n\n            tot_noise_db += noise;\n\n            if (noise > 0.0) {\n                var tmp;\n\n                tmp = Math.max(0 | (noise * 10 + .5), 1);\n                res.over_SSD += tmp * tmp;\n\n                over++;\n                /* multiplying here is adding in dB -but can overflow */\n                /* over_noise *= noise; */\n                over_noise_db += noise;\n            }\n            max_noise = Math.max(max_noise, noise);\n\n        }\n\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n\n        return over;\n    }\n\n    /**\n     * updates plotting data\n     *\n     * Mark Taylor 2000-??-??\n     *\n     * Robert Hegemann: moved noise/distortion calc into it\n     */\n    this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\n        var gfc = gfp.internal_flags;\n        var sfb, sfb2;\n        var l;\n        var en0, en1;\n        var ifqstep = (cod_info.scalefac_scale == 0) ? .5 : 1.0;\n        var scalefac = cod_info.scalefac;\n\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xfsf = new_float(L3Side.SFBMAX);\n        var noise = new CalcNoiseResult();\n\n        calc_xmin(gfp, ratio, cod_info, l3_xmin);\n        calc_noise(cod_info, l3_xmin, xfsf, noise, null);\n\n        var j = 0;\n        sfb2 = cod_info.sfb_lmax;\n        if (cod_info.block_type != Encoder.SHORT_TYPE\n            && 0 == cod_info.mixed_block_flag)\n            sfb2 = 22;\n        for (sfb = 0; sfb < sfb2; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            var bw = end - start;\n            for (en0 = 0.0; j < end; j++)\n                en0 += cod_info.xr[j] * cod_info.xr[j];\n            en0 /= bw;\n            /* convert to MDCT units */\n            /* scaling so it shows up on FFT plot */\n            en1 = 1e15;\n            gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\n            gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\n\n            if (ratio.en.l[sfb] > 0 && !gfp.ATHonly)\n                en0 = en0 / ratio.en.l[sfb];\n            else\n                en0 = 0.0;\n\n            gfc.pinfo.thr[gr][ch][sfb] = en1\n                * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]);\n\n            /* there is no scalefactor bands >= SBPSY_l */\n            gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\n            if (cod_info.preflag != 0 && sfb >= 11)\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\n\n            if (sfb < Encoder.SBPSY_l) {\n                /* scfsi should be decoded by caller side */\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\n            }\n        }\n        /* for sfb */\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            sfb2 = sfb;\n            for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                var bw = end - start;\n                for (var i = 0; i < 3; i++) {\n                    for (en0 = 0.0, l = start; l < end; l++) {\n                        en0 += cod_info.xr[j] * cod_info.xr[j];\n                        j++;\n                    }\n                    en0 = Math.max(en0 / bw, 1e-20);\n                    /* convert to MDCT units */\n                    /* scaling so it shows up on FFT plot */\n                    en1 = 1e15;\n\n                    gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\n                    gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2]\n                        * xfsf[sfb2] / bw;\n                    if (ratio.en.s[sfb][i] > 0)\n                        en0 = en0 / ratio.en.s[sfb][i];\n                    else\n                        en0 = 0.0;\n                    if (gfp.ATHonly || gfp.ATHshort)\n                        en0 = 0;\n\n                    gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1\n                        * Math.max(en0 * ratio.thm.s[sfb][i],\n                            gfc.ATH.s[sfb]);\n\n                    /* there is no scalefactor bands >= SBPSY_s */\n                    gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0\n                        * cod_info.subblock_gain[i];\n                    if (sfb < Encoder.SBPSY_s) {\n                        gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep\n                            * scalefac[sfb2];\n                    }\n                    sfb2++;\n                }\n            }\n        }\n        /* block type short */\n        gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\n        gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length\n            + cod_info.part2_length;\n        gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\n\n        gfc.pinfo.over[gr][ch] = noise.over_count;\n        gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\n        gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\n        gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\n        gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\n    }\n\n    /**\n     * updates plotting data for a whole frame\n     *\n     * Robert Hegemann 2000-10-21\n     */\n    function set_frame_pinfo(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n\n        gfc.masking_lower = 1.0;\n\n        /*\n         * for every granule and channel patch l3_enc and set info\n         */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n                var scalefac_sav = new_int(L3Side.SFBMAX);\n                System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0,\n                    scalefac_sav.length);\n\n                /*\n                 * reconstruct the scalefactors in case SCFSI was used\n                 */\n                if (gr == 1) {\n                    var sfb;\n                    for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n                        if (cod_info.scalefac[sfb] < 0) /* scfsi */\n                            cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\n                    }\n                }\n\n                set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\n                System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0,\n                    scalefac_sav.length);\n            }\n            /* for ch */\n        }\n        /* for gr */\n    }\n\n}\n\n\nfunction CalcNoiseData() {\n    this.global_gain = 0;\n    this.sfb_count1 = 0;\n    this.step = new_int(39);\n    this.noise = new_float(39);\n    this.noise_log = new_float(39);\n}\n\n//package mp3;\n\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\n\nvar L3Side = {};\n\n\n\t/**\n\t * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\n\t */\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n\n/*\n * MP3 quantization\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 1999-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2007 Robert Hegemann\n *      Copyright (c) 2001-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\nfunction Quantize() {\n    var bs;\n    this.rv = null;\n    var rv;\n    this.qupvt = null;\n    var qupvt;\n\n    var vbr = new VBRQuantize();\n    var tk;\n\n    this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n    }\n\n    /**\n     * convert from L/R <. Mid/Side\n     */\n    this.ms_convert = function (l3_side, gr) {\n        for (var i = 0; i < 576; ++i) {\n            var l = l3_side.tt[gr][0].xr[i];\n            var r = l3_side.tt[gr][1].xr[i];\n            l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\n            l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\n        }\n    };\n\n    /**\n     * mt 6/99\n     *\n     * initializes cod_info, scalefac and xrpow\n     *\n     * returns 0 if all energies in xr are zero, else 1\n     */\n    function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n            var tmp = Math.abs(cod_info.xr[i]);\n            sum += tmp;\n            xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n\n            if (xrpow[i] > cod_info.xrpow_max)\n                cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n    }\n\n    this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n\n        cod_info.xrpow_max = 0;\n\n        /*\n         * check if there is some energy we have to quantize and calculate xrpow\n         * matching our fresh scalefactors\n         */\n\n        Arrays.fill(xrpow, upper, 576, 0);\n\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum);\n\n        /*\n         * return 1 if we have something to quantize, else 0\n         */\n        if (sum > 1E-20) {\n            var j = 0;\n            if ((gfc.substep_shaping & 2) != 0)\n                j = 1;\n\n            for (var i = 0; i < cod_info.psymax; i++)\n                gfc.pseudohalf[i] = j;\n\n            return true;\n        }\n\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n    }\n\n    /**\n     * Gabriel Bouvigne feb/apr 2003<BR>\n     * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\n     *\n     * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\n     * stops on the first coeff higher than ath.\n     */\n    function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            /* NORM, START or STOP type, but not SHORT blocks */\n            var stop = false;\n            for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n                var start = gfc.scalefac_band.psfb21[gsfb];\n                var end = gfc.scalefac_band.psfb21[gsfb + 1];\n                var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\n                    ath.floor);\n\n                if (gfc.nsPsy.longfact[21] > 1e-12)\n                    ath21 *= gfc.nsPsy.longfact[21];\n\n                for (var j = end - 1; j >= start; j--) {\n                    if (Math.abs(xr[j]) < ath21)\n                        xr[j] = 0;\n                    else {\n                        stop = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            /* note: short blocks coeffs are reordered */\n            for (var block = 0; block < 3; block++) {\n                var stop = false;\n                for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n                    var start = gfc.scalefac_band.s[12]\n                        * 3\n                        + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                        * block\n                        + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n                    var end = start\n                        + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n                    var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\n                        ath.floor);\n\n                    if (gfc.nsPsy.shortfact[12] > 1e-12)\n                        ath12 *= gfc.nsPsy.shortfact[12];\n\n                    for (var j = end - 1; j >= start; j--) {\n                        if (Math.abs(xr[j]) < ath12)\n                            xr[j] = 0;\n                        else {\n                            stop = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    this.init_outer_loop = function (gfc, cod_info) {\n        /*\n         * initialize fresh cod_info\n         */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0;\n        /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0;\n        /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\n                - gfc.scalefac_band.l[sfb];\n            /* which is always 0. */\n            cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            var ixwork = new_float(576);\n\n            cod_info.sfb_smin = 0;\n            cod_info.sfb_lmax = 0;\n            if (cod_info.mixed_block_flag != 0) {\n                /*\n                 * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\n                 * sfbs 0-5 long block, 3-12 short blocks\n                 */\n                cod_info.sfb_smin = 3;\n                cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\n            }\n            cod_info.psymax = cod_info.sfb_lmax\n                + 3\n                * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n            cod_info.sfbmax = cod_info.sfb_lmax + 3\n                * (Encoder.SBPSY_s - cod_info.sfb_smin);\n            cod_info.sfbdivide = cod_info.sfbmax - 18;\n            cod_info.psy_lmax = cod_info.sfb_lmax;\n            /* re-order the short blocks, for more efficient encoding below */\n            /* By Takehiro TOMINAGA */\n            /*\n             * Within each scalefactor band, data is given for successive time\n             * windows, beginning with window 0 and ending with window 2. Within\n             * each window, the quantized values are then arranged in order of\n             * increasing frequency...\n             */\n            var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                for (var window = 0; window < 3; window++) {\n                    for (var l = start; l < end; l++) {\n                        cod_info.xr[ix++] = ixwork[3 * l + window];\n                    }\n                }\n            }\n\n            var j = cod_info.sfb_lmax;\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\n                    - gfc.scalefac_band.s[sfb];\n                cod_info.window[j] = 0;\n                cod_info.window[j + 1] = 1;\n                cod_info.window[j + 2] = 2;\n                j += 3;\n            }\n        }\n\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n\n        cod_info.max_nonzero_coeff = 575;\n\n        /*\n         * fresh scalefactors are all zero\n         */\n        Arrays.fill(cod_info.scalefac, 0);\n\n        psfb21_analogsilence(gfc, cod_info);\n    };\n\n    function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n    }\n\n    BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n    BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n    BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\n\n    /**\n     * author/date??\n     *\n     * binary step size search used by outer_loop to get a quantizer step size\n     * to start with\n     */\n    function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n\n        for (; ;) {\n            var step;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n\n            if (CurrentStep == 1 || nBits == desired_rate)\n                break;\n            /* nothing to adjust anymore */\n\n            if (nBits > desired_rate) {\n                /* increase Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_DOWN)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_UP;\n                step = CurrentStep;\n            } else {\n                /* decrease Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_UP)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_DOWN;\n                step = -CurrentStep;\n            }\n            cod_info.global_gain += step;\n            if (cod_info.global_gain < 0) {\n                cod_info.global_gain = 0;\n                flagGoneOver = true;\n            }\n            if (cod_info.global_gain > 255) {\n                cod_info.global_gain = 255;\n                flagGoneOver = true;\n            }\n        }\n\n\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n            cod_info.global_gain++;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n    }\n\n    this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\n        var distort = new_float(L3Side.SFBMAX);\n\n        if ((0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE)\n            || (gfc.substep_shaping & 0x80) != 0)\n            return;\n        qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\n        for (var j = 0; j < 576; j++) {\n            var xr = 0.0;\n            if (gi.l3_enc[j] != 0)\n                xr = Math.abs(gi.xr[j]);\n            work[j] = xr;\n        }\n\n        var j = 0;\n        var sfb = 8;\n        if (gi.block_type == Encoder.SHORT_TYPE)\n            sfb = 6;\n        do {\n            var allowedNoise, trancateThreshold;\n            var nsame, start;\n\n            var width = gi.width[sfb];\n            j += width;\n            if (distort[sfb] >= 1.0)\n                continue;\n\n            Arrays.sort(work, j - width, width);\n            if (BitStream.EQ(work[j - 1], 0.0))\n                continue;\n            /* all zero sfb */\n\n            allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\n            trancateThreshold = 0.0;\n            start = 0;\n            do {\n                var noise;\n                for (nsame = 1; start + nsame < width; nsame++)\n                    if (BitStream.NEQ(work[start + j - width], work[start + j\n                        + nsame - width]))\n                        break;\n\n                noise = work[start + j - width] * work[start + j - width]\n                    * nsame;\n                if (allowedNoise < noise) {\n                    if (start != 0)\n                        trancateThreshold = work[start + j - width - 1];\n                    break;\n                }\n                allowedNoise -= noise;\n                start += nsame;\n            } while (start < width);\n            if (BitStream.EQ(trancateThreshold, 0.0))\n                continue;\n\n            do {\n                if (Math.abs(gi.xr[j - width]) <= trancateThreshold)\n                    gi.l3_enc[j - width] = 0;\n            } while (--width > 0);\n        } while (++sfb < gi.psymax);\n\n        gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\n    };\n\n    /**\n     * author/date??\n     *\n     * Function: Returns zero if there is a scalefac which has not been\n     * amplified. Otherwise it returns one.\n     */\n    function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\n            if (cod_info.scalefac[sfb]\n                + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\n                return false;\n\n        return true;\n    }\n\n    /* mt 5/99: Function: Improved calc_noise for a single channel */\n\n    function penalties(noise) {\n        return Util.FAST_LOG10((0.368 + 0.632 * noise * noise * noise));\n    }\n\n    /**\n     * author/date??\n     *\n     * several different codes to decide which quantization is better\n     */\n    function get_klemm_noise(distort, gi) {\n        var klemm_noise = 1E-37;\n        for (var sfb = 0; sfb < gi.psymax; sfb++)\n            klemm_noise += penalties(distort[sfb]);\n\n        return Math.max(1e-20, klemm_noise);\n    }\n\n    function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\n         * noise is given in decibels (dB) relative to masking thesholds.<BR>\n         *\n         * over_noise: ??? (the previous comment is fully wrong)<BR>\n         * tot_noise: ??? (the previous comment is fully wrong)<BR>\n         * max_noise: max quantization noise\n         */\n        var better;\n\n        switch (quant_comp) {\n            default:\n            case 9:\n            {\n                if (best.over_count > 0) {\n                    /* there are distorted sfb */\n                    better = calc.over_SSD <= best.over_SSD;\n                    if (calc.over_SSD == best.over_SSD)\n                        better = calc.bits < best.bits;\n                } else {\n                    /* no distorted sfb */\n                    better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\n                }\n                break;\n            }\n\n            case 0:\n                better = calc.over_count < best.over_count\n                    || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\n                    || (calc.over_count == best.over_count\n                    && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n\n            case 8:\n                calc.max_noise = get_klemm_noise(distort, gi);\n            //$FALL-THROUGH$\n            case 1:\n                better = calc.max_noise < best.max_noise;\n                break;\n            case 2:\n                better = calc.tot_noise < best.tot_noise;\n                break;\n            case 3:\n                better = (calc.tot_noise < best.tot_noise)\n                    && (calc.max_noise < best.max_noise);\n                break;\n            case 4:\n                better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\n                    || (calc.max_noise <= 0.0 && best.max_noise < 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\n                    || (calc.max_noise <= 0.0 && best.max_noise > 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.05\n                    && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\n                    + calc.over_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.1\n                    && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\n                    + calc.over_noise + calc.over_noise < best.tot_noise\n                    + best.over_noise + best.over_noise);\n                break;\n            case 5:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n            case 6:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\n                        .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\n                break;\n            case 7:\n                better = calc.over_count < best.over_count\n                    || calc.over_noise < best.over_noise;\n                break;\n        }\n\n        if (best.over_count == 0) {\n            /*\n             * If no distorted bands, only use this quantization if it is\n             * better, and if it uses less bits. Unfortunately, part2_3_length\n             * is sometimes a poor estimator of the final size at low bitrates.\n             */\n            better = better && calc.bits < best.bits;\n        }\n\n        return better;\n    }\n\n    /**\n     * author/date??\n     *\n     * <PRE>\n     *  Amplify the scalefactor bands that violate the masking threshold.\n     *  See ISO 11172-3 Section C.1.5.4.3.5\n     *\n     *  distort[] = noise/masking\n     *  distort[] > 1   ==> noise is not masked\n     *  distort[] < 1   ==> noise is masked\n     *  max_dist = maximum value of distort[]\n     *\n     *  Three algorithms:\n     *  noise_shaping_amp\n     *        0             Amplify all bands with distort[]>1.\n     *\n     *        1             Amplify all bands with distort[] >= max_dist^(.5);\n     *                     ( 50% in the db scale)\n     *\n     *        2             Amplify first band with distort[] >= max_dist;\n     *\n     *\n     *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\n     *  with distort[] >= .95*max_dist.  This is to make sure we always\n     *  amplify at least one band.\n     * </PRE>\n     */\n    function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n\n        if (cod_info.scalefac_scale == 0) {\n            ifqstep34 = 1.29683955465100964055;\n            /* 2**(.75*.5) */\n        } else {\n            ifqstep34 = 1.68179283050742922612;\n            /* 2**(.75*1) */\n        }\n\n        /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            if (trigger < distort[sfb])\n                trigger = distort[sfb];\n        }\n\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n            if (bRefine)\n                noise_shaping_amp = 2;\n            else\n                noise_shaping_amp = 1;\n        }\n        switch (noise_shaping_amp) {\n            case 2:\n                /* amplify exactly 1 band */\n                break;\n\n            case 1:\n                /* amplify bands within 50% of max (on db scale) */\n                if (trigger > 1.0)\n                    trigger = Math.pow(trigger, .5);\n                else\n                    trigger *= .95;\n                break;\n\n            case 0:\n            default:\n                /* ISO algorithm. amplify all bands with distort>1 */\n                if (trigger > 1.0)\n                    trigger = 1.0;\n                else\n                    trigger *= .95;\n                break;\n        }\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var l;\n            j += width;\n            if (distort[sfb] < trigger)\n                continue;\n\n            if ((gfc.substep_shaping & 2) != 0) {\n                gfc.pseudohalf[sfb] = (0 == gfc.pseudohalf[sfb]) ? 1 : 0;\n                if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2)\n                    return;\n            }\n            cod_info.scalefac[sfb]++;\n            for (l = -width; l < 0; l++) {\n                xrpow[j + l] *= ifqstep34;\n                if (xrpow[j + l] > cod_info.xrpow_max)\n                    cod_info.xrpow_max = xrpow[j + l];\n            }\n\n            if (gfc.noise_shaping_amp == 2)\n                return;\n        }\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * turns on scalefac scale and adjusts scalefactors\n     */\n    function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var s = cod_info.scalefac[sfb];\n            if (cod_info.preflag != 0)\n                s += qupvt.pretab[sfb];\n            j += width;\n            if ((s & 1) != 0) {\n                s++;\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= ifqstep34;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n            cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * increases the subblock gain and adjusts scalefactors\n     */\n    function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac;\n\n        /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n            if (scalefac[sfb] >= 16)\n                return true;\n        }\n\n        for (var window = 0; window < 3; window++) {\n            var s1 = 0;\n            var s2 = 0;\n\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n                if (s1 < scalefac[sfb])\n                    s1 = scalefac[sfb];\n            }\n            for (; sfb < cod_info.sfbmax; sfb += 3) {\n                if (s2 < scalefac[sfb])\n                    s2 = scalefac[sfb];\n            }\n\n            if (s1 < 16 && s2 < 8)\n                continue;\n\n            if (cod_info.subblock_gain[window] >= 7)\n                return true;\n\n            /*\n             * even though there is no scalefactor for sfb12 subblock gain\n             * affects upper frequencies too, that's why we have to go up to\n             * SBMAX_s\n             */\n            cod_info.subblock_gain[window]++;\n            var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n                var amp;\n                var width = cod_info.width[sfb];\n                var s = scalefac[sfb];\n                s = s - (4 >> cod_info.scalefac_scale);\n                if (s >= 0) {\n                    scalefac[sfb] = s;\n                    j += width * 3;\n                    continue;\n                }\n\n                scalefac[sfb] = 0;\n                {\n                    var gain = 210 + (s << (cod_info.scalefac_scale + 1));\n                    amp = qupvt.IPOW20(gain);\n                }\n                j += width * (window + 1);\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n                j += width * (3 - window - 1);\n            }\n\n            {\n                var amp = qupvt.IPOW20(202);\n                j += cod_info.width[sfb] * (window + 1);\n                for (var l = -cod_info.width[sfb]; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <PRE>\n     *  Takehiro Tominaga /date??\n     *  Robert Hegemann 2000-09-06: made a function of it\n     *\n     *  amplifies scalefactor bands,\n     *   - if all are already amplified returns 0\n     *   - if some bands are amplified too much:\n     *      * try to increase scalefac_scale\n     *      * if already scalefac_scale was set\n     *          try on short blocks to increase subblock gain\n     * </PRE>\n     */\n    function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\n\n        /*\n         * check to make sure we have not amplified too much loop_break returns\n         * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\n         * scalefactors are too large\n         */\n\n        var status = loop_break(cod_info);\n\n        if (status)\n            return false;\n        /* all bands amplified */\n\n        /*\n         * not all scalefactors have been amplified. so these scalefacs are\n         * possibly valid. encode them:\n         */\n        if (gfc.mode_gr == 2)\n            status = tk.scale_bitcount(cod_info);\n        else\n            status = tk.scale_bitcount_lsf(gfc, cod_info);\n\n        if (!status)\n            return true;\n        /* amplified some bands not exceeding limits */\n\n        /*\n         * some scalefactors are too large. lets try setting scalefac_scale=1\n         */\n        if (gfc.noise_shaping > 1) {\n            Arrays.fill(gfc.pseudohalf, 0);\n            if (0 == cod_info.scalefac_scale) {\n                inc_scalefac_scale(cod_info, xrpow);\n                status = false;\n            } else {\n                if (cod_info.block_type == Encoder.SHORT_TYPE\n                    && gfc.subblock_gain > 0) {\n                    status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\n                }\n            }\n        }\n\n        if (!status) {\n            if (gfc.mode_gr == 2)\n                status = tk.scale_bitcount(cod_info);\n            else\n                status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n    }\n\n    /**\n     * <PRE>\n     *  Function: The outer iteration loop controls the masking conditions\n     *  of all scalefactorbands. It computes the best scalefac and\n     *  global gain. This module calls the inner iteration loop\n     *\n     *  mt 5/99 completely rewritten to allow for bit reservoir control,\n     *  mid/side channels with L/R or mid/side masking thresholds,\n     *  and chooses best quantization instead of last quantization when\n     *  no distortion free quantization can be found.\n     *\n     *  added VBR support mt 5/99\n\n     *\n     *  some code shuffle rh 9/00\n     * </PRE>\n     *\n     * @param l3_xmin\n     *            allowed distortion\n     * @param xrpow\n     *            coloured magnitudes of spectral\n     * @param targ_bits\n     *            maximum allowed bits\n     */\n    this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n\n        if (0 == gfc.noise_shaping)\n        /* fast mode, no noise shaping, we are ready */\n            return 100;\n        /* default noise_info.over_count */\n\n        /* compute the distortion in this quantization */\n        /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\n            prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n\n        while (!bEndOfSearch) {\n            /* BEGIN MAIN LOOP */\n            do {\n                var noise_info = new CalcNoiseResult();\n                var search_limit;\n                var maxggain = 255;\n\n                /*\n                 * When quantization with no distorted bands is found, allow up\n                 * to X new unsuccesful tries in serial. This gives us more\n                 * possibilities for different quant_compare modes. Much more\n                 * than 3 makes not a big difference, it is only slower.\n                 */\n\n                if ((gfc.substep_shaping & 2) != 0) {\n                    search_limit = 20;\n                } else {\n                    search_limit = 3;\n                }\n\n                /*\n                 * Check if the last scalefactor band is distorted. in VBR mode\n                 * we can't get rid of the distortion, so quit now and VBR mode\n                 * will try again with more bits. (makes a 10% speed increase,\n                 * the files I tested were binary identical, 2000/05/20 Robert\n                 * Hegemann) distort[] > 1 means noise > allowed noise\n                 */\n                if (gfc.sfb21_extra) {\n                    if (distort[cod_info_w.sfbmax] > 1.0)\n                        break;\n                    if (cod_info_w.block_type == Encoder.SHORT_TYPE\n                        && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0))\n                        break;\n                }\n\n                /* try a new scalefactor conbination on cod_info_w */\n                if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\n                    break;\n                if (cod_info_w.scalefac_scale != 0)\n                    maxggain = 254;\n\n                /*\n                 * inner_loop starts with the initial quantization step computed\n                 * above and slowly increases until the bits < huff_bits. Thus\n                 * it is important not to start with too large of an inital\n                 * quantization step. Too small is ok, but inner_loop will take\n                 * longer\n                 */\n                var huff_bits = targ_bits - cod_info_w.part2_length;\n                if (huff_bits <= 0)\n                    break;\n\n                /*\n                 * increase quantizer stepsize until needed bits are below\n                 * maximum\n                 */\n                while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\n                    cod_info_w, prev_noise)) > huff_bits\n                && cod_info_w.global_gain <= maxggain)\n                    cod_info_w.global_gain++;\n\n                if (cod_info_w.global_gain > maxggain)\n                    break;\n\n                if (best_noise_info.over_count == 0) {\n\n                    while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\n                        xrpow, cod_info_w, prev_noise)) > best_part2_3_length\n                    && cod_info_w.global_gain <= maxggain)\n                        cod_info_w.global_gain++;\n\n                    if (cod_info_w.global_gain > maxggain)\n                        break;\n                }\n\n                /* compute the distortion in this quantization */\n                qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\n                    prev_noise);\n                noise_info.bits = cod_info_w.part2_3_length;\n\n                /*\n                 * check if this quantization is better than our saved\n                 * quantization\n                 */\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    better = gfp.quant_comp;\n                } else\n                    better = gfp.quant_comp_short;\n\n                better = quant_compare(better, best_noise_info, noise_info,\n                    cod_info_w, distort) ? 1 : 0;\n\n                /* save data so we can restore this quantization later */\n                if (better != 0) {\n                    best_part2_3_length = cod_info.part2_3_length;\n                    best_noise_info = noise_info;\n                    cod_info.assign(cod_info_w);\n                    age = 0;\n                    /* save data so we can restore this quantization later */\n                    /* store for later reuse */\n                    System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n                } else {\n                    /* early stop? */\n                    if (gfc.full_outer_loop == 0) {\n                        if (++age > search_limit\n                            && best_noise_info.over_count == 0)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3)\n                            && bRefine\n                            && (cod_info_w.global_gain - best_ggain_pass1) > 15)\n                            break;\n                    }\n                }\n            } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\n\n            if (gfc.noise_shaping_amp == 3) {\n                if (!bRefine) {\n                    /* refine search */\n                    cod_info_w.assign(cod_info);\n                    System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n                    age = 0;\n                    best_ggain_pass1 = cod_info_w.global_gain;\n\n                    bRefine = true;\n                } else {\n                    /* search already refined, stop */\n                    bEndOfSearch = true;\n                }\n\n            } else {\n                bEndOfSearch = true;\n            }\n        }\n\n        /*\n         * finish up\n         */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n        /* restore for reuse on next try */\n            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n        /*\n         * do the 'substep shaping'\n         */\n        else if ((gfc.substep_shaping & 1) != 0)\n            trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\n\n        return best_noise_info.over_count;\n    }\n\n    /**\n     * Robert Hegemann 2000-09-06\n     *\n     * update reservoir status after FINAL quantization/bitrate\n     */\n    this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch];\n\n        /*\n         * try some better scalefac storage\n         */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side);\n\n        /*\n         * best huffman_divide may save some bits too\n         */\n        if (gfc.use_best_huffman == 1)\n            tk.best_huffman_divide(gfc, cod_info);\n\n        /*\n         * update reservoir status after FINAL quantization/bitrate\n         */\n        rv.ResvAdjust(gfc, cod_info);\n    };\n\n    /**\n     *\n     * 2000-09-04 Robert Hegemann\n     *\n     * @param l3_xmin\n     *            allowed distortion of the scalefactor\n     * @param xrpow\n     *            coloured magnitudes of spectral values\n     */\n    this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var bst_cod_info = new GrInfo();\n        var bst_xrpow = new_float(576);\n        var Max_bits = max_bits;\n        var real_bits = max_bits + 1;\n        var this_bits = (max_bits + min_bits) / 2;\n        var dbits, over, found = 0;\n        var sfb21_extra = gfc.sfb21_extra;\n\n        Arrays.fill(bst_cod_info.l3_enc, 0);\n\n        /*\n         * search within round about 40 bits of optimal\n         */\n        do {\n\n            if (this_bits > Max_bits - 42)\n                gfc.sfb21_extra = false;\n            else\n                gfc.sfb21_extra = sfb21_extra;\n\n            over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits);\n\n            /*\n             * is quantization as good as we are looking for ? in this case: is\n             * no scalefactor band distorted?\n             */\n            if (over <= 0) {\n                found = 1;\n                /*\n                 * now we know it can be done with \"real_bits\" and maybe we can\n                 * skip some iterations\n                 */\n                real_bits = cod_info.part2_3_length;\n\n                /*\n                 * store best quantization so far\n                 */\n                bst_cod_info.assign(cod_info);\n                System.arraycopy(xrpow, 0, bst_xrpow, 0, 576);\n\n                /*\n                 * try with fewer bits\n                 */\n                max_bits = real_bits - 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n            } else {\n                /*\n                 * try with more bits\n                 */\n                min_bits = this_bits + 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n\n                if (found != 0) {\n                    found = 2;\n                    /*\n                     * start again with best quantization so far\n                     */\n                    cod_info.assign(bst_cod_info);\n                    System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\n                }\n            }\n        } while (dbits > 12);\n\n        gfc.sfb21_extra = sfb21_extra;\n\n        /*\n         * found=0 => nothing found, use last one found=1 => we just found the\n         * best and left the loop found=2 => we restored a good one and have now\n         * l3_enc to restore too\n         */\n        if (found == 2) {\n            System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\n        }\n    }\n\n    /**\n     * Robert Hegemann 2000-09-05\n     *\n     * calculates * how many bits are available for analog silent granules * how\n     * many bits to use for the lowest allowed bitrate * how many bits each\n     * bitrate would provide\n     */\n    this.get_framebits = function (gfp, frameBits) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * always use at least this many bits per granule per channel unless we\n         * detect analog silence, see below\n         */\n        gfc.bitrate_index = gfc.VBR_min_bitrate;\n        var bitsPerFrame = bs.getframebits(gfp);\n\n        /*\n         * bits for analog silence\n         */\n        gfc.bitrate_index = 1;\n        bitsPerFrame = bs.getframebits(gfp);\n\n        for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\n            gfc.bitrate_index = i;\n            var mb = new MeanBits(bitsPerFrame);\n            frameBits[i] = rv.ResvFrameBegin(gfp, mb);\n            bitsPerFrame = mb.bits;\n        }\n    };\n\n    /* RH: this one needs to be overhauled sometime */\n\n    /**\n     * <PRE>\n     *  2000-09-04 Robert Hegemann\n     *\n     *  * converts LR to MS coding when necessary\n     *  * calculates allowed/adjusted quantization noise amounts\n     *  * detects analog silent frames\n     *\n     *  some remarks:\n     *  - lower masking depending on Quality setting\n     *  - quality control together with adjusted ATH MDCT scaling\n     *    on lower quality setting allocate more noise from\n     *    ATH masking, and on higher quality setting allocate\n     *    less noise from ATH masking.\n     *  - experiments show that going more than 2dB over GPSYCHO's\n     *    limits ends up in very annoying artefacts\n     * </PRE>\n     */\n    this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits,\n                                     max_bits, bands) {\n        var gfc = gfp.internal_flags;\n\n        var masking_lower_db, adjust = 0.0;\n        var analog_silence = 1;\n        var bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\n\n        get_framebits(gfp, frameBits);\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n                qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    adjust = 1.28 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\n                    masking_lower_db = gfc.PSY.mask_adjust - adjust;\n                } else {\n                    adjust = 2.56 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\n                    masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n                }\n                gfc.masking_lower = Math.pow(10.0,\n                    masking_lower_db * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                    l3_xmin[gr][ch]);\n                if (bands[gr][ch] != 0)\n                    analog_silence = 0;\n\n                min_bits[gr][ch] = 126;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > frameBits[gfc.VBR_max_bitrate]) {\n                    max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\n                    max_bits[gr][ch] /= bits;\n                }\n                if (min_bits[gr][ch] > max_bits[gr][ch])\n                    min_bits[gr][ch] = max_bits[gr][ch];\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = gfc.l3_side.tt[gr][ch];\n                var pxmin = l3_xmin[gr][ch];\n                var pxminPos = 0;\n                for (var sfb = 0; sfb < gi.psy_lmax; sfb++)\n                    pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                        / Encoder.SBMAX_l / Encoder.SBMAX_l;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                    }\n                }\n                max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch],\n                        0.9 * max_bits[gr][ch]);\n            }\n        }\n    };\n\n    this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\n        var gfc = gfp.internal_flags;\n\n        var analog_silence = 1;\n        var avg = 0, bits = 0;\n        var maximum_framebits;\n\n        if (!gfp.free_format) {\n            gfc.bitrate_index = gfc.VBR_max_bitrate;\n\n            var mb = new MeanBits(avg);\n            rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n\n            get_framebits(gfp, frameBits);\n            maximum_framebits = frameBits[gfc.VBR_max_bitrate];\n        } else {\n            gfc.bitrate_index = 0;\n            var mb = new MeanBits(avg);\n            maximum_framebits = rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n            frameBits[0] = maximum_framebits;\n        }\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                gfc.masking_lower = Math.pow(10.0,\n                    gfc.PSY.mask_adjust * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                        l3_xmin[gr][ch]))\n                    analog_silence = 0;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > maximum_framebits) {\n                    max_bits[gr][ch] *= maximum_framebits;\n                    max_bits[gr][ch] /= bits;\n                }\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    /**\n     * calculates target bits for ABR encoding\n     *\n     * mt 2000/05/31\n     */\n    this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var res_factor;\n        var gr, ch, totbits, mean_bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var mb = new MeanBits(mean_bits);\n        max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits;\n\n        gfc.bitrate_index = 1;\n        mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\n        analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\n\n        mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\n        if ((gfc.substep_shaping & 1) != 0)\n            mean_bits *= 1.09;\n        mean_bits /= gfp.out_samplerate;\n        mean_bits -= gfc.sideinfo_len * 8;\n        mean_bits /= (gfc.mode_gr * gfc.channels_out);\n\n        /**\n         * <PRE>\n         *           res_factor is the percentage of the target bitrate that should\n         *           be used on average.  the remaining bits are added to the\n         *           bitreservoir and used for difficult to encode frames.\n         *\n         *           Since we are tracking the average bitrate, we should adjust\n         *           res_factor \"on the fly\", increasing it if the average bitrate\n         *           is greater than the requested bitrate, and decreasing it\n         *           otherwise.  Reasonable ranges are from .9 to 1.0\n         *\n         *           Until we get the above suggestion working, we use the following\n         *           tuning:\n         *           compression ratio    res_factor\n         *           5.5  (256kbps)         1.0      no need for bitreservoir\n         *           11   (128kbps)         .93      7% held for reservoir\n         *\n         *           with linear interpolation for other values.\n         * </PRE>\n         */\n        res_factor = .93 + .07 * (11.0 - gfp.compression_ratio)\n            / (11.0 - 5.5);\n        if (res_factor < .90)\n            res_factor = .90;\n        if (res_factor > 1.00)\n            res_factor = 1.00;\n\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                if (pe[gr][ch] > 700) {\n                    var add_bits = (int)((pe[gr][ch] - 700) / 1.4);\n\n                    var cod_info = l3_side.tt[gr][ch];\n                    targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                    /* short blocks use a little extra, no matter what the pe */\n                    if (cod_info.block_type == Encoder.SHORT_TYPE) {\n                        if (add_bits < mean_bits / 2)\n                            add_bits = mean_bits / 2;\n                    }\n                    /* at most increase bits by 1.5*average */\n                    if (add_bits > mean_bits * 3 / 2)\n                        add_bits = mean_bits * 3 / 2;\n                    else if (add_bits < 0)\n                        add_bits = 0;\n\n                    targ_bits[gr][ch] += add_bits;\n                }\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                }\n                sum += targ_bits[gr][ch];\n            }\n            /* for ch */\n            if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n                for (ch = 0; ch < gfc.channels_out; ++ch) {\n                    targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                    targ_bits[gr][ch] /= sum;\n                }\n            }\n        }\n        /* for gr */\n\n        if (gfc.mode_ext == Encoder.MPG_MD_MS_LR)\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits\n                    * gfc.channels_out,\n                    LameInternalFlags.MAX_BITS_PER_GRANULE);\n            }\n\n        /*\n         * sum target bits\n         */\n        totbits = 0;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                totbits += targ_bits[gr][ch];\n            }\n        }\n\n        /*\n         * repartion target bits if needed\n         */\n        if (totbits > max_frame_bits[0]) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    targ_bits[gr][ch] *= max_frame_bits[0];\n                    targ_bits[gr][ch] /= totbits;\n                }\n            }\n        }\n    }\n\n}\n\n/*\n *      MP3 window subband -> subband filtering -> mdct routine\n *\n *      Copyright (c) 1999-2000 Takehiro Tominaga\n *\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n/*\n *         Special Thanks to Patrick De Smet for your advices.\n */\n\n/* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\n\nfunction NewMDCT() {\n\n\tvar enwindow = [\n\t\t\t-4.77e-07 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.03951e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.53674e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.841473e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.5758972e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.401756e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.83715e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\n\t\t\t1.2398e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.91212e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.283096e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.6994476e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.8756866e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.630711e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.47478e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.4782e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.063471690191471e-01, 1.960342806591213e-01,\n\n\t\t\t-4.77e-07 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.05858e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.30786e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.521515e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.5694122e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.643036e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.91821e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\n\t\t\t1.1444e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.65462e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.110004e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.6112804e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.9634247e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.803326e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.77042e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.6689e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t8.206787908286602e-01, 3.901806440322567e-01,\n\n\t\t\t-4.77e-07 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.07288e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.02653e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t2.174854e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.5586357e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.858566e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.95159e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\n\t\t\t1.0014e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.40190e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.937389e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.5233517e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.0506859e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.974033e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t-3.07560e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t-1.8120e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t7.416505462720353e-01, 5.805693545089249e-01,\n\n\t\t\t-4.77e-07 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t8.68797e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.800537e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t3.5435200e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t4.049301e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.94205e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\n\t\t\t9.060e-06 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.16348e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.766682e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.4358521e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-2.1372318e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.14188e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.39031e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t-1.9550e-05 * 0.831469612302545 / 2.384e-06,\n\t\t\t6.681786379192989e-01, 7.653668647301797e-01,\n\n\t\t\t-4.77e-07 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.29220e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.399517e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t3.5242081e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t4.215240e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.89437e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\n\t\t\t8.106e-06 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.3937e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.597881e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.3489246e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.2228718e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.306866e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.71456e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.1458e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t5.993769336819237e-01, 9.427934736519954e-01,\n\n\t\t\t-4.77e-07 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.8392e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.71317e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t3.5007000e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t4.357815e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.80854e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\n\t\t\t7.629e-06 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.2956e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.432419e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.2627602e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3074150e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-3.467083e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t-4.04358e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3365e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t5.345111359507916e-01, 1.111140466039205e+00,\n\n\t\t\t-9.54e-07 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t7.31945e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.15938e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t3.4730434e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.477024e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t9.68933e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\n\t\t\t6.676e-06 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.269817e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.1775017e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.3907185e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-3.622532e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t-4.38213e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.5272e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.729647758913199e-01, 1.268786568327291e+00,\n\n\t\t\t-9.54e-07 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.199e-06 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.1421356237309504879e-01, /* tan(PI/8) */\n\t\t\t1.414213562373095e+00,\n\n\t\t\t-9.54e-07 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.05381e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t6.10352e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-4.75883e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.4055710e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t4.649162e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.35555e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\n\t\t\t5.245e-06 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.7166e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.56535e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.0103703e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-2.5527000e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.914356e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t-5.07355e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.0041e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.578057213145241e-01, 1.546020906725474e+00,\n\n\t\t\t-9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t1.02520e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t5.39303e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-1.011848e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.3659935e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t4.703045e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.15051e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\n\t\t\t4.768e-06 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t8.06808e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.287834e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-2.6310921e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t-4.048824e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-5.42164e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-3.2425e-05 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.033466836073424e-01, 1.662939224605090e+00,\n\n\t\t\t-1.431e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.62532e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.573563e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t3.3225536e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.737377e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.91685e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\n\t\t\t4.292e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.3828e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.61850e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.487225e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-2.7073860e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t-4.174709e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-5.76973e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-3.4809e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t2.504869601913055e-01, 1.763842528696710e+00,\n\n\t\t\t-1.431e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t9.5367e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.78609e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.161503e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.2754898e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t4.752159e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t8.66413e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\n\t\t\t3.815e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.718e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t5.22137e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t7.703304e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.7815342e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t-4.290581e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-6.11782e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-3.7670e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t1.989123673796580e-01, 1.847759065022573e+00,\n\n\t\t\t-1.907e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t9.0122e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t2.88486e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.774239e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.2248020e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t4.748821e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t8.38757e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\n\t\t\t3.338e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t-3.9577e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.88145e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t6.937027e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.8532982e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.395962e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-6.46591e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.0531e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t1.483359875383474e-01, 1.913880671464418e+00,\n\n\t\t\t-1.907e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.4400e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t1.91689e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-3.411293e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.1706810e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t4.728317e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.09669e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t5.579e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.338e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t-5.0545e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t2.59876e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t6.189346e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-2.9224873e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.489899e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-6.80923e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.3392e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t9.849140335716425e-02, 1.961570560806461e+00,\n\n\t\t\t-2.384e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.7724e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t8.8215e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.072189e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t3.1132698e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.691124e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.79152e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t2.861e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t-6.0558e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t1.37329e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.462170e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-2.9890060e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.570484e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-7.14302e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.6253e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.912684976946725e-02, 1.990369453344394e+00,\n\n\t\t\t3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\n\n\t\t\t3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\n\t\t\t7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\n\t\t\t4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\n\t\t\t-6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\n\t];\n\n\tvar NS = 12;\n\tvar NL = 36;\n\n\tvar win = [\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049690e-13,\n\t     6.423305872147839e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943412e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758252e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558783e-12,\n\t     8.371015190102974e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.456116108943412e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758252e-12,\n\t     -2.858043359288076e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558783e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347923e-13,\n\t     -6.423305872147843e-13,\n\t     -9.400849094049696e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049694e-13,\n\t     -6.423305872147840e-13,\n\t     -2.382191739347918e-13,\n\t     ],\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049688e-13,\n\t     6.423305872147841e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943413e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758253e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558782e-12,\n\t     8.371015190102975e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.461314069809755e-12,\n\t     -4.921085770524055e-12,\n\t     -4.343405037091838e-12,\n\t     -3.732668368707687e-12,\n\t     -3.093523840190885e-12,\n\t     -2.430835727329465e-12,\n\t     -1.734679010007751e-12,\n\t     -9.748253656609281e-13,\n\t     -2.797435120168326e-13,\n\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     -2.283748241799531e-13,\n\t     -4.037858874020686e-13,\n\t     -2.146547464825323e-13,\n\t     ],\n\t    [\n\t     1.316524975873958e-01, /* win[SHORT_TYPE] */\n\t     4.142135623730950e-01,\n\t     7.673269879789602e-01,\n\n\t     1.091308501069271e+00, /* tantab_l */\n\t     1.303225372841206e+00,\n\t     1.569685577117490e+00,\n\t     1.920982126971166e+00,\n\t     2.414213562373094e+00,\n\t     3.171594802363212e+00,\n\t     4.510708503662055e+00,\n\t     7.595754112725146e+00,\n\t     2.290376554843115e+01,\n\n\t     0.98480775301220802032, /* cx */\n\t     0.64278760968653936292,\n\t     0.34202014332566882393,\n\t     0.93969262078590842791,\n\t     -0.17364817766693030343,\n\t     -0.76604444311897790243,\n\t     0.86602540378443870761,\n\t     0.500000000000000e+00,\n\n\t     -5.144957554275265e-01, /* ca */\n\t     -4.717319685649723e-01,\n\t     -3.133774542039019e-01,\n\t     -1.819131996109812e-01,\n\t     -9.457419252642064e-02,\n\t     -4.096558288530405e-02,\n\t     -1.419856857247115e-02,\n\t     -3.699974673760037e-03,\n\n\t     8.574929257125442e-01, /* cs */\n\t     8.817419973177052e-01,\n\t     9.496286491027329e-01,\n\t     9.833145924917901e-01,\n\t     9.955178160675857e-01,\n\t     9.991605581781475e-01,\n\t     9.998991952444470e-01,\n\t     9.999931550702802e-01,\n\t     ],\n\t    [\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     2.283748241799531e-13,\n\t     4.037858874020686e-13,\n\t     2.146547464825323e-13,\n\n\t     5.461314069809755e-12,\n\t     4.921085770524055e-12,\n\t     4.343405037091838e-12,\n\t     3.732668368707687e-12,\n\t     3.093523840190885e-12,\n\t     2.430835727329466e-12,\n\t     1.734679010007751e-12,\n\t     9.748253656609281e-13,\n\t     2.797435120168326e-13,\n\n\t     -5.456116108943413e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758253e-12,\n\t     -2.858043359288075e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558782e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347913e-13,\n\t     -6.423305872147834e-13,\n\t     -9.400849094049688e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049688e-13,\n\t     -6.423305872147841e-13,\n\t     -2.382191739347918e-13,\n\t     ]\n\t];\n\n\tvar tantab_l = win[Encoder.SHORT_TYPE];\n\tvar cx = win[Encoder.SHORT_TYPE];\n\tvar ca = win[Encoder.SHORT_TYPE];\n\tvar cs = win[Encoder.SHORT_TYPE];\n\n\t/**\n\t * new IDCT routine written by Takehiro TOMINAGA\n\t *\n\t * PURPOSE: Overlapping window on PCM samples<BR>\n\t *\n\t * SEMANTICS:<BR>\n\t * 32 16-bit pcm samples are scaled to fractional 2's complement and\n\t * concatenated to the end of the window buffer #x#. The updated window\n\t * buffer #x# is then windowed by the analysis window #c# to produce the\n\t * windowed sample #z#\n\t */\n\tvar order = [\n\t    0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\n\t    2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\n\t];\n\n\t/**\n\t * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\n\t */\n\tfunction window_subband(x1, x1Pos, a) {\n\t\tvar wp = 10;\n\n\t\tvar x2 = x1Pos + 238 - 14 - 286;\n\n\t\tfor (var i = -15; i < 0; i++) {\n\t\t\tvar w, s, t;\n\n\t\t\tw = enwindow[wp + -10];\n\t\t\ts = x1[x2 + -224] * w;\n\t\t\tt = x1[x1Pos + 224] * w;\n\t\t\tw = enwindow[wp + -9];\n\t\t\ts += x1[x2 + -160] * w;\n\t\t\tt += x1[x1Pos + 160] * w;\n\t\t\tw = enwindow[wp + -8];\n\t\t\ts += x1[x2 + -96] * w;\n\t\t\tt += x1[x1Pos + 96] * w;\n\t\t\tw = enwindow[wp + -7];\n\t\t\ts += x1[x2 + -32] * w;\n\t\t\tt += x1[x1Pos + 32] * w;\n\t\t\tw = enwindow[wp + -6];\n\t\t\ts += x1[x2 + 32] * w;\n\t\t\tt += x1[x1Pos + -32] * w;\n\t\t\tw = enwindow[wp + -5];\n\t\t\ts += x1[x2 + 96] * w;\n\t\t\tt += x1[x1Pos + -96] * w;\n\t\t\tw = enwindow[wp + -4];\n\t\t\ts += x1[x2 + 160] * w;\n\t\t\tt += x1[x1Pos + -160] * w;\n\t\t\tw = enwindow[wp + -3];\n\t\t\ts += x1[x2 + 224] * w;\n\t\t\tt += x1[x1Pos + -224] * w;\n\n\t\t\tw = enwindow[wp + -2];\n\t\t\ts += x1[x1Pos + -256] * w;\n\t\t\tt -= x1[x2 + 256] * w;\n\t\t\tw = enwindow[wp + -1];\n\t\t\ts += x1[x1Pos + -192] * w;\n\t\t\tt -= x1[x2 + 192] * w;\n\t\t\tw = enwindow[wp + 0];\n\t\t\ts += x1[x1Pos + -128] * w;\n\t\t\tt -= x1[x2 + 128] * w;\n\t\t\tw = enwindow[wp + 1];\n\t\t\ts += x1[x1Pos + -64] * w;\n\t\t\tt -= x1[x2 + 64] * w;\n\t\t\tw = enwindow[wp + 2];\n\t\t\ts += x1[x1Pos + 0] * w;\n\t\t\tt -= x1[x2 + 0] * w;\n\t\t\tw = enwindow[wp + 3];\n\t\t\ts += x1[x1Pos + 64] * w;\n\t\t\tt -= x1[x2 + -64] * w;\n\t\t\tw = enwindow[wp + 4];\n\t\t\ts += x1[x1Pos + 128] * w;\n\t\t\tt -= x1[x2 + -128] * w;\n\t\t\tw = enwindow[wp + 5];\n\t\t\ts += x1[x1Pos + 192] * w;\n\t\t\tt -= x1[x2 + -192] * w;\n\n\t\t\t/*\n\t\t\t * this multiplyer could be removed, but it needs more 256 FLOAT\n\t\t\t * data. thinking about the data cache performance, I think we\n\t\t\t * should not use such a huge table. tt 2000/Oct/25\n\t\t\t */\n\t\t\ts *= enwindow[wp + 6];\n\t\t\tw = t - s;\n\t\t\ta[30 + i * 2] = t + s;\n\t\t\ta[31 + i * 2] = enwindow[wp + 7] * w;\n\t\t\twp += 18;\n\t\t\tx1Pos--;\n\t\t\tx2++;\n\t\t}\n\t\t{\n\t\t\tvar s, t, u, v;\n\t\t\tt = x1[x1Pos + -16] * enwindow[wp + -10];\n\t\t\ts = x1[x1Pos + -32] * enwindow[wp + -2];\n\t\t\tt += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n\t\t\ts += x1[x1Pos + -96] * enwindow[wp + -1];\n\t\t\tt += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n\t\t\ts += x1[x1Pos + -160] * enwindow[wp + 0];\n\t\t\tt += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n\t\t\ts += x1[x1Pos + -224] * enwindow[wp + 1];\n\t\t\tt += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n\t\t\ts -= x1[x1Pos + 32] * enwindow[wp + 2];\n\t\t\tt += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n\t\t\ts -= x1[x1Pos + 96] * enwindow[wp + 3];\n\t\t\tt += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n\t\t\ts -= x1[x1Pos + 160] * enwindow[wp + 4];\n\t\t\tt += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n\t\t\ts -= x1[x1Pos + 224];\n\n\t\t\tu = s - t;\n\t\t\tv = s + t;\n\n\t\t\tt = a[14];\n\t\t\ts = a[15] - t;\n\n\t\t\ta[31] = v + t; /* A0 */\n\t\t\ta[30] = u + s; /* A1 */\n\t\t\ta[15] = u - s; /* A2 */\n\t\t\ta[14] = v - t; /* A3 */\n\t\t}\n\t\t{\n\t\t\tvar xr;\n\t\t\txr = a[28] - a[0];\n\t\t\ta[0] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -2 * 18 + 7];\n\t\t\txr = a[29] - a[1];\n\t\t\ta[1] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -2 * 18 + 7];\n\n\t\t\txr = a[26] - a[2];\n\t\t\ta[2] += a[26];\n\t\t\ta[26] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[27] - a[3];\n\t\t\ta[3] += a[27];\n\t\t\ta[27] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = a[24] - a[4];\n\t\t\ta[4] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -6 * 18 + 7];\n\t\t\txr = a[25] - a[5];\n\t\t\ta[5] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -6 * 18 + 7];\n\n\t\t\txr = a[22] - a[6];\n\t\t\ta[6] += a[22];\n\t\t\ta[22] = xr * Util.SQRT2;\n\t\t\txr = a[23] - a[7];\n\t\t\ta[7] += a[23];\n\t\t\ta[23] = xr * Util.SQRT2 - a[7];\n\t\t\ta[7] -= a[6];\n\t\t\ta[22] -= a[7];\n\t\t\ta[23] -= a[22];\n\n\t\t\txr = a[6];\n\t\t\ta[6] = a[31] - xr;\n\t\t\ta[31] = a[31] + xr;\n\t\t\txr = a[7];\n\t\t\ta[7] = a[30] - xr;\n\t\t\ta[30] = a[30] + xr;\n\t\t\txr = a[22];\n\t\t\ta[22] = a[15] - xr;\n\t\t\ta[15] = a[15] + xr;\n\t\t\txr = a[23];\n\t\t\ta[23] = a[14] - xr;\n\t\t\ta[14] = a[14] + xr;\n\n\t\t\txr = a[20] - a[8];\n\t\t\ta[8] += a[20];\n\t\t\ta[20] = xr * enwindow[wp + -10 * 18 + 7];\n\t\t\txr = a[21] - a[9];\n\t\t\ta[9] += a[21];\n\t\t\ta[21] = xr * enwindow[wp + -10 * 18 + 7];\n\n\t\t\txr = a[18] - a[10];\n\t\t\ta[10] += a[18];\n\t\t\ta[18] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[19] - a[11];\n\t\t\ta[11] += a[19];\n\t\t\ta[19] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[16] - a[12];\n\t\t\ta[12] += a[16];\n\t\t\ta[16] = xr * enwindow[wp + -14 * 18 + 7];\n\t\t\txr = a[17] - a[13];\n\t\t\ta[13] += a[17];\n\t\t\ta[17] = xr * enwindow[wp + -14 * 18 + 7];\n\n\t\t\txr = -a[20] + a[24];\n\t\t\ta[20] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = -a[21] + a[25];\n\t\t\ta[21] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[4] - a[8];\n\t\t\ta[4] += a[8];\n\t\t\ta[8] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[5] - a[9];\n\t\t\ta[5] += a[9];\n\t\t\ta[9] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[0] - a[12];\n\t\t\ta[0] += a[12];\n\t\t\ta[12] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[1] - a[13];\n\t\t\ta[1] += a[13];\n\t\t\ta[13] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[16] - a[28];\n\t\t\ta[16] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = -a[17] + a[29];\n\t\t\ta[17] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = Util.SQRT2 * (a[2] - a[10]);\n\t\t\ta[2] += a[10];\n\t\t\ta[10] = xr;\n\t\t\txr = Util.SQRT2 * (a[3] - a[11]);\n\t\t\ta[3] += a[11];\n\t\t\ta[11] = xr;\n\t\t\txr = Util.SQRT2 * (-a[18] + a[26]);\n\t\t\ta[18] += a[26];\n\t\t\ta[26] = xr - a[18];\n\t\t\txr = Util.SQRT2 * (-a[19] + a[27]);\n\t\t\ta[19] += a[27];\n\t\t\ta[27] = xr - a[19];\n\n\t\t\txr = a[2];\n\t\t\ta[19] -= a[3];\n\t\t\ta[3] -= xr;\n\t\t\ta[2] = a[31] - xr;\n\t\t\ta[31] += xr;\n\t\t\txr = a[3];\n\t\t\ta[11] -= a[19];\n\t\t\ta[18] -= xr;\n\t\t\ta[3] = a[30] - xr;\n\t\t\ta[30] += xr;\n\t\t\txr = a[18];\n\t\t\ta[27] -= a[11];\n\t\t\ta[19] -= xr;\n\t\t\ta[18] = a[15] - xr;\n\t\t\ta[15] += xr;\n\n\t\t\txr = a[19];\n\t\t\ta[10] -= xr;\n\t\t\ta[19] = a[14] - xr;\n\t\t\ta[14] += xr;\n\t\t\txr = a[10];\n\t\t\ta[11] -= xr;\n\t\t\ta[10] = a[23] - xr;\n\t\t\ta[23] += xr;\n\t\t\txr = a[11];\n\t\t\ta[26] -= xr;\n\t\t\ta[11] = a[22] - xr;\n\t\t\ta[22] += xr;\n\t\t\txr = a[26];\n\t\t\ta[27] -= xr;\n\t\t\ta[26] = a[7] - xr;\n\t\t\ta[7] += xr;\n\n\t\t\txr = a[27];\n\t\t\ta[27] = a[6] - xr;\n\t\t\ta[6] += xr;\n\n\t\t\txr = Util.SQRT2 * (a[0] - a[4]);\n\t\t\ta[0] += a[4];\n\t\t\ta[4] = xr;\n\t\t\txr = Util.SQRT2 * (a[1] - a[5]);\n\t\t\ta[1] += a[5];\n\t\t\ta[5] = xr;\n\t\t\txr = Util.SQRT2 * (a[16] - a[20]);\n\t\t\ta[16] += a[20];\n\t\t\ta[20] = xr;\n\t\t\txr = Util.SQRT2 * (a[17] - a[21]);\n\t\t\ta[17] += a[21];\n\t\t\ta[21] = xr;\n\n\t\t\txr = -Util.SQRT2 * (a[8] - a[12]);\n\t\t\ta[8] += a[12];\n\t\t\ta[12] = xr - a[8];\n\t\t\txr = -Util.SQRT2 * (a[9] - a[13]);\n\t\t\ta[9] += a[13];\n\t\t\ta[13] = xr - a[9];\n\t\t\txr = -Util.SQRT2 * (a[25] - a[29]);\n\t\t\ta[25] += a[29];\n\t\t\ta[29] = xr - a[25];\n\t\t\txr = -Util.SQRT2 * (a[24] + a[28]);\n\t\t\ta[24] -= a[28];\n\t\t\ta[28] = xr - a[24];\n\n\t\t\txr = a[24] - a[16];\n\t\t\ta[24] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\n\t\t\txr = a[25] - a[17];\n\t\t\ta[25] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[17] - a[1];\n\t\t\ta[17] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[1] - a[0];\n\t\t\ta[1] = xr;\n\t\t\txr = a[16] - xr;\n\t\t\ta[16] = xr;\n\t\t\txr = a[17] - xr;\n\t\t\ta[17] = xr;\n\t\t\txr = a[8] - xr;\n\t\t\ta[8] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[24] - xr;\n\t\t\ta[24] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[4] - xr;\n\t\t\ta[4] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[12] - xr;\n\t\t\ta[12] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[0];\n\t\t\ta[0] += a[31];\n\t\t\ta[31] -= xr;\n\t\t\txr = a[1];\n\t\t\ta[1] += a[30];\n\t\t\ta[30] -= xr;\n\t\t\txr = a[16];\n\t\t\ta[16] += a[15];\n\t\t\ta[15] -= xr;\n\t\t\txr = a[17];\n\t\t\ta[17] += a[14];\n\t\t\ta[14] -= xr;\n\t\t\txr = a[8];\n\t\t\ta[8] += a[23];\n\t\t\ta[23] -= xr;\n\t\t\txr = a[9];\n\t\t\ta[9] += a[22];\n\t\t\ta[22] -= xr;\n\t\t\txr = a[24];\n\t\t\ta[24] += a[7];\n\t\t\ta[7] -= xr;\n\t\t\txr = a[25];\n\t\t\ta[25] += a[6];\n\t\t\ta[6] -= xr;\n\t\t\txr = a[4];\n\t\t\ta[4] += a[27];\n\t\t\ta[27] -= xr;\n\t\t\txr = a[5];\n\t\t\ta[5] += a[26];\n\t\t\ta[26] -= xr;\n\t\t\txr = a[20];\n\t\t\ta[20] += a[11];\n\t\t\ta[11] -= xr;\n\t\t\txr = a[21];\n\t\t\ta[21] += a[10];\n\t\t\ta[10] -= xr;\n\t\t\txr = a[12];\n\t\t\ta[12] += a[19];\n\t\t\ta[19] -= xr;\n\t\t\txr = a[13];\n\t\t\ta[13] += a[18];\n\t\t\ta[18] -= xr;\n\t\t\txr = a[28];\n\t\t\ta[28] += a[3];\n\t\t\ta[3] -= xr;\n\t\t\txr = a[29];\n\t\t\ta[29] += a[2];\n\t\t\ta[2] -= xr;\n\t\t}\n\t}\n\n\t/**\n\t * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\n\t * there are 36 coefficents in the time domain and 18 in the frequency\n\t * domain.<BR>\n\t * In the case of short blocks (type 2) there are 3 transformations with\n\t * short length. This leads to 12 coefficents in the time and 6 in the\n\t * frequency domain. In this case the results are stored side by side in the\n\t * vector out[].\n\t *\n\t * New layer3\n\t */\n\tfunction mdct_short(inout, inoutPos) {\n\t\tfor (var l = 0; l < 3; l++) {\n\t\t\tvar tc0, tc1, tc2, ts0, ts1, ts2;\n\n\t\t\tts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t- inout[inoutPos + 5 * 3];\n\t\t\ttc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t- inout[inoutPos + 3 * 3];\n\t\t\ttc1 = ts0 + tc0;\n\t\t\ttc2 = ts0 - tc0;\n\n\t\t\tts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t+ inout[inoutPos + 2 * 3];\n\t\t\ttc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t+ inout[inoutPos + 0 * 3];\n\t\t\tts1 = ts0 + tc0;\n\t\t\tts2 = -ts0 + tc0;\n\n\t\t\ttc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\n\t\t\t/*\n\t\t\t * tritab_s[ 2 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\n\t\t\t/*\n\t\t\t * tritab_s[0 ]\n\t\t\t */\n\t\t\ttc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 2]\n\t\t\t */\n\t\t\tts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n\t\t\tinout[inoutPos + 3 * 1] = tc2 - ts1;\n\t\t\tinout[inoutPos + 3 * 2] = tc2 + ts1;\n\n\t\t\ttc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n\t\t\tts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 0]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 3] = tc1 + ts2;\n\t\t\tinout[inoutPos + 3 * 4] = tc1 - ts2;\n\n\t\t\tinoutPos++;\n\t\t}\n\t}\n\n\tfunction mdct_long(out, outPos, _in) {\n\t\tvar ct, st;\n\t\t{\n\t\t\tvar tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\n\t\t\t/* 1,2, 5,6, 9,10, 13,14, 17 */\n\t\t\ttc1 = _in[17] - _in[9];\n\t\t\ttc3 = _in[15] - _in[11];\n\t\t\ttc4 = _in[14] - _in[12];\n\t\t\tts5 = _in[0] + _in[8];\n\t\t\tts6 = _in[1] + _in[7];\n\t\t\tts7 = _in[2] + _in[6];\n\t\t\tts8 = _in[3] + _in[5];\n\n\t\t\tout[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\n\t\t\tst = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n\t\t\tct = (tc1 - tc3 - tc4) * cx[12 + 6];\n\t\t\tout[outPos + 5] = ct + st;\n\t\t\tout[outPos + 6] = ct - st;\n\n\t\t\ttc2 = (_in[16] - _in[10]) * cx[12 + 6];\n\t\t\tts6 = ts6 * cx[12 + 7] + _in[4];\n\t\t\tct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n\t\t\tst = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n\t\t\tout[outPos + 1] = ct + st;\n\t\t\tout[outPos + 2] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n\t\t\tst = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n\t\t\tout[outPos + 9] = ct + st;\n\t\t\tout[outPos + 10] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n\t\t\tst = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n\t\t\tout[outPos + 13] = ct + st;\n\t\t\tout[outPos + 14] = ct - st;\n\t\t}\n\t\t{\n\t\t\tvar ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n\n\t\t\tts1 = _in[8] - _in[0];\n\t\t\tts3 = _in[6] - _in[2];\n\t\t\tts4 = _in[5] - _in[3];\n\t\t\ttc5 = _in[17] + _in[9];\n\t\t\ttc6 = _in[16] + _in[10];\n\t\t\ttc7 = _in[15] + _in[11];\n\t\t\ttc8 = _in[14] + _in[12];\n\n\t\t\tout[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\n\t\t\tct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n\t\t\tst = (ts1 - ts3 + ts4) * cx[12 + 6];\n\t\t\tout[outPos + 11] = ct + st;\n\t\t\tout[outPos + 12] = ct - st;\n\n\t\t\tts2 = (_in[7] - _in[1]) * cx[12 + 6];\n\t\t\ttc6 = _in[13] - tc6 * cx[12 + 7];\n\t\t\tct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n\t\t\tst = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n\t\t\tout[outPos + 3] = ct + st;\n\t\t\tout[outPos + 4] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n\t\t\tst = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n\t\t\tout[outPos + 7] = ct + st;\n\t\t\tout[outPos + 8] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n\t\t\tst = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n\t\t\tout[outPos + 15] = ct + st;\n\t\t\tout[outPos + 16] = ct - st;\n\t\t}\n\t}\n\n\tthis.mdct_sub48 = function(gfc, w0, w1) {\n\t\tvar wk = w0;\n\t\tvar wkPos = 286;\n\t\t/* thinking cache performance, ch->gr loop is better than gr->ch loop */\n\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\t\t\t\tvar band;\n\t\t\t\tvar gi = (gfc.l3_side.tt[gr][ch]);\n\t\t\t\tvar mdct_enc = gi.xr;\n\t\t\t\tvar mdct_encPos = 0;\n\t\t\t\tvar samp = gfc.sb_sample[ch][1 - gr];\n\t\t\t\tvar sampPos = 0;\n\n\t\t\t\tfor (var k = 0; k < 18 / 2; k++) {\n\t\t\t\t\twindow_subband(wk, wkPos, samp[sampPos]);\n\t\t\t\t\twindow_subband(wk, wkPos + 32, samp[sampPos + 1]);\n\t\t\t\t\tsampPos += 2;\n\t\t\t\t\twkPos += 64;\n\t\t\t\t\t/*\n\t\t\t\t\t * Compensate for inversion in the analysis filter\n\t\t\t\t\t */\n\t\t\t\t\tfor (band = 1; band < 32; band += 2) {\n\t\t\t\t\t\tsamp[sampPos - 1][band] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Perform imdct of 18 previous subband samples + 18 current\n\t\t\t\t * subband samples\n\t\t\t\t */\n\t\t\t\tfor (band = 0; band < 32; band++, mdct_encPos += 18) {\n\t\t\t\t\tvar type = gi.block_type;\n\t\t\t\t\tvar band0 = gfc.sb_sample[ch][gr];\n\t\t\t\t\tvar band1 = gfc.sb_sample[ch][1 - gr];\n\t\t\t\t\tif (gi.mixed_block_flag != 0 && band < 2)\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\tif (gfc.amp_filter[band] < 1e-12) {\n\t\t\t\t\t\tArrays.fill(mdct_enc, mdct_encPos + 0,\n\t\t\t\t\t\t\t\tmdct_encPos + 18, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (gfc.amp_filter[band] < 1.0) {\n\t\t\t\t\t\t\tfor (var k = 0; k < 18; k++)\n\t\t\t\t\t\t\t\tband1[k][order[band]] *= gfc.amp_filter[band];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type == Encoder.SHORT_TYPE) {\n\t\t\t\t\t\t\tfor (var k = -NS / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar w = win[Encoder.SHORT_TYPE][k + 3];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band0[15 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[14 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[3 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band1[2 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[9 + k][order[band]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmdct_short(mdct_enc, mdct_encPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar work = new_float(18);\n\t\t\t\t\t\t\tfor (var k = -NL / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar a, b;\n\t\t\t\t\t\t\t\ta = win[type][k + 27]\n\t\t\t\t\t\t\t\t\t\t* band1[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t+ win[type][k + 36]\n\t\t\t\t\t\t\t\t\t\t* band1[8 - k][order[band]];\n\t\t\t\t\t\t\t\tb = win[type][k + 9]\n\t\t\t\t\t\t\t\t\t\t* band0[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t- win[type][k + 18]\n\t\t\t\t\t\t\t\t\t\t* band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\twork[k + 9] = a - b * tantab_l[3 + k + 9];\n\t\t\t\t\t\t\t\twork[k + 18] = a * tantab_l[3 + k + 9] + b;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmdct_long(mdct_enc, mdct_encPos, work);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * Perform aliasing reduction butterfly\n\t\t\t\t\t */\n\t\t\t\t\tif (type != Encoder.SHORT_TYPE && band != 0) {\n\t\t\t\t\t\tfor (var k = 7; k >= 0; --k) {\n\t\t\t\t\t\t\tvar bu, bd;\n\t\t\t\t\t\t\tbu = mdct_enc[mdct_encPos + k] * ca[20 + k]\n\t\t\t\t\t\t\t\t\t+ mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* cs[28 + k];\n\t\t\t\t\t\t\tbd = mdct_enc[mdct_encPos + k] * cs[28 + k]\n\t\t\t\t\t\t\t\t\t- mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* ca[20 + k];\n\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + -1 - k] = bu;\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k] = bd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twk = w1;\n\t\t\twkPos = 286;\n\t\t\tif (gfc.mode_gr == 1) {\n\t\t\t\tfor (var i = 0; i < 18; i++) {\n\t\t\t\t\tSystem.arraycopy(gfc.sb_sample[ch][1][i], 0,\n\t\t\t\t\t\t\tgfc.sb_sample[ch][0][i], 0, 32);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//package mp3;\n\n\nfunction III_psy_ratio() {\n\tthis.thm = new III_psy_xmin();\n\tthis.en = new III_psy_xmin();\n}\n\n\n/**\n * ENCDELAY The encoder delay.\n *\n * Minimum allowed is MDCTDELAY (see below)\n *\n * The first 96 samples will be attenuated, so using a value less than 96\n * will result in corrupt data for the first 96-ENCDELAY samples.\n *\n * suggested: 576 set to 1160 to sync with FhG.\n */\nEncoder.ENCDELAY = 576;\n/**\n * make sure there is at least one complete frame after the last frame\n * containing real data\n *\n * Using a value of 288 would be sufficient for a a very sophisticated\n * decoder that can decode granule-by-granule instead of frame by frame. But\n * lets not assume this, and assume the decoder will not decode frame N\n * unless it also has data for frame N+1\n */\nEncoder.POSTDELAY = 1152;\n\n/**\n * delay of the MDCT used in mdct.c original ISO routines had a delay of\n * 528! Takehiro's routines:\n */\nEncoder.MDCTDELAY = 48;\nEncoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\n\n/**\n * Most decoders, including the one we use, have a delay of 528 samples.\n */\nEncoder.DECDELAY = 528;\n\n/**\n * number of subbands\n */\nEncoder.SBLIMIT = 32;\n\n/**\n * parition bands bands\n */\nEncoder.CBANDS = 64;\n\n/**\n * number of critical bands/scale factor bands where masking is computed\n */\nEncoder.SBPSY_l = 21;\nEncoder.SBPSY_s = 12;\n\n/**\n * total number of scalefactor bands encoded\n */\nEncoder.SBMAX_l = 22;\nEncoder.SBMAX_s = 13;\nEncoder.PSFB21 = 6;\nEncoder.PSFB12 = 6;\n\n/**\n * FFT sizes\n */\nEncoder.BLKSIZE = 1024;\nEncoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\nEncoder.BLKSIZE_s = 256;\nEncoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\n\nEncoder.NORM_TYPE = 0;\nEncoder.START_TYPE = 1;\nEncoder.SHORT_TYPE = 2;\nEncoder.STOP_TYPE = 3;\n\n/**\n * <PRE>\n * Mode Extention:\n * When we are in stereo mode, there are 4 possible methods to store these\n * two channels. The stereo modes -m? are using a subset of them.\n *\n *  -ms: MPG_MD_LR_LR\n *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\n *  -mf: MPG_MD_MS_LR\n *  -mi: all\n * </PRE>\n */\nEncoder.MPG_MD_LR_LR = 0;\nEncoder.MPG_MD_LR_I = 1;\nEncoder.MPG_MD_MS_LR = 2;\nEncoder.MPG_MD_MS_I = 3;\n\nEncoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\n    -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\n    0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n\nfunction Encoder() {\n\n    var FFTOFFSET = Encoder.FFTOFFSET;\n    var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\n    //BitStream bs;\n    //PsyModel psy;\n    //VBRTag vbr;\n    //QuantizePVT qupvt;\n    var bs = null;\n    this.psy = null;\n    var psy = null;\n    var vbr = null;\n    var qupvt = null;\n\n    //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n    //    VBRTag vbr) {\n    this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n    };\n\n    var newMDCT = new NewMDCT();\n\n    /***********************************************************************\n     *\n     * encoder and decoder delays\n     *\n     ***********************************************************************/\n\n    /**\n     * <PRE>\n     * layer III enc->dec delay:  1056 (1057?)   (observed)\n     * layer  II enc->dec delay:   480  (481?)   (observed)\n     *\n     * polyphase 256-16             (dec or enc)        = 240\n     * mdct      256+32  (9*32)     (dec or enc)        = 288\n     * total:    512+16\n     *\n     * My guess is that delay of polyphase filterbank is actualy 240.5\n     * (there are technical reasons for this, see postings in mp3encoder).\n     * So total Encode+Decode delay = ENCDELAY + 528 + 1\n     * </PRE>\n     */\n\n\n    /**\n     * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\n     *\n     * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\n     */\n//private void adjust_ATH(final LameInternalFlags gfc) {\n    function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n\n        if (gfc.ATH.useAdjust == 0) {\n            gfc.ATH.adjust = 1.0;\n            /* no adjustment */\n            return;\n        }\n\n        /* jd - 2001 mar 12, 27, jun 30 */\n        /* loudness based on equal loudness curve; */\n        /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n            max_pow += gfc.loudness_sq[0][1];\n            gr2_max += gfc.loudness_sq[1][1];\n        } else {\n            max_pow += max_pow;\n            gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n            max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5;\n        /* max_pow approaches 1.0 for full band noise */\n\n        /* jd - 2001 mar 31, jun 30 */\n        /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP;\n\n        /*\n         * adjust ATH depending on range of maximum value\n         */\n\n        /* jd - 2001 feb27, mar12,20, jun30, jul22 */\n        /* continuous curves based on approximation */\n        /* to GB's original values. */\n        /* For an increase in approximate loudness, */\n        /* set ATH adjust to adjust_limit immediately */\n        /* after a delay of one frame. */\n        /* For a loudness decrease, reduce ATH adjust */\n        /* towards adjust_limit gradually. */\n        /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\n            if (gfc.ATH.adjust >= 1.0) {\n                gfc.ATH.adjust = 1.0;\n            } else {\n                /* preceding frame has lower ATH adjust; */\n                /* ascend only to the preceding adjust_limit */\n                /* in case there is leading low volume */\n                if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                    gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                }\n            }\n            gfc.ATH.adjustLimit = 1.0;\n        } else { /* adjustment curve */\n            /* about 32 dB maximum adjust (0.000625) */\n            var adj_lim_new = 31.98 * max_pow + 0.000625;\n            if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\n                gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n                if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\n                    gfc.ATH.adjust = adj_lim_new;\n                }\n            } else { /* ascend */\n                if (gfc.ATH.adjustLimit >= adj_lim_new) {\n                    gfc.ATH.adjust = adj_lim_new;\n                } else {\n                    /* preceding frame has lower ATH adjust; */\n                    /* ascend only to the preceding adjust_limit */\n                    if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                        gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                    }\n                }\n            }\n            gfc.ATH.adjustLimit = adj_lim_new;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  some simple statistics\n     *\n     *  bitrate index 0: free bitrate . not allowed in VBR mode\n     *  : bitrates, kbps depending on MPEG version\n     *  bitrate index 15: forbidden\n     *\n     *  mode_ext:\n     *  0:  LR\n     *  1:  LR-i\n     *  2:  MS\n     *  3:  MS-i\n     * </PRE>\n     */\n    function updateStats(gfc) {\n        var gr, ch;\n\n        /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++;\n\n        /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n            gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\n            gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n                if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\n                    bt = 4;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n                gfc.bitrate_blockType_Hist[15][bt]++;\n                gfc.bitrate_blockType_Hist[15][5]++;\n            }\n        }\n    }\n\n    function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n\n        var ch, gr;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* prime the MDCT/polyphase filterbank with a short block */\n            var i, j;\n            var primebuff0 = new_float(286 + 1152 + 576);\n            var primebuff1 = new_float(286 + 1152 + 576);\n            gfc.lame_encode_frame_init = 1;\n            for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n                if (i < 576 * gfc.mode_gr) {\n                    primebuff0[i] = 0;\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = 0;\n                } else {\n                    primebuff0[i] = inbuf[0][j];\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = inbuf[1][j];\n                    ++j;\n                }\n            }\n            /* polyphase filtering / mdct */\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n                }\n            }\n            newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\n\n            /* check FFT will not use a negative starting offset */\n            /* check if we have enough data for FFT */\n            /* check if we have enough data for polyphase filterbank */\n        }\n\n    }\n\n    /**\n     * <PRE>\n     * encodeframe()           Layer 3\n     *\n     * encode a single frame\n     *\n     *\n     *    lame_encode_frame()\n     *\n     *\n     *                           gr 0            gr 1\n     *    inbuf:           |--------------|--------------|--------------|\n     *\n     *\n     *    Polyphase (18 windows, each shifted 32)\n     *    gr 0:\n     *    window1          <----512---.\n     *    window18                 <----512---.\n     *\n     *    gr 1:\n     *    window1                         <----512---.\n     *    window18                                <----512---.\n     *\n     *\n     *\n     *    MDCT output:  |--------------|--------------|--------------|\n     *\n     *    FFT's                    <---------1024---------.\n     *                                             <---------1024-------.\n     *\n     *\n     *\n     *        inbuf = buffer of PCM data size=MP3 framesize\n     *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\n     *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\n     *\n     *        psy-model FFT has a 1 granule delay, so we feed it data for the\n     *        next granule.\n     *        FFT is centered over granule:  224+576+224\n     *        So FFT starts at:   576-224-MDCTDELAY\n     *\n     *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\n     *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\n     *\n     *        MPEG2:  polyphase first window:  [0..511]\n     *                          18th window:   [544..1055]          (1056)\n     *        MPEG1:            36th window:   [1120..1631]         (1632)\n     *                data needed:  512+framesize-32\n     *\n     *        A close look newmdct.c shows that the polyphase filterbank\n     *        only uses data from [0..510] for each window.  Perhaps because the window\n     *        used by the filterbank is zero for the last point, so Takehiro's\n     *        code doesn't bother to compute with it.\n     *\n     *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\n     *\n     * </PRE>\n     */\n\n\n    this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]);\n        /*\n         * LR masking &\n         * energy\n         */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]);\n        /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio();\n        //III_psy_ratio masking[][];\n        var masking;\n        /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]];\n\n//float[][] pe_use;\n        var pe_use;\n\n        var ch, gr;\n\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* first run? */\n            lame_encode_frame_init(gfp, inbuf);\n\n        }\n\n        /********************** padding *****************************/\n        /**\n         * <PRE>\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\n         * by Martin Sieler, Ralph Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         * </PRE>\n         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\n            gfc.slot_lag += gfp.out_samplerate;\n            gfc.padding = 1;\n        }\n\n        /****************************************\n         * Stage 1: psychoacoustic model *\n         ****************************************/\n\n        if (gfc.psymodel != 0) {\n            /*\n             * psychoacoustic model psy model has a 1 granule (576) delay that\n             * we must compensate for (mt 6/99).\n             */\n            var ret;\n            var bufp = [null, null];\n            /* address of beginning of left & right granule */\n            var bufpPos = 0;\n            /* address of beginning of left & right granule */\n            var blocktype = new_int(2);\n\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    bufp[ch] = inbuf[ch];\n                    bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n                }\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n                    ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                } else {\n                    ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                }\n                if (ret != 0)\n                    return -4;\n\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\n                    if (ms_ener_ratio[gr] > 0)\n                        ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\n                }\n\n                /* block type flags */\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var cod_info = gfc.l3_side.tt[gr][ch];\n                    cod_info.block_type = blocktype[ch];\n                    cod_info.mixed_block_flag = 0;\n                }\n            }\n        } else {\n            /* no psy model */\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\n                    gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\n                    pe_MS[gr][ch] = pe[gr][ch] = 700;\n                }\n        }\n\n        /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc);\n\n        /****************************************\n         * Stage 2: MDCT *\n         ****************************************/\n\n        /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\n\n        /****************************************\n         * Stage 3: MS/LR decision *\n         ****************************************/\n\n        /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n\n        if (gfp.force_ms) {\n            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            /*\n             * ms_ratio = is scaled, for historical reasons, to look like a\n             * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\n             * uncorrelated\n             */\n\n            /**\n             * <PRE>\n             * [0] and [1] are the results for the two granules in MPEG-1,\n             * in MPEG-2 it's only a faked averaging of the same value\n             * _prev is the value of the last granule of the previous frame\n             * _next is the value of the first granule of the next frame\n             * </PRE>\n             */\n\n            var sum_pe_MS = 0.;\n            var sum_pe_LR = 0.;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    sum_pe_MS += pe_MS[gr][ch];\n                    sum_pe_LR += pe[gr][ch];\n                }\n            }\n\n            /* based on PE: M/S coding would not use much more bits than L/R */\n            if (sum_pe_MS <= 1.00 * sum_pe_LR) {\n\n                var gi0 = gfc.l3_side.tt[0];\n                var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\n\n                if (gi0[0].block_type == gi0[1].block_type\n                    && gi1[0].block_type == gi1[1].block_type) {\n\n                    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n                }\n            }\n        }\n\n        /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n            masking = masking_MS;\n            /* use MS masking */\n            pe_use = pe_MS;\n        } else {\n            masking = masking_LR;\n            /* use LR masking */\n            pe_use = pe;\n        }\n\n        /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\n                    gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\n                    gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\n                    gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\n                    System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0,\n                        gfc.pinfo.xr[gr][ch], 0, 576);\n                    /*\n                     * in psymodel, LR and MS data was stored in pinfo. switch\n                     * to MS data:\n                     */\n                    if (gfc.mode_ext == MPG_MD_MS_LR) {\n                        gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\n                        System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0,\n                            gfc.pinfo.energy[gr][ch], 0,\n                            gfc.pinfo.energy[gr][ch].length);\n                    }\n                }\n            }\n        }\n\n        /****************************************\n         * Stage 4: quantization loop *\n         ****************************************/\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n\n            var i;\n            var f;\n\n            for (i = 0; i < 18; i++)\n                gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n\n            f = 0.0;\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    f += pe_use[gr][ch];\n            gfc.nsPsy.pefirbuf[18] = f;\n\n            f = gfc.nsPsy.pefirbuf[9];\n            for (i = 0; i < 9; i++)\n                f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\n                    * Encoder.fircoef[i];\n\n            f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    pe_use[gr][ch] *= f;\n                }\n            }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\n\n        /****************************************\n         * Stage 5: bitstream formatting *\n         ****************************************/\n\n        /* write the frame to the bitstream */\n        bs.format_bitstream(gfp);\n\n        /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n\n        if (gfp.bWriteVbrTag)\n            vbr.addVbrFrame(gfp);\n\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var j;\n                for (j = 0; j < FFTOFFSET; j++)\n                    gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j\n                    + gfp.framesize];\n                for (j = FFTOFFSET; j < 1600; j++) {\n                    gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\n                }\n            }\n            qupvt.set_frame_pinfo(gfp, masking);\n        }\n\n        updateStats(gfc);\n\n        return mp3count;\n    }\n}\n\n\n//package mp3;\n\nfunction VBRSeekInfo() {\n    /**\n     * What we have seen so far.\n     */\n    this.sum = 0;\n    /**\n     * How many frames we have seen in this chunk.\n     */\n    this.seen = 0;\n    /**\n     * How many frames we want to collect into one chunk.\n     */\n    this.want = 0;\n    /**\n     * Actual position in our bag.\n     */\n    this.pos = 0;\n    /**\n     * Size of our bag.\n     */\n    this.size = 0;\n    /**\n     * Pointer to our bag.\n     */\n    this.bag = null;\n    this.nVbrNumFrames = 0;\n    this.nBytesWritten = 0;\n    /* VBR tag data */\n    this.TotalFrameSize = 0;\n}\n\n\n\nfunction IIISideInfo() {\n    this.tt = [[null, null], [null, null]];\n    this.main_data_begin = 0;\n    this.private_bits = 0;\n    this.resvDrain_pre = 0;\n    this.resvDrain_post = 0;\n    this.scfsi = [new_int(4), new_int(4)];\n\n    for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n            this.tt[gr][ch] = new GrInfo();\n        }\n    }\n}\n\n\nfunction III_psy_xmin() {\n    this.l = new_float(Encoder.SBMAX_l);\n    this.s = new_float_n([Encoder.SBMAX_s, 3]);\n\n    var self = this;\n    this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n            for (var j = 0; j < 3; j++) {\n                self.s[i][j] = iii_psy_xmin.s[i][j];\n            }\n        }\n    }\n}\n\n\n\n//package mp3;\n\n/**\n * Variables used for --nspsytune\n *\n * @author Ken\n *\n */\nfunction NsPsy() {\n    this.last_en_subshort = new_float_n([4, 9]);\n    this.lastAttacks = new_int(4);\n    this.pefirbuf = new_float(19);\n    this.longfact = new_float(Encoder.SBMAX_l);\n    this.shortfact = new_float(Encoder.SBMAX_s);\n\n    /**\n     * short block tuning\n     */\n    this.attackthre = 0.;\n    this.attackthre_s = 0.;\n}\n\n\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\n\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\n/*\n *      psymodel.c\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 2001-2002 Naoki Shibata\n *      Copyright (c) 2000-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2008 Robert Hegemann\n *      Copyright (c) 2000-2005 Gabriel Bouvigne\n *      Copyright (c) 2000-2005 Alexander Leidinger\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\n\n\n/*\n PSYCHO ACOUSTICS\n\n\n This routine computes the psycho acoustics, delayed by one granule.\n\n Input: buffer of PCM data (1024 samples).\n\n This window should be centered over the 576 sample granule window.\n The routine will compute the psycho acoustics for\n this granule, but return the psycho acoustics computed\n for the *previous* granule.  This is because the block\n type of the previous granule can only be determined\n after we have computed the psycho acoustics for the following\n granule.\n\n Output:  maskings and energies for each scalefactor band.\n block type, PE, and some correlation measures.\n The PE is used by CBR modes to determine if extra bits\n from the bit reservoir should be used.  The correlation\n measures are used to determine mid/side or regular stereo.\n */\n/*\n Notation:\n\n barks:  a non-linear frequency scale.  Mapping from frequency to\n barks is given by freq2bark()\n\n scalefactor bands: The spectrum (frequencies) are broken into\n SBMAX \"scalefactor bands\".  Thes bands\n are determined by the MPEG ISO spec.  In\n the noise shaping/quantization code, we allocate\n bits among the partition bands to achieve the\n best possible quality\n\n partition bands:   The spectrum is also broken into about\n 64 \"partition bands\".  Each partition\n band is about .34 barks wide.  There are about 2-5\n partition bands for each scalefactor band.\n\n LAME computes all psycho acoustic information for each partition\n band.  Then at the end of the computations, this information\n is mapped to scalefactor bands.  The energy in each scalefactor\n band is taken as the sum of the energy in all partition bands\n which overlap the scalefactor band.  The maskings can be computed\n in the same way (and thus represent the average masking in that band)\n or by taking the minmum value multiplied by the number of\n partition bands used (which represents a minimum masking in that band).\n */\n/*\n The general outline is as follows:\n\n 1. compute the energy in each partition band\n 2. compute the tonality in each partition band\n 3. compute the strength of each partion band \"masker\"\n 4. compute the masking (via the spreading function applied to each masker)\n 5. Modifications for mid/side masking.\n\n Each partition band is considiered a \"masker\".  The strength\n of the i'th masker in band j is given by:\n\n s3(bark(i)-bark(j))*strength(i)\n\n The strength of the masker is a function of the energy and tonality.\n The more tonal, the less masking.  LAME uses a simple linear formula\n (controlled by NMT and TMN) which says the strength is given by the\n energy divided by a linear function of the tonality.\n */\n/*\n s3() is the \"spreading function\".  It is given by a formula\n determined via listening tests.\n\n The total masking in the j'th partition band is the sum over\n all maskings i.  It is thus given by the convolution of\n the strength with s3(), the \"spreading function.\"\n\n masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\n\n where \"o\" = convolution operator.  s3 is given by a formula determined\n via listening tests.  It is normalized so that s3 o 1 = 1.\n\n Note: instead of a simple convolution, LAME also has the\n option of using \"additive masking\"\n\n The most critical part is step 2, computing the tonality of each\n partition band.  LAME has two tonality estimators.  The first\n is based on the ISO spec, and measures how predictiable the\n signal is over time.  The more predictable, the more tonal.\n The second measure is based on looking at the spectrum of\n a single granule.  The more peaky the spectrum, the more\n tonal.  By most indications, the latter approach is better.\n\n Finally, in step 5, the maskings for the mid and side\n channel are possibly increased.  Under certain circumstances,\n noise in the mid & side channels is assumed to also\n be masked by strong maskers in the L or R channels.\n\n\n Other data computed by the psy-model:\n\n ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\n ms_ratio_next   side-channel / mid-channel masking ratio for this granule\n\n percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\n much pre-echo is in the previous granule\n percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\n energy[4]             L,R,M,S energy in each channel, prev granule\n blocktype_d[2]        block type to use for previous granule\n */\n//package mp3;\n\n//import java.util.Arrays;\n\n\nfunction PsyModel() {\n\n    var fft = new FFT();\n\n    var LOG10 = 2.30258509299404568402;\n\n    var rpelev = 2;\n    var rpelev2 = 16;\n    var rpelev_s = 2;\n    var rpelev2_s = 16;\n\n    /* size of each partition band, in barks: */\n    var DELBARK = .34;\n\n    /* tuned for output level (sensitive to energy scale) */\n    var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\n\n    var temporalmask_sustain_sec = 0.01;\n\n    var NS_PREECHO_ATT0 = 0.8;\n    var NS_PREECHO_ATT1 = 0.6;\n    var NS_PREECHO_ATT2 = 0.3;\n\n    var NS_MSFIX = 3.5;\n\n    var NSATTACKTHRE = 4.4;\n    var NSATTACKTHRE_S = 25;\n\n    var NSFIRLEN = 21;\n\n    /* size of each partition band, in barks: */\n    var LN_TO_LOG10 = 0.2302585093;\n\n    function NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n    }\n\n    /**\n     * <PRE>\n     *       L3psycho_anal.  Compute psycho acoustics.\n     *\n     *       Data returned to the calling program must be delayed by one\n     *       granule.\n     *\n     *       This is done in two places.\n     *       If we do not need to know the blocktype, the copying\n     *       can be done here at the top of the program: we copy the data for\n     *       the last granule (computed during the last call) before it is\n     *       overwritten with the new data.  It looks like this:\n     *\n     *       0. static psymodel_data\n     *       1. calling_program_data = psymodel_data\n     *       2. compute psymodel_data\n     *\n     *       For data which needs to know the blocktype, the copying must be\n     *       done at the end of this loop, and the old values must be saved:\n     *\n     *       0. static psymodel_data_old\n     *       1. compute psymodel_data\n     *       2. compute possible block type of this granule\n     *       3. compute final block type of previous granule based on #2.\n     *       4. calling_program_data = psymodel_data_old\n     *       5. psymodel_data_old = psymodel_data\n     *     psycho_loudness_approx\n     *       jd - 2001 mar 12\n     *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\n     *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\n     *    returns: loudness^2 approximation, a positive value roughly tuned for a value\n     *             of 1.0 for signals near clipping.\n     *    notes:   When calibrated, feeding this function binary white noise at sample\n     *             values +32767 or -32768 should return values that approach 3.\n     *             ATHformula is used to approximate an equal loudness curve.\n     *    future:  Data indicates that the shape of the equal loudness curve varies\n     *             with intensity.  This function might be improved by using an equal\n     *             loudness curve shaped for typical playback levels (instead of the\n     *             ATH, that is shaped for the threshold).  A flexible realization might\n     *             simply bend the existing ATH curve to achieve the desired shape.\n     *             However, the potential gain may not be enough to justify an effort.\n     * </PRE>\n     */\n    function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0;\n        /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\n            loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        loudness_power *= VO_SCALE;\n\n        return loudness_power;\n    }\n\n    function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        /* FFT data for mid and side channel is derived from L & R */\n        else if (chn == 2) {\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n            for (var b = 2; b >= 0; --b) {\n                for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                    var l = wsamp_s[wsamp_sPos + 0][b][j];\n                    var r = wsamp_s[wsamp_sPos + 1][b][j];\n                    wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\n                    wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\n                }\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\n            var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n            fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\n            fftenergy_s[b][0] *= fftenergy_s[b][0];\n            for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n                var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 - j];\n                var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 + j];\n                fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                    * re + im * im) * 0.5);\n            }\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n\n        /*********************************************************************\n         * compute loudness approximation (used for ATH auto-level adjustment)\n         *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    /* mask_add optimization */\n    /* init the limit values used to avoid computing log in mask_add when it is not necessary */\n\n    /**\n     * <PRE>\n     *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\n     *\n     * abs(i)>8 is equivalent (as i is an integer) to\n     * abs(i)>=9\n     * i>=9 || i<=-9\n     * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\n     * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\n     * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\n     * exp10 is strictly increasing thus this is equivalent to\n     * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\n     * </PRE>\n     */\n\n    /**\n     * as in if(i>8)\n     */\n    var I1LIMIT = 8;\n    /**\n     * as in if(i>24) . changed 23\n     */\n    var I2LIMIT = 23;\n    /**\n     * as in if(m<15)\n     */\n    var MLIMIT = 15;\n\n    var ma_max_i1;\n    var ma_max_i2;\n    var ma_max_m;\n\n    /**\n     * This is the masking table:<BR>\n     * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\n     * After additive masking computation, 8dB are added, so final values are\n     * going from 8dB to 17.3dB\n     *\n     * pow(10, -0.0..-0.6)\n     */\n    var tab = [1.0, 0.79433, 0.63096, 0.63096,\n        0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n\n    function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\n    }\n\n    var table1 = [3.3246 * 3.3246,\n        3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\n        2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\n        2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\n        1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\n        1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\n        1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\n        1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\n        1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n\n    var table2 = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    var table3 = [2.35364 * 2.35364,\n        2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\n        2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\n        1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\n        1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\n        1.03826 * 1.03826];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n\n        if (m2 > m1) {\n            if (m2 < (m1 * ma_max_i2))\n                ratio = m2 / m1;\n            else\n                return (m1 + m2);\n        } else {\n            if (m1 >= (m2 * ma_max_i2))\n                return (m1 + m2);\n            ratio = m1 / m2;\n        }\n\n        /* Should always be true, just checking */\n\n        m1 += m2;\n        //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if ((b + 3) <= 3 + 3) {\n            /* approximately, 1 bark = 3 partitions */\n            /* 65% of the cases */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                /* 43% of the total */\n                return m1;\n            }\n\n            /* 22% of the total */\n            var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n            return m1 * table2[i];\n        }\n\n        /**\n         * <PRE>\n         * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\n         * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\n         * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\n         * </PRE>\n         */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n            m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n            m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        if (m1 < ma_max_m * m2) {\n            /* 3% of the total */\n            /* Originally if (m > 0) { */\n            if (m1 > m2) {\n                var f, r;\n\n                f = 1.0;\n                if (i <= 13)\n                    f = table3[i];\n\n                r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n                return m1 * ((table1[i] - f) * r + f);\n            }\n\n            if (i > 13)\n                return m1;\n\n            return m1 * table3[i];\n        }\n\n        /* 10% of total */\n        return m1 * table1[i];\n    }\n\n    var table2_ = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function vbrpsy_mask_add(m1, m2, b) {\n        var ratio;\n\n        if (m1 < 0) {\n            m1 = 0;\n        }\n        if (m2 < 0) {\n            m2 = 0;\n        }\n        if (m1 <= 0) {\n            return m2;\n        }\n        if (m2 <= 0) {\n            return m1;\n        }\n        if (m2 > m1) {\n            ratio = m2 / m1;\n        } else {\n            ratio = m1 / m2;\n        }\n        if (-2 <= b && b <= 2) {\n            /* approximately, 1 bark = 3 partitions */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                return m1 + m2;\n            } else {\n                var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n                return (m1 + m2) * table2_[i];\n            }\n        }\n        if (ratio < ma_max_i2) {\n            return m1 + m2;\n        }\n        if (m1 < m2) {\n            m1 = m2;\n        }\n        return m1;\n    }\n\n    /**\n     * compute interchannel masking effects\n     */\n    function calc_interchannel_masking(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        if (gfc.channels_out > 1) {\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                var l = gfc.thm[0].l[sb];\n                var r = gfc.thm[1].l[sb];\n                gfc.thm[0].l[sb] += r * ratio;\n                gfc.thm[1].l[sb] += l * ratio;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                for (var sblock = 0; sblock < 3; sblock++) {\n                    var l = gfc.thm[0].s[sb][sblock];\n                    var r = gfc.thm[1].s[sb][sblock];\n                    gfc.thm[0].s[sb][sblock] += r * ratio;\n                    gfc.thm[1].s[sb][sblock] += l * ratio;\n                }\n            }\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function msfix1(gfc) {\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            /* use this fix if L & R masking differs by 2db or less */\n            /* if db = 10*log10(x2/x1) < 2 */\n            /* if (x2 < 1.58*x1) { */\n            if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb]\n                || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb])\n                continue;\n            var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\n            var rmid = Math.max(gfc.thm[2].l[sb],\n                Math.min(gfc.thm[3].l[sb], mld));\n\n            mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\n            var rside = Math.max(gfc.thm[3].l[sb],\n                Math.min(gfc.thm[2].l[sb], mld));\n            gfc.thm[2].l[sb] = rmid;\n            gfc.thm[3].l[sb] = rside;\n        }\n\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock]\n                    || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock])\n                    continue;\n                var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\n                var rmid = Math.max(gfc.thm[2].s[sb][sblock],\n                    Math.min(gfc.thm[3].s[sb][sblock], mld));\n\n                mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\n                var rside = Math.max(gfc.thm[3].s[sb][sblock],\n                    Math.min(gfc.thm[2].s[sb][sblock], mld));\n\n                gfc.thm[2].s[sb][sblock] = rmid;\n                gfc.thm[3].s[sb][sblock] = rside;\n            }\n        }\n    }\n\n    /**\n     * Adjust M/S maskings if user set \"msfix\"\n     *\n     * Naoki Shibata 2000\n     */\n    function ns_msfix(gfc, msfix, athadjust) {\n        var msfix2 = msfix;\n        var athlower = Math.pow(10, athadjust);\n\n        msfix *= 2.0;\n        msfix2 *= 2.0;\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            var thmLR, thmM, thmS, ath;\n            ath = (gfc.ATH.cb_l[gfc.bm_l[sb]]) * athlower;\n            thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath),\n                Math.max(gfc.thm[1].l[sb], ath));\n            thmM = Math.max(gfc.thm[2].l[sb], ath);\n            thmS = Math.max(gfc.thm[3].l[sb], ath);\n            if (thmLR * msfix < thmM + thmS) {\n                var f = thmLR * msfix2 / (thmM + thmS);\n                thmM *= f;\n                thmS *= f;\n            }\n            gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\n            gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\n        }\n\n        athlower *= ( Encoder.BLKSIZE_s / Encoder.BLKSIZE);\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thmLR, thmM, thmS, ath;\n                ath = (gfc.ATH.cb_s[gfc.bm_s[sb]]) * athlower;\n                thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath),\n                    Math.max(gfc.thm[1].s[sb][sblock], ath));\n                thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\n                thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\n\n                if (thmLR * msfix < thmM + thmS) {\n                    var f = thmLR * msfix / (thmM + thmS);\n                    thmM *= f;\n                    thmS *= f;\n                }\n                gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock],\n                    thmM);\n                gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock],\n                    thmS);\n            }\n        }\n    }\n\n    /**\n     * short block threshold calculation (part 2)\n     *\n     * partition band bo_s[sfb] is at the transition from scalefactor band sfb\n     * to the next one sfb+1; enn and thmm have to be split between them\n     */\n    function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n            var bo_s_sb = gfc.bo_s[sb];\n            var npart_s = gfc.npart_s;\n            var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n            while (b < b_lim) {\n                // iff failed, it may indicate some index error elsewhere\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].s[sb][sblock] = enn;\n            gfc.thm[chn].s[sb][sblock] = thmm;\n\n            if (b >= npart_s) {\n                ++sb;\n                break;\n            }\n            // iff failed, it may indicate some index error elsewhere\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_s_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].s[sb][sblock] += enn;\n                gfc.thm[chn].s[sb][sblock] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n            gfc.en[chn].s[sb][sblock] = 0;\n            gfc.thm[chn].s[sb][sblock] = 0;\n        }\n    }\n\n    /**\n     * longblock threshold calculation (part 2)\n     */\n    function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n            var bo_l_sb = gfc.bo_l[sb];\n            var npart_l = gfc.npart_l;\n            var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n            while (b < b_lim) {\n                // iff failed, it may indicate some index error elsewhere\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].l[sb] = enn;\n            gfc.thm[chn].l[sb] = thmm;\n\n            if (b >= npart_l) {\n                ++sb;\n                break;\n            }\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_l_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].l[sb] += enn;\n                gfc.thm[chn].l[sb] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n            gfc.en[chn].l[sb] = 0;\n            gfc.thm[chn].l[sb] = 0;\n        }\n    }\n\n    function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (var i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n        }\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var ecb = gfc.s3_ss[j++] * eb[kk];\n            ++kk;\n            while (kk <= gfc.s3ind_s[b][1]) {\n                ecb += gfc.s3_ss[j] * eb[kk];\n                ++j;\n                ++kk;\n            }\n\n            { /* limit calculated threshold by previous granule */\n                var x = rpelev_s * gfc.nb_s1[chn][b];\n                thr[b] = Math.min(ecb, x);\n            }\n            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n                /* limit calculated threshold by even older granule */\n                var x = rpelev2_s * gfc.nb_s2[chn][b];\n                var y = thr[b];\n                thr[b] = Math.min(x, y);\n            }\n\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            blocktype[chn] = Encoder.NORM_TYPE;\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed)\n                uselongblock[chn] = 1;\n            if (gfp.short_blocks == ShortBlock.short_block_forced)\n                uselongblock[chn] = 0;\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype[chn] = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype[chn] = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype[chn];\n            // save for next call to l3psy_anal\n        }\n    }\n\n    function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */\n        if (r >= 1.0) {\n            /* 99.7% of the time */\n            return x;\n        }\n        if (r <= 0.0)\n            return y;\n        if (y > 0.0) {\n            /* rest of the time */\n            return (Math.pow(x / y, r) * y);\n        }\n        /* never happens */\n        return 0.0;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\n        51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\n        /* 255.8 */\n    ];\n\n    function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thm = mr.thm.s[sb][sblock];\n                if (thm > 0.0) {\n                    var x = thm * masking_lower;\n                    var en = mr.en.s[sb][sblock];\n                    if (en > x) {\n                        if (en > x * 1e10) {\n                            pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                        } else {\n                            pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                        }\n                    }\n                }\n            }\n        }\n\n        return pe_s;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\n        12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\n        60.7, 73.9, 85.7, 93.4, 126.1,\n        /* 241.3 */\n    ];\n\n    function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n            var thm = mr.thm.l[sb];\n            if (thm > 0.0) {\n                var x = thm * masking_lower;\n                var en = mr.en.l[sb];\n                if (en > x) {\n                    if (en > x * 1e10) {\n                        pe_l += regcoef_l[sb] * (10.0 * LOG10);\n                    } else {\n                        pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n                    }\n                }\n            }\n        }\n        return pe_l;\n    }\n\n    function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n            var ebb = 0, m = 0;\n            var i;\n            for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n                var el = fftenergy[j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb * gfc.rnumlines_l[b];\n        }\n    }\n\n    function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\n                    + gfc.numlines_l[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n    }\n\n    var fircoef = [\n        -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\n        -5.52212e-17 * 2, -0.313819 * 2\n    ];\n\n    this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\n         * to get a good cache performance, one has to think about the sequence,\n         * in which the variables are used.\n         */\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n\n        /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2);\n\n        /* block type */\n        var blocktype = new_int(2), uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock;\n\n        /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\n\n        Arrays.fill(mask_idx_s, 0);\n\n        numchn = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO)\n            numchn = 4;\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\n            / gfc.ResvMax * 0.5;\n        else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            pcfact = 0.6;\n        } else\n            pcfact = 1.0;\n\n        /**********************************************************************\n         * Apply HPF of fs/4 to the input signal. This is used for attack\n         * detection / handling.\n         **********************************************************************/\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            var firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            for (i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (numchn > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n\n        for (chn = 0; chn < numchn; chn++) {\n            var wsamp_l;\n            var wsamp_s;\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var attack_intensity = new_float(12);\n            var ns_uselongblock = 1;\n            var attackThreshold;\n            var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n            var ns_attacks = [0, 0, 0, 0];\n            var fftenergy = new_float(Encoder.HBLKSIZE);\n            var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n\n            /*\n             * rh 20040301: the following loops do access one off the limits so\n             * I increase the array dimensions by one and initialize the\n             * accessed values to zero\n             */\n\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            if (chn == 2) {\n                for (i = 0; i < 576; i++) {\n                    var l, r;\n                    l = ns_hpfsmpl[0][i];\n                    r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            {\n                var pf = ns_hpfsmpl[chn & 1];\n                var pfPos = 0;\n                for (i = 0; i < 9; i++) {\n                    var pfe = pfPos + 576 / 9;\n                    var p = 1.;\n                    for (; pfPos < pfe; pfPos++)\n                        if (p < Math.abs(pf[pfPos]))\n                            p = Math.abs(pf[pfPos]);\n\n                    gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                    en_short[1 + i / 3] += p;\n                    if (p > en_subshort[i + 3 - 2]) {\n                        p = p / en_subshort[i + 3 - 2];\n                    } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                        p = en_subshort[i + 3 - 2] / (p * 10.0);\n                    } else\n                        p = 0.0;\n                    attack_intensity[i + 3] = p;\n                }\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (i = 1; i < 12; i++)\n                    if (x < attack_intensity[i])\n                        x = attack_intensity[i];\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            for (i = 0; i < 12; i++)\n                if (0 == ns_attacks[i / 3]\n                    && attack_intensity[i] > attackThreshold)\n                    ns_attacks[i / 3] = (i % 3) + 1;\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            for (i = 1; i < 4; i++) {\n                var ratio;\n                if (en_short[i - 1] > en_short[i]) {\n                    ratio = en_short[i - 1] / en_short[i];\n                } else {\n                    ratio = en_short[i] / en_short[i - 1];\n                }\n                if (ratio < 1.7) {\n                    ns_attacks[i] = 0;\n                    if (i == 1)\n                        ns_attacks[0] = 0;\n                }\n            }\n\n            if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\n                ns_attacks[0] = 0;\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\n                    ns_attacks[1] = 0;\n                if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\n                    ns_attacks[2] = 0;\n                if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\n                    ns_attacks[3] = 0;\n            }\n\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n\n            /*********************************************************************\n             * compute FFTs\n             *********************************************************************/\n            wsamp_s = wsamp_S;\n            wsamp_l = wsamp_L;\n            compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\n                wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\n\n            /*********************************************************************\n             * Calculate the energy and the tonality of each partition.\n             *********************************************************************/\n            calc_energy(gfc, fftenergy, eb_l, max, avg);\n            calc_mask_index_l(gfc, max, avg, mask_idx_l);\n            /* compute masking thresholds for short blocks */\n            for (sblock = 0; sblock < 3; sblock++) {\n                var enn, thmm;\n                compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n                convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\n                /**** short block pre-echo control ****/\n                for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    thmm = gfc.thm[chn].s[sb][sblock];\n\n                    thmm *= NS_PREECHO_ATT0;\n                    if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT1 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    if (ns_attacks[sblock] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\n                        || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                        var idx = (sblock != 2) ? sblock + 1 : 0;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    /* pulse like signal detection for fatboy.wav and so on */\n                    enn = en_subshort[sblock * 3 + 3]\n                        + en_subshort[sblock * 3 + 4]\n                        + en_subshort[sblock * 3 + 5];\n                    if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                        thmm *= 0.5;\n                        if (en_subshort[sblock * 3 + 4] * 6 < enn)\n                            thmm *= 0.5;\n                    }\n\n                    gfc.thm[chn].s[sb][sblock] = thmm;\n                }\n            }\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\n\n            /*********************************************************************\n             * convolve the partitioned energy and unpredictability with the\n             * spreading function, s3_l[b][k]\n             ********************************************************************/\n            k = 0;\n            {\n                for (b = 0; b < gfc.npart_l; b++) {\n                    /*\n                     * convolve the partitioned energy with the spreading\n                     * function\n                     */\n                    var kk = gfc.s3ind[b][0];\n                    var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                    var ecb = gfc.s3_ll[k++] * eb2;\n                    while (++kk <= gfc.s3ind[b][1]) {\n                        eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                        ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\n                            gfc, 0);\n                    }\n                    ecb *= 0.158489319246111;\n                    /* pow(10,-0.8) */\n\n                    /**** long block pre-echo control ****/\n                    /**\n                     * <PRE>\n                     * dont use long block pre-echo control if previous granule was\n                     * a short block.  This is to avoid the situation:\n                     * frame0:  quiet (very low masking)\n                     * frame1:  surge  (triggers short blocks)\n                     * frame2:  regular frame.  looks like pre-echo when compared to\n                     *          frame0, but all pre-echo was in frame1.\n                     * </PRE>\n                     */\n                    /*\n                     * chn=0,1 L and R channels\n                     *\n                     * chn=2,3 S and M channels.\n                     */\n\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\n                        thr[b] = ecb;\n                    else\n                        thr[b] = NS_INTERP(\n                            Math.min(ecb, Math.min(rpelev\n                                * gfc.nb_1[chn][b], rpelev2\n                                * gfc.nb_2[chn][b])), ecb, pcfact);\n\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n                    gfc.nb_1[chn][b] = ecb;\n                }\n            }\n            for (; b <= Encoder.CBANDS; ++b) {\n                eb_l[b] = 0;\n                thr[b] = 0;\n            }\n            /* compute masking thresholds for long blocks */\n            convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        }\n        /* end loop over chn */\n\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n            if (gfp.interChRatio > 0.0) {\n                calc_interchannel_masking(gfp, gfp.interChRatio);\n            }\n        }\n\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            var msfix;\n            msfix1(gfc);\n            msfix = gfp.msfix;\n            if (Math.abs(msfix) > 0.0)\n                ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n            var ppe;\n            var ppePos = 0;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE)\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            else\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n\n            if (gfp.analysis)\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n\n        }\n        return 0;\n    }\n\n    function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n        } else if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n            var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n    }\n\n    function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\n        var gfc = gfp.internal_flags;\n\n        if (sblock == 0 && chn < 2) {\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                var l = wsamp_s[wsamp_sPos + 0][sblock][j];\n                var r = wsamp_s[wsamp_sPos + 1][sblock][j];\n                wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\n        fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\n        for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n            var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\n            var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\n            fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n    }\n\n    /**\n     * compute loudness approximation (used for ATH auto-level adjustment)\n     */\n    function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\n        var gfc = gfp.internal_flags;\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    var fircoef_ = [-8.65163e-18 * 2,\n        -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2,\n        0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\n\n    /**\n     * Apply HPF of fs/4 to the input signal. This is used for attack detection\n     * / handling.\n     */\n    function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var gfc = gfp.internal_flags;\n        var n_chn_out = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4 : n_chn_out;\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (var chn = 0; chn < n_chn_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            for (var i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (var j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef_[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef_[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (n_chn_psy > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var attack_intensity = new_float(12);\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var pf = ns_hpfsmpl[chn & 1];\n            var pfPos = 0;\n            var attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            var ns_uselongblock = 1;\n\n            if (chn == 2) {\n                for (var i = 0, j = 576; j > 0; ++i, --j) {\n                    var l = ns_hpfsmpl[0][i];\n                    var r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (var i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                var pfe = pfPos + 576 / 9;\n                var p = 1.;\n                for (; pfPos < pfe; pfPos++)\n                    if (p < Math.abs(pf[pfPos]))\n                        p = Math.abs(pf[pfPos]);\n\n                gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                en_short[1 + i / 3] += p;\n                if (p > en_subshort[i + 3 - 2]) {\n                    p = p / en_subshort[i + 3 - 2];\n                } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                    p = en_subshort[i + 3 - 2] / (p * 10.0);\n                } else {\n                    p = 0.0;\n                }\n                attack_intensity[i + 3] = p;\n            }\n            /* pulse like signal detection for fatboy.wav and so on */\n            for (var i = 0; i < 3; ++i) {\n                var enn = en_subshort[i * 3 + 3]\n                    + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\n                var factor = 1.;\n                if (en_subshort[i * 3 + 5] * 6 < enn) {\n                    factor *= 0.5;\n                    if (en_subshort[i * 3 + 4] * 6 < enn) {\n                        factor *= 0.5;\n                    }\n                }\n                sub_short_factor[chn][i] = factor;\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (var i = 1; i < 12; i++) {\n                    if (x < attack_intensity[i]) {\n                        x = attack_intensity[i];\n                    }\n                }\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            for (var i = 0; i < 12; i++) {\n                if (0 == ns_attacks[chn][i / 3]\n                    && attack_intensity[i] > attackThreshold) {\n                    ns_attacks[chn][i / 3] = (i % 3) + 1;\n                }\n            }\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            /* Good samples to show the effect are Trumpet test songs */\n            /*\n             * GB: tuned (1) to avoid too many short blocks for test sample\n             * TRUMPET\n             */\n            /*\n             * RH: tuned (2) to let enough short blocks through for test sample\n             * FSOL and SNAPS\n             */\n            for (var i = 1; i < 4; i++) {\n                var u = en_short[i - 1];\n                var v = en_short[i];\n                var m = Math.max(u, v);\n                if (m < 40000) { /* (2) */\n                    if (u < 1.7 * v && v < 1.7 * u) { /* (1) */\n                        if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\n                            ns_attacks[chn][0] = 0;\n                        }\n                        ns_attacks[chn][i] = 0;\n                    }\n                }\n            }\n\n            if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\n                ns_attacks[chn][0] = 0;\n            }\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[chn][0] + ns_attacks[chn][1]\n                + ns_attacks[chn][2] + ns_attacks[chn][3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\n                    ns_attacks[chn][1] = 0;\n                }\n                if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\n                    ns_attacks[chn][2] = 0;\n                }\n                if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\n                    ns_attacks[chn][3] = 0;\n                }\n            }\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n        }\n    }\n\n    function vbrpsy_skip_masking_s(gfc, chn, sblock) {\n        if (sblock == 0) {\n            for (var b = 0; b < gfc.npart_s; b++) {\n                gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n                gfc.nb_s1[chn][b] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_skip_masking_l(gfc, chn) {\n        for (var b = 0; b < gfc.npart_l; b++) {\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = 0;\n        }\n    }\n\n    function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_s - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b]\n                    + gfc.numlines_s[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var max = new float[Encoder.CBANDS], avg = new_float(Encoder.CBANDS);\n        var i, j, b;\n        var mask_idx_s = new int[Encoder.CBANDS];\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb / n;\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            max[b] = 0;\n            avg[b] = 0;\n        }\n        psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var last = gfc.s3ind_s[b][1];\n            var dd, dd_n;\n            var x, ecb, avg_mask;\n            dd = mask_idx_s[kk];\n            dd_n = 1;\n            ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n            ++j;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_s[kk];\n                dd_n += 1;\n                x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n                ecb = vbrpsy_mask_add(ecb, x, kk - b);\n                ++j;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n            thr[b] = ecb;\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_s[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb[b]) {\n                thr[b] = eb[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\n        var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n        var mask_idx_l = new_int(Encoder.CBANDS + 2);\n        var b;\n\n        /*********************************************************************\n         * Calculate the energy and the tonality of each partition.\n         *********************************************************************/\n        calc_energy(gfc, fftenergy, eb_l, max, avg);\n        calc_mask_index_l(gfc, max, avg, mask_idx_l);\n\n        /*********************************************************************\n         * convolve the partitioned energy and unpredictability with the\n         * spreading function, s3_l[b][k]\n         ********************************************************************/\n        var k = 0;\n        for (b = 0; b < gfc.npart_l; b++) {\n            var x, ecb, avg_mask, t;\n            /* convolve the partitioned energy with the spreading function */\n            var kk = gfc.s3ind[b][0];\n            var last = gfc.s3ind[b][1];\n            var dd = 0, dd_n = 0;\n            dd = mask_idx_l[kk];\n            dd_n += 1;\n            ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n            ++k;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_l[kk];\n                dd_n += 1;\n                x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n                t = vbrpsy_mask_add(ecb, x, kk - b);\n                ecb = t;\n                ++k;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n\n            /**** long block pre-echo control ****/\n            /**\n             * <PRE>\n             * dont use long block pre-echo control if previous granule was\n             * a short block.  This is to avoid the situation:\n             * frame0:  quiet (very low masking)\n             * frame1:  surge  (triggers short blocks)\n             * frame2:  regular frame.  looks like pre-echo when compared to\n             *          frame0, but all pre-echo was in frame1.\n             * </PRE>\n             */\n            /*\n             * chn=0,1 L and R channels chn=2,3 S and M channels.\n             */\n            if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\n                var ecb_limit = rpelev * gfc.nb_1[chn][b];\n                if (ecb_limit > 0) {\n                    thr[b] = Math.min(ecb, ecb_limit);\n                } else {\n                    /**\n                     * <PRE>\n                     * Robert 071209:\n                     * Because we don't calculate long block psy when we know a granule\n                     * should be of short blocks, we don't have any clue how the granule\n                     * before would have looked like as a long block. So we have to guess\n                     * a little bit for this END_TYPE block.\n                     * Most of the time we get away with this sloppyness. (fingers crossed :)\n                     * The speed increase is worth it.\n                     * </PRE>\n                     */\n                    thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\n                }\n            } else {\n                var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\n                var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\n                var ecb_limit;\n                if (ecb_limit_2 <= 0) {\n                    ecb_limit_2 = ecb;\n                }\n                if (ecb_limit_1 <= 0) {\n                    ecb_limit_1 = ecb;\n                }\n                if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\n                    ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\n                } else {\n                    ecb_limit = ecb_limit_1;\n                }\n                thr[b] = Math.min(ecb, ecb_limit);\n            }\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_l[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb_l[b]) {\n                thr[b] = eb_l[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb_l[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_block_type(gfp, uselongblock) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\n                uselongblock[chn] = 1;\n            }\n            if (gfp.short_blocks == ShortBlock.short_block_forced) {\n                uselongblock[chn] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            var blocktype = Encoder.NORM_TYPE;\n            /* disable short blocks */\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype;\n            // save for next call to l3psy_anal\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\n        var msfix2 = msfix * 2;\n        var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\n        var rside, rmid;\n        for (var b = 0; b < n; ++b) {\n            var ebM = eb[2][b];\n            var ebS = eb[3][b];\n            var thmL = thr[0][b];\n            var thmR = thr[1][b];\n            var thmM = thr[2][b];\n            var thmS = thr[3][b];\n\n            /* use this fix if L & R masking differs by 2db or less */\n            if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\n                var mld_m = cb_mld[b] * ebS;\n                var mld_s = cb_mld[b] * ebM;\n                rmid = Math.max(thmM, Math.min(thmS, mld_m));\n                rside = Math.max(thmS, Math.min(thmM, mld_s));\n            } else {\n                rmid = thmM;\n                rside = thmS;\n            }\n            if (msfix > 0) {\n                /***************************************************************/\n                /* Adjust M/S maskings if user set \"msfix\" */\n                /***************************************************************/\n                /* Naoki Shibata 2000 */\n                var thmLR, thmMS;\n                var ath = ath_cb[b] * athlower;\n                thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\n                thmM = Math.max(rmid, ath);\n                thmS = Math.max(rside, ath);\n                thmMS = thmM + thmS;\n                if (thmMS > 0 && (thmLR * msfix2) < thmMS) {\n                    var f = thmLR * msfix2 / thmMS;\n                    thmM *= f;\n                    thmS *= f;\n                }\n                rmid = Math.min(thmM, rmid);\n                rside = Math.min(thmS, rside);\n            }\n            if (rmid > ebM) {\n                rmid = ebM;\n            }\n            if (rside > ebS) {\n                rside = ebS;\n            }\n            thr[2][b] = rmid;\n            thr[3][b] = rside;\n        }\n    }\n\n    this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_l;\n        var wsamp_s;\n        var fftenergy = new_float(Encoder.HBLKSIZE);\n        var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n        var eb = new_float_n([4, Encoder.CBANDS]), thr = new_float_n([4, Encoder.CBANDS]);\n        var sub_short_factor = new_float_n([4, 3]);\n        var pcfact = 0.6;\n\n        /* block type */\n        var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\n            [0, 0, 0, 0]];\n        var uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4\n            : gfc.channels_out;\n\n        vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio,\n            masking_MS_ratio, energy, sub_short_factor, ns_attacks,\n            uselongblock);\n\n        vbrpsy_compute_block_type(gfp, uselongblock);\n\n        /* LONG BLOCK CASE */\n        {\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                wsamp_l = wsamp_L;\n                vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out,\n                    fftenergy, wsamp_l, ch01);\n\n                vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn,\n                    fftenergy);\n\n                if (uselongblock[ch01] != 0) {\n                    vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn],\n                        chn);\n                } else {\n                    vbrpsy_skip_masking_l(gfc, chn);\n                }\n            }\n            if ((uselongblock[0] + uselongblock[1]) == 2) {\n                /* M/S channel */\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l,\n                        gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust,\n                        gfp.msfix, gfc.npart_l);\n                }\n            }\n            /* TODO: apply adaptive ATH masking here ?? */\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                if (uselongblock[ch01] != 0) {\n                    convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\n                }\n            }\n        }\n\n        /* SHORT BLOCKS CASE */\n        {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n\n                    if (uselongblock[ch01] != 0) {\n                        vbrpsy_skip_masking_s(gfc, chn, sblock);\n                    } else {\n                        /* compute masking thresholds for short blocks */\n                        wsamp_s = wsamp_S;\n                        vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock,\n                            fftenergy_s, wsamp_s, ch01);\n                        vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn],\n                            thr[chn], chn, sblock);\n                    }\n                }\n                if ((uselongblock[0] + uselongblock[1]) == 0) {\n                    /* M/S channel */\n                    if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                        vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s,\n                            gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust,\n                            gfp.msfix, gfc.npart_s);\n                    }\n                    /* L/R channel */\n                }\n                /* TODO: apply adaptive ATH masking here ?? */\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n                    if (0 == uselongblock[ch01]) {\n                        convert_partition2scalefac_s(gfc, eb[chn], thr[chn],\n                            chn, sblock);\n                    }\n                }\n            }\n\n            /**** short block pre-echo control ****/\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n\n                if (uselongblock[ch01] != 0) {\n                    continue;\n                }\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    var new_thmm = new_float(3);\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        var thmm = gfc.thm[chn].s[sb][sblock];\n                        thmm *= NS_PREECHO_ATT0;\n\n                        if (ns_attacks[chn][sblock] >= 2\n                            || ns_attacks[chn][sblock + 1] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT1 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if (ns_attacks[chn][sblock] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if ((sblock != 0 && ns_attacks[chn][sblock - 1] == 3)\n                            || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                            var idx = (sblock != 2) ? sblock + 1 : 0;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        }\n\n                        /* pulse like signal detection for fatboy.wav and so on */\n                        thmm *= sub_short_factor[chn][sblock];\n\n                        new_thmm[sblock] = thmm;\n                    }\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\n                    }\n                }\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ppe;\n            var ppePos;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE) {\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            } else {\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n            }\n\n            if (gfp.analysis) {\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n            }\n        }\n        return 0;\n    }\n\n    function s3_func_x(bark, hf_slope) {\n        var tempx = bark, tempy;\n\n        if (tempx >= 0) {\n            tempy = -tempx * 27;\n        } else {\n            tempy = tempx * hf_slope;\n        }\n        if (tempy <= -72.0) {\n            return 0;\n        }\n        return Math.exp(tempy * LN_TO_LOG10);\n    }\n\n    function norm_s3_func_x(hf_slope) {\n        var lim_a = 0, lim_b = 0;\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1)\n                ;\n            l = x;\n            h = 0;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    h = x;\n                } else {\n                    l = x;\n                }\n            }\n            lim_a = l;\n        }\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1)\n                ;\n            l = 0;\n            h = x;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    l = x;\n                } else {\n                    h = x;\n                }\n            }\n            lim_b = h;\n        }\n        {\n            var sum = 0;\n            var m = 1000;\n            var i;\n            for (i = 0; i <= m; ++i) {\n                var x = lim_a + i * (lim_b - lim_a) / m;\n                var y = s3_func_x(x, hf_slope);\n                sum += y;\n            }\n            {\n                var norm = (m + 1) / (sum * (lim_b - lim_a));\n                /* printf( \"norm = %lf\\n\",norm); */\n                return norm;\n            }\n        }\n    }\n\n    /**\n     *   The spreading function.  Values returned in units of energy\n     */\n    function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0)\n            tempx *= 3;\n        else\n            tempx *= 1.5;\n\n        if (tempx >= 0.5 && tempx <= 2.5) {\n            temp = tempx - 0.5;\n            x = 8.0 * (temp * temp - 2.0 * temp);\n        } else\n            x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5\n            * Math.sqrt(1.0 + tempx * tempx);\n\n        if (tempy <= -60.0)\n            return 0.0;\n\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10);\n\n        /**\n         * <PRE>\n         * Normalization.  The spreading function should be normalized so that:\n         * +inf\n         * /\n         * |  s3 [ bark ]  d(bark)   =  1\n         * /\n         * -inf\n         * </PRE>\n         */\n        tempx /= .6609193;\n        return tempx;\n    }\n\n    /**\n     * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\n     */\n    function freq2bark(freq) {\n        /* input: freq in hz output: barks */\n        if (freq < 0)\n            freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5\n            * Math.atan(freq * freq / (7.5 * 7.5));\n    }\n\n    function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0;\n        /* compute numlines, the number of spectral lines in each partition band */\n        /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n            var bark1;\n            var j2;\n            bark1 = freq2bark(sfreq * j);\n\n            b_frq[i] = sfreq * j;\n\n            for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\n            && j2 <= blksize / 2; j2++)\n                ;\n\n            numlines[i] = j2 - j;\n            ni = i + 1;\n\n            while (j < j2) {\n                partition[j++] = i;\n            }\n            if (j > blksize / 2) {\n                j = blksize / 2;\n                ++i;\n                break;\n            }\n        }\n        b_frq[i] = sfreq * j;\n\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n            var i1, i2, start, end;\n            var arg;\n            start = scalepos[sfb];\n            end = scalepos[sfb + 1];\n\n            i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n            if (i1 < 0)\n                i1 = 0;\n            i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n\n            if (i2 > blksize / 2)\n                i2 = blksize / 2;\n\n            bm[sfb] = (partition[i1] + partition[i2]) / 2;\n            bo[sfb] = partition[i2];\n            var f_tmp = sample_freq_frac * end;\n            /*\n             * calculate how much of this band belongs to current scalefactor\n             * band\n             */\n            bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\n                / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n            if (bo_w[sfb] < 0) {\n                bo_w[sfb] = 0;\n            } else {\n                if (bo_w[sfb] > 1) {\n                    bo_w[sfb] = 1;\n                }\n            }\n            /* setup stereo demasking thresholds */\n            /* formula reverse enginerred from plot in paper */\n            arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n            arg = ( Math.min(arg, 15.5) / 15.5);\n\n            mld[sfb] = Math.pow(10.0,\n                1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        }\n\n        /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n            var w = numlines[k];\n            var bark1, bark2;\n\n            bark1 = freq2bark(sfreq * (j));\n            bark2 = freq2bark(sfreq * (j + w - 1));\n            bval[k] = .5 * (bark1 + bark2);\n\n            bark1 = freq2bark(sfreq * (j - .5));\n            bark2 = freq2bark(sfreq * (j + w - .5));\n            bval_width[k] = bark2 - bark1;\n            j += w;\n        }\n\n        return ni;\n    }\n\n    function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\n        /*\n         * The s3 array is not linear in the bark scale.\n         *\n         * bval[x] should be used to get the bark value.\n         */\n        var j;\n        var numberOfNoneZero = 0;\n\n        /**\n         * <PRE>\n         * s[i][j], the value of the spreading function,\n         * centered at band j (masker), for band i (maskee)\n         *\n         * i.e.: sum over j to spread into signal barkval=i\n         * NOTE: i and j are used opposite as in the ISO docs\n         * </PRE>\n         */\n        if (use_old_s3) {\n            for (var i = 0; i < npart; i++) {\n                for (j = 0; j < npart; j++) {\n                    var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        } else {\n            for (j = 0; j < npart; j++) {\n                var hf_slope = 15 + Math.min(21 / bval[j], 12);\n                var s3_x_norm = norm_s3_func_x(hf_slope);\n                for (var i = 0; i < npart; i++) {\n                    var v = s3_x_norm\n                        * s3_func_x(bval[i] - bval[j], hf_slope)\n                        * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        }\n        for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][0] = j;\n\n            for (j = npart - 1; j > 0; j--) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][1] = j;\n            numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\n        }\n\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++)\n            for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\n                p[k++] = s3[i][j];\n\n        return p;\n    }\n\n    function stereo_demask(f) {\n        /* setup stereo demasking thresholds */\n        /* formula reverse enginerred from plot in paper */\n        var arg = freq2bark(f);\n        arg = (Math.min(arg, 15.5) / 15.5);\n\n        return Math.pow(10.0,\n            1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n    }\n\n    /**\n     * NOTE: the bitrate reduction from the inter-channel masking effect is low\n     * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\n     * does not use this feature. (Robert 071216)\n     */\n    this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13, bvl_b = 24;\n        var snr_l_a = 0, snr_l_b = 0;\n        var snr_s_a = -8.25, snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n\n        switch (gfp.experimentalZ) {\n            default:\n            case 0:\n                useOldS3 = true;\n                break;\n            case 1:\n                useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\n                    : true;\n                break;\n            case 2:\n                useOldS3 = false;\n                break;\n            case 3:\n                bvl_a = 8;\n                snr_l_a = -1.75;\n                snr_l_b = -0.0125;\n                snr_s_a = -8.25;\n                snr_s_b = -2.25;\n                break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\n        // the vbr header is long blocks\n\n        for (i = 0; i < 4; ++i) {\n            for (var j = 0; j < Encoder.CBANDS; ++j) {\n                gfc.nb_1[i][j] = 1e20;\n                gfc.nb_2[i][j] = 1e20;\n                gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                gfc.en[i].l[sb] = 1e20;\n                gfc.thm[i].l[sb] = 1e20;\n            }\n            for (var j = 0; j < 3; ++j) {\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    gfc.en[i].s[sb][j] = 1e20;\n                    gfc.thm[i].s[sb][j] = 1e20;\n                }\n                gfc.nsPsy.lastAttacks[i] = 0;\n            }\n            for (var j = 0; j < 9; j++)\n                gfc.nsPsy.last_en_subshort[i][j] = 10.;\n        }\n\n        /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\n\n        /*************************************************************************\n         * now compute the psychoacoustic model specific constants\n         ************************************************************************/\n        /* compute numlines, bo, bm, bval, bval_width, mld */\n\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\n            bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\n            Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\n            / (2.0 * 576), Encoder.SBMAX_l);\n        /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n            var snr = snr_l_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n            if (gfc.numlines_l[i] > 0) {\n                gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n            } else {\n                gfc.rnumlines_l[i] = 0;\n            }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\n            norm, useOldS3);\n\n        /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var x;\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n                var level;\n                /*\n                 * ATH below 100 Hz constant, not further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_l[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_l[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            /*\n             * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\n             * and lead-voice samples, but introduces some 3 kbps bit bloat too.\n             * TODO: Further refinement of the shape of this hack.\n             */\n            x = -20 + bval[i] * 20 / 10;\n            if (x > 6) {\n                x = 100;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8.;\n            gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\n        }\n\n        /************************************************************************\n         * do the same things for short blocks\n         ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\n            bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\n            Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\n            / (2.0 * 192), Encoder.SBMAX_s);\n\n        /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var x;\n            var snr = snr_s_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n                var level;\n                /* freq = Min(.1,freq); */\n                /*\n                 * ATH below 100 Hz constant, not\n                 * further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_s[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_s[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            x = (-7.0 + bval[i] * 7.0 / 12.0);\n            if (bval[i] > 12) {\n                x *= 1 + Math.log(1 + x) * 3.1;\n            }\n            if (bval[i] < 12) {\n                x *= 1 + Math.log(1 - x) * 2.3;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8;\n            gfc.minval_s[i] = Math.pow(10.0, x / 10)\n                * gfc.numlines_s[i];\n        }\n\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\n            norm, useOldS3);\n\n        init_mask_add_max_values();\n        fft.init_fft(gfc);\n\n        /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10\n            / (temporalmask_sustain_sec * sfreq / 192.0));\n\n        {\n            var msfix;\n            msfix = NS_MSFIX;\n            if ((gfp.exp_nspsytune & 2) != 0)\n                msfix = 1.0;\n            if (Math.abs(gfp.msfix) > 0.0)\n                msfix = gfp.msfix;\n            gfp.msfix = msfix;\n\n            /*\n             * spread only from npart_l bands. Normally, we use the spreading\n             * function to convolve from npart_l down to npart_l bands\n             */\n            for (var b = 0; b < gfc.npart_l; b++)\n                if (gfc.s3ind[b][1] > gfc.npart_l - 1)\n                    gfc.s3ind[b][1] = gfc.npart_l - 1;\n        }\n\n        /*\n         * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\n         * per second\n         */\n        var frame_duration = (576. * gfc.mode_gr / sfreq);\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01;\n        /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0;\n        /* on lead, allow adjust up to maximum */\n\n\n        if (gfp.ATHtype != -1) {\n            /* compute equal loudness weights (eql_w) */\n            var freq;\n            var freq_inc = gfp.out_samplerate\n                / (Encoder.BLKSIZE);\n            var eql_balance = 0.0;\n            freq = 0.0;\n            for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n                /* convert ATH dB to relative power (not dB) */\n                /* to determine eql_w */\n                freq += freq_inc;\n                gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n                eql_balance += gfc.ATH.eql_w[i];\n            }\n            eql_balance = 1.0 / eql_balance;\n            for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\n                gfc.ATH.eql_w[i] *= eql_balance;\n            }\n        }\n        {\n            for (var b = j = 0; b < gfc.npart_s; ++b) {\n                for (i = 0; i < gfc.numlines_s[b]; ++i) {\n                    ++j;\n                }\n            }\n            for (var b = j = 0; b < gfc.npart_l; ++b) {\n                for (i = 0; i < gfc.numlines_l[b]; ++i) {\n                    ++j;\n                }\n            }\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n            gfc.mld_cb_l[i] = stereo_demask(freq);\n            j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n            gfc.mld_cb_s[i] = stereo_demask(freq);\n            j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Those ATH formulas are returning their minimum value for input = -1\n     */\n    function ATHformula_GB(f, value) {\n        /**\n         * <PRE>\n         *  from Painter & Spanias\n         *           modified by Gabriel Bouvigne to better fit the reality\n         *           ath =    3.640 * pow(f,-0.8)\n         *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\n         *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\n         *           + 0.6* 0.001 * pow(f,4.0);\n         *\n         *\n         *           In the past LAME was using the Painter &Spanias formula.\n         *           But we had some recurrent problems with HF content.\n         *           We measured real ATH values, and found the older formula\n         *           to be inaccurate in the higher part. So we made this new\n         *           formula and this solved most of HF problematic test cases.\n         *           The tradeoff is that in VBR mode it increases a lot the\n         *           bitrate.\n         * </PRE>\n         */\n\n        /*\n         * This curve can be adjusted according to the VBR scale: it adjusts\n         * from something close to Painter & Spanias on V9 up to Bouvigne's\n         * formula for V0. This way the VBR bitrate is more balanced according\n         * to the -V value.\n         */\n\n        // the following Hack allows to ask for the lowest value\n        if (f < -.3)\n            f = 3410;\n\n        // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800\n            * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\n            * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\n            + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n    }\n\n    this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n            case 0:\n                ath = ATHformula_GB(f, 9);\n                break;\n            case 1:\n                // over sensitive, should probably be removed\n                ath = ATHformula_GB(f, -1);\n                break;\n            case 2:\n                ath = ATHformula_GB(f, 0);\n                break;\n            case 3:\n                // modification of GB formula by Roel\n                ath = ATHformula_GB(f, 1) + 6;\n                break;\n            case 4:\n                ath = ATHformula_GB(f, gfp.ATHcurve);\n                break;\n            default:\n                ath = ATHformula_GB(f, 0);\n                break;\n        }\n        return ath;\n    }\n\n}\n\n\n\nfunction Lame() {\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\n         * Rules:\n         *\n         * - if possible, sfb21 should NOT be used\n         */\n        var suggested_samplefreq = 44100;\n\n        if (input_samplefreq >= 48000)\n            suggested_samplefreq = 48000;\n        else if (input_samplefreq >= 44100)\n            suggested_samplefreq = 44100;\n        else if (input_samplefreq >= 32000)\n            suggested_samplefreq = 32000;\n        else if (input_samplefreq >= 24000)\n            suggested_samplefreq = 24000;\n        else if (input_samplefreq >= 22050)\n            suggested_samplefreq = 22050;\n        else if (input_samplefreq >= 16000)\n            suggested_samplefreq = 16000;\n        else if (input_samplefreq >= 12000)\n            suggested_samplefreq = 12000;\n        else if (input_samplefreq >= 11025)\n            suggested_samplefreq = 11025;\n        else if (input_samplefreq >= 8000)\n            suggested_samplefreq = 8000;\n\n        if (lowpassfreq == -1)\n            return suggested_samplefreq;\n\n        if (lowpassfreq <= 15960)\n            suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250)\n            suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220)\n            suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970)\n            suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230)\n            suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420)\n            suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510)\n            suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970)\n            suggested_samplefreq = 8000;\n\n        if (input_samplefreq < suggested_samplefreq) {\n            /*\n             * choose a valid MPEG sample frequency above the input sample\n             * frequency to avoid SFB21/12 bitrate bloat rh 061115\n             */\n            if (input_samplefreq > 44100) {\n                return 48000;\n            }\n            if (input_samplefreq > 32000) {\n                return 44100;\n            }\n            if (input_samplefreq > 24000) {\n                return 32000;\n            }\n            if (input_samplefreq > 22050) {\n                return 24000;\n            }\n            if (input_samplefreq > 16000) {\n                return 22050;\n            }\n            if (input_samplefreq > 12000) {\n                return 16000;\n            }\n            if (input_samplefreq > 11025) {\n                return 12000;\n            }\n            if (input_samplefreq > 8000) {\n                return 11025;\n            }\n            return 8000;\n        }\n        return suggested_samplefreq;\n    }\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n                gfc.highpass1 = 0;\n                gfc.highpass2 = 0;\n                System.err.println(\"Warning: highpass filter disabled.  \"\n                    + \"highpass frequency too small\\n\");\n            }\n        }\n\n        if (gfc.highpass2 > 0) {\n            var maxband = -1;\n            for (var band = 0; band <= 31; band++) {\n                var freq = band / 31.0;\n                /* this band and below will be zereod */\n                if (freq <= gfc.highpass1) {\n                    highpass_band = Math.max(highpass_band, band);\n                }\n                if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n                    maxband = Math.max(maxband, band);\n                }\n            }\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            gfc.highpass1 = highpass_band / 31.0;\n            if (maxband == -1) {\n                gfc.highpass2 = (highpass_band + .75) / 31.0;\n            } else {\n                gfc.highpass2 = (maxband + .75) / 31.0;\n            }\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                fc1 = filter_coef((gfc.highpass2 - freq)\n                    / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            /* no bitrate or compression ratio specified, use 11.025 */\n            if (BitStream.EQ(gfp.compression_ratio, 0))\n                gfp.compression_ratio = 11.025;\n            /*\n             * rate to compress a CD down to exactly 128000 bps\n             */\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n\n            if (gfp.out_samplerate == 0)\n                gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\n            /*\n             * round up with a margin of 3 %\n             */\n\n            /*\n             * choose a bitrate for the output samplerate which achieves\n             * specified compression ratio\n             */\n            gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\n\n            /* we need the version for the bitrate table look up */\n            gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n\n            if (!gfp.free_format) /*\n             * for non Free Format find the nearest allowed\n             * bitrate\n             */\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    var x = [19500, 19000, 18600, 18000, 17500, 16000,\n                        15600, 14900, 12500, 10000, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                    break;\n                }\n                default:\n                {\n                    var x = [19500, 19000, 18500, 18000, 17500, 16500,\n                        15500, 14500, 12500, 9500, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n                gfp.lowpassfreq = gfp.in_samplerate / 2;\n            }\n            gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\n                gfp.in_samplerate);\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n                gfp.internal_flags = null;\n                return -6;\n            }\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            if (gfc.hip != null) {\n                mpglib.hip_decode_exit(gfc.hip);\n            }\n            gfc.hip = mpglib.hip_decode_init();\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            gfc.highpass1 = 2. * gfp.highpassfreq;\n\n            if (gfp.highpasswidth >= 0)\n                gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\n            else\n            /* 0% above on default */\n                gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n\n            gfc.highpass1 /= gfp.out_samplerate;\n            gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n                if (gfc.lowpass1 < 0) /* has to be >= 0 */\n                    gfc.lowpass1 = 0;\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.lowpass1 = 0;\n            gfc.lowpass2 = 0;\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            gfp.internal_flags = null;\n            return -1;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    gfp.internal_flags = null;\n                    return -1;\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    gfc.iteration_loop = new ABRIterationLoop(qu);\n                }\n                break;\n            }\n        }\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            /* if the user didn't specify VBR_max_bitrate: */\n            gfc.VBR_min_bitrate = 1;\n            /*\n             * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n             */\n            gfc.VBR_max_bitrate = 14;\n            /*\n             * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n             */\n            if (gfp.out_samplerate < 16000)\n                gfc.VBR_max_bitrate = 8;\n            /* default: allow 64 kbps (MPEG-2.5) */\n            if (gfp.VBR_min_bitrate_kbps != 0) {\n                gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_min_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_min_bitrate < 0)\n                    return -1;\n            }\n            if (gfp.VBR_max_bitrate_kbps != 0) {\n                gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_max_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_max_bitrate < 0)\n                    return -1;\n            }\n            gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n            gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n            gfp.VBR_mean_bitrate_kbps = Math.min(\n                Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n            gfp.VBR_mean_bitrate_kbps = Math.max(\n                Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            gfc.PSY.mask_adjust += gfp.tune_value_a;\n            gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            /*\n             * delay due to resampling; needs to be fixed, if resampling code\n             * gets changed\n             */\n            samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            /* write a id3 tag to the bitstream */\n            id3.id3tag_write_v1(gfp);\n\n            imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n                mp3buffer_size_remaining, 0);\n\n            if (imp3 < 0) {\n                return imp3;\n            }\n            mp3count += imp3;\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\n                in_buffer[1][i] = 0.0;\n            }\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n\n    function NumUsed() {\n        this.num_used = 0;\n    }\n\n    /**\n     * Greatest common divisor.\n     * <p>\n     * Joint work of Euclid and M. Hendry\n     */\n    function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n    }\n\n    /**\n     * Resampling via FIR filter, blackman window.\n     */\n    function blackman(x, fcn, l) {\n        /*\n         * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n         * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n         */\n        var wcn = (Math.PI * fcn);\n\n        x /= l;\n        if (x < 0)\n            x = 0;\n        if (x > 1)\n            x = 1;\n        var x2 = x - .5;\n\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9)\n            return (wcn / Math.PI);\n        else\n            return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\n    }\n\n    function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i, j = 0, k;\n        /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate\n            / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC)\n            bpc = LameInternalFlags.BPC;\n\n        var intratio = (Math.abs(gfc.resample_ratio\n            - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00)\n            fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2)\n            --filter_l;\n        /* must be odd */\n        filter_l += intratio;\n        /* unless resample_ratio=int, it must be even */\n\n        var BLACKSIZE = filter_l + 1;\n        /* size of data needed for FIR */\n\n        if (gfc.fill_buffer_resample_init == 0) {\n            gfc.inbuf_old[0] = new_float(BLACKSIZE);\n            gfc.inbuf_old[1] = new_float(BLACKSIZE);\n            for (i = 0; i <= 2 * bpc; ++i)\n                gfc.blackfilt[i] = new_float(BLACKSIZE);\n\n            gfc.itime[0] = 0;\n            gfc.itime[1] = 0;\n\n            /* precompute blackman filter coefficients */\n            for (j = 0; j <= 2 * bpc; j++) {\n                var sum = 0.;\n                var offset = (j - bpc) / (2. * bpc);\n                for (i = 0; i <= filter_l; i++)\n                    sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\n                        filter_l);\n                for (i = 0; i <= filter_l; i++)\n                    gfc.blackfilt[j][i] /= sum;\n            }\n            gfc.fill_buffer_resample_init = 1;\n        }\n\n        var inbuf_old = gfc.inbuf_old[ch];\n\n        /* time of j'th element in inbuf = itime + j/ifreq; */\n        /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n            var time0;\n            var joff;\n\n            time0 = k * gfc.resample_ratio;\n            /* time of k'th output sample */\n            j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n            /* check if we need more input data */\n            if ((filter_l + j - filter_l / 2) >= len)\n                break;\n\n            /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n            /* but we want a window centered at time0. */\n            var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\n\n            /* find the closest precomputed window for this offset: */\n            joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\n            var xvalue = 0.;\n            for (i = 0; i <= filter_l; ++i) {\n                var j2 = i + j - filter_l / 2;\n                var y;\n                y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\n                + j2];\n                xvalue += y * gfc.blackfilt[joff][i];\n            }\n            outbuf[outbufPos + k] = xvalue;\n        }\n\n        /* k = number of samples added to outbuf */\n        /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n        /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n        /*\n         * adjust our input time counter. Incriment by the number of samples\n         * used, then normalize so that next output sample is at time 0, next\n         * input buffer is at time itime[ch]\n         */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n        /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n            for (i = 0; i < BLACKSIZE; i++)\n                inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\n                - BLACKSIZE];\n        } else {\n            /* shift in num_used.num_used samples into inbuf_old */\n            var n_shift = BLACKSIZE - num_used.num_used;\n            /*\n             * number of samples to\n             * shift\n             */\n\n            /*\n             * shift n_shift samples by num_used.num_used, to make room for the\n             * num_used new samples\n             */\n            for (i = 0; i < n_shift; ++i)\n                inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n            /* shift in the num_used.num_used samples */\n            for (j = 0; i < BLACKSIZE; ++i, ++j)\n                inbuf_old[i] = inbuf[in_bufferPos + j];\n\n        }\n        return k;\n        /* return the number samples created at the new samplerate */\n    }\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var numUsed = new NumUsed();\n                io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\n                    gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\n                    numUsed, ch);\n                io.n_in = numUsed.num_used;\n            }\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\n\n\nfunction GetAudio() {\n    var parse;\n    var mpg;\n\n    this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n    }\n}\n\n\nfunction Parse() {\n    var ver;\n    var id3;\n    var pre;\n\n    this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n    }\n}\n\nfunction MPGLib() {\n}\n\nfunction ID3Tag() {\n    var bits;\n    var ver;\n\n    this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n    }\n}\n\nfunction Mp3Encoder(channels, samplerate, kbps) {\n    if (arguments.length != 3) {\n        console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\n        channels = 1;\n        samplerate = 44100;\n        kbps = 128;\n    }\n    var lame = new Lame();\n    var gaud = new GetAudio();\n    var ga = new GainAnalysis();\n    var bs = new BitStream();\n    var p = new Presets();\n    var qupvt = new QuantizePVT();\n    var qu = new Quantize();\n    var vbr = new VBRTag();\n    var ver = new Version();\n    var id3 = new ID3Tag();\n    var rv = new Reservoir();\n    var tak = new Takehiro();\n    var parse = new Parse();\n    var mpg = new MPGLib();\n\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n    bs.setModules(ga, mpg, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n    gaud.setModules(parse, mpg);\n    parse.setModules(ver, id3, p);\n\n    var gfp = lame.lame_init();\n\n    gfp.num_channels = channels;\n    gfp.in_samplerate = samplerate;\n    gfp.out_samplerate = samplerate;//fix by xiangyuecn 2018-12-6 01:48:12 64kbps以下可能无声音，手动控制输出码率\n    gfp.brate = kbps;\n    gfp.mode = MPEGMode.STEREO;\n    gfp.quality = 3;\n    gfp.bWriteVbrTag = false;\n    gfp.disable_reservoir = true;\n    gfp.write_id3tag_automatic = false;\n\n    var retcode = lame.lame_init_params(gfp);\n    var maxSamples = 1152;\n    var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n    var mp3buf = new_byte(mp3buf_size);\n\n    this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n            right = left;\n        }\n        if (left.length > maxSamples) {\n            maxSamples = left.length;\n            mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n            mp3buf = new_byte(mp3buf_size);\n        }\n\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n\n    this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n}\n\n//fix 精简\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n//testFullLength();\nlamejs.Mp3Encoder = Mp3Encoder;\n}\n//fs=require('fs');\nlamejs();\n\n\nRecorder.lamejs=lamejs;\n\n//end3 ****结束copy lamejs*****\n})();","/*\nmp3编码器，需带上mp3-engine.js引擎使用\nhttps://github.com/xiangyuecn/Recorder\n\n当然最佳推荐使用mp3、wav格式，代码也是优先照顾这两种格式\n浏览器支持情况\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\n*/\n(function(){\n\"use strict\";\n\nRecorder.prototype.enc_mp3={\n\tstable:true\n\t,testmsg:\"采样率范围48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000\"\n};\n\n\n\n//*******标准UI线程转码支持函数************\n\nRecorder.prototype.mp3=function(res,True,False){\n\t\tvar This=this,set=This.set,size=res.length;\n\t\t\n\t\t//优先采用worker编码，太低版本下面用老方法提供兼容\n\t\tvar ctx=This.mp3_start(set);\n\t\tif(ctx){\n\t\t\tThis.mp3_encode(ctx,res);\n\t\t\tThis.mp3_complete(ctx,True,False,1);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//https://github.com/wangpengfei15975/recorder.js\n\t\t//https://github.com/zhuker/lamejs bug:采样率必须和源一致，不然8k时没有声音，有问题fix：https://github.com/zhuker/lamejs/pull/11\n\t\tvar mp3=new Recorder.lamejs.Mp3Encoder(1,set.sampleRate,set.bitRate);\n\t\t\n\t\tvar blockSize=57600;\n\t\tvar data=[];\n\t\t\n\t\tvar idx=0,mp3Size=0;\n\t\tvar run=function(){\n\t\t\tif(idx<size){\n\t\t\t\tvar buf=mp3.encodeBuffer(res.subarray(idx,idx+blockSize));\n\t\t\t\tif(buf.length>0){\n\t\t\t\t\tmp3Size+=buf.buffer.byteLength;\n\t\t\t\t\tdata.push(buf.buffer);\n\t\t\t\t};\n\t\t\t\tidx+=blockSize;\n\t\t\t\tsetTimeout(run);//尽量避免卡ui\n\t\t\t}else{\n\t\t\t\tvar buf=mp3.flush();\n\t\t\t\tif(buf.length>0){\n\t\t\t\t\tmp3Size+=buf.buffer.byteLength;\n\t\t\t\t\tdata.push(buf.buffer);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//去掉开头的标记信息帧\n\t\t\t\tvar meta=mp3TrimFix.fn(data,mp3Size,size,set.sampleRate);\n\t\t\t\tmp3TrimFixSetMeta(meta,set);\n\t\t\t\t\n\t\t\t\tTrue(new Blob(data,{type:\"audio/mp3\"}));\n\t\t\t};\n\t\t};\n\t\trun();\n\t}\n\n\n//********边录边转码(Worker)支持函数，如果提供就代表可能支持，否则只支持标准转码*********\n\n//全局共享一个Worker，后台串行执行。如果每次都开一个新的，编码速度可能会慢很多，可能是浏览器运行缓存的因素，并且可能瞬间产生多个并行操作占用大量cpu\nvar mp3Worker;\nRecorder.BindDestroy(\"mp3Worker\",function(){\n\tconsole.log(\"mp3Worker Destroy\");\n\tmp3Worker&&mp3Worker.terminate();\n\tmp3Worker=null;\n});\n\n\nRecorder.prototype.mp3_envCheck=function(envInfo,set){//检查环境下配置是否可用\n\tvar errMsg=\"\";\n\t//需要实时编码返回数据，此时需要检查环境是否有实时特性、和是否可实时编码\n\tif(set.takeoffEncodeChunk){\n\t\tif(!envInfo.canProcess){\n\t\t\terrMsg=envInfo.envName+\"环境不支持实时处理\";\n\t\t}else if(!newContext()){//浏览器不能创建实时编码环境\n\t\t\terrMsg=\"当前浏览器版本太低，无法实时处理\";\n\t\t};\n\t};\n\treturn errMsg;\n};\nRecorder.prototype.mp3_start=function(set){//如果返回null代表不支持\n\treturn newContext(set);\n};\nvar openList={id:0};\nvar newContext=function(setOrNull){\n\tvar worker=mp3Worker;\n\ttry{\n\t\tif(!worker){\n\t\t\tvar onmsg=function(e){\n\t\t\t\tvar ed=e.data;\n\t\t\t\tvar cur=wk_ctxs[ed.id];\n\t\t\t\tif(ed.action==\"init\"){\n\t\t\t\t\twk_ctxs[ed.id]={\n\t\t\t\t\t\tsampleRate:ed.sampleRate\n\t\t\t\t\t\t,bitRate:ed.bitRate\n\t\t\t\t\t\t,takeoff:ed.takeoff\n\t\t\t\t\t\t\n\t\t\t\t\t\t,mp3Size:0\n\t\t\t\t\t\t,pcmSize:0\n\t\t\t\t\t\t,encArr:[]\n\t\t\t\t\t\t,encObj:new wk_lame.Mp3Encoder(1,ed.sampleRate,ed.bitRate)\n\t\t\t\t\t};\n\t\t\t\t}else if(!cur){\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tswitch(ed.action){\n\t\t\t\tcase \"stop\":\n\t\t\t\t\tcur.encObj=null;\n\t\t\t\t\tdelete wk_ctxs[ed.id];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"encode\":\n\t\t\t\t\tcur.pcmSize+=ed.pcm.length;\n\t\t\t\t\tvar buf=cur.encObj.encodeBuffer(ed.pcm);\n\t\t\t\t\tif(buf.length>0){\n\t\t\t\t\t\tif(cur.takeoff){\n\t\t\t\t\t\t\tself.postMessage({action:\"takeoff\",id:ed.id,chunk:buf});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcur.mp3Size+=buf.buffer.byteLength;\n\t\t\t\t\t\t\tcur.encArr.push(buf.buffer);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"complete\":\n\t\t\t\t\tvar buf=cur.encObj.flush();\n\t\t\t\t\tif(buf.length>0){\n\t\t\t\t\t\tif(cur.takeoff){\n\t\t\t\t\t\t\tself.postMessage({action:\"takeoff\",id:ed.id,chunk:buf});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcur.mp3Size+=buf.buffer.byteLength;\n\t\t\t\t\t\t\tcur.encArr.push(buf.buffer);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t//去掉开头的标记信息帧\n\t\t\t\t\tvar meta=wk_mp3TrimFix.fn(cur.encArr,cur.mp3Size,cur.pcmSize,cur.sampleRate);\n\t\t\t\t\t\n\t\t\t\t\tself.postMessage({\n\t\t\t\t\t\taction:ed.action\n\t\t\t\t\t\t,id:ed.id\n\t\t\t\t\t\t,blob:new Blob(cur.encArr,{type:\"audio/mp3\"})\n\t\t\t\t\t\t,meta:meta\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//创建一个新Worker\n\t\t\tvar jsCode=\");wk_lame();var wk_ctxs={};self.onmessage=\"+onmsg;\n\t\t\tjsCode+=\";var wk_mp3TrimFix={rm:\"+mp3TrimFix.rm+\",fn:\"+mp3TrimFix.fn+\"}\";\n\t\t\t\n\t\t\tvar lamejsCode=Recorder.lamejs.toString();\n\t\t\tvar url=(window.URL||webkitURL).createObjectURL(new Blob([\"var wk_lame=(\",lamejsCode,jsCode], {type:\"text/javascript\"}));\n\t\t\t\n\t\t\tworker=new Worker(url);\n\t\t\tsetTimeout(function(){\n\t\t\t\t(window.URL||webkitURL).revokeObjectURL(url);//必须要释放，不然每次调用内存都明显泄露内存\n\t\t\t},10000);//chrome 83 file协议下如果直接释放，将会使WebWorker无法启动\n\t\t\t\n\t\t\tworker.onmessage=function(e){\n\t\t\t\tvar data=e.data;\n\t\t\t\tvar ctx=openList[data.id];\n\t\t\t\tif(ctx){\n\t\t\t\t\tif(data.action==\"takeoff\"){\n\t\t\t\t\t\t//取走实时生成的mp3数据\n\t\t\t\t\t\tctx.set.takeoffEncodeChunk(new Uint8Array(data.chunk.buffer));\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//complete\n\t\t\t\t\t\tctx.call&&ctx.call(data);\n\t\t\t\t\t\tctx.call=null;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tvar ctx={worker:worker,set:setOrNull,takeoffQueue:[]};\n\t\tif(setOrNull){\n\t\t\tctx.id=++openList.id;\n\t\t\topenList[ctx.id]=ctx;\n\t\t\t\n\t\t\tworker.postMessage({\n\t\t\t\taction:\"init\"\n\t\t\t\t,id:ctx.id\n\t\t\t\t,sampleRate:setOrNull.sampleRate\n\t\t\t\t,bitRate:setOrNull.bitRate\n\t\t\t\t,takeoff:!!setOrNull.takeoffEncodeChunk\n\t\t\t\t\n\t\t\t\t,x:new Int16Array(5)//低版本浏览器不支持序列化TypedArray\n\t\t\t});\n\t\t}else{\n\t\t\tworker.postMessage({\n\t\t\t\tx:new Int16Array(5)//低版本浏览器不支持序列化TypedArray\n\t\t\t});\n\t\t};\n\t\t\n\t\t\n\t\tmp3Worker=worker;\n\t\treturn ctx;\n\t}catch(e){//出错了就不要提供了\n\t\tworker&&worker.terminate();\n\t\t\n\t\tconsole.error(e);\n\t\treturn null;\n\t};\n};\nRecorder.prototype.mp3_stop=function(startCtx){\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"stop\"\n\t\t\t,id:startCtx.id\n\t\t});\n\t\tstartCtx.worker=null;\n\t\tdelete openList[startCtx.id];\n\t\t\n\t\t//疑似泄露检测 排除id\n\t\tvar opens=-1;\n\t\tfor(var k in openList){\n\t\t\topens++;\n\t\t};\n\t\tif(opens){\n\t\t\tconsole.warn(\"mp3 worker剩\"+opens+\"个在串行等待\");\n\t\t};\n\t};\n};\nRecorder.prototype.mp3_encode=function(startCtx,pcm){\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"encode\"\n\t\t\t,id:startCtx.id\n\t\t\t,pcm:pcm\n\t\t});\n\t};\n};\nRecorder.prototype.mp3_complete=function(startCtx,True,False,autoStop){\n\tvar This=this;\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.call=function(data){\n\t\t\tmp3TrimFixSetMeta(data.meta,startCtx.set);\n\t\t\tTrue(data.blob);\n\t\t\t\n\t\t\tif(autoStop){\n\t\t\t\tThis.mp3_stop(startCtx);\n\t\t\t};\n\t\t};\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"complete\"\n\t\t\t,id:startCtx.id\n\t\t});\n\t}else{\n\t\tFalse(\"mp3编码器未打开\");\n\t};\n};\n\n\n\n\n\n\n\n//*******辅助函数************\n\n/*读取lamejs编码出来的mp3信息，只能读特定格式，如果读取失败返回null\nmp3Buffers=[ArrayBuffer,...]\nlength=mp3Buffers的数据二进制总长度\n*/\nRecorder.mp3ReadMeta=function(mp3Buffers,length){\n\t//kill babel-polyfill ES6 Number.parseInt 不然放到Worker里面找不到方法\n\tvar parseInt_ES3=typeof(window)==\"object\"?window.parseInt:self.parseInt;\n\t\n\tvar u8arr0=new Uint8Array(mp3Buffers[0]||[]);\n\tif(u8arr0.length<4){\n\t\treturn null;\n\t};\n\tvar byteAt=function(idx,u8){\n\t\treturn (\"0000000\"+((u8||u8arr0)[idx]||0).toString(2)).substr(-8);\n\t};\n\tvar b2=byteAt(0)+byteAt(1);\n\tvar b4=byteAt(2)+byteAt(3);\n\t\n\tif(!/^1{11}/.test(b2)){//未发现帧同步\n\t\treturn null;\n\t};\n\tvar version=({\"00\":2.5,\"10\":2,\"11\":1})[b2.substr(11,2)];\n\tvar layer=({\"01\":3})[b2.substr(13,2)];//仅支持Layer3\n\tvar sampleRate=({ //lamejs -> Tables.samplerate_table\n\t\t\"1\":[44100, 48000, 32000]\n\t\t,\"2\":[22050, 24000, 16000]\n\t\t,\"2.5\":[11025, 12000, 8000]\n\t})[version];\n\tsampleRate&&(sampleRate=sampleRate[parseInt_ES3(b4.substr(4,2),2)]);\n\tvar bitRate=[ //lamejs -> Tables.bitrate_table\n\t\t[0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160] //MPEG 2 2.5\n\t\t,[0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320]//MPEG 1\n\t][version==1?1:0][parseInt_ES3(b4.substr(0,4),2)];\n\t\n\tif(!version || !layer || !bitRate || !sampleRate){\n\t\treturn null;\n\t};\n\t\n\tvar duration=Math.round(length*8/bitRate);\n\tvar frame=layer==1?384:layer==2?1152:version==1?1152:576;\n\tvar frameDurationFloat=frame/sampleRate*1000;\n\tvar frameSize=Math.floor((frame*bitRate)/8/sampleRate*1000);\n\t\n\t//检测是否存在Layer3帧填充1字节。这里只获取第二帧的填充信息，首帧永远没有填充。其他帧可能隔一帧出现一个填充，或者隔很多帧出现一个填充；目测是取决于frameSize未舍入时的小数部分，因为有些采样率的frameSize会出现小数（11025、22050、44100 典型的除不尽），然后字节数无法表示这种小数，就通过一定步长来填充弥补小数部分丢失\n\tvar hasPadding=0,seek=0;\n\tfor(var i=0;i<mp3Buffers.length;i++){\n\t\t//寻找第二帧\n\t\tvar buf=mp3Buffers[i];\n\t\tseek+=buf.byteLength;\n\t\tif(seek>=frameSize+3){\n\t\t\tvar buf8=new Uint8Array(buf);\n\t\t\tvar idx=buf.byteLength-(seek-(frameSize+3)+1);\n\t\t\tvar ib4=byteAt(idx,buf8);\n\t\t\thasPadding=ib4.charAt(6)==\"1\";\n\t\t\tbreak;\n\t\t};\n\t};\n\tif(hasPadding){\n\t\tframeSize++;\n\t};\n\t\n\t\n\treturn {\n\t\tversion:version //1 2 2.5 -> MPEG1 MPEG2 MPEG2.5\n\t\t,layer:layer//3 -> Layer3\n\t\t,sampleRate:sampleRate //采样率 hz\n\t\t,bitRate:bitRate //比特率 kbps\n\t\t\n\t\t,duration:duration //音频时长 ms\n\t\t,size:length //总长度 byte\n\t\t,hasPadding:hasPadding //是否存在1字节填充，首帧永远没有，这个值其实代表的第二帧是否有填充，并不代表其他帧的\n\t\t,frameSize:frameSize //每帧最大长度，含可能存在的1字节padding byte\n\t\t,frameDurationFloat:frameDurationFloat //每帧时长，含小数 ms\n\t};\n};\n\n//去掉lamejs开头的标记信息帧，免得mp3解码出来的时长比pcm的长太多\nvar mp3TrimFix={//minfiy keep name\nrm:Recorder.mp3ReadMeta\n,fn:function(mp3Buffers,length,pcmLength,pcmSampleRate){\n\tvar meta=this.rm(mp3Buffers,length);\n\tif(!meta){\n\t\treturn {err:\"mp3非预定格式\"};\n\t};\n\tvar pcmDuration=Math.round(pcmLength/pcmSampleRate*1000);\n\t\n\t//开头多出这么多帧，移除掉；正常情况下最多为2帧\n\tvar num=Math.floor((meta.duration-pcmDuration)/meta.frameDurationFloat);\n\tif(num>0){\n\t\tvar size=num*meta.frameSize-(meta.hasPadding?1:0);//首帧没有填充，第二帧可能有填充，这里假设最多为2帧（测试并未出现3帧以上情况），其他帧不管，就算出现了并且导致了错误后面自动容错\n\t\tlength-=size;\n\t\tvar arr0=0,arrs=[];\n\t\tfor(var i=0;i<mp3Buffers.length;i++){\n\t\t\tvar arr=mp3Buffers[i];\n\t\t\tif(size<=0){\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tif(size>=arr.byteLength){\n\t\t\t\tsize-=arr.byteLength;\n\t\t\t\tarrs.push(arr);\n\t\t\t\tmp3Buffers.splice(i,1);\n\t\t\t\ti--;\n\t\t\t}else{\n\t\t\t\tmp3Buffers[i]=arr.slice(size);\n\t\t\t\tarr0=arr;\n\t\t\t\tsize=0;\n\t\t\t};\n\t\t};\n\t\tvar checkMeta=this.rm(mp3Buffers,length);\n\t\tif(!checkMeta){\n\t\t\t//还原变更，应该不太可能会出现\n\t\t\tarr0&&(mp3Buffers[0]=arr0);\n\t\t\tfor(var i=0;i<arrs.length;i++){\n\t\t\t\tmp3Buffers.splice(i,0,arrs[i]);\n\t\t\t};\n\t\t\tmeta.err=\"fix后数据错误，已还原，错误原因不明\";\n\t\t};\n\t\t\n\t\tvar fix=meta.trimFix={};\n\t\tfix.remove=num;\n\t\tfix.removeDuration=Math.round(num*meta.frameDurationFloat);\n\t\tfix.duration=Math.round(length*8/meta.bitRate);\n\t};\n\treturn meta;\n}\n};\nvar mp3TrimFixSetMeta=function(meta,set){\n\tvar tag=\"MP3信息 \";\n\tif(meta.sampleRate&&meta.sampleRate!=set.sampleRate || meta.bitRate&&meta.bitRate!=set.bitRate){\n\t\tconsole.warn(tag+\"和设置的不匹配set:\"+set.bitRate+\"kbps \"+set.sampleRate+\"hz，已更新set:\"+meta.bitRate+\"kbps \"+meta.sampleRate+\"hz\",set);\n\t\tset.sampleRate=meta.sampleRate;\n\t\tset.bitRate=meta.bitRate;\n\t};\n\t\n\tvar trimFix=meta.trimFix;\n\tif(trimFix){\n\t\ttag+=\"Fix移除\"+trimFix.remove+\"帧\"+trimFix.removeDuration+\"ms -> \"+trimFix.duration+\"ms\";\n\t\tif(trimFix.remove>2){\n\t\t\tmeta.err=(meta.err?meta.err+\", \":\"\")+\"移除帧数过多\";\n\t\t};\n\t}else{\n\t\ttag+=(meta.duration||\"-\")+\"ms\";\n\t};\n\t\n\tif(meta.err){\n\t\tconsole.error(tag,meta.err,meta);\n\t}else{\n\t\tconsole.log(tag,meta);\n\t};\n};\n\n\n\t\n})();","/*\n录音\nhttps://github.com/xiangyuecn/Recorder\n*/\n(function(factory){\n\tfactory(window);\n\t//umd returnExports.js\n\tif(typeof(define)=='function' && define.amd){\n\t\tdefine(function(){\n\t\t\treturn Recorder;\n\t\t});\n\t};\n\tif(typeof(module)=='object' && module.exports){\n\t\tmodule.exports=Recorder;\n\t};\n}(function(window){\n\"use strict\";\n\n//兼容环境\nvar LM=\"2020-11-15 21:36:11\";\nvar NOOP=function(){};\n//end 兼容环境 ****从以下开始copy源码*****\n\nvar Recorder=function(set){\n\treturn new initFn(set);\n};\n//是否已经打开了录音，所有工作都已经准备好了，就等接收音频数据了\nRecorder.IsOpen=function(){\n\tvar stream=Recorder.Stream;\n\tif(stream){\n\t\tvar tracks=stream.getTracks&&stream.getTracks()||stream.audioTracks||[];\n\t\tvar track=tracks[0];\n\t\tif(track){\n\t\t\tvar state=track.readyState;\n\t\t\treturn state==\"live\"||state==track.LIVE;\n\t\t};\n\t};\n\treturn false;\n};\n/*H5录音时的AudioContext缓冲大小。会影响H5录音时的onProcess调用速率，相对于AudioContext.sampleRate=48000时，4096接近12帧/s，调节此参数可生成比较流畅的回调动画。\n\t取值256, 512, 1024, 2048, 4096, 8192, or 16384\n\t注意，取值不能过低，2048开始不同浏览器可能回调速率跟不上造成音质问题。\n\t一般无需调整，调整后需要先close掉已打开的录音，再open时才会生效。\n*/\nRecorder.BufferSize=4096;\n//销毁已持有的所有全局资源，当要彻底移除Recorder时需要显式的调用此方法\nRecorder.Destroy=function(){\n\tCLog(\"Recorder Destroy\");\n\tfor(var k in DestroyList){\n\t\tDestroyList[k]();\n\t};\n};\nvar DestroyList={};\n//登记一个需要销毁全局资源的处理方法\nRecorder.BindDestroy=function(key,call){\n\tDestroyList[key]=call;\n};\n//判断浏览器是否支持录音，随时可以调用。注意：仅仅是检测浏览器支持情况，不会判断和调起用户授权，不会判断是否支持特定格式录音。\nRecorder.Support=function(){\n\tvar AC=window.AudioContext;\n\tif(!AC){\n\t\tAC=window.webkitAudioContext;\n\t};\n\tif(!AC){\n\t\treturn false;\n\t};\n\tvar scope=navigator.mediaDevices||{};\n\tif(!scope.getUserMedia){\n\t\tscope=navigator;\n\t\tscope.getUserMedia||(scope.getUserMedia=scope.webkitGetUserMedia||scope.mozGetUserMedia||scope.msGetUserMedia);\n\t};\n\tif(!scope.getUserMedia){\n\t\treturn false;\n\t};\n\t\n\tRecorder.Scope=scope;\n\tif(!Recorder.Ctx||Recorder.Ctx.state==\"closed\"){\n\t\t//不能反复构造，低版本number of hardware contexts reached maximum (6)\n\t\tRecorder.Ctx=new AC();\n\t\t\n\t\tRecorder.BindDestroy(\"Ctx\",function(){\n\t\t\tvar ctx=Recorder.Ctx;\n\t\t\tctx&&ctx.close&&ctx.close();\n\t\t});\n\t};\n\treturn true;\n};\n/*初始化H5音频采集连接，因为Stream是全局的，Safari上断开后就无法再次进行连接使用，表现为静音，因此使用全部使用全局处理避免调用到disconnect；全局处理也有利于屏蔽底层细节，start时无需再调用底层接口，提升兼容、可靠性。*/\nvar Connect=function(){\n\tvar ctx=Recorder.Ctx,stream=Recorder.Stream;\n\tvar media=stream._m=ctx.createMediaStreamSource(stream);\n\tvar process=stream._p=(ctx.createScriptProcessor||ctx.createJavaScriptNode).call(ctx,Recorder.BufferSize,1,1);//单声道，省的数据处理复杂\n\t\n\tmedia.connect(process);\n\tprocess.connect(ctx.destination);\n\t\n\tvar calls=stream._call;\n\tprocess.onaudioprocess=function(e){\n\t\tfor(var k0 in calls){//has item\n\t\t\tvar o=e.inputBuffer.getChannelData(0);//块是共享的，必须复制出来\n\t\t\tvar size=o.length;\n\t\t\t\n\t\t\tvar pcm=new Int16Array(size);\n\t\t\tvar sum=0;\n\t\t\tfor(var j=0;j<size;j++){//floatTo16BitPCM \n\t\t\t\tvar s=Math.max(-1,Math.min(1,o[j]));\n\t\t\t\ts=s<0?s*0x8000:s*0x7FFF;\n\t\t\t\tpcm[j]=s;\n\t\t\t\tsum+=Math.abs(s);\n\t\t\t};\n\t\t\t\n\t\t\tfor(var k in calls){\n\t\t\t\tcalls[k](pcm,sum);\n\t\t\t};\n\t\t\t\n\t\t\treturn;\n\t\t};\n\t};\n};\nvar Disconnect=function(){\n\tvar stream=Recorder.Stream;\n\tif(stream._m){\n\t\tstream._m.disconnect();\n\t\tstream._p.disconnect();\n\t\tstream._p.onaudioprocess=stream._p=stream._m=null;\n\t};\n};\n\n/*对pcm数据的采样率进行转换\npcmDatas: [[Int16,...]] pcm片段列表\npcmSampleRate:48000 pcm数据的采样率\nnewSampleRate:16000 需要转换成的采样率，newSampleRate>=pcmSampleRate时不会进行任何处理，小于时会进行重新采样\nprevChunkInfo:{} 可选，上次调用时的返回值，用于连续转换，本次调用将从上次结束位置开始进行处理。或可自行定义一个ChunkInfo从pcmDatas指定的位置开始进行转换\noption:{ 可选，配置项\n\t\tframeSize:123456 帧大小，每帧的PCM Int16的数量，采样率转换后的pcm长度为frameSize的整数倍，用于连续转换。目前仅在mp3格式时才有用，frameSize取值为1152，这样编码出来的mp3时长和pcm的时长完全一致，否则会因为mp3最后一帧录音不够填满时添加填充数据导致mp3的时长变长。\n\t\tframeType:\"\" 帧类型，一般为rec.set.type，提供此参数时无需提供frameSize，会自动使用最佳的值给frameSize赋值，目前仅支持mp3=1152(MPEG1 Layer3的每帧采采样数)，其他类型=1。\n\t\t\t以上两个参数用于连续转换时使用，最多使用一个，不提供时不进行帧的特殊处理，提供时必须同时提供prevChunkInfo才有作用。最后一段数据处理时无需提供帧大小以便输出最后一丁点残留数据。\n\t}\n\n返回ChunkInfo:{\n\t//可定义，从指定位置开始转换到结尾\n\tindex:0 pcmDatas已处理到的索引\n\toffset:0.0 已处理到的index对应的pcm中的偏移的下一个位置\n\t\n\t//仅作为返回值\n\tframeNext:null||[Int16,...] 下一帧的部分数据，frameSize设置了的时候才可能会有\n\tsampleRate:16000 结果的采样率，<=newSampleRate\n\tdata:[Int16,...] 转换后的PCM结果；如果是连续转换，并且pcmDatas中并没有新数据时，data的长度可能为0\n}\n*/\nRecorder.SampleData=function(pcmDatas,pcmSampleRate,newSampleRate,prevChunkInfo,option){\n\tprevChunkInfo||(prevChunkInfo={});\n\tvar index=prevChunkInfo.index||0;\n\tvar offset=prevChunkInfo.offset||0;\n\t\n\tvar frameNext=prevChunkInfo.frameNext||[];\n\toption||(option={});\n\tvar frameSize=option.frameSize||1;\n\tif(option.frameType){\n\t\tframeSize=option.frameType==\"mp3\"?1152:1;\n\t};\n\t\n\tvar size=0;\n\tfor(var i=index;i<pcmDatas.length;i++){\n\t\tsize+=pcmDatas[i].length;\n\t};\n\tsize=Math.max(0,size-Math.floor(offset));\n\t\n\t//采样 https://www.cnblogs.com/blqw/p/3782420.html\n\tvar step=pcmSampleRate/newSampleRate;\n\tif(step>1){//新采样低于录音采样，进行抽样\n\t\tsize=Math.floor(size/step);\n\t}else{//新采样高于录音采样不处理，省去了插值处理\n\t\tstep=1;\n\t\tnewSampleRate=pcmSampleRate;\n\t};\n\t\n\tsize+=frameNext.length;\n\tvar res=new Int16Array(size);\n\tvar idx=0;\n\t//添加上一次不够一帧的剩余数据\n\tfor(var i=0;i<frameNext.length;i++){\n\t\tres[idx]=frameNext[i];\n\t\tidx++;\n\t};\n\t//处理数据\n\tfor (var nl=pcmDatas.length;index<nl;index++) {\n\t\tvar o=pcmDatas[index];\n\t\tvar i=offset,il=o.length;\n\t\twhile(i<il){\n\t\t\t//res[idx]=o[Math.round(i)]; 直接简单抽样\n\t\t\t\n\t\t\t//https://www.cnblogs.com/xiaoqi/p/6993912.html\n\t\t\t//当前点=当前点+到后面一个点之间的增量，音质比直接简单抽样好些\n\t\t\tvar before = Math.floor(i);\n\t\t\tvar after = Math.ceil(i);\n\t\t\tvar atPoint = i - before;\n\t\t\t\n\t\t\tvar beforeVal=o[before];\n\t\t\tvar afterVal=after<il ? o[after]\n\t\t\t\t: (//后个点越界了，查找下一个数组\n\t\t\t\t\t(pcmDatas[index+1]||[beforeVal])[0]||0\n\t\t\t\t);\n\t\t\tres[idx]=beforeVal+(afterVal-beforeVal)*atPoint;\n\t\t\t\n\t\t\tidx++;\n\t\t\ti+=step;//抽样\n\t\t};\n\t\toffset=i-il;\n\t};\n\t//帧处理\n\tframeNext=null;\n\tvar frameNextSize=res.length%frameSize;\n\tif(frameNextSize>0){\n\t\tvar u8Pos=(res.length-frameNextSize)*2;\n\t\tframeNext=new Int16Array(res.buffer.slice(u8Pos));\n\t\tres=new Int16Array(res.buffer.slice(0,u8Pos));\n\t};\n\t\n\treturn {\n\t\tindex:index\n\t\t,offset:offset\n\t\t\n\t\t,frameNext:frameNext\n\t\t,sampleRate:newSampleRate\n\t\t,data:res\n\t};\n};\n\n\n/*计算音量百分比的一个方法\npcmAbsSum: pcm Int16所有采样的绝对值的和\npcmLength: pcm长度\n返回值：0-100，主要当做百分比用\n注意：这个不是分贝，因此没用volume当做名称*/\nRecorder.PowerLevel=function(pcmAbsSum,pcmLength){\n\t/*计算音量 https://blog.csdn.net/jody1989/article/details/73480259\n\t更高灵敏度算法:\n\t\t限定最大感应值10000\n\t\t\t线性曲线：低音量不友好\n\t\t\t\tpower/10000*100 \n\t\t\t对数曲线：低音量友好，但需限定最低感应值\n\t\t\t\t(1+Math.log10(power/10000))*100\n\t*/\n\tvar power=(pcmAbsSum/pcmLength) || 0;//NaN\n\tvar level;\n\tif(power<1251){//1250的结果10%，更小的音量采用线性取值\n\t\tlevel=Math.round(power/1250*10);\n\t}else{\n\t\tlevel=Math.round(Math.min(100,Math.max(0,(1+Math.log(power/10000)/Math.log(10))*100)));\n\t};\n\treturn level;\n};\n\n\n\n\n//带时间的日志输出，CLog(msg,errOrLogMsg, logMsg...) err为数字时代表日志类型1:error 2:log默认 3:warn，否则当做内容输出，第一个参数不能是对象因为要拼接时间，后面可以接无数个输出参数\nvar CLog=function(msg,err){\n\tvar now=new Date();\n\tvar t=(\"0\"+now.getMinutes()).substr(-2)\n\t\t+\":\"+(\"0\"+now.getSeconds()).substr(-2)\n\t\t+\".\"+(\"00\"+now.getMilliseconds()).substr(-3);\n\tvar arr=[\"[\"+t+\" Recorder]\"+msg];\n\tvar a=arguments;\n\tvar i=2,fn=console.log;\n\tif(typeof(err)==\"number\"){\n\t\tfn=err==1?console.error:err==3?console.warn:fn;\n\t}else{\n\t\ti=1;\n\t};\n\tfor(;i<a.length;i++){\n\t\tarr.push(a[i]);\n\t};\n\tfn.apply(console,arr);\n};\nRecorder.CLog=CLog;\n\n\n\n\nvar ID=0;\nfunction initFn(set){\n\tthis.id=++ID;\n\t\n\t//如果开启了流量统计，这里将发送一个图片请求\n\tRecorder.Traffic&&Recorder.Traffic();\n\t\n\t\n\tvar o={\n\t\ttype:\"mp3\" //输出类型：mp3,wav，wav输出文件尺寸超大不推荐使用，但mp3编码支持会导致js文件超大，如果不需支持mp3可以使js文件大幅减小\n\t\t,bitRate:16 //比特率 wav:16或8位，MP3：8kbps 1k/s，8kbps 2k/s 录音文件很小\n\t\t\n\t\t,sampleRate:16000 //采样率，wav格式大小=sampleRate*时间；mp3此项对低比特率有影响，高比特率几乎无影响。\n\t\t\t\t\t//wav任意值，mp3取值范围：48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000\n\t\t\t\t\t//采样率参考https://www.cnblogs.com/devin87/p/mp3-recorder.html\n\t\t\n\t\t,onProcess:NOOP //fn(buffers,powerLevel,bufferDuration,bufferSampleRate,newBufferIdx,asyncEnd) buffers=[[Int16,...],...]：缓冲的PCM数据，为从开始录音到现在的所有pcm片段；powerLevel：当前缓冲的音量级别0-100，bufferDuration：已缓冲时长，bufferSampleRate：缓冲使用的采样率（当type支持边录边转码(Worker)时，此采样率和设置的采样率相同，否则不一定相同）；newBufferIdx:本次回调新增的buffer起始索引；asyncEnd:fn() 如果onProcess是异步的(返回值为true时)，处理完成时需要调用此回调，如果不是异步的请忽略此参数，此方法回调时必须是真异步（不能真异步时需用setTimeout包裹）。onProcess返回值：如果返回true代表开启异步模式，在某些大量运算的场合异步是必须的，必须在异步处理完成时调用asyncEnd(不能真异步时需用setTimeout包裹)，在onProcess执行后新增的buffer会全部替换成空数组，因此本回调开头应立即将newBufferIdx到本次回调结尾位置的buffer全部保存到另外一个数组内，处理完成后写回buffers中本次回调的结尾位置。\n\t\t\n\t\t//*******高级设置******\n\t\t//,disableEnvInFix:false 内部参数，禁用设备卡顿时音频输入丢失补偿功能\n\t\t\n\t\t//,takeoffEncodeChunk:NOOP //fn(chunkBytes) chunkBytes=[Uint8,...]：实时编码环境下接管编码器输出，当编码器实时编码出一块有效的二进制音频数据时实时回调此方法；参数为二进制的Uint8Array，就是编码出来的音频数据片段，所有的chunkBytes拼接在一起即为完整音频。本实现的想法最初由QQ2543775048提出\n\t\t\t\t//当提供此回调方法时，将接管编码器的数据输出，编码器内部将放弃存储生成的音频数据；环境要求比较苛刻：如果当前环境不支持实时编码处理，将在open时直接走fail逻辑\n\t\t\t\t//因此提供此回调后调用stop方法将无法获得有效的音频数据，因为编码器内没有音频数据，因此stop时返回的blob将是一个字节长度为0的blob\n\t\t\t\t//目前只有mp3格式实现了实时编码，在支持实时处理的环境中将会实时的将编码出来的mp3片段通过此方法回调，所有的chunkBytes拼接到一起即为完整的mp3，此种拼接的结果比mock方法实时生成的音质更加，因为天然避免了首尾的静默\n\t\t\t\t//目前除mp3外其他格式不可以提供此回调，提供了将在open时直接走fail逻辑\n\t};\n\t\n\tfor(var k in set){\n\t\to[k]=set[k];\n\t};\n\tthis.set=o;\n\t\n\tthis._S=9;//stop同步锁，stop可以阻止open过程中还未运行的start\n};\n//同步锁，控制对Stream的竞争；用于close时中断异步的open；一个对象open如果变化了都要阻止close，Stream的控制权交个新的对象\nRecorder.Sync={/*open*/O:9,/*close*/C:9};\n\nRecorder.prototype=initFn.prototype={\n\t//打开录音资源True(),False(msg,isUserNotAllow)，需要调用close。注意：此方法是异步的；一般使用时打开，用完立即关闭；可重复调用，可用来测试是否能录音\n\topen:function(True,False){\n\t\tvar This=this;\n\t\tTrue=True||NOOP;\n\t\tvar failCall=function(errMsg,isUserNotAllow){\n\t\t\tisUserNotAllow=!!isUserNotAllow;\n\t\t\tCLog(\"录音open失败：\"+errMsg+\",isUserNotAllow:\"+isUserNotAllow,1);\n\t\t\tFalse&&False(errMsg,isUserNotAllow);\n\t\t};\n\t\t\n\t\tvar ok=function(){\n\t\t\tCLog(\"open成功\");\n\t\t\tTrue();\n\t\t\t\n\t\t\tThis._SO=0;//解除stop对open中的start调用的阻止\n\t\t};\n\t\tvar codeFail=function(code,msg){\n\t\t\ttry{//跨域的优先检测一下\n\t\t\t\twindow.top.a;\n\t\t\t}catch(e){\n\t\t\t\tfailCall('无权录音(跨域，请尝试给iframe添加麦克风访问策略，如allow=\"camera;microphone\")');\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tif(/Permission|Allow/i.test(code)){\n\t\t\t\tfailCall(\"用户拒绝了录音权限\",true);\n\t\t\t}else if(window.isSecureContext===false){\n\t\t\t\tfailCall(\"无权录音(需https)\");\n\t\t\t}else if(/Found/i.test(code)){//可能是非安全环境导致的没有设备\n\t\t\t\tfailCall(msg+\"，无可用麦克风\");\n\t\t\t}else{\n\t\t\t\tfailCall(msg);\n\t\t\t};\n\t\t};\n\t\t\n\t\t//同步锁\n\t\tvar Lock=Recorder.Sync;\n\t\tvar lockOpen=++Lock.O,lockClose=Lock.C;\n\t\tThis._O=This._O_=lockOpen;//记住当前的open，如果变化了要阻止close，这里假定了新对象已取代当前对象并且不再使用\n\t\tThis._SO=This._S;//记住open过程中的stop，中途任何stop调用后都不能继续open中的start\n\t\tvar lockFail=function(){\n\t\t\t//允许多次open，但不允许任何一次close，或者自身已经调用了关闭\n\t\t\tif(lockClose!=Lock.C || !This._O){\n\t\t\t\tvar err=\"open被取消\";\n\t\t\t\tif(lockOpen==Lock.O){\n\t\t\t\t\t//无新的open，已经调用了close进行取消，此处应让上次的close明确生效\n\t\t\t\t\tThis.close();\n\t\t\t\t}else{\n\t\t\t\t\terr=\"open被中断\";\n\t\t\t\t};\n\t\t\t\tfailCall(err);\n\t\t\t\treturn true;\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\t//如果已打开就不要再打开了\n\t\tif(Recorder.IsOpen()){\n\t\t\tok();\n\t\t\treturn;\n\t\t};\n\t\tif(!Recorder.Support()){\n\t\t\tcodeFail(\"\",\"此浏览器不支持录音\");\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//环境配置检查\n\t\tvar checkMsg=This.envCheck({envName:\"H5\",canProcess:true});\n\t\tif(checkMsg){\n\t\t\tfailCall(\"不能录音：\"+checkMsg);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//请求权限，如果从未授权，一般浏览器会弹出权限请求弹框\n\t\tvar f1=function(stream){\n\t\t\tRecorder.Stream=stream;\n\t\t\tstream._call={};//此时is open，但并未connect，是允许绑定接收数据的\n\t\t\tif(lockFail())return;\n\t\t\t\n\t\t\t//https://github.com/xiangyuecn/Recorder/issues/14 获取到的track.readyState!=\"live\"，刚刚回调时可能是正常的，但过一下可能就被关掉了，原因不明。延迟一下保证真异步。对正常浏览器不影响\n\t\t\tsetTimeout(function(){\n\t\t\t\tif(lockFail())return;\n\t\t\t\t\n\t\t\t\tif(Recorder.IsOpen()){\n\t\t\t\t\tConnect();\n\t\t\t\t\tok();\n\t\t\t\t}else{\n\t\t\t\t\tfailCall(\"录音功能无效：无音频流\");\n\t\t\t\t};\n\t\t\t},100);\n\t\t};\n\t\tvar f2=function(e){\n\t\t\tvar code=e.name||e.message||e.code+\":\"+e;\n\t\t\tCLog(\"请求录音权限错误\",1,e);\n\t\t\t\n\t\t\tcodeFail(code,\"无法录音：\"+code);\n\t\t};\n\t\tvar pro=Recorder.Scope.getUserMedia({audio:true},f1,f2);\n\t\tif(pro&&pro.then){\n\t\t\tpro.then(f1)[True&&\"catch\"](f2); //fix 关键字，保证catch压缩时保持字符串形式\n\t\t};\n\t}\n\t//关闭释放录音资源\n\t,close:function(call){\n\t\tcall=call||NOOP;\n\t\t\n\t\tvar This=this;\n\t\tThis._stop();\n\t\t\n\t\tvar Lock=Recorder.Sync;\n\t\tThis._O=0;\n\t\tif(This._O_!=Lock.O){\n\t\t\t//唯一资源Stream的控制权已交给新对象，这里不能关闭。此处在每次都弹权限的浏览器内可能存在泄漏，新对象被拒绝权限可能不会调用close，忽略这种不处理\n\t\t\tCLog(\"close被忽略\",3);\n\t\t\tcall();\n\t\t\treturn;\n\t\t};\n\t\tLock.C++;//获得控制权\n\t\t\n\t\tvar stream=Recorder.Stream;\n\t\tif(stream){\n\t\t\tDisconnect();\n\t\t\t\n\t\t\tvar tracks=stream.getTracks&&stream.getTracks()||stream.audioTracks||[];\n\t\t\tfor(var i=0;i<tracks.length;i++){\n\t\t\t\tvar track=tracks[i];\n\t\t\t\ttrack.stop&&track.stop();\n\t\t\t};\n\t\t\tstream.stop&&stream.stop();\n\t\t};\n\t\t\n\t\tRecorder.Stream=0;\n\t\tCLog(\"close\");\n\t\tcall();\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/*模拟一段录音数据，后面可以调用stop进行编码，需提供pcm数据[1,2,3...]，pcm的采样率*/\n\t,mock:function(pcmData,pcmSampleRate){\n\t\tvar This=this;\n\t\tThis._stop();//清理掉已有的资源\n\t\t\n\t\tThis.isMock=1;\n\t\tThis.mockEnvInfo=null;\n\t\tThis.buffers=[pcmData];\n\t\tThis.recSize=pcmData.length;\n\t\tThis.srcSampleRate=pcmSampleRate;\n\t\treturn This;\n\t}\n\t,envCheck:function(envInfo){//平台环境下的可用性检查，任何时候都可以调用检查，返回errMsg:\"\"正常，\"失败原因\"\n\t\t//envInfo={envName:\"H5\",canProcess:true}\n\t\tvar errMsg,This=this,set=This.set;\n\t\t\n\t\t//编码器检查环境下配置是否可用\n\t\tif(!errMsg){\n\t\t\tif(This[set.type+\"_envCheck\"]){//编码器已实现环境检查\n\t\t\t\terrMsg=This[set.type+\"_envCheck\"](envInfo,set);\n\t\t\t}else{//未实现检查的手动检查配置是否有效\n\t\t\t\tif(set.takeoffEncodeChunk){\n\t\t\t\t\terrMsg=set.type+\"类型不支持设置takeoffEncodeChunk\";\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\treturn errMsg||\"\";\n\t}\n\t,envStart:function(mockEnvInfo,sampleRate){//平台环境相关的start调用\n\t\tvar This=this,set=This.set;\n\t\tThis.isMock=mockEnvInfo?1:0;//非H5环境需要启用mock，并提供envCheck需要的环境信息\n\t\tThis.mockEnvInfo=mockEnvInfo;\n\t\tThis.buffers=[];//数据缓冲\n\t\tThis.recSize=0;//数据大小\n\t\t\n\t\tThis.envInLast=0;//envIn接收到最后录音内容的时间\n\t\tThis.envInFirst=0;//envIn接收到的首个录音内容的录制时间\n\t\tThis.envInFix=0;//补偿的总时间\n\t\tThis.envInFixTs=[];//补偿计数列表\n\t\t\n\t\tset.sampleRate=Math.min(sampleRate,set.sampleRate);//engineCtx需要提前确定最终的采样率\n\t\tThis.srcSampleRate=sampleRate;\n\t\t\n\t\tThis.engineCtx=0;\n\t\t//此类型有边录边转码(Worker)支持\n\t\tif(This[set.type+\"_start\"]){\n\t\t\tvar engineCtx=This.engineCtx=This[set.type+\"_start\"](set);\n\t\t\tif(engineCtx){\n\t\t\t\tengineCtx.pcmDatas=[];\n\t\t\t\tengineCtx.pcmSize=0;\n\t\t\t};\n\t\t};\n\t}\n\t,envResume:function(){//和平台环境无关的恢复录音\n\t\t//重新开始计数\n\t\tthis.envInFixTs=[];\n\t}\n\t,envIn:function(pcm,sum){//和平台环境无关的pcm[Int16]输入\n\t\tvar This=this,set=This.set,engineCtx=This.engineCtx;\n\t\tvar bufferSampleRate=This.srcSampleRate;\n\t\tvar size=pcm.length;\n\t\tvar powerLevel=Recorder.PowerLevel(sum,size);\n\t\t\n\t\tvar buffers=This.buffers;\n\t\tvar bufferFirstIdx=buffers.length;//之前的buffer都是经过onProcess处理好的，不允许再修改\n\t\tbuffers.push(pcm);\n\t\t\n\t\t//有engineCtx时会被覆盖，这里保存一份\n\t\tvar buffersThis=buffers;\n\t\tvar bufferFirstIdxThis=bufferFirstIdx;\n\t\t\n\t\t//卡顿丢失补偿：因为设备很卡的时候导致H5接收到的数据量不够造成播放时候变速，结果比实际的时长要短，此处保证了不会变短，但不能修复丢失的音频数据造成音质变差。当前算法采用输入时间侦测下一帧是否需要添加补偿帧，需要(6次输入||超过1秒)以上才会开始侦测，如果滑动窗口内丢失超过1/3就会进行补偿\n\t\tvar now=Date.now();\n\t\tvar pcmTime=Math.round(size/bufferSampleRate*1000);\n\t\tThis.envInLast=now;\n\t\tif(This.buffers.length==1){//记下首个录音数据的录制时间\n\t\t\tThis.envInFirst=now-pcmTime;\n\t\t};\n\t\tvar envInFixTs=This.envInFixTs;\n\t\tenvInFixTs.splice(0,0,{t:now,d:pcmTime});\n\t\t//保留3秒的计数滑动窗口，另外超过3秒的停顿不补偿\n\t\tvar tsInStart=now,tsPcm=0;\n\t\tfor(var i=0;i<envInFixTs.length;i++){\n\t\t\tvar o=envInFixTs[i];\n\t\t\tif(now-o.t>3000){\n\t\t\t\tenvInFixTs.length=i;\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\ttsInStart=o.t;\n\t\t\ttsPcm+=o.d;\n\t\t};\n\t\t//达到需要的数据量，开始侦测是否需要补偿\n\t\tvar tsInPrev=envInFixTs[1];\n\t\tvar tsIn=now-tsInStart;\n\t\tvar lost=tsIn-tsPcm;\n\t\tif( lost>tsIn/3 && (tsInPrev&&tsIn>1000 || envInFixTs.length>=6) ){\n\t\t\t//丢失过多，开始执行补偿\n\t\t\tvar addTime=now-tsInPrev.t-pcmTime;//距离上次输入丢失这么多ms\n\t\t\tif(addTime>pcmTime/5){//丢失超过本帧的1/5\n\t\t\t\tvar fixOpen=!set.disableEnvInFix;\n\t\t\t\tCLog(\"[\"+now+\"]\"+(fixOpen?\"\":\"未\")+\"补偿\"+addTime+\"ms\",3);\n\t\t\t\tThis.envInFix+=addTime;\n\t\t\t\t\n\t\t\t\t//用静默进行补偿\n\t\t\t\tif(fixOpen){\n\t\t\t\t\tvar addPcm=new Int16Array(addTime*bufferSampleRate/1000);\n\t\t\t\t\tsize+=addPcm.length;\n\t\t\t\t\tbuffers.push(addPcm);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\tvar sizeOld=This.recSize,addSize=size;\n\t\tvar bufferSize=sizeOld+addSize;\n\t\tThis.recSize=bufferSize;//此值在onProcess后需要修正，可能新数据被修改\n\t\t\n\t\t\n\t\t//此类型有边录边转码(Worker)支持，开启实时转码\n\t\tif(engineCtx){\n\t\t\t//转换成set的采样率\n\t\t\tvar chunkInfo=Recorder.SampleData(buffers,bufferSampleRate,set.sampleRate,engineCtx.chunkInfo);\n\t\t\tengineCtx.chunkInfo=chunkInfo;\n\t\t\t\n\t\t\tsizeOld=engineCtx.pcmSize;\n\t\t\taddSize=chunkInfo.data.length;\n\t\t\tbufferSize=sizeOld+addSize;\n\t\t\tengineCtx.pcmSize=bufferSize;//此值在onProcess后需要修正，可能新数据被修改\n\t\t\t\n\t\t\tbuffers=engineCtx.pcmDatas;\n\t\t\tbufferFirstIdx=buffers.length;\n\t\t\tbuffers.push(chunkInfo.data);\n\t\t\tbufferSampleRate=chunkInfo.sampleRate;\n\t\t};\n\t\t\n\t\tvar duration=Math.round(bufferSize/bufferSampleRate*1000);\n\t\tvar bufferNextIdx=buffers.length;\n\t\tvar bufferNextIdxThis=buffersThis.length;\n\t\t\n\t\t//允许异步处理buffer数据\n\t\tvar asyncEnd=function(){\n\t\t\t//重新计算size，异步的早已减去添加的，同步的需去掉本次添加的然后重新计算\n\t\t\tvar num=asyncBegin?0:-addSize;\n\t\t\tvar hasClear=buffers[0]==null;\n\t\t\tfor(var i=bufferFirstIdx;i<bufferNextIdx;i++){\n\t\t\t\tvar buffer=buffers[i];\n\t\t\t\tif(buffer==null){//已被主动释放内存，比如长时间实时传输录音时\n\t\t\t\t\thasClear=1;\n\t\t\t\t}else{\n\t\t\t\t\tnum+=buffer.length;\n\t\t\t\t\t\n\t\t\t\t\t//推入后台边录边转码\n\t\t\t\t\tif(engineCtx&&buffer.length){\n\t\t\t\t\t\tThis[set.type+\"_encode\"](engineCtx,buffer);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//同步清理This.buffers，不管buffers到底清了多少个，buffersThis是使用不到的进行全清\n\t\t\tif(hasClear && engineCtx){\n\t\t\t\tvar i=bufferFirstIdxThis;\n\t\t\t\tif(buffersThis[0]){\n\t\t\t\t\ti=0;\n\t\t\t\t};\n\t\t\t\tfor(;i<bufferNextIdxThis;i++){\n\t\t\t\t\tbuffersThis[i]=null;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//统计修改后的size，如果异步发生clear要原样加回来，同步的无需操作\n\t\t\tif(hasClear){\n\t\t\t\tnum=asyncBegin?addSize:0;\n\t\t\t\t\n\t\t\t\tbuffers[0]=null;//彻底被清理\n\t\t\t};\n\t\t\tif(engineCtx){\n\t\t\t\tengineCtx.pcmSize+=num;\n\t\t\t}else{\n\t\t\t\tThis.recSize+=num;\n\t\t\t};\n\t\t};\n\t\t//实时回调处理数据，允许修改或替换上次回调以来新增的数据 ，但是不允许修改已处理过的，不允许增删第一维数组 ，允许将第二维数组任意修改替换成空数组也可以\n\t\tvar asyncBegin=set.onProcess(buffers,powerLevel,duration,bufferSampleRate,bufferFirstIdx,asyncEnd);\n\t\t\n\t\tif(asyncBegin===true){\n\t\t\t//开启了异步模式，onProcess已接管buffers新数据，立即清空，避免出现未处理的数据\n\t\t\tvar hasClear=0;\n\t\t\tfor(var i=bufferFirstIdx;i<bufferNextIdx;i++){\n\t\t\t\tif(buffers[i]==null){//已被主动释放内存，比如长时间实时传输录音时 ，但又要开启异步模式，此种情况是非法的\n\t\t\t\t\thasClear=1;\n\t\t\t\t}else{\n\t\t\t\t\tbuffers[i]=new Int16Array(0);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif(hasClear){\n\t\t\t\tCLog(\"未进入异步前不能清除buffers\",3);\n\t\t\t}else{\n\t\t\t\t//还原size，异步结束后再统计仅修改后的size，如果发生clear要原样加回来\n\t\t\t\tif(engineCtx){\n\t\t\t\t\tengineCtx.pcmSize-=addSize;\n\t\t\t\t}else{\n\t\t\t\t\tThis.recSize-=addSize;\n\t\t\t\t};\n\t\t\t};\n\t\t}else{\n\t\t\tasyncEnd();\n\t\t};\n\t}\n\t\n\t\n\t\n\t\n\t//开始录音，需先调用open；只要open成功时，调用此方法是安全的，如果未open强行调用导致的内部错误将不会有任何提示，stop时自然能得到错误\n\t,start:function(){\n\t\tif(!Recorder.IsOpen()){\n\t\t\tCLog(\"未open\",1);\n\t\t\treturn;\n\t\t};\n\t\tCLog(\"开始录音\");\n\t\t\n\t\tvar This=this,set=This.set,ctx=Recorder.Ctx;\n\t\tThis._stop();\n\t\tThis.state=0;\n\t\tThis.envStart(null,ctx.sampleRate);\n\t\t\n\t\t//检查open过程中stop是否已经调用过\n\t\tif(This._SO&&This._SO+1!=This._S){//上面调用过一次 _stop\n\t\t\t//open未完成就调用了stop，此种情况终止start。也应尽量避免出现此情况\n\t\t\tCLog(\"start被中断\",3);\n\t\t\treturn;\n\t\t};\n\t\tThis._SO=0;\n\t\t\n\t\tvar end=function(){\n\t\t\tThis.state=1;\n\t\t\tThis.resume();\n\t\t};\n\t\tif(ctx.state==\"suspended\"){\n\t\t\tctx.resume().then(function(){\n\t\t\t\tCLog(\"ctx resume\");\n\t\t\t\tend();\n\t\t\t});\n\t\t}else{\n\t\t\tend();\n\t\t};\n\t}\n\t/*暂停录音*/\n\t,pause:function(){\n\t\tvar This=this;\n\t\tif(This.state){\n\t\t\tThis.state=2;\n\t\t\tCLog(\"pause\");\n\t\t\tdelete Recorder.Stream._call[This.id];\n\t\t};\n\t}\n\t/*恢复录音*/\n\t,resume:function(){\n\t\tvar This=this;\n\t\tif(This.state){\n\t\t\tThis.state=1;\n\t\t\tCLog(\"resume\");\n\t\t\tThis.envResume();\n\t\t\t\n\t\t\tRecorder.Stream._call[This.id]=function(pcm,sum){\n\t\t\t\tif(This.state==1){\n\t\t\t\t\tThis.envIn(pcm,sum);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t}\n\t\n\t\n\t\n\t\n\t,_stop:function(keepEngine){\n\t\tvar This=this,set=This.set;\n\t\tif(!This.isMock){\n\t\t\tThis._S++;\n\t\t};\n\t\tif(This.state){\n\t\t\tThis.pause();\n\t\t\tThis.state=0;\n\t\t};\n\t\tif(!keepEngine && This[set.type+\"_stop\"]){\n\t\t\tThis[set.type+\"_stop\"](This.engineCtx);\n\t\t\tThis.engineCtx=0;\n\t\t};\n\t}\n\t/*\n\t结束录音并返回录音数据blob对象\n\t\tTrue(blob,duration) blob：录音数据audio/mp3|wav格式\n\t\t\t\t\t\t\tduration：录音时长，单位毫秒\n\t\tFalse(msg)\n\t\tautoClose:false 可选，是否自动调用close，默认为false\n\t*/\n\t,stop:function(True,False,autoClose){\n\t\tvar This=this,set=This.set,t1;\n\t\tCLog(\"Stop \"+(This.envInLast?This.envInLast-This.envInFirst+\"ms 补\"+This.envInFix+\"ms\":\"-\"));\n\t\t\n\t\tvar end=function(){\n\t\t\tThis._stop();//彻底关掉engineCtx\n\t\t\tif(autoClose){\n\t\t\t\tThis.close();\n\t\t\t};\n\t\t};\n\t\tvar err=function(msg){\n\t\t\tCLog(\"结束录音失败：\"+msg,1);\n\t\t\tFalse&&False(msg);\n\t\t\tend();\n\t\t};\n\t\tvar ok=function(blob,duration){\n\t\t\tCLog(\"结束录音 编码\"+(Date.now()-t1)+\"ms 音频\"+duration+\"ms/\"+blob.size+\"b\");\n\t\t\tif(set.takeoffEncodeChunk){//接管了输出，此时blob长度为0\n\t\t\t\tCLog(\"启用takeoffEncodeChunk后stop返回的blob长度为0不提供音频数据\",3);\n\t\t\t}else if(blob.size<Math.max(100,duration/2)){//1秒小于0.5k？\n\t\t\t\terr(\"生成的\"+set.type+\"无效\");\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tTrue&&True(blob,duration);\n\t\t\tend();\n\t\t};\n\t\tif(!This.isMock){\n\t\t\tif(!This.state){\n\t\t\t\terr(\"未开始录音\");\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tThis._stop(true);\n\t\t};\n\t\tvar size=This.recSize;\n\t\tif(!size){\n\t\t\terr(\"未采集到录音\");\n\t\t\treturn;\n\t\t};\n\t\tif(!This.buffers[0]){\n\t\t\terr(\"音频被释放\");\n\t\t\treturn;\n\t\t};\n\t\tif(!This[set.type]){\n\t\t\terr(\"未加载\"+set.type+\"编码器\");\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//环境配置检查，此处仅针对mock调用，因为open已经检查过了\n\t\tif(This.isMock){\n\t\t\tvar checkMsg=This.envCheck(This.mockEnvInfo||{envName:\"mock\",canProcess:false});//没有提供环境信息的mock时没有onProcess回调\n\t\t\tif(checkMsg){\n\t\t\t\terr(\"录音错误：\"+checkMsg);\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\t//此类型有边录边转码(Worker)支持\n\t\tvar engineCtx=This.engineCtx;\n\t\tif(This[set.type+\"_complete\"]&&engineCtx){\n\t\t\tvar duration=Math.round(engineCtx.pcmSize/set.sampleRate*1000);//采用后的数据长度和buffers的长度可能微小的不一致，是采样率连续转换的精度问题\n\t\t\t\n\t\t\tt1=Date.now();\n\t\t\tThis[set.type+\"_complete\"](engineCtx,function(blob){\n\t\t\t\tok(blob,duration);\n\t\t\t},err);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//标准UI线程转码，调整采样率\n\t\tt1=Date.now();\n\t\tvar chunk=Recorder.SampleData(This.buffers,This.srcSampleRate,set.sampleRate);\n\t\t\n\t\tset.sampleRate=chunk.sampleRate;\n\t\tvar res=chunk.data;\n\t\tvar duration=Math.round(res.length/set.sampleRate*1000);\n\t\t\n\t\tCLog(\"采样\"+size+\"->\"+res.length+\" 花:\"+(Date.now()-t1)+\"ms\");\n\t\t\n\t\tsetTimeout(function(){\n\t\t\tt1=Date.now();\n\t\t\tThis[set.type](res,function(blob){\n\t\t\t\tok(blob,duration);\n\t\t\t},function(msg){\n\t\t\t\terr(msg);\n\t\t\t});\n\t\t});\n\t}\n\n};\n\nif(window.Recorder){\n\twindow.Recorder.Destroy();\n};\nwindow.Recorder=Recorder;\n\n//end ****copy源码结束*****\nRecorder.LM=LM;\n\n//流量统计用1像素图片地址，设置为空将不参与统计\nRecorder.TrafficImgUrl=\"//ia.51.la/go1?id=20469973&pvFlag=1\";\nRecorder.Traffic=function(){\n\tvar imgUrl=Recorder.TrafficImgUrl;\n\tif(imgUrl){\n\t\tvar data=Recorder.Traffic;\n\t\tvar idf=location.href.replace(/#.*/,\"\");\n\t\t\n\t\tif(imgUrl.indexOf(\"//\")==0){\n\t\t\t//给url加上http前缀，如果是file协议下，不加前缀没法用\n\t\t\tif(/^https:/i.test(idf)){\n\t\t\t\timgUrl=\"https:\"+imgUrl;\n\t\t\t}else{\n\t\t\t\timgUrl=\"http:\"+imgUrl;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif(!data[idf]){\n\t\t\tdata[idf]=1;\n\t\t\t\n\t\t\tvar img=new Image();\n\t\t\timg.src=imgUrl;\n\t\t\tCLog(\"Traffic Analysis Image: Recorder.TrafficImgUrl=\"+Recorder.TrafficImgUrl);\n\t\t};\n\t};\n};\n\n}));","export class ByteArray {\r\n\r\n    constructor() {\r\n        this.list=[];\r\n        this.byteOffset=0;\r\n        this.length=0;\r\n    }\r\n\r\n    push(unit8Arr) {\r\n        this.list.push(unit8Arr);\r\n        this.length+=unit8Arr.length;\r\n    }\r\n\r\n    readBytes(len) {\r\n        if(len>0){\r\n            let rbuf=new Uint8Array(len);\r\n            let rbuf_ind=0;\r\n            while(rbuf_ind<len){\r\n                if(this.list.length>0){\r\n                    let tmpbuf=this.list.shift();\r\n                    let tmplen=tmpbuf.length;\r\n                    let last_len=len-rbuf_ind;\r\n                    if(tmplen>=last_len){\r\n                        //足夠了\r\n                        let tmpbuf2 = tmpbuf.subarray(0, last_len);\r\n                        rbuf.set(tmpbuf2,rbuf_ind);\r\n                        rbuf_ind+=tmpbuf2.length;\r\n                        if(last_len<tmplen){\r\n                            let newUint8Array = tmpbuf.subarray(last_len, tmplen);\r\n                            this.list.unshift(newUint8Array);\r\n                        }\r\n                        break;\r\n                    }else{\r\n                        rbuf.set(tmpbuf,rbuf_ind);\r\n                        rbuf_ind+=tmplen;\r\n                    }\r\n                }else{\r\n                    rbuf=rbuf.subarray(0, rbuf_ind);\r\n                    break;\r\n                }\r\n            }\r\n            this.length-=rbuf.length;\r\n            return rbuf;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}","\r\nexport class Util {\r\n    static isEmptyString(str) {\r\n        if (str == undefined || str == null || str == \"\") {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}","import {GPlayerEvent, GErrorType, GPlaybackControlStatus} from './player/gplayer-events';\r\nimport {GTalkerEvent, GTalkerConnectStatus, GTalkerConnectErrorType} from './talker/gtalker-events';\r\nimport {GPlayer} from './player/gplayer.js';\r\nimport { HttpFlvPlayer } from './player/httpflv-player.js';\r\nimport { HttpFlvTalker } from './talker/httpflv-talker.js';\r\n\r\nfunction createPlayer(url, config = null) {\r\n  let player = new HttpFlvPlayer();\r\n  player.init(url, config);\r\n  return player;\r\n}\r\n\r\nfunction createTalker(downUrl, upUrl, imei, channel, config = null) {\r\n  let talker = new HttpFlvTalker();\r\n  if (!talker.init(downUrl, upUrl, imei, channel, config)) {\r\n    return null;\r\n  }\r\n  return talker;\r\n}\r\n\r\nfunction isHttpFlvSupported() {\r\n  return HttpFlvPlayer.isSupported();\r\n}\r\n\r\nfunction isTalkSupported() {\r\n  return HttpFlvTalker.isSupported();\r\n}\r\n\r\nlet gmediajs = {};\r\n\r\ngmediajs.createPlayer = createPlayer;\r\ngmediajs.isHttpFlvSupported = isHttpFlvSupported;\r\ngmediajs.HttpFlvPlayer = HttpFlvPlayer;\r\ngmediajs.GPlayerEvent = GPlayerEvent;\r\ngmediajs.GErrorType = GErrorType;\r\ngmediajs.GPlaybackControlStatus = GPlaybackControlStatus;\r\n\r\ngmediajs.createTalker = createTalker;\r\ngmediajs.isTalkSupported = isTalkSupported;\r\ngmediajs.HttpFlvTalker = HttpFlvTalker;\r\ngmediajs.GTalkerEvent = GTalkerEvent;\r\ngmediajs.GTalkerConnectStatus = GTalkerConnectStatus;\r\ngmediajs.GTalkerConnectErrorType = GTalkerConnectErrorType;\r\n\r\nexport default gmediajs;","module.exports = require('./gmedia.js').default;","export const GPlayerEvent = {\r\n    ERROR: 'error',\r\n    MEDIA_SOURCE_END: 'media_source_end',\r\n    TIMEUPDATE: 'timeupdate',\r\n    STATISTICS_INFO: 'statistics_info',\r\n    PLAYBACK_CONTROL_EVENT: 'playback_control_event'\r\n};\r\n\r\nexport const GErrorType = {\r\n    NETWORK_ERROR: 'NetworkError',\r\n    MEDIA_ERROR: 'MediaError',\r\n    OTHER_ERROR: 'OtherError'\r\n};\r\n\r\nexport const GPlaybackControlStatus = {\r\n    SeekStart: 0,\r\n    SeekFail: 1,\r\n    SeekSuccess: 2\r\n};\r\n","export class GPlayer {\r\n\r\n    constructor(typeName) {\r\n        this._type = typeName || 'undefined';\r\n    }\r\n\r\n    init(url, config) {\r\n    }\r\n\r\n    on(event, call) {\r\n\r\n    }\r\n\r\n    off(event) {\r\n\r\n    }\r\n\r\n    attachMediaElement(mediaElement) {  \r\n    }\r\n\r\n    load() {\r\n    }\r\n\r\n    play() {\r\n\r\n    }\r\n\r\n    capture() {\r\n\r\n    }\r\n\r\n    pause() {\r\n        \r\n    }\r\n\r\n    resume() {\r\n        \r\n    }\r\n\r\n    seekToNewestTime () {\r\n\r\n    }\r\n\r\n    seek(time) {\r\n\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n}","import {GPlayerEvent, GErrorType, GPlaybackControlStatus} from \"./gplayer-events.js\"\r\nimport {GPlayer} from \"./gplayer.js\"\r\nimport flvjs from \"flv-g7.js\";\r\n\r\nconst PlaybackKey = \"g7-flv-video-playback\";\r\n\r\nconst PlaybackControl = {\r\n    None:0,\r\n    Active:1,\r\n    Passive:2\r\n}\r\n\r\nexport class HttpFlvPlayer extends GPlayer {\r\n\r\n    constructor () {\r\n        super('httpflv-player');\r\n        this.TAG = 'HttpFlvPlayer';\r\n        \r\n        this.player = null;\r\n        this.element = null;\r\n        this.isLive = true;\r\n\r\n        this.playbackPlan = 1;\r\n        this.playbackControl = PlaybackControl.None;\r\n\r\n        this.streamEnd = false;\r\n        this.needSeek = false;\r\n        this.seeking = false;\r\n        this.seekTime = 0;\r\n        this.newPlayStartTime = 0;\r\n        this.lastSendSeekTs = 0;\r\n\r\n        this.callbackTimeUpdate = null;\r\n        this.callbackStatistics = null;\r\n        this.callbackError = null;\r\n        this.callbackMediaSourceEnd = null;\r\n        this.callbackPlaybackControlEvent = null;\r\n\r\n        this.checkerSeek = null;\r\n\r\n        this.e = {\r\n            onTimeUpdate : this._onElementTime.bind(this)\r\n        };\r\n    }\r\n\r\n    static isSupported() {\r\n        return window.MediaSource &&\r\n            window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\r\n    }\r\n\r\n    init (url, config) {\r\n        this._checkConfig(config);\r\n        this.isLive = this._checkIfLive(url);  \r\n        this.playbackControl = this._checkPlaybackControl(url);  \r\n\r\n        this.player = flvjs.createPlayer({isLive:this.isLive, type:'flv',url:url}, {\r\n            lazyLoad: false,\r\n            enableStashBuffer: false,\r\n            deferLoadAfterSourceOpen:true\r\n        });\r\n\r\n        this.player.on(flvjs.Events.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\r\n        this.player.on(flvjs.Events.ERROR, this._onError.bind(this));\r\n        this.player.setMediaSourceEndCallback(this._onMediaSourceEnd.bind(this));\r\n        this.player.setStreamTimeCallback(this._onStreamTime.bind(this));\r\n    }\r\n\r\n    on(event, call) {\r\n        if (event === GPlayerEvent.TIMEUPDATE) {\r\n            this.callbackTimeUpdate = call;\r\n        }\r\n        else if (event === GPlayerEvent.STATISTICS_INFO) {\r\n            this.callbackStatistics = call;\r\n        }\r\n        else if (event === GPlayerEvent.ERROR) {\r\n            this.callbackError = call;\r\n        }\r\n        else if (event === GPlayerEvent.MEDIA_SOURCE_END) {\r\n            this.callbackMediaSourceEnd = call;\r\n        }\r\n        else if (event === GPlayerEvent.PLAYBACK_CONTROL_EVENT) {\r\n            this.callbackPlaybackControlEvent = call;\r\n        }\r\n    }\r\n\r\n    off(event) {\r\n        if (event === GPlayerEvent.TIMEUPDATE) {\r\n            this.callbackTimeUpdate = null;\r\n        }\r\n        else if (event === GPlayerEvent.STATISTICS_INFO) {\r\n            this.callbackStatistics = null;\r\n        }\r\n        else if (event === GPlayerEvent.ERROR) {\r\n            this.callbackError = null;\r\n        }\r\n        else if (event === GPlayerEvent.MEDIA_SOURCE_END) {\r\n            this.callbackMediaSourceEnd = null;\r\n        }\r\n        else if (event === GPlayerEvent.PLAYBACK_CONTROL_EVENT) {\r\n            this.callbackPlaybackControlEvent = null;\r\n        }\r\n    }\r\n\r\n    attachMediaElement(el) {\r\n        this.element = el;\r\n        this.element.addEventListener(\"timeupdate\", this.e.onTimeUpdate);\r\n        this.player.attachMediaElement(el);\r\n    }\r\n\r\n    load() {\r\n        this.player.load();\r\n    }\r\n\r\n    play() {\r\n        this.player.play();\r\n    }\r\n\r\n    capture() {\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.width = this.element.videoWidth;\r\n        canvas.height = this.element.videoHeight;\r\n        canvas.getContext('2d').drawImage(this.element, 0, 0, canvas.width, canvas.height);\r\n        let dataurl = canvas.toDataURL();\r\n        return dataurl;\r\n    }\r\n\r\n    pause() {\r\n        this.element.pause();\r\n        return false;\r\n    }\r\n\r\n    resume() {\r\n        this.element.play();\r\n        return false;\r\n    }\r\n\r\n    seekToNewestTime () {\r\n        let buffered = this.element.buffered;\r\n        if (buffered.length > 0) { \r\n            let from = buffered.start(buffered.length -1);\r\n            let to = buffered.end(buffered.length -1);\r\n            this.element.currentTime = to;\r\n        }\r\n    }\r\n\r\n    seek(time) {\r\n        if (this.element == null) {\r\n            return false;\r\n        }\r\n        if (this.seeking) {\r\n            return false;\r\n        }\r\n        \r\n        if (this.callbackPlaybackControlEvent != null) {\r\n            this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekStart, \r\n                \"开始切换播放时间\");\r\n        }\r\n\r\n        if (!this._seekByCached(time)) {\r\n            return false;\r\n        }\r\n        if (this.playbackControl == PlaybackControl.Active) {\r\n            this._seekByActive(time);\r\n        }\r\n        else {\r\n            this._seekByPassive(time);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    destroy() {\r\n        if (this.player != null) {\r\n            this.player.pause();\r\n            this.player.unload();\r\n            this.player.detachMediaElement();\r\n            this.player.destroy();\r\n            this.player = null;\r\n        }\r\n\r\n        if (this.element != null) {\r\n            this.element.removeEventListener(\"timeupdate\", this.e.onTimeUpdate);\r\n            this.element = null;\r\n        }\r\n    }\r\n\r\n    _checkConfig(config) {\r\n        if (config == null) {\r\n            return;\r\n        }\r\n\r\n        if (config.playbackPlan != null) {\r\n            this.playbackPlan = config.playbackPlan;\r\n        }\r\n    }\r\n\r\n    _checkIfLive(url) {\r\n        if (url.indexOf(PlaybackKey) != -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _checkPlaybackControl(url) {\r\n        let arr = url.split('&stream=');\r\n        if (arr.length < 2 || arr[1].length < 3) {\r\n            return PlaybackControl.None;\r\n        }\r\n        let streamName = arr[1];\r\n        let deviceType = streamName.substring(0,3);\r\n        if (deviceType == '131') {\r\n            return PlaybackControl.Passive;\r\n        }\r\n        return PlaybackControl.Active;\r\n    }\r\n\r\n    _seekByCached(time) {\r\n        if (!this.streamEnd) {\r\n            return true;\r\n        }\r\n\r\n        this.seeking = true;\r\n\r\n        let bCached = false;\r\n        let buffered = this.element.buffered;\r\n        for (let i = 0; i < buffered.length; i++) {\r\n            let from = buffered.start(i);\r\n            let to = buffered.end(i);\r\n            if (time > from && time < to) {\r\n                bCached = true;\r\n            }\r\n        }\r\n\r\n        if (bCached && time > this.element.currentTime) {\r\n            this.element.currentTime = time;\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekSuccess,\r\n                    \"切换播放时间成功\");\r\n            }\r\n        }\r\n        else {\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekFail,\r\n                    \"缓冲流已结束，无法切换到未缓冲区域\");\r\n            }\r\n        }\r\n\r\n        this.seeking = false;\r\n        return false;\r\n    }\r\n\r\n    _seekByActive(time) {\r\n        this.seeking = true;\r\n\r\n        this.lastSendSeekTs = new Date().getTime();\r\n\r\n        this.checkerSeek = setTimeout(()=>{\r\n            this.needSeek = false;\r\n            this.seeking = false;\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekFail,\r\n                    \"切换播放时间失败，请重新尝试\");\r\n            }\r\n        },15*1000);\r\n\r\n        this.seekTime = time;\r\n        this.needSeek = true;\r\n    }\r\n\r\n    _seekByPassive(time) {\r\n        this.seeking = true;\r\n\r\n        this.seekTime = time;\r\n        //获取当前video标签解码缓存\r\n        let buffered = this.element.buffered;\r\n        if (buffered.length > 0) { \r\n            //由设备端控制回放的buffered只会产生一段\r\n            let from = buffered.start(0);\r\n            let to = buffered.end(0);\r\n            this.newPlayStartTime = to;\r\n\r\n            this.element.currentTime = this.newPlayStartTime;\r\n        }\r\n\r\n        setTimeout(()=>{\r\n            this.seeking = false;\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekSuccess,\r\n                    \"切换播放时间成功\");\r\n            }\r\n        },1000);\r\n    }\r\n\r\n    _onStatisticsInfo(data) {\r\n        if (this.callbackStatistics != null) {\r\n            let info = {};\r\n            info.speed = data.speed;\r\n            this.callbackStatistics(info);\r\n        }\r\n    }\r\n\r\n    _onError(type, detail, errObj) {\r\n        if (this.callbackError != null) {\r\n            let gtype = type;\r\n            let gsubtype = detail;\r\n            let info = type;\r\n            this.callbackError(type, gsubtype, info);\r\n        }\r\n    }\r\n\r\n    _onMediaSourceEnd(info) {\r\n        this.streamEnd = true;\r\n        if (this.callbackMediaSourceEnd != null) {\r\n            this.callbackMediaSourceEnd();\r\n        }\r\n    }\r\n\r\n    _onElementTime(event) {\r\n        //回放方案1\r\n        if (this.playbackPlan == 1) {\r\n            if (this.callbackTimeUpdate != null && this.element != null) {\r\n                this.callbackTimeUpdate(this.element.currentTime);\r\n            }\r\n            return;\r\n        }\r\n\r\n        //回放方案2\r\n        if (this.playbackControl === PlaybackControl.Active) {\r\n            if (!this.seeking && this.callbackTimeUpdate != null && this.element != null) {\r\n                this.callbackTimeUpdate(this.element.currentTime);\r\n            }\r\n        }\r\n        else if (this.playbackControl === PlaybackControl.Passive) {\r\n            if (!this.seeking && this.callbackTimeUpdate != null && this.element != null) {\r\n                let curPlayTime = this.seekTime + (this.element.currentTime - this.newPlayStartTime);\r\n                this.callbackTimeUpdate(curPlayTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    _onStreamTime(time) {\r\n        if (this.needSeek) {\r\n            if (Math.abs(this.seekTime*1000 - time) >= 1000) {\r\n                return;\r\n            }\r\n\r\n            if (this.checkerSeek != null) {\r\n                clearTimeout(this.checkerSeek);\r\n                this.checkerSeek = null;\r\n            }\r\n\r\n            this.needSeek = false;\r\n            setTimeout(()=>{\r\n                this.seeking = false;\r\n                this.element.currentTime = time/1000;\r\n                let off = new Date().getTime() - this.lastSendSeekTs;\r\n                console.log(\"切换耗时: \" + off);\r\n                if (this.callbackPlaybackControlEvent != null) {\r\n                    this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekSuccess,\r\n                        \"切换播放时间成功\");\r\n                }\r\n            },1000);\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n","export const GTalkerEvent = {\r\n    CONNECT_STATUS: 'connect_status'\r\n};\r\n\r\nexport const GTalkerConnectStatus = {\r\n    ConnectSuccess: 'ConnectSuccess',\r\n    ConnectError: 'ConnectError'\r\n};\r\n\r\nexport const GTalkerConnectErrorType = {\r\n    DeviceNotResponding: 'DeviceNotResponding',\r\n    DeviceStopedResponding: 'DeviceStopedResponding',\r\n    DownLinkFail: 'DownLinkFail',\r\n    UpLinkFail: 'UpLinkFail',\r\n    WaitOpenMicrophoneTimeout: 'WaitOpenMicrophoneTimeout',\r\n    NotAllowOpenMicrophone: 'NotAllowOpenMicrophone'\r\n};","export class GTalker {\r\n\r\n    constructor(typeName) {\r\n        this._type = typeName || 'undefined';\r\n    }\r\n\r\n    init(downUrl, upUrl, imei, channel, config) {\r\n    }\r\n\r\n    on(event, call) {\r\n\r\n    }\r\n\r\n    off(event) {\r\n\r\n    }\r\n\r\n    attachMediaElement(element) {  \r\n    }\r\n\r\n    load() {\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n}","import {GTalkerEvent, GTalkerConnectStatus, GTalkerConnectErrorType} from \"./gtalker-events.js\"\r\nimport {GTalker} from \"./gtalker.js\"\r\nimport {ByteArray} from \"../common/bytearray.js\"\r\nimport {Util} from \"../common/util.js\"\r\n\r\nimport flvjs from \"flv-g7.js\";\r\n\r\nimport Recorder from 'recorder-core'\r\nimport 'recorder-core/src/engine/mp3'\r\nimport 'recorder-core/src/engine/mp3-engine'\r\n\r\nconst AudioBufLen = 640;\r\nconst DebugFlag = false;\r\n\r\nexport class HttpFlvTalker extends GTalker {\r\n\r\n    constructor () {\r\n        super('httpflv-talker');\r\n        this.TAG = 'HttpFlvTalker';\r\n\r\n        this.downUrl = null;\r\n        this.upUrl = null;\r\n        this.imei = null;\r\n        this.channel = null;\r\n        \r\n        this.player = null;\r\n        this.recorder = null;\r\n        this.sender = null;\r\n        this.element = null;\r\n\r\n        this.callbackConnectStatus = null;\r\n\r\n        this.byteArray = new ByteArray();\r\n\r\n        this.timerCheck = null;\r\n        this.timerSend = null;\r\n\r\n        this.hasReceiveServerData = false;\r\n        this.hasSendClientData = false;\r\n        this.hasWaitOpenMicrophoneTimeout = false;\r\n        this.hasDestory = false;\r\n    }\r\n\r\n    static isSupported() {\r\n        return typeof WebSocket != 'undefined' && Recorder.Support() && window.MediaSource &&\r\n            window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\r\n    }\r\n\r\n    init(downUrl, upUrl, imei, channel, config) {\r\n        this.downUrl = downUrl;\r\n        this.upUrl = upUrl;\r\n        this.imei = imei;\r\n        this.channel = channel;\r\n        if (!this._checkInputParam()) {\r\n            return false;\r\n        }\r\n\r\n        this._startPlayer(downUrl);\r\n        return true;\r\n    }\r\n\r\n    on(event, call) {\r\n        if (event === GTalkerEvent.CONNECT_STATUS) {\r\n            this.callbackConnectStatus = call;\r\n        }\r\n    }\r\n\r\n    off(event) {\r\n        if (event === GTalkerEvent.CONNECT_STATUS) {\r\n            this.callbackConnectStatus = null;\r\n        }\r\n    }\r\n\r\n    attachMediaElement(element) {  \r\n        this.element = element;\r\n\r\n        this.element.addEventListener(\"loadeddata\", this._onPlayerLoadedData.bind(this), {once: true});\r\n        this.player.on(flvjs.Events.ERROR, this._onPlayerError.bind(this));\r\n        this.player.setMediaSourceEndCallback(this._onPlayerMediaSourceEnd.bind(this));\r\n\r\n        this.player.attachMediaElement(element);\r\n    }\r\n\r\n    load() {\r\n        this.player.load();\r\n        this._startSender(this.upUrl);\r\n    }\r\n\r\n    destroy() {\r\n        this.hasDestory = true;\r\n\r\n        this._destroyPlayer();\r\n        this._destroySender();\r\n        this._destroyRecorder();\r\n        this._destroySendProc();\r\n    }\r\n\r\n    _checkInputParam() {\r\n        if (Util.isEmptyString(this.downUrl) || Util.isEmptyString(this.upUrl)) {\r\n            return false;\r\n        }\r\n        if (Util.isEmptyString(this.imei)) {\r\n            return false;\r\n        }\r\n        if (this.channel < 0 || this.channel > 255) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _startPlayer(url) {\r\n        this._destroyPlayer();\r\n\r\n        this.player = flvjs.createPlayer({isLive:true, type:'flv',url:url}, {\r\n            lazyLoad: false,\r\n            enableStashBuffer: false,\r\n            deferLoadAfterSourceOpen:true\r\n        });\r\n    }\r\n\r\n    _onPlayerLoadedData() {\r\n        if (DebugFlag) {\r\n            console.log(\"player loadedData\");\r\n        }\r\n\r\n        this.hasReceiveServerData = true;\r\n        if (this.hasSendClientData && this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectSuccess, \"\");\r\n        }\r\n    }\r\n\r\n    _onPlayerError(type, detail, errObj) {\r\n        if (DebugFlag) {\r\n            console.log(\"player error\");\r\n        }\r\n\r\n        if (this.callbackConnectStatus == null) {\r\n            return;\r\n        }\r\n\r\n        if (this.hasReceiveServerData) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.DownLinkFail);\r\n        }\r\n        else {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.DeviceNotResponding);\r\n        }\r\n    }\r\n\r\n    _onPlayerMediaSourceEnd(info) {\r\n        if (DebugFlag) {\r\n            console.log(\"player source end\");\r\n        }\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.DeviceStopedResponding);\r\n        }\r\n    }\r\n\r\n    _destroyPlayer() {\r\n        if (this.player != null) {\r\n            this.player.pause();\r\n            this.player.unload();\r\n            this.player.detachMediaElement();\r\n            this.player.destroy();\r\n            this.player = null;\r\n        }\r\n\r\n        if (this.element != null) {\r\n            this.element = null;\r\n        }\r\n    }\r\n\r\n    _startSender(url) {\r\n        this.sender = new WebSocket(url);\r\n        this.sender.onopen = this._onSenderOpen.bind(this);\r\n        this.sender.onmessage = this._onSenderMsg.bind(this);\r\n        this.sender.onclose = this._onSenderClose.bind(this);\r\n        this.sender.onerror = this._onSenderError.bind(this);\r\n    }\r\n\r\n    _onSenderOpen() {\r\n        if (DebugFlag) {\r\n            console.log(\"websocket open\");\r\n        }\r\n        \r\n        this._startRecorder();\r\n    }\r\n\r\n    _onSenderMsg(e) {\r\n        \r\n    }\r\n\r\n    _onSenderClose(e) {\r\n        if (DebugFlag) {\r\n            console.log(\"websocket close\");\r\n        }\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.UpLinkFail);\r\n        }\r\n    }\r\n\r\n    _onSenderError(e) {\r\n        if (DebugFlag) {\r\n            console.log(\"websocket error\");\r\n        }\r\n    }\r\n\r\n    _destroySender() {\r\n        this.sender.close();\r\n        this.sender = null;\r\n    }\r\n\r\n    _startRecorder() {\r\n        if (this.recorder) {\r\n            this.recorder.close();\r\n        }\r\n\r\n        this.recorder = Recorder({\r\n            type:\"mp3\",\r\n            sampleRate:8000,\r\n            bitRate:16,\r\n            onProcess:this._onReceiveMicrophoneData.bind(this)\r\n        });\r\n        this.timerCheck = setTimeout(this._timeoutCheckIfAllowOpenMicrophone.bind(this),10000);\r\n        this.recorder.open(this._onAllowOpenMicrophone.bind(this),\r\n            this._onNotAllowOpenMicrophone.bind(this));\r\n    }\r\n\r\n    _timeoutCheckIfAllowOpenMicrophone() {\r\n        if (DebugFlag) {\r\n            console.log(\"user WaitOpenMicrophone Timeout\");\r\n        }\r\n\r\n        this.hasWaitOpenMicrophoneTimeout = true;\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.WaitOpenMicrophoneTimeout);\r\n        }\r\n    }\r\n\r\n    _onAllowOpenMicrophone() {\r\n        if (DebugFlag) {\r\n            console.log(\"user AllowOpenMicrophone\");\r\n        }\r\n\r\n        if (this.hasWaitOpenMicrophoneTimeout) {\r\n            return;\r\n        }\r\n\r\n        clearTimeout(this.timerCheck);\r\n\r\n        this.hasSendClientData = true;\r\n        if (this.hasReceiveServerData && this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectSuccess, \"\");\r\n        }\r\n\r\n        this.recorder.start();\r\n        this._sendProc();\r\n    }\r\n\r\n    _onNotAllowOpenMicrophone(msg, isUserNotAllow) {\r\n        if (DebugFlag) {\r\n            console.log(\"user NotAllowOpenMicrophone\");\r\n        }\r\n\r\n        clearTimeout(this.timerCheck);\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.NotAllowOpenMicrophone);\r\n        }\r\n    }\r\n\r\n    _onReceiveMicrophoneData(buffers, powerLevel, bufferDuration, bufferSampleRate) {\r\n        let arrayBuf = buffers[buffers.length - 1].buffer; //Uint16Array To ArrayBuffer\r\n        let u8buf = new Uint8Array(arrayBuf); //ArrayBuffer To Uint8Array\r\n        this.byteArray.push(u8buf);\r\n    }\r\n\r\n    _destroyRecorder() {\r\n        this.recorder.close();\r\n        this.recorder = null;\r\n    }\r\n\r\n    _sendProc() {\r\n        if (this.hasDestory) {\r\n            return;\r\n        }\r\n\r\n        if (this.byteArray.length < AudioBufLen) {\r\n            this.timerSend = setTimeout(this._sendProc.bind(this), 5);\r\n        }\r\n        else {\r\n            let audioBuf = this.byteArray.readBytes(AudioBufLen);\r\n\r\n            let packer = new ByteArray();\r\n            packer.push(new Uint8Array([0x31,0x32,0x63,0x64]));\r\n            let arrImeiChar = this.imei.split('');\r\n            for (let i = 0; i < arrImeiChar.length; i++) {\r\n                packer.push(new Uint8Array([arrImeiChar[i].charCodeAt()]));\r\n            }\r\n            packer.push(new Uint8Array([parseInt(this.channel)]));\r\n            packer.push(new Uint8Array([Math.floor(AudioBufLen/256)]));\r\n            packer.push(new Uint8Array([AudioBufLen%256]));\r\n            packer.push(audioBuf);\r\n\r\n            let totalLen = 4 + arrImeiChar.length + 3 + AudioBufLen;\r\n            if (this.sender != null) {\r\n                this.sender.send(packer.readBytes(totalLen));\r\n            }\r\n\r\n            this._sendProc();\r\n        }\r\n    }\r\n\r\n    _destroySendProc() {\r\n        clearTimeout(this.timerSend);\r\n    }\r\n}"]}