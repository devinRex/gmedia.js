{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/flv-g7.js/dist/flv.js","node_modules/recorder-core/src/engine/mp3-engine.js","node_modules/recorder-core/src/engine/mp3.js","node_modules/recorder-core/src/recorder-core.js","src/common/bytearray.js","src/common/util.js","src/gmedia.js","src/helper/ghelper-events.js","src/helper/ghelper.js","src/index.js","src/player/gplayer-events.js","src/player/gplayer.js","src/player/httpflv-player.js","src/talker/gtalker-events.js","src/talker/gtalker.js","src/talker/httpflv-talker.js"],"names":[],"mappingsrbval3Ba,S,WAAA,S;AAET,yBAAc;AAAA;;AACV,aAAK,IAAL,GAAU,EAAV;AACA,aAAK,UAAL,GAAgB,CAAhB;AACA,aAAK,MAAL,GAAY,CAAZ;AACH;;;;6BAEI,Q,EAAU;AACX,iBAAK,IAAL,CAAU,IAAV,CAAe,QAAf;AACA,iBAAK,MAAL,IAAa,SAAS,MAAtB;AACH;;;kCAES,G,EAAK;AACX,gBAAG,MAAI,CAAP,EAAS;AACL,oBAAI,OAAK,IAAI,UAAJ,CAAe,GAAf,CAAT;AACA,oBAAI,WAAS,CAAb;AACA,uBAAM,WAAS,GAAf,EAAmB;AACf,wBAAG,KAAK,IAAL,CAAU,MAAV,GAAiB,CAApB,EAAsB;AAClB,4BAAI,SAAO,KAAK,IAAL,CAAU,KAAV,EAAX;AACA,4BAAI,SAAO,OAAO,MAAlB;AACA,4BAAI,WAAS,MAAI,QAAjB;AACA,4BAAG,UAAQ,QAAX,EAAoB;AAChB;AACA,gCAAI,UAAU,OAAO,QAAP,CAAgB,CAAhB,EAAmB,QAAnB,CAAd;AACA,iCAAK,GAAL,CAAS,OAAT,EAAiB,QAAjB;AACA,wCAAU,QAAQ,MAAlB;AACA,gCAAG,WAAS,MAAZ,EAAmB;AACf,oCAAI,gBAAgB,OAAO,QAAP,CAAgB,QAAhB,EAA0B,MAA1B,CAApB;AACA,qCAAK,IAAL,CAAU,OAAV,CAAkB,aAAlB;AACH;AACD;AACH,yBAVD,MAUK;AACD,iCAAK,GAAL,CAAS,MAAT,EAAgB,QAAhB;AACA,wCAAU,MAAV;AACH;AACJ,qBAlBD,MAkBK;AACD,+BAAK,KAAK,QAAL,CAAc,CAAd,EAAiB,QAAjB,CAAL;AACA;AACH;AACJ;AACD,qBAAK,MAAL,IAAa,KAAK,MAAlB;AACA,uBAAO,IAAP;AACH;AACD,mBAAO,IAAP;AACH;;;;;;;;;;;;;;;;;IC5CQ,I,WAAA,I;;;;;;;sCACY,G,EAAK;AACtB,gBAAI,OAAO,SAAP,IAAoB,OAAO,IAA3B,IAAmC,OAAO,EAA9C,EAAkD;AAC9C,uBAAO,IAAP;AACH,aAFD,MAGK;AACD,uBAAO,KAAP;AACH;AACJ;;;;;;;;;;;;;ACTL;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAA0C;AAAA,MAAf,MAAe,uEAAN,IAAM;;AACxC,MAAI,SAAS,IAAI,4BAAJ,EAAb;AACA,SAAO,IAAP,CAAY,GAAZ,EAAiB,MAAjB;AACA,SAAO,MAAP;AACD;;AAED,SAAS,YAAT,CAAsB,OAAtB,EAA+B,KAA/B,EAAsC,IAAtC,EAA4C,OAA5C,EAAoE;AAAA,MAAf,MAAe,uEAAN,IAAM;;AAClE,MAAI,SAAS,IAAI,4BAAJ,EAAb;AACA,MAAI,CAAC,OAAO,IAAP,CAAY,OAAZ,EAAqB,KAArB,EAA4B,IAA5B,EAAkC,OAAlC,EAA2C,MAA3C,CAAL,EAAyD;AACvD,WAAO,IAAP;AACD;AACD,SAAO,MAAP;AACD;;AAED,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,MAAI,SAAS,IAAI,gBAAJ,EAAb;AACA,SAAO,IAAP,CAAY,GAAZ;AACA,SAAO,MAAP;AACD;;AAED,SAAS,kBAAT,GAA8B;AAC5B,SAAO,6BAAc,WAAd,EAAP;AACD;;AAED,SAAS,eAAT,GAA2B;AACzB,SAAO,6BAAc,WAAd,EAAP;AACD;;AAED,IAAI,WAAW,EAAf;;AAEA,SAAS,YAAT,GAAwB,YAAxB;AACA,SAAS,kBAAT,GAA8B,kBAA9B;AACA,SAAS,aAAT,GAAyB,4BAAzB;AACA,SAAS,YAAT,GAAwB,2BAAxB;AACA,SAAS,UAAT,GAAsB,yBAAtB;AACA,SAAS,sBAAT,GAAkC,qCAAlC;;AAEA,SAAS,YAAT,GAAwB,YAAxB;AACA,SAAS,eAAT,GAA2B,eAA3B;AACA,SAAS,aAAT,GAAyB,4BAAzB;AACA,SAAS,YAAT,GAAwB,2BAAxB;AACA,SAAS,oBAAT,GAAgC,mCAAhC;AACA,SAAS,uBAAT,GAAmC,sCAAnC;;AAEA,SAAS,YAAT,GAAwB,YAAxB;AACA,SAAS,OAAT,GAAmB,gBAAnB;AACA,SAAS,YAAT,GAAwB,2BAAxB;;kBAEe,Q;;;;;;;;ACxDR,IAAM,sCAAe;AACxB,iBAAa;AADW,CAArB;;;;;;;;;;;;ACAP;;;;IACa,O,WAAA,O;AACT,uBAAc;AAAA;;AACV,aAAK,cAAL,GAAsB,IAAtB;AACA,aAAK,OAAL,GAAe,IAAf;AACH;;;;6BAEI,G,EAAK;AACN,iBAAK,OAAL,GAAe,IAAI,SAAJ,CAAc,GAAd,CAAf;AACA,iBAAK,OAAL,CAAa,MAAb,GAAsB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAtB;AACA,iBAAK,OAAL,CAAa,SAAb,GAAyB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAzB;AACA,iBAAK,OAAL,CAAa,OAAb,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,iBAAK,OAAL,CAAa,OAAb,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACH;;;2BAEE,K,EAAO,I,EAAM;AACZ,gBAAI,QAAQ,4BAAa,WAAzB,EAAsC;AAClC,qBAAK,cAAL,GAAsB,IAAtB;AACH;AACJ;;;4BAEG,K,EAAO;AACP,gBAAI,QAAQ,4BAAa,WAAzB,EAAsC;AAClC,qBAAK,cAAL,GAAsB,IAAtB;AACH;AACJ;;;kCAES;AACN,iBAAK,cAAL,GAAsB,IAAtB;;AAEA,gBAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACtB,qBAAK,OAAL,CAAa,KAAb;AACA,qBAAK,OAAL,GAAe,IAAf;AACH;AACJ;;;yCAEgB;AACb,iBAAK,yBAAL;AACH;;;0CAEiB,C,EAAG;AACjB,gBAAI,OAAO,KAAK,KAAL,CAAW,EAAE,IAAb,CAAX;AACA,gBAAI,QAAQ,IAAR,IAAgB,KAAK,IAAL,IAAa,IAAjC,EAAuC;AACnC;AACH;;AAED,gBAAI,KAAK,IAAL,IAAa,YAAb,IAA6B,KAAK,cAAL,IAAuB,IAAxD,EAA8D;AAC1D,qBAAK,cAAL,CAAoB,KAAK,IAAzB;AACH;AACJ;;;0CAEiB,CAEjB;;;0CAEiB,CAEjB;;;oDAE2B;AACxB,gBAAI,OAAO,EAAX;AACA,iBAAK,KAAL,IAAc,SAAd;AACA,iBAAK,MAAL,IAAe,YAAf;AACA,iBAAK,IAAL,IAAa,EAAb;AACA,iBAAK,MAAL,IAAe,EAAf;;AAEA,gBAAI,MAAM,KAAK,SAAL,CAAe,IAAf,CAAV;;AAEA,iBAAK,OAAL,CAAa,IAAb,CAAkB,GAAlB;AACH;;;;;;;;;ACrEL,OAAO,OAAP,GAAiB,QAAQ,aAAR,EAAuB,OAAxC;;;;;;;;ACAO,IAAM,sCAAe;AACxB,WAAO,OADiB;AAExB,sBAAkB,kBAFM;AAGxB,gBAAY,YAHY;AAIxB,qBAAiB,iBAJO;AAKxB,iBAAa,aALW;AAMxB,4BAAwB;AANA,CAArB;;AASA,IAAM,kCAAa;AACtB,mBAAe,cADO;AAEtB,iBAAa,YAFS;AAGtB,iBAAa;AAHS,CAAnB;;AAMA,IAAM,0DAAyB;AAClC,eAAW,CADuB;AAElC,cAAU,CAFwB;AAGlC,iBAAa;AAHqB,CAA/B;;;;;;;;;;;;;ICfM,O,WAAA,O;AAET,qBAAY,QAAZ,EAAsB;AAAA;;AAClB,aAAK,KAAL,GAAa,YAAY,WAAzB;AACH;;;;6BAEI,G,EAAK,M,EAAQ,CACjB;;;2BAEE,K,EAAO,I,EAAM,CAEf;;;4BAEG,K,EAAO,CAEV;;;2CAEkB,Y,EAAc,CAChC;;;+BAEM,CACN;;;+BAEM,CAEN;;;kCAES,CAET;;;gCAEO,CAEP;;;iCAEQ,CAER;;;2CAEmB,CAEnB;;;6BAEI,I,EAAM,CAEV;;;kCAES,CAET;;;;;;;;;;;;;;;;ACjDL;;AACA;;AACA;;;;AAEA;;AACA;;;;;;;;;;AAEA,IAAM,cAAc,uBAApB;;AAEA,IAAM,kBAAkB;AACpB,UAAK,CADe;AAEpB,YAAO,CAFa;AAGpB,aAAQ;AAHY,CAAxB;;IAMa,a,WAAA,a;;;AAET,6BAAe;AAAA;;AAAA,kIACL,gBADK;;AAEX,cAAK,GAAL,GAAW,eAAX;;AAEA,cAAK,MAAL,GAAc,IAAd;AACA,cAAK,OAAL,GAAe,IAAf;AACA,cAAK,MAAL,GAAc,IAAd;;AAEA,cAAK,OAAL,GAAe,IAAf;AACA,cAAK,MAAL,GAAc,IAAd;;AAEA,cAAK,YAAL,GAAoB,CAApB;AACA,cAAK,eAAL,GAAuB,gBAAgB,IAAvC;;AAEA,cAAK,SAAL,GAAiB,KAAjB;AACA,cAAK,QAAL,GAAgB,KAAhB;AACA,cAAK,OAAL,GAAe,KAAf;AACA,cAAK,QAAL,GAAgB,CAAhB;AACA,cAAK,gBAAL,GAAwB,CAAxB;AACA,cAAK,cAAL,GAAsB,CAAtB;;AAEA,cAAK,kBAAL,GAA0B,IAA1B;AACA,cAAK,kBAAL,GAA0B,IAA1B;AACA,cAAK,aAAL,GAAqB,IAArB;AACA,cAAK,sBAAL,GAA8B,IAA9B;AACA,cAAK,kBAAL,GAA0B,IAA1B;AACA,cAAK,4BAAL,GAAoC,IAApC;;AAEA,cAAK,WAAL,GAAmB,IAAnB;;AAEA,cAAK,CAAL,GAAS;AACL,0BAAe,MAAK,cAAL,CAAoB,IAApB;AADV,SAAT;AA9BW;AAiCd;;;;6BAOK,G,EAAK,M,EAAQ;AACf,iBAAK,YAAL,CAAkB,MAAlB;AACA,iBAAK,MAAL,GAAc,KAAK,YAAL,CAAkB,GAAlB,CAAd;AACA,iBAAK,eAAL,GAAuB,KAAK,qBAAL,CAA2B,GAA3B,CAAvB;;AAEA,iBAAK,MAAL,GAAc,eAAM,YAAN,CAAmB,EAAC,QAAO,KAAK,MAAb,EAAqB,MAAK,KAA1B,EAAgC,KAAI,GAApC,EAAnB,EAA6D;AACvE,0BAAU,KAD6D;AAEvE,mCAAmB,KAFoD;AAGvE,0CAAyB;AAH8C,aAA7D,CAAd;;AAMA,iBAAK,MAAL,CAAY,EAAZ,CAAe,eAAM,MAAN,CAAa,eAA5B,EAA6C,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAA7C;AACA,iBAAK,MAAL,CAAY,EAAZ,CAAe,eAAM,MAAN,CAAa,KAA5B,EAAmC,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAnC;AACA,iBAAK,MAAL,CAAY,yBAAZ,CAAsC,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAtC;AACA,iBAAK,MAAL,CAAY,qBAAZ,CAAkC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAlC;AACH;;;2BAEE,K,EAAO,I,EAAM;AACZ,gBAAI,UAAU,4BAAa,UAA3B,EAAuC;AACnC,qBAAK,kBAAL,GAA0B,IAA1B;AACH,aAFD,MAGK,IAAI,UAAU,4BAAa,eAA3B,EAA4C;AAC7C,qBAAK,kBAAL,GAA0B,IAA1B;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,KAA3B,EAAkC;AACnC,qBAAK,aAAL,GAAqB,IAArB;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,gBAA3B,EAA6C;AAC9C,qBAAK,sBAAL,GAA8B,IAA9B;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,WAA3B,EAAwC;AACzC,qBAAK,kBAAL,GAA0B,IAA1B;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,sBAA3B,EAAmD;AACpD,qBAAK,4BAAL,GAAoC,IAApC;AACH;AACJ;;;4BAEG,K,EAAO;AACP,gBAAI,UAAU,4BAAa,UAA3B,EAAuC;AACnC,qBAAK,kBAAL,GAA0B,IAA1B;AACH,aAFD,MAGK,IAAI,UAAU,4BAAa,eAA3B,EAA4C;AAC7C,qBAAK,kBAAL,GAA0B,IAA1B;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,KAA3B,EAAkC;AACnC,qBAAK,aAAL,GAAqB,IAArB;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,gBAA3B,EAA6C;AAC9C,qBAAK,sBAAL,GAA8B,IAA9B;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,WAA3B,EAAwC;AACzC,qBAAK,kBAAL,GAA0B,IAA1B;AACH,aAFI,MAGA,IAAI,UAAU,4BAAa,sBAA3B,EAAmD;AACpD,qBAAK,4BAAL,GAAoC,IAApC;AACH;AACJ;;;2CAEkB,E,EAAI;AACnB,iBAAK,OAAL,GAAe,EAAf;AACA,iBAAK,OAAL,CAAa,gBAAb,CAA8B,YAA9B,EAA4C,KAAK,CAAL,CAAO,YAAnD;AACA,iBAAK,MAAL,CAAY,kBAAZ,CAA+B,EAA/B;AACH;;;+BAEM;AACH,gBAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACtB,qBAAK,MAAL,GAAc,IAAI,gBAAJ,EAAd;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,OAAtB;AACA,qBAAK,MAAL,CAAY,EAAZ,CAAe,4BAAa,WAA5B,EAAwC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAxC;AACH;;AAED,iBAAK,MAAL,CAAY,IAAZ;AACH;;;+BAEM;AACH,iBAAK,MAAL,CAAY,IAAZ;AACH;;;kCAES;AACN,gBAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,mBAAO,KAAP,GAAe,KAAK,OAAL,CAAa,UAA5B;AACA,mBAAO,MAAP,GAAgB,KAAK,OAAL,CAAa,WAA7B;AACA,mBAAO,UAAP,CAAkB,IAAlB,EAAwB,SAAxB,CAAkC,KAAK,OAAvC,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,OAAO,KAA7D,EAAoE,OAAO,MAA3E;AACA,gBAAI,UAAU,OAAO,SAAP,EAAd;AACA,mBAAO,OAAP;AACH;;;gCAEO;AACJ,iBAAK,OAAL,CAAa,KAAb;AACA,mBAAO,KAAP;AACH;;;iCAEQ;AACL,iBAAK,OAAL,CAAa,IAAb;AACA,mBAAO,KAAP;AACH;;;2CAEmB;AAChB,gBAAI,WAAW,KAAK,OAAL,CAAa,QAA5B;AACA,gBAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,oBAAI,OAAO,SAAS,KAAT,CAAe,SAAS,MAAT,GAAiB,CAAhC,CAAX;AACA,oBAAI,KAAK,SAAS,GAAT,CAAa,SAAS,MAAT,GAAiB,CAA9B,CAAT;AACA,qBAAK,OAAL,CAAa,WAAb,GAA2B,EAA3B;AACH;AACJ;;;6BAEI,I,EAAM;AACP,gBAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACtB,uBAAO,KAAP;AACH;AACD,gBAAI,KAAK,OAAT,EAAkB;AACd,uBAAO,KAAP;AACH;;AAED,gBAAI,KAAK,4BAAL,IAAqC,IAAzC,EAA+C;AAC3C,qBAAK,4BAAL,CAAkC,sCAAuB,SAAzD,EACI,UADJ;AAEH;;AAED,gBAAI,CAAC,KAAK,aAAL,CAAmB,IAAnB,CAAL,EAA+B;AAC3B,uBAAO,KAAP;AACH;AACD,gBAAI,KAAK,eAAL,IAAwB,gBAAgB,MAA5C,EAAoD;AAChD,qBAAK,aAAL,CAAmB,IAAnB;AACH,aAFD,MAGK;AACD,qBAAK,cAAL,CAAoB,IAApB;AACH;AACD,mBAAO,IAAP;AACH;;;kCAES;AACN,gBAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;AACrB,qBAAK,MAAL,CAAY,OAAZ;AACH;;AAED,gBAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;AACrB,qBAAK,MAAL,CAAY,KAAZ;AACA,qBAAK,MAAL,CAAY,MAAZ;AACA,qBAAK,MAAL,CAAY,kBAAZ;AACA,qBAAK,MAAL,CAAY,OAAZ;AACA,qBAAK,MAAL,GAAc,IAAd;AACH;;AAED,gBAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACtB,qBAAK,OAAL,CAAa,mBAAb,CAAiC,YAAjC,EAA+C,KAAK,CAAL,CAAO,YAAtD;AACA,qBAAK,OAAL,GAAe,IAAf;AACH;AACJ;;;qCAEY,M,EAAQ;AACjB,gBAAI,UAAU,IAAd,EAAoB;AAChB;AACH;;AAED,gBAAI,OAAO,YAAP,IAAuB,IAA3B,EAAiC;AAC7B,qBAAK,YAAL,GAAoB,OAAO,YAA3B;AACH;;AAED,gBAAI,OAAO,OAAP,IAAkB,IAAtB,EAA4B;AACxB,qBAAK,OAAL,GAAe,OAAO,OAAtB;AACH;AACJ;;;qCAEY,G,EAAK;AACd,gBAAI,IAAI,OAAJ,CAAY,WAAZ,KAA4B,CAAC,CAAjC,EAAoC;AAChC,uBAAO,KAAP;AACH;AACD,mBAAO,IAAP;AACH;;;8CAEqB,G,EAAK;AACvB,gBAAI,MAAM,IAAI,KAAJ,CAAU,UAAV,CAAV;AACA,gBAAI,IAAI,MAAJ,GAAa,CAAb,IAAkB,IAAI,CAAJ,EAAO,MAAP,GAAgB,CAAtC,EAAyC;AACrC,uBAAO,gBAAgB,IAAvB;AACH;AACD,gBAAI,aAAa,IAAI,CAAJ,CAAjB;AACA,gBAAI,aAAa,WAAW,SAAX,CAAqB,CAArB,EAAuB,CAAvB,CAAjB;AACA,gBAAI,cAAc,KAAlB,EAAyB;AACrB,uBAAO,gBAAgB,OAAvB;AACH;AACD,mBAAO,gBAAgB,MAAvB;AACH;;;sCAEa,I,EAAM;AAChB,gBAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,uBAAO,IAAP;AACH;;AAED,iBAAK,OAAL,GAAe,IAAf;;AAEA,gBAAI,UAAU,KAAd;AACA,gBAAI,WAAW,KAAK,OAAL,CAAa,QAA5B;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACtC,oBAAI,OAAO,SAAS,KAAT,CAAe,CAAf,CAAX;AACA,oBAAI,KAAK,SAAS,GAAT,CAAa,CAAb,CAAT;AACA,oBAAI,OAAO,IAAP,IAAe,OAAO,EAA1B,EAA8B;AAC1B,8BAAU,IAAV;AACH;AACJ;;AAED,gBAAI,WAAW,OAAO,KAAK,OAAL,CAAa,WAAnC,EAAgD;AAC5C,qBAAK,OAAL,CAAa,WAAb,GAA2B,IAA3B;AACA,oBAAI,KAAK,4BAAL,IAAqC,IAAzC,EAA+C;AAC3C,yBAAK,4BAAL,CAAkC,sCAAuB,WAAzD,EACI,UADJ;AAEH;AACJ,aAND,MAOK;AACD,oBAAI,KAAK,4BAAL,IAAqC,IAAzC,EAA+C;AAC3C,yBAAK,4BAAL,CAAkC,sCAAuB,QAAzD,EACI,mBADJ;AAEH;AACJ;;AAED,iBAAK,OAAL,GAAe,KAAf;AACA,mBAAO,KAAP;AACH;;;sCAEa,I,EAAM;AAAA;;AAChB,iBAAK,OAAL,GAAe,IAAf;;AAEA,iBAAK,cAAL,GAAsB,IAAI,IAAJ,GAAW,OAAX,EAAtB;;AAEA,iBAAK,WAAL,GAAmB,WAAW,YAAI;AAC9B,uBAAK,QAAL,GAAgB,KAAhB;AACA,uBAAK,OAAL,GAAe,KAAf;AACA,oBAAI,OAAK,4BAAL,IAAqC,IAAzC,EAA+C;AAC3C,2BAAK,4BAAL,CAAkC,sCAAuB,QAAzD,EACI,gBADJ;AAEH;AACJ,aAPkB,EAOjB,KAAG,IAPc,CAAnB;;AASA,iBAAK,QAAL,GAAgB,IAAhB;AACA,iBAAK,QAAL,GAAgB,IAAhB;AACH;;;uCAEc,I,EAAM;AAAA;;AACjB,iBAAK,OAAL,GAAe,IAAf;;AAEA,iBAAK,QAAL,GAAgB,IAAhB;AACA;AACA,gBAAI,WAAW,KAAK,OAAL,CAAa,QAA5B;AACA,gBAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB;AACA,oBAAI,OAAO,SAAS,KAAT,CAAe,CAAf,CAAX;AACA,oBAAI,KAAK,SAAS,GAAT,CAAa,CAAb,CAAT;AACA,qBAAK,gBAAL,GAAwB,EAAxB;;AAEA,qBAAK,OAAL,CAAa,WAAb,GAA2B,KAAK,gBAAhC;AACH;;AAED,uBAAW,YAAI;AACX,uBAAK,OAAL,GAAe,KAAf;AACA,oBAAI,OAAK,4BAAL,IAAqC,IAAzC,EAA+C;AAC3C,2BAAK,4BAAL,CAAkC,sCAAuB,WAAzD,EACI,UADJ;AAEH;AACJ,aAND,EAME,IANF;AAOH;;;sCAEa,I,EAAM;AAChB,gBAAI,KAAK,kBAAL,IAA2B,IAA/B,EAAqC;AACjC,qBAAK,kBAAL,CAAwB,IAAxB;AACH;AACJ;;;0CAEiB,I,EAAM;AACpB,gBAAI,KAAK,kBAAL,IAA2B,IAA/B,EAAqC;AACjC,oBAAI,OAAO,EAAX;AACA,qBAAK,KAAL,GAAa,KAAK,KAAlB;AACA,qBAAK,kBAAL,CAAwB,IAAxB;AACH;AACJ;;;iCAEQ,I,EAAM,M,EAAQ,M,EAAQ;AAC3B,gBAAI,KAAK,aAAL,IAAsB,IAA1B,EAAgC;AAC5B,oBAAI,QAAQ,IAAZ;AACA,oBAAI,WAAW,MAAf;AACA,oBAAI,OAAO,IAAX;AACA,qBAAK,aAAL,CAAmB,IAAnB,EAAyB,QAAzB,EAAmC,IAAnC;AACH;AACJ;;;0CAEiB,I,EAAM;AACpB,iBAAK,SAAL,GAAiB,IAAjB;AACA,gBAAI,KAAK,sBAAL,IAA+B,IAAnC,EAAyC;AACrC,qBAAK,sBAAL;AACH;AACJ;;;uCAEc,K,EAAO;AAClB;AACA,gBAAI,KAAK,YAAL,IAAqB,CAAzB,EAA4B;AACxB,oBAAI,KAAK,kBAAL,IAA2B,IAA3B,IAAmC,KAAK,OAAL,IAAgB,IAAvD,EAA6D;AACzD,yBAAK,kBAAL,CAAwB,KAAK,OAAL,CAAa,WAArC;AACH;AACD;AACH;;AAED;AACA,gBAAI,KAAK,eAAL,KAAyB,gBAAgB,MAA7C,EAAqD;AACjD,oBAAI,CAAC,KAAK,OAAN,IAAiB,KAAK,kBAAL,IAA2B,IAA5C,IAAoD,KAAK,OAAL,IAAgB,IAAxE,EAA8E;AAC1E,yBAAK,kBAAL,CAAwB,KAAK,OAAL,CAAa,WAArC;AACH;AACJ,aAJD,MAKK,IAAI,KAAK,eAAL,KAAyB,gBAAgB,OAA7C,EAAsD;AACvD,oBAAI,CAAC,KAAK,OAAN,IAAiB,KAAK,kBAAL,IAA2B,IAA5C,IAAoD,KAAK,OAAL,IAAgB,IAAxE,EAA8E;AAC1E,wBAAI,cAAc,KAAK,QAAL,IAAiB,KAAK,OAAL,CAAa,WAAb,GAA2B,KAAK,gBAAjD,CAAlB;AACA,yBAAK,kBAAL,CAAwB,WAAxB;AACH;AACJ;AACJ;;;sCAEa,I,EAAM;AAAA;;AAChB,gBAAI,KAAK,QAAT,EAAmB;AACf,oBAAI,KAAK,GAAL,CAAS,KAAK,QAAL,GAAc,IAAd,GAAqB,IAA9B,KAAuC,IAA3C,EAAiD;AAC7C;AACH;;AAED,oBAAI,KAAK,WAAL,IAAoB,IAAxB,EAA8B;AAC1B,iCAAa,KAAK,WAAlB;AACA,yBAAK,WAAL,GAAmB,IAAnB;AACH;;AAED,qBAAK,QAAL,GAAgB,KAAhB;AACA,2BAAW,YAAI;AACX,2BAAK,OAAL,GAAe,KAAf;AACA,2BAAK,OAAL,CAAa,WAAb,GAA2B,OAAK,IAAhC;AACA,wBAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,KAAuB,OAAK,cAAtC;AACA,4BAAQ,GAAR,CAAY,WAAW,GAAvB;AACA,wBAAI,OAAK,4BAAL,IAAqC,IAAzC,EAA+C;AAC3C,+BAAK,4BAAL,CAAkC,sCAAuB,WAAzD,EACI,UADJ;AAEH;AACJ,iBATD,EASE,IATF;AAUA;AACH;AACJ;;;sCAxVoB;AACjB,mBAAO,OAAO,WAAP,IACH,OAAO,WAAP,CAAmB,eAAnB,CAAmC,2CAAnC,CADJ;AAEH;;;;EAxC8B,gB;;;;;;;;ACf5B,IAAM,sCAAe;AACxB,oBAAgB;AADQ,CAArB;;AAIA,IAAM,sDAAuB;AAChC,oBAAgB,gBADgB;AAEhC,kBAAc;AAFkB,CAA7B;;AAKA,IAAM,4DAA0B;AACnC,yBAAqB,qBADc;AAEnC,4BAAwB,wBAFW;AAGnC,kBAAc,cAHqB;AAInC,gBAAY,YAJuB;AAKnC,+BAA2B,2BALQ;AAMnC,4BAAwB;AANW,CAAhC;;;;;;;;;;;;;ICTM,O,WAAA,O;AAET,qBAAY,QAAZ,EAAsB;AAAA;;AAClB,aAAK,KAAL,GAAa,YAAY,WAAzB;AACH;;;;6BAEI,O,EAAS,K,EAAO,I,EAAM,O,EAAS,M,EAAQ,CAC3C;;;2BAEE,K,EAAO,I,EAAM,CAEf;;;4BAEG,K,EAAO,CAEV;;;2CAEkB,O,EAAS,CAC3B;;;+BAEM,CACN;;;kCAES,CAET;;;;;;;;;;;;;;;;ACzBL;;AACA;;AACA;;AACA;;AAEA;;;;AAEA;;;;AACA;;AACA;;;;;;;;;;AAEA,IAAM,cAAc,GAApB;AACA,IAAM,YAAY,KAAlB;;IAEa,a,WAAA,a;;;AAET,6BAAe;AAAA;;AAAA,kIACL,gBADK;;AAEX,cAAK,GAAL,GAAW,eAAX;;AAEA,cAAK,OAAL,GAAe,IAAf;AACA,cAAK,KAAL,GAAa,IAAb;AACA,cAAK,IAAL,GAAY,IAAZ;AACA,cAAK,OAAL,GAAe,IAAf;;AAEA,cAAK,MAAL,GAAc,IAAd;AACA,cAAK,QAAL,GAAgB,IAAhB;AACA,cAAK,MAAL,GAAc,IAAd;AACA,cAAK,OAAL,GAAe,IAAf;;AAEA,cAAK,qBAAL,GAA6B,IAA7B;;AAEA,cAAK,SAAL,GAAiB,IAAI,oBAAJ,EAAjB;;AAEA,cAAK,UAAL,GAAkB,IAAlB;AACA,cAAK,SAAL,GAAiB,IAAjB;;AAEA,cAAK,oBAAL,GAA4B,KAA5B;AACA,cAAK,iBAAL,GAAyB,KAAzB;AACA,cAAK,4BAAL,GAAoC,KAApC;AACA,cAAK,UAAL,GAAkB,KAAlB;AAxBW;AAyBd;;;;6BAOI,O,EAAS,K,EAAO,I,EAAM,O,EAAS,M,EAAQ;AACxC,iBAAK,OAAL,GAAe,OAAf;AACA,iBAAK,KAAL,GAAa,KAAb;AACA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,OAAL,GAAe,OAAf;AACA,gBAAI,CAAC,KAAK,gBAAL,EAAL,EAA8B;AAC1B,uBAAO,KAAP;AACH;;AAED,iBAAK,YAAL,CAAkB,OAAlB;AACA,mBAAO,IAAP;AACH;;;2BAEE,K,EAAO,I,EAAM;AACZ,gBAAI,UAAU,4BAAa,cAA3B,EAA2C;AACvC,qBAAK,qBAAL,GAA6B,IAA7B;AACH;AACJ;;;4BAEG,K,EAAO;AACP,gBAAI,UAAU,4BAAa,cAA3B,EAA2C;AACvC,qBAAK,qBAAL,GAA6B,IAA7B;AACH;AACJ;;;2CAEkB,O,EAAS;AACxB,iBAAK,OAAL,GAAe,OAAf;;AAEA,iBAAK,OAAL,CAAa,gBAAb,CAA8B,YAA9B,EAA4C,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAA5C,EAAiF,EAAC,MAAM,IAAP,EAAjF;AACA,iBAAK,MAAL,CAAY,EAAZ,CAAe,eAAM,MAAN,CAAa,KAA5B,EAAmC,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAnC;AACA,iBAAK,MAAL,CAAY,yBAAZ,CAAsC,KAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAlC,CAAtC;;AAEA,iBAAK,MAAL,CAAY,kBAAZ,CAA+B,OAA/B;AACH;;;+BAEM;AACH,iBAAK,MAAL,CAAY,IAAZ;AACA,iBAAK,YAAL,CAAkB,KAAK,KAAvB;AACH;;;kCAES;AACN,iBAAK,UAAL,GAAkB,IAAlB;;AAEA,iBAAK,cAAL;AACA,iBAAK,cAAL;AACA,iBAAK,gBAAL;AACA,iBAAK,gBAAL;AACH;;;2CAEkB;AACf,gBAAI,WAAK,aAAL,CAAmB,KAAK,OAAxB,KAAoC,WAAK,aAAL,CAAmB,KAAK,KAAxB,CAAxC,EAAwE;AACpE,uBAAO,KAAP;AACH;AACD,gBAAI,WAAK,aAAL,CAAmB,KAAK,IAAxB,CAAJ,EAAmC;AAC/B,uBAAO,KAAP;AACH;AACD,gBAAI,KAAK,OAAL,GAAe,CAAf,IAAoB,KAAK,OAAL,GAAe,GAAvC,EAA4C;AACxC,uBAAO,KAAP;AACH;AACD,mBAAO,IAAP;AACH;;;qCAEY,G,EAAK;AACd,iBAAK,cAAL;;AAEA,iBAAK,MAAL,GAAc,eAAM,YAAN,CAAmB,EAAC,QAAO,IAAR,EAAc,MAAK,KAAnB,EAAyB,KAAI,GAA7B,EAAnB,EAAsD;AAChE,0BAAU,KADsD;AAEhE,mCAAmB,KAF6C;AAGhE,0CAAyB;AAHuC,aAAtD,CAAd;AAKH;;;8CAEqB;AAClB,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,mBAAZ;AACH;;AAED,iBAAK,oBAAL,GAA4B,IAA5B;AACA,gBAAI,KAAK,iBAAL,IAA0B,KAAK,qBAAL,IAA8B,IAA5D,EAAkE;AAC9D,qBAAK,qBAAL,CAA2B,oCAAqB,cAAhD,EAAgE,EAAhE;AACH;AACJ;;;uCAEc,I,EAAM,M,EAAQ,M,EAAQ;AACjC,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,cAAZ;AACH;;AAED,gBAAI,KAAK,qBAAL,IAA8B,IAAlC,EAAwC;AACpC;AACH;;AAED,gBAAI,KAAK,oBAAT,EAA+B;AAC3B,qBAAK,qBAAL,CAA2B,oCAAqB,YAAhD,EACI,uCAAwB,YAD5B;AAEH,aAHD,MAIK;AACD,qBAAK,qBAAL,CAA2B,oCAAqB,YAAhD,EACI,uCAAwB,mBAD5B;AAEH;AACJ;;;gDAEuB,I,EAAM;AAC1B,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,mBAAZ;AACH;;AAED,gBAAI,KAAK,qBAAL,IAA8B,IAAlC,EAAwC;AACpC,qBAAK,qBAAL,CAA2B,oCAAqB,YAAhD,EACI,uCAAwB,sBAD5B;AAEH;AACJ;;;yCAEgB;AACb,gBAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;AACrB,qBAAK,MAAL,CAAY,KAAZ;AACA,qBAAK,MAAL,CAAY,MAAZ;AACA,qBAAK,MAAL,CAAY,kBAAZ;AACA,qBAAK,MAAL,CAAY,OAAZ;AACA,qBAAK,MAAL,GAAc,IAAd;AACH;;AAED,gBAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AACtB,qBAAK,OAAL,GAAe,IAAf;AACH;AACJ;;;qCAEY,G,EAAK;AACd,iBAAK,MAAL,GAAc,IAAI,SAAJ,CAAc,GAAd,CAAd;AACA,iBAAK,MAAL,CAAY,MAAZ,GAAqB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAArB;AACA,iBAAK,MAAL,CAAY,SAAZ,GAAwB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAxB;AACA,iBAAK,MAAL,CAAY,OAAZ,GAAsB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAtB;AACA,iBAAK,MAAL,CAAY,OAAZ,GAAsB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAtB;AACH;;;wCAEe;AACZ,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,gBAAZ;AACH;;AAED,iBAAK,cAAL;AACH;;;qCAEY,C,EAAG,CAEf;;;uCAEc,C,EAAG;AACd,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,iBAAZ;AACH;;AAED,gBAAI,KAAK,qBAAL,IAA8B,IAAlC,EAAwC;AACpC,qBAAK,qBAAL,CAA2B,oCAAqB,YAAhD,EACI,uCAAwB,UAD5B;AAEH;AACJ;;;uCAEc,C,EAAG;AACd,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,iBAAZ;AACH;AACJ;;;yCAEgB;AACb,iBAAK,MAAL,CAAY,KAAZ;AACA,iBAAK,MAAL,GAAc,IAAd;AACH;;;yCAEgB;AACb,gBAAI,KAAK,QAAT,EAAmB;AACf,qBAAK,QAAL,CAAc,KAAd;AACH;;AAED,iBAAK,QAAL,GAAgB,4BAAS;AACrB,sBAAK,KADgB;AAErB,4BAAW,IAFU;AAGrB,yBAAQ,EAHa;AAIrB,2BAAU,KAAK,wBAAL,CAA8B,IAA9B,CAAmC,IAAnC;AAJW,aAAT,CAAhB;AAMA,iBAAK,UAAL,GAAkB,WAAW,KAAK,kCAAL,CAAwC,IAAxC,CAA6C,IAA7C,CAAX,EAA8D,KAA9D,CAAlB;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CAAnB,EACI,KAAK,yBAAL,CAA+B,IAA/B,CAAoC,IAApC,CADJ;AAEH;;;6DAEoC;AACjC,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,iCAAZ;AACH;;AAED,iBAAK,4BAAL,GAAoC,IAApC;;AAEA,gBAAI,KAAK,qBAAL,IAA8B,IAAlC,EAAwC;AACpC,qBAAK,qBAAL,CAA2B,oCAAqB,YAAhD,EACI,uCAAwB,yBAD5B;AAEH;AACJ;;;iDAEwB;AACrB,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,0BAAZ;AACH;;AAED,gBAAI,KAAK,4BAAT,EAAuC;AACnC;AACH;;AAED,yBAAa,KAAK,UAAlB;;AAEA,iBAAK,iBAAL,GAAyB,IAAzB;AACA,gBAAI,KAAK,oBAAL,IAA6B,KAAK,qBAAL,IAA8B,IAA/D,EAAqE;AACjE,qBAAK,qBAAL,CAA2B,oCAAqB,cAAhD,EAAgE,EAAhE;AACH;;AAED,iBAAK,QAAL,CAAc,KAAd;AACA,iBAAK,SAAL;AACH;;;kDAEyB,G,EAAK,c,EAAgB;AAC3C,gBAAI,SAAJ,EAAe;AACX,wBAAQ,GAAR,CAAY,6BAAZ;AACH;;AAED,yBAAa,KAAK,UAAlB;;AAEA,gBAAI,KAAK,qBAAL,IAA8B,IAAlC,EAAwC;AACpC,qBAAK,qBAAL,CAA2B,oCAAqB,YAAhD,EACI,uCAAwB,sBAD5B;AAEH;AACJ;;;iDAEwB,O,EAAS,U,EAAY,c,EAAgB,gB,EAAkB;AAC5E,gBAAI,WAAW,QAAQ,QAAQ,MAAR,GAAiB,CAAzB,EAA4B,MAA3C,CAD4E,CACzB;AACnD,gBAAI,QAAQ,IAAI,UAAJ,CAAe,QAAf,CAAZ,CAF4E,CAEtC;AACtC,iBAAK,SAAL,CAAe,IAAf,CAAoB,KAApB;AACH;;;2CAEkB;AACf,iBAAK,QAAL,CAAc,KAAd;AACA,iBAAK,QAAL,GAAgB,IAAhB;AACH;;;oCAEW;AACR,gBAAI,KAAK,UAAT,EAAqB;AACjB;AACH;;AAED,gBAAI,KAAK,SAAL,CAAe,MAAf,GAAwB,WAA5B,EAAyC;AACrC,qBAAK,SAAL,GAAiB,WAAW,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAX,EAAsC,CAAtC,CAAjB;AACH,aAFD,MAGK;AACD,oBAAI,WAAW,KAAK,SAAL,CAAe,SAAf,CAAyB,WAAzB,CAAf;;AAEA,oBAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,uBAAO,IAAP,CAAY,IAAI,UAAJ,CAAe,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,CAAf,CAAZ;AACA,oBAAI,cAAc,KAAK,IAAL,CAAU,KAAV,CAAgB,EAAhB,CAAlB;AACA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,MAAhC,EAAwC,GAAxC,EAA6C;AACzC,2BAAO,IAAP,CAAY,IAAI,UAAJ,CAAe,CAAC,YAAY,CAAZ,EAAe,UAAf,EAAD,CAAf,CAAZ;AACH;AACD,uBAAO,IAAP,CAAY,IAAI,UAAJ,CAAe,CAAC,SAAS,KAAK,OAAd,CAAD,CAAf,CAAZ;AACA,uBAAO,IAAP,CAAY,IAAI,UAAJ,CAAe,CAAC,KAAK,KAAL,CAAW,cAAY,GAAvB,CAAD,CAAf,CAAZ;AACA,uBAAO,IAAP,CAAY,IAAI,UAAJ,CAAe,CAAC,cAAY,GAAb,CAAf,CAAZ;AACA,uBAAO,IAAP,CAAY,QAAZ;;AAEA,oBAAI,WAAW,IAAI,YAAY,MAAhB,GAAyB,CAAzB,GAA6B,WAA5C;AACA,oBAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;AACrB,yBAAK,MAAL,CAAY,IAAZ,CAAiB,OAAO,SAAP,CAAiB,QAAjB,CAAjB;AACH;;AAED,qBAAK,SAAL;AACH;AACJ;;;2CAEkB;AACf,yBAAa,KAAK,SAAlB;AACH;;;sCAxRoB;AACjB,mBAAO,OAAO,SAAP,IAAoB,WAApB,IAAmC,uBAAS,OAAT,EAAnC,IAAyD,OAAO,WAAhE,IACH,OAAO,WAAP,CAAmB,eAAnB,CAAmC,2CAAnC,CADJ;AAEH;;;;EAhC8B,gB","file":"gmedia.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.flvjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (process,global){\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof _dereq_ === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":3}],2:[function(_dereq_,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(_dereq_,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            'function(require,module,exports){' + fn + '(self); }',\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        'function(require,module,exports){' +\n            // try to call default if defined to also support babel esmodule exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);' +\n        '}',\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n\n},{}],5:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createDefaultConfig = createDefaultConfig;\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar defaultConfig = exports.defaultConfig = {\n    enableWorker: false,\n    enableStashBuffer: true,\n    stashInitialSize: undefined,\n\n    isLive: false,\n\n    lazyLoad: true,\n    lazyLoadMaxDuration: 3 * 60,\n    lazyLoadRecoverDuration: 30,\n    deferLoadAfterSourceOpen: true,\n\n    // autoCleanupSourceBuffer: default as false, leave unspecified\n    autoCleanupMaxBackwardDuration: 3 * 60,\n    autoCleanupMinBackwardDuration: 2 * 60,\n\n    statisticsInfoReportInterval: 600,\n\n    fixAudioTimestampGap: true,\n\n    accurateSeek: false,\n    seekType: 'range', // [range, param, custom]\n    seekParamStart: 'bstart',\n    seekParamEnd: 'bend',\n    rangeLoadZeroStart: false,\n    customSeekHandler: undefined,\n    reuseRedirectedURL: false,\n    // referrerPolicy: leave as unspecified\n\n    headers: undefined,\n    customLoader: undefined\n};\n\nfunction createDefaultConfig() {\n    return Object.assign({}, defaultConfig);\n}\n\n},{}],6:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _ioController = _dereq_('../io/io-controller.js');\n\nvar _ioController2 = _interopRequireDefault(_ioController);\n\nvar _config = _dereq_('../config.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Features = function () {\n    function Features() {\n        _classCallCheck(this, Features);\n    }\n\n    _createClass(Features, null, [{\n        key: 'supportMSEH264Playback',\n        value: function supportMSEH264Playback() {\n            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n        }\n    }, {\n        key: 'supportNetworkStreamIO',\n        value: function supportNetworkStreamIO() {\n            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());\n            var loaderType = ioctl.loaderType;\n            ioctl.destroy();\n            return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n        }\n    }, {\n        key: 'getNetworkLoaderTypeName',\n        value: function getNetworkLoaderTypeName() {\n            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());\n            var loaderType = ioctl.loaderType;\n            ioctl.destroy();\n            return loaderType;\n        }\n    }, {\n        key: 'supportNativeMediaPlayback',\n        value: function supportNativeMediaPlayback(mimeType) {\n            if (Features.videoElement == undefined) {\n                Features.videoElement = window.document.createElement('video');\n            }\n            var canPlay = Features.videoElement.canPlayType(mimeType);\n            return canPlay === 'probably' || canPlay == 'maybe';\n        }\n    }, {\n        key: 'getFeatureList',\n        value: function getFeatureList() {\n            var features = {\n                mseFlvPlayback: false,\n                mseLiveFlvPlayback: false,\n                networkStreamIO: false,\n                networkLoaderName: '',\n                nativeMP4H264Playback: false,\n                nativeWebmVP8Playback: false,\n                nativeWebmVP9Playback: false\n            };\n\n            features.mseFlvPlayback = Features.supportMSEH264Playback();\n            features.networkStreamIO = Features.supportNetworkStreamIO();\n            features.networkLoaderName = Features.getNetworkLoaderTypeName();\n            features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n            features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n            features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n            features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n\n            return features;\n        }\n    }]);\n\n    return Features;\n}();\n\nexports.default = Features;\n\n},{\"../config.js\":5,\"../io/io-controller.js\":23}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MediaInfo = function () {\n    function MediaInfo() {\n        _classCallCheck(this, MediaInfo);\n\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.refFrames = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    _createClass(MediaInfo, [{\n        key: \"isComplete\",\n        value: function isComplete() {\n            var audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;\n\n            var videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.refFrames != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;\n\n            // keyframesIndex may not be present\n            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;\n        }\n    }, {\n        key: \"isSeekable\",\n        value: function isSeekable() {\n            return this.hasKeyframesIndex === true;\n        }\n    }, {\n        key: \"getNearestKeyframe\",\n        value: function getNearestKeyframe(milliseconds) {\n            if (this.keyframesIndex == null) {\n                return null;\n            }\n\n            var table = this.keyframesIndex;\n            var keyframeIdx = this._search(table.times, milliseconds);\n\n            return {\n                index: keyframeIdx,\n                milliseconds: table.times[keyframeIdx],\n                fileposition: table.filepositions[keyframeIdx]\n            };\n        }\n    }, {\n        key: \"_search\",\n        value: function _search(list, value) {\n            var idx = 0;\n\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (value < list[0]) {\n                idx = 0;\n                lbound = ubound + 1; // skip search\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || value >= list[mid] && value < list[mid + 1]) {\n                    idx = mid;\n                    break;\n                } else if (list[mid] < value) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n\n            return idx;\n        }\n    }]);\n\n    return MediaInfo;\n}();\n\nexports.default = MediaInfo;\n\n},{}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n// Represents an media sample (audio / video)\nvar SampleInfo = exports.SampleInfo = function SampleInfo(dts, pts, duration, originalDts, isSync) {\n    _classCallCheck(this, SampleInfo);\n\n    this.dts = dts;\n    this.pts = pts;\n    this.duration = duration;\n    this.originalDts = originalDts;\n    this.isSyncPoint = isSync;\n    this.fileposition = null;\n};\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\n\n\nvar MediaSegmentInfo = exports.MediaSegmentInfo = function () {\n    function MediaSegmentInfo() {\n        _classCallCheck(this, MediaSegmentInfo);\n\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    _createClass(MediaSegmentInfo, [{\n        key: \"appendSyncPoint\",\n        value: function appendSyncPoint(sampleInfo) {\n            // also called Random Access Point\n            sampleInfo.isSyncPoint = true;\n            this.syncPoints.push(sampleInfo);\n        }\n    }]);\n\n    return MediaSegmentInfo;\n}();\n\n// Ordered list for recording video IDR frames, sorted by originalDts\n\n\nvar IDRSampleList = exports.IDRSampleList = function () {\n    function IDRSampleList() {\n        _classCallCheck(this, IDRSampleList);\n\n        this._list = [];\n    }\n\n    _createClass(IDRSampleList, [{\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n        }\n    }, {\n        key: \"appendArray\",\n        value: function appendArray(syncPoints) {\n            var list = this._list;\n\n            if (syncPoints.length === 0) {\n                return;\n            }\n\n            if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n                this.clear();\n            }\n\n            Array.prototype.push.apply(list, syncPoints);\n        }\n    }, {\n        key: \"getLastSyncPointBeforeDts\",\n        value: function getLastSyncPointBeforeDts(dts) {\n            if (this._list.length == 0) {\n                return null;\n            }\n\n            var list = this._list;\n            var idx = 0;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (dts < list[0].dts) {\n                idx = 0;\n                lbound = ubound + 1;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || dts >= list[mid].dts && dts < list[mid + 1].dts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].dts < dts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return this._list[idx];\n        }\n    }]);\n\n    return IDRSampleList;\n}();\n\n// Data structure for recording information of media segments in single track.\n\n\nvar MediaSegmentInfoList = exports.MediaSegmentInfoList = function () {\n    function MediaSegmentInfoList(type) {\n        _classCallCheck(this, MediaSegmentInfoList);\n\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    _createClass(MediaSegmentInfoList, [{\n        key: \"isEmpty\",\n        value: function isEmpty() {\n            return this._list.length === 0;\n        }\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n            this._lastAppendLocation = -1;\n        }\n    }, {\n        key: \"_searchNearestSegmentBefore\",\n        value: function _searchNearestSegmentBefore(originalBeginDts) {\n            var list = this._list;\n            if (list.length === 0) {\n                return -2;\n            }\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            var idx = 0;\n\n            if (originalBeginDts < list[0].originalBeginDts) {\n                idx = -1;\n                return idx;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || originalBeginDts > list[mid].lastSample.originalDts && originalBeginDts < list[mid + 1].originalBeginDts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].originalBeginDts < originalBeginDts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: \"_searchNearestSegmentAfter\",\n        value: function _searchNearestSegmentAfter(originalBeginDts) {\n            return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n        }\n    }, {\n        key: \"append\",\n        value: function append(mediaSegmentInfo) {\n            var list = this._list;\n            var msi = mediaSegmentInfo;\n            var lastAppendIdx = this._lastAppendLocation;\n            var insertIdx = 0;\n\n            if (lastAppendIdx !== -1 && lastAppendIdx < list.length && msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts && (lastAppendIdx === list.length - 1 || lastAppendIdx < list.length - 1 && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts)) {\n                insertIdx = lastAppendIdx + 1; // use cached location idx\n            } else {\n                if (list.length > 0) {\n                    insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n                }\n            }\n\n            this._lastAppendLocation = insertIdx;\n            this._list.splice(insertIdx, 0, msi);\n        }\n    }, {\n        key: \"getLastSegmentBefore\",\n        value: function getLastSegmentBefore(originalBeginDts) {\n            var idx = this._searchNearestSegmentBefore(originalBeginDts);\n            if (idx >= 0) {\n                return this._list[idx];\n            } else {\n                // -1\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSampleBefore\",\n        value: function getLastSampleBefore(originalBeginDts) {\n            var segment = this.getLastSegmentBefore(originalBeginDts);\n            if (segment != null) {\n                return segment.lastSample;\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSyncPointBefore\",\n        value: function getLastSyncPointBefore(originalBeginDts) {\n            var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n            var syncPoints = this._list[segmentIdx].syncPoints;\n            while (syncPoints.length === 0 && segmentIdx > 0) {\n                segmentIdx--;\n                syncPoints = this._list[segmentIdx].syncPoints;\n            }\n            if (syncPoints.length > 0) {\n                return syncPoints[syncPoints.length - 1];\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"type\",\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: \"length\",\n        get: function get() {\n            return this._list.length;\n        }\n    }]);\n\n    return MediaSegmentInfoList;\n}();\n\n},{}],9:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mseEvents = _dereq_('./mse-events.js');\n\nvar _mseEvents2 = _interopRequireDefault(_mseEvents);\n\nvar _mediaSegmentInfo = _dereq_('./media-segment-info.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Media Source Extensions controller\nvar MSEController = function () {\n    function MSEController(config) {\n        _classCallCheck(this, MSEController);\n\n        this.TAG = 'MSEController';\n\n        this._config = config;\n        this._emitter = new _events2.default();\n\n        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {\n            // For live stream, do auto cleanup by default\n            this._config.autoCleanupSourceBuffer = true;\n        }\n\n        this.e = {\n            onSourceOpen: this._onSourceOpen.bind(this),\n            onSourceEnded: this._onSourceEnded.bind(this),\n            onSourceClose: this._onSourceClose.bind(this),\n            onSourceBufferError: this._onSourceBufferError.bind(this),\n            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)\n        };\n\n        this._mediaSource = null;\n        this._mediaSourceObjectURL = null;\n        this._mediaElement = null;\n\n        this._isBufferFull = false;\n        this._hasPendingEos = false;\n\n        this._requireSetMediaDuration = false;\n        this._pendingMediaDuration = 0;\n\n        this._pendingSourceBufferInit = [];\n        this._mimeTypes = {\n            video: null,\n            audio: null\n        };\n        this._sourceBuffers = {\n            video: null,\n            audio: null\n        };\n        this._lastInitSegments = {\n            video: null,\n            audio: null\n        };\n        this._pendingSegments = {\n            video: [],\n            audio: []\n        };\n        this._pendingRemoveRanges = {\n            video: [],\n            audio: []\n        };\n        this._idrList = new _mediaSegmentInfo.IDRSampleList();\n    }\n\n    _createClass(MSEController, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._mediaElement || this._mediaSource) {\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            if (this._mediaSource) {\n                throw new _exception.IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');\n            }\n            var ms = this._mediaSource = new window.MediaSource();\n            ms.addEventListener('sourceopen', this.e.onSourceOpen);\n            ms.addEventListener('sourceended', this.e.onSourceEnded);\n            ms.addEventListener('sourceclose', this.e.onSourceClose);\n\n            this._mediaElement = mediaElement;\n            this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);\n            mediaElement.src = this._mediaSourceObjectURL;\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaSource) {\n                var ms = this._mediaSource;\n                for (var type in this._sourceBuffers) {\n                    // pending segments should be discard\n                    var ps = this._pendingSegments[type];\n                    ps.splice(0, ps.length);\n                    this._pendingSegments[type] = null;\n                    this._pendingRemoveRanges[type] = null;\n                    this._lastInitSegments[type] = null;\n\n                    // remove all sourcebuffers\n                    var sb = this._sourceBuffers[type];\n                    if (sb) {\n                        if (ms.readyState !== 'closed') {\n                            // ms edge can throw an error: Unexpected call to method or property access\n                            try {\n                                ms.removeSourceBuffer(sb);\n                            } catch (error) {\n                                _logger2.default.e(this.TAG, error.message);\n                            }\n                            sb.removeEventListener('error', this.e.onSourceBufferError);\n                            sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                        }\n                        this._mimeTypes[type] = null;\n                        this._sourceBuffers[type] = null;\n                    }\n                }\n                if (ms.readyState === 'open') {\n                    try {\n                        ms.endOfStream();\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                    }\n                }\n                ms.removeEventListener('sourceopen', this.e.onSourceOpen);\n                ms.removeEventListener('sourceended', this.e.onSourceEnded);\n                ms.removeEventListener('sourceclose', this.e.onSourceClose);\n                this._pendingSourceBufferInit = [];\n                this._isBufferFull = false;\n                this._idrList.clear();\n                this._mediaSource = null;\n            }\n\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n                this._mediaElement = null;\n            }\n            if (this._mediaSourceObjectURL) {\n                window.URL.revokeObjectURL(this._mediaSourceObjectURL);\n                this._mediaSourceObjectURL = null;\n            }\n        }\n    }, {\n        key: 'appendInitSegment',\n        value: function appendInitSegment(initSegment, deferred) {\n            if (!this._mediaSource || this._mediaSource.readyState !== 'open') {\n                // sourcebuffer creation requires mediaSource.readyState === 'open'\n                // so we defer the sourcebuffer creation, until sourceopen event triggered\n                this._pendingSourceBufferInit.push(initSegment);\n                // make sure that this InitSegment is in the front of pending segments queue\n                this._pendingSegments[initSegment.type].push(initSegment);\n                return;\n            }\n\n            var is = initSegment;\n            var mimeType = '' + is.container;\n            if (is.codec && is.codec.length > 0) {\n                mimeType += ';codecs=' + is.codec;\n            }\n\n            var firstInitSegment = false;\n\n            _logger2.default.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);\n            this._lastInitSegments[is.type] = is;\n\n            if (mimeType !== this._mimeTypes[is.type]) {\n                if (!this._mimeTypes[is.type]) {\n                    // empty, first chance create sourcebuffer\n                    firstInitSegment = true;\n                    try {\n                        var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);\n                        sb.addEventListener('error', this.e.onSourceBufferError);\n                        sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                        this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });\n                        return;\n                    }\n                } else {\n                    _logger2.default.v(this.TAG, 'Notice: ' + is.type + ' mimeType changed, origin: ' + this._mimeTypes[is.type] + ', target: ' + mimeType);\n                }\n                this._mimeTypes[is.type] = mimeType;\n            }\n\n            if (!deferred) {\n                // deferred means this InitSegment has been pushed to pendingSegments queue\n                this._pendingSegments[is.type].push(is);\n            }\n            if (!firstInitSegment) {\n                // append immediately only if init segment in subsequence\n                if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {\n                    this._doAppendSegments();\n                }\n            }\n            if (_browser2.default.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {\n                // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN\n                // Manually correct MediaSource.duration to make progress bar seekable, and report right duration\n                this._requireSetMediaDuration = true;\n                this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds\n                this._updateMediaSourceDuration();\n            }\n        }\n    }, {\n        key: 'appendMediaSegment',\n        value: function appendMediaSegment(mediaSegment) {\n            var ms = mediaSegment;\n            this._pendingSegments[ms.type].push(ms);\n\n            if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {\n                this._doCleanupSourceBuffer();\n            }\n\n            var sb = this._sourceBuffers[ms.type];\n            if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {\n                this._doAppendSegments();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(seconds) {\n            // remove all appended buffers\n            for (var type in this._sourceBuffers) {\n                if (!this._sourceBuffers[type]) {\n                    continue;\n                }\n\n                // abort current buffer append algorithm\n                var sb = this._sourceBuffers[type];\n                if (this._mediaSource.readyState === 'open') {\n                    try {\n                        // If range removal algorithm is running, InvalidStateError will be throwed\n                        // Ignore it.\n                        sb.abort();\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                    }\n                }\n\n                // IDRList should be clear\n                this._idrList.clear();\n\n                // pending segments should be discard\n                var ps = this._pendingSegments[type];\n                ps.splice(0, ps.length);\n\n                if (this._mediaSource.readyState === 'closed') {\n                    // Parent MediaSource object has been detached from HTMLMediaElement\n                    continue;\n                }\n\n                // record ranges to be remove from SourceBuffer\n                for (var i = 0; i < sb.buffered.length; i++) {\n                    var start = sb.buffered.start(i);\n                    var end = sb.buffered.end(i);\n                    this._pendingRemoveRanges[type].push({ start: start, end: end });\n                }\n\n                // if sb is not updating, let's remove ranges now!\n                if (!sb.updating) {\n                    this._doRemoveRanges();\n                }\n\n                // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call\n                // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.\n                // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230\n                if (_browser2.default.safari) {\n                    var lastInitSegment = this._lastInitSegments[type];\n                    if (lastInitSegment) {\n                        this._pendingSegments[type].push(lastInitSegment);\n                        if (!sb.updating) {\n                            this._doAppendSegments();\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'endOfStream',\n        value: function endOfStream() {\n            var ms = this._mediaSource;\n            var sb = this._sourceBuffers;\n            if (!ms || ms.readyState !== 'open') {\n                if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {\n                    // If MediaSource hasn't turned into open state, and there're pending segments\n                    // Mark pending endOfStream, defer call until all pending segments appended complete\n                    this._hasPendingEos = true;\n                }\n                return;\n            }\n            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n                // If any sourcebuffer is updating, defer endOfStream operation\n                // See _onSourceBufferUpdateEnd()\n                this._hasPendingEos = true;\n            } else {\n                this._hasPendingEos = false;\n                // Notify media data loading complete\n                // This is helpful for correcting total duration to match last media segment\n                // Otherwise MediaElement's ended event may not be triggered\n                ms.endOfStream();\n            }\n        }\n    }, {\n        key: 'getNearestKeyframe',\n        value: function getNearestKeyframe(dts) {\n            return this._idrList.getLastSyncPointBeforeDts(dts);\n        }\n    }, {\n        key: '_needCleanupSourceBuffer',\n        value: function _needCleanupSourceBuffer() {\n            if (!this._config.autoCleanupSourceBuffer) {\n                return false;\n            }\n\n            var currentTime = this._mediaElement.currentTime;\n\n            for (var type in this._sourceBuffers) {\n                var sb = this._sourceBuffers[type];\n                if (sb) {\n                    var buffered = sb.buffered;\n                    if (buffered.length >= 1) {\n                        if (currentTime - buffered.start(0) >= this._config.autoCleanupMaxBackwardDuration) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: '_doCleanupSourceBuffer',\n        value: function _doCleanupSourceBuffer() {\n            var currentTime = this._mediaElement.currentTime;\n\n            for (var type in this._sourceBuffers) {\n                var sb = this._sourceBuffers[type];\n                if (sb) {\n                    var buffered = sb.buffered;\n                    var doRemove = false;\n\n                    for (var i = 0; i < buffered.length; i++) {\n                        var start = buffered.start(i);\n                        var end = buffered.end(i);\n\n                        if (start <= currentTime && currentTime < end + 3) {\n                            // padding 3 seconds\n                            if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {\n                                doRemove = true;\n                                var removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;\n                                this._pendingRemoveRanges[type].push({ start: start, end: removeEnd });\n                            }\n                        } else if (end < currentTime) {\n                            doRemove = true;\n                            this._pendingRemoveRanges[type].push({ start: start, end: end });\n                        }\n                    }\n\n                    if (doRemove && !sb.updating) {\n                        this._doRemoveRanges();\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_updateMediaSourceDuration',\n        value: function _updateMediaSourceDuration() {\n            var sb = this._sourceBuffers;\n            if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {\n                return;\n            }\n            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n                return;\n            }\n\n            var current = this._mediaSource.duration;\n            var target = this._pendingMediaDuration;\n\n            if (target > 0 && (isNaN(current) || target > current)) {\n                _logger2.default.v(this.TAG, 'Update MediaSource duration from ' + current + ' to ' + target);\n                this._mediaSource.duration = target;\n            }\n\n            this._requireSetMediaDuration = false;\n            this._pendingMediaDuration = 0;\n        }\n    }, {\n        key: '_doRemoveRanges',\n        value: function _doRemoveRanges() {\n            for (var type in this._pendingRemoveRanges) {\n                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                    continue;\n                }\n                var sb = this._sourceBuffers[type];\n                var ranges = this._pendingRemoveRanges[type];\n                while (ranges.length && !sb.updating) {\n                    var range = ranges.shift();\n                    sb.remove(range.start, range.end);\n                }\n            }\n        }\n    }, {\n        key: '_doAppendSegments',\n        value: function _doAppendSegments() {\n            var pendingSegments = this._pendingSegments;\n\n            for (var type in pendingSegments) {\n                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                    continue;\n                }\n\n                if (pendingSegments[type].length > 0) {\n                    var segment = pendingSegments[type].shift();\n\n                    if (segment.timestampOffset) {\n                        // For MPEG audio stream in MSE, if unbuffered-seeking occurred\n                        // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                        var currentOffset = this._sourceBuffers[type].timestampOffset;\n                        var targetOffset = segment.timestampOffset / 1000; // in seconds\n\n                        var delta = Math.abs(currentOffset - targetOffset);\n                        if (delta > 0.1) {\n                            // If time delta > 100ms\n                            _logger2.default.v(this.TAG, 'Update MPEG audio timestampOffset from ' + currentOffset + ' to ' + targetOffset);\n                            this._sourceBuffers[type].timestampOffset = targetOffset;\n                        }\n                        delete segment.timestampOffset;\n                    }\n\n                    if (!segment.data || segment.data.byteLength === 0) {\n                        // Ignore empty buffer\n                        continue;\n                    }\n\n                    try {\n                        this._sourceBuffers[type].appendBuffer(segment.data);\n                        this._isBufferFull = false;\n                        if (type === 'video' && segment.hasOwnProperty('info')) {\n                            this._idrList.appendArray(segment.info.syncPoints);\n                        }\n                    } catch (error) {\n                        this._pendingSegments[type].unshift(segment);\n                        if (error.code === 22) {\n                            // QuotaExceededError\n                            /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full\r\n                             * Currently we can only do lazy-load to avoid SourceBuffer become scattered.\r\n                             * SourceBuffer eviction policy may be changed in future version of FireFox.\r\n                             *\r\n                             * Related issues:\r\n                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885\r\n                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023\r\n                             */\n\n                            // report buffer full, abort network IO\n                            if (!this._isBufferFull) {\n                                this._emitter.emit(_mseEvents2.default.BUFFER_FULL);\n                            }\n                            this._isBufferFull = true;\n                        } else {\n                            _logger2.default.e(this.TAG, error.message);\n                            this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_onSourceOpen',\n        value: function _onSourceOpen() {\n            _logger2.default.v(this.TAG, 'MediaSource onSourceOpen');\n            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n            // deferred sourcebuffer creation / initialization\n            if (this._pendingSourceBufferInit.length > 0) {\n                var pendings = this._pendingSourceBufferInit;\n                while (pendings.length) {\n                    var segment = pendings.shift();\n                    this.appendInitSegment(segment, true);\n                }\n            }\n            // there may be some pending media segments, append them\n            if (this._hasPendingSegments()) {\n                this._doAppendSegments();\n            }\n            this._emitter.emit(_mseEvents2.default.SOURCE_OPEN);\n        }\n    }, {\n        key: '_onSourceEnded',\n        value: function _onSourceEnded() {\n            // fired on endOfStream\n            _logger2.default.v(this.TAG, 'MediaSource onSourceEnded');\n            this._emitter.emit(_mseEvents2.default.SOURCE_END, 'MediaSource onSourceEnded');\n        }\n    }, {\n        key: '_onSourceClose',\n        value: function _onSourceClose() {\n            // fired on detaching from media element\n            _logger2.default.v(this.TAG, 'MediaSource onSourceClose');\n            if (this._mediaSource && this.e != null) {\n                this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n                this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);\n                this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);\n            }\n        }\n    }, {\n        key: '_hasPendingSegments',\n        value: function _hasPendingSegments() {\n            var ps = this._pendingSegments;\n            return ps.video.length > 0 || ps.audio.length > 0;\n        }\n    }, {\n        key: '_hasPendingRemoveRanges',\n        value: function _hasPendingRemoveRanges() {\n            var prr = this._pendingRemoveRanges;\n            return prr.video.length > 0 || prr.audio.length > 0;\n        }\n    }, {\n        key: '_onSourceBufferUpdateEnd',\n        value: function _onSourceBufferUpdateEnd() {\n            if (this._requireSetMediaDuration) {\n                this._updateMediaSourceDuration();\n            } else if (this._hasPendingRemoveRanges()) {\n                this._doRemoveRanges();\n            } else if (this._hasPendingSegments()) {\n                this._doAppendSegments();\n            } else if (this._hasPendingEos) {\n                this.endOfStream();\n            }\n            this._emitter.emit(_mseEvents2.default.UPDATE_END);\n        }\n    }, {\n        key: '_onSourceBufferError',\n        value: function _onSourceBufferError(e) {\n            _logger2.default.e(this.TAG, 'SourceBuffer Error: ' + e);\n            // this error might not always be fatal, just ignore it\n        }\n    }]);\n\n    return MSEController;\n}();\n\nexports.default = MSEController;\n\n},{\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./media-segment-info.js\":8,\"./mse-events.js\":10,\"events\":2}],10:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MSEEvents = {\n  ERROR: 'error',\n  SOURCE_OPEN: 'source_open',\n  UPDATE_END: 'update_end',\n  BUFFER_FULL: 'buffer_full',\n  SOURCE_END: 'source_end'\n};\n\nexports.default = MSEEvents;\n\n},{}],11:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loggingControl = _dereq_('../utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _transmuxingController = _dereq_('./transmuxing-controller.js');\n\nvar _transmuxingController2 = _interopRequireDefault(_transmuxingController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _transmuxingWorker = _dereq_('./transmuxing-worker.js');\n\nvar _transmuxingWorker2 = _interopRequireDefault(_transmuxingWorker);\n\nvar _mediaInfo = _dereq_('./media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Transmuxer = function () {\n    function Transmuxer(mediaDataSource, config) {\n        _classCallCheck(this, Transmuxer);\n\n        this.TAG = 'Transmuxer';\n        this._emitter = new _events2.default();\n\n        if (config.enableWorker && typeof Worker !== 'undefined') {\n            try {\n                var work = _dereq_('webworkify');\n                this._worker = work(_transmuxingWorker2.default);\n                this._workerDestroying = false;\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker.postMessage({ cmd: 'init', param: [mediaDataSource, config] });\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                _loggingControl2.default.registerListener(this.e.onLoggingConfigChanged);\n                this._worker.postMessage({ cmd: 'logging_config', param: _loggingControl2.default.getConfig() });\n            } catch (error) {\n                _logger2.default.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n                this._worker = null;\n                this._controller = new _transmuxingController2.default(mediaDataSource, config);\n            }\n        } else {\n            this._controller = new _transmuxingController2.default(mediaDataSource, config);\n        }\n\n        if (this._controller) {\n            var ctl = this._controller;\n            ctl.on(_transmuxingEvents2.default.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(_transmuxingEvents2.default.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(_transmuxingEvents2.default.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(_transmuxingEvents2.default.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(_transmuxingEvents2.default.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(_transmuxingEvents2.default.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(_transmuxingEvents2.default.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n            ctl.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n            ctl.on(_transmuxingEvents2.default.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n            ctl.on(_transmuxingEvents2.default.STREAM_TIME, this._onStreamTime.bind(this));\n        }\n    }\n\n    _createClass(Transmuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._worker) {\n                if (!this._workerDestroying) {\n                    this._workerDestroying = true;\n                    this._worker.postMessage({ cmd: 'destroy' });\n                    _loggingControl2.default.removeListener(this.e.onLoggingConfigChanged);\n                    this.e = null;\n                }\n            } else {\n                this._controller.destroy();\n                this._controller = null;\n            }\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'hasWorker',\n        value: function hasWorker() {\n            return this._worker != null;\n        }\n    }, {\n        key: 'open',\n        value: function open() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'start' });\n            } else {\n                this._controller.start();\n            }\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'stop' });\n            } else {\n                this._controller.stop();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(milliseconds) {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'seek', param: milliseconds });\n            } else {\n                this._controller.seek(milliseconds);\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'pause' });\n            } else {\n                this._controller.pause();\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'resume' });\n            } else {\n                this._controller.resume();\n            }\n        }\n    }, {\n        key: '_onInitSegment',\n        value: function _onInitSegment(type, initSegment) {\n            var _this = this;\n\n            // do async invoke\n            Promise.resolve().then(function () {\n                _this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);\n            });\n        }\n    }, {\n        key: '_onMediaSegment',\n        value: function _onMediaSegment(type, mediaSegment) {\n            var _this2 = this;\n\n            Promise.resolve().then(function () {\n                _this2._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);\n            });\n        }\n    }, {\n        key: '_onLoadingComplete',\n        value: function _onLoadingComplete() {\n            var _this3 = this;\n\n            Promise.resolve().then(function () {\n                _this3._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);\n            });\n        }\n    }, {\n        key: '_onRecoveredEarlyEof',\n        value: function _onRecoveredEarlyEof() {\n            var _this4 = this;\n\n            Promise.resolve().then(function () {\n                _this4._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);\n            });\n        }\n    }, {\n        key: '_onMediaInfo',\n        value: function _onMediaInfo(mediaInfo) {\n            var _this5 = this;\n\n            Promise.resolve().then(function () {\n                _this5._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, mediaInfo);\n            });\n        }\n    }, {\n        key: '_onMetaDataArrived',\n        value: function _onMetaDataArrived(metadata) {\n            var _this6 = this;\n\n            Promise.resolve().then(function () {\n                _this6._emitter.emit(_transmuxingEvents2.default.METADATA_ARRIVED, metadata);\n            });\n        }\n    }, {\n        key: '_onScriptDataArrived',\n        value: function _onScriptDataArrived(data) {\n            var _this7 = this;\n\n            Promise.resolve().then(function () {\n                _this7._emitter.emit(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, data);\n            });\n        }\n    }, {\n        key: '_onStatisticsInfo',\n        value: function _onStatisticsInfo(statisticsInfo) {\n            var _this8 = this;\n\n            Promise.resolve().then(function () {\n                _this8._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, statisticsInfo);\n            });\n        }\n    }, {\n        key: '_onIOError',\n        value: function _onIOError(type, info) {\n            var _this9 = this;\n\n            Promise.resolve().then(function () {\n                _this9._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);\n            });\n        }\n    }, {\n        key: '_onDemuxError',\n        value: function _onDemuxError(type, info) {\n            var _this10 = this;\n\n            Promise.resolve().then(function () {\n                _this10._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);\n            });\n        }\n    }, {\n        key: '_onRecommendSeekpoint',\n        value: function _onRecommendSeekpoint(milliseconds) {\n            var _this11 = this;\n\n            Promise.resolve().then(function () {\n                _this11._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, milliseconds);\n            });\n        }\n    }, {\n        key: '_onStreamTime',\n        value: function _onStreamTime(time) {\n            var _this12 = this;\n\n            Promise.resolve().then(function () {\n                _this12._emitter.emit(_transmuxingEvents2.default.STREAM_TIME, time);\n            });\n        }\n    }, {\n        key: '_onLoggingConfigChanged',\n        value: function _onLoggingConfigChanged(config) {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'logging_config', param: config });\n            }\n        }\n    }, {\n        key: '_onWorkerMessage',\n        value: function _onWorkerMessage(e) {\n            var message = e.data;\n            var data = message.data;\n\n            if (message.msg === 'destroyed' || this._workerDestroying) {\n                this._workerDestroying = false;\n                this._worker.terminate();\n                this._worker = null;\n                return;\n            }\n\n            switch (message.msg) {\n                case _transmuxingEvents2.default.INIT_SEGMENT:\n                case _transmuxingEvents2.default.MEDIA_SEGMENT:\n                    this._emitter.emit(message.msg, data.type, data.data);\n                    break;\n                case _transmuxingEvents2.default.LOADING_COMPLETE:\n                case _transmuxingEvents2.default.RECOVERED_EARLY_EOF:\n                    this._emitter.emit(message.msg);\n                    break;\n                case _transmuxingEvents2.default.MEDIA_INFO:\n                    Object.setPrototypeOf(data, _mediaInfo2.default.prototype);\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case _transmuxingEvents2.default.METADATA_ARRIVED:\n                case _transmuxingEvents2.default.SCRIPTDATA_ARRIVED:\n                case _transmuxingEvents2.default.STATISTICS_INFO:\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case _transmuxingEvents2.default.IO_ERROR:\n                case _transmuxingEvents2.default.DEMUX_ERROR:\n                    this._emitter.emit(message.msg, data.type, data.info);\n                    break;\n                case _transmuxingEvents2.default.RECOMMEND_SEEKPOINT:\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case 'logcat_callback':\n                    _logger2.default.emitter.emit('log', data.type, data.logcat);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }]);\n\n    return Transmuxer;\n}();\n\nexports.default = Transmuxer;\n\n},{\"../utils/logger.js\":41,\"../utils/logging-control.js\":42,\"./media-info.js\":7,\"./transmuxing-controller.js\":12,\"./transmuxing-events.js\":13,\"./transmuxing-worker.js\":14,\"events\":2,\"webworkify\":4}],12:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mediaInfo = _dereq_('./media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _flvDemuxer = _dereq_('../demux/flv-demuxer.js');\n\nvar _flvDemuxer2 = _interopRequireDefault(_flvDemuxer);\n\nvar _mp4Remuxer = _dereq_('../remux/mp4-remuxer.js');\n\nvar _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);\n\nvar _demuxErrors = _dereq_('../demux/demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nvar _ioController = _dereq_('../io/io-controller.js');\n\nvar _ioController2 = _interopRequireDefault(_ioController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _loader = _dereq_('../io/loader.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support\nvar TransmuxingController = function () {\n    function TransmuxingController(mediaDataSource, config) {\n        _classCallCheck(this, TransmuxingController);\n\n        this.TAG = 'TransmuxingController';\n        this._emitter = new _events2.default();\n\n        this._config = config;\n\n        // treat single part media as multipart media, which has only one segment\n        if (!mediaDataSource.segments) {\n            mediaDataSource.segments = [{\n                duration: mediaDataSource.duration,\n                filesize: mediaDataSource.filesize,\n                url: mediaDataSource.url\n            }];\n        }\n\n        // fill in default IO params if not exists\n        if (typeof mediaDataSource.cors !== 'boolean') {\n            mediaDataSource.cors = true;\n        }\n        if (typeof mediaDataSource.withCredentials !== 'boolean') {\n            mediaDataSource.withCredentials = false;\n        }\n\n        this._mediaDataSource = mediaDataSource;\n        this._currentSegmentIndex = 0;\n        var totalDuration = 0;\n\n        this._mediaDataSource.segments.forEach(function (segment) {\n            // timestampBase for each segment, and calculate total duration\n            segment.timestampBase = totalDuration;\n            totalDuration += segment.duration;\n            // params needed by IOController\n            segment.cors = mediaDataSource.cors;\n            segment.withCredentials = mediaDataSource.withCredentials;\n            // referrer policy control, if exist\n            if (config.referrerPolicy) {\n                segment.referrerPolicy = config.referrerPolicy;\n            }\n        });\n\n        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {\n            this._mediaDataSource.duration = totalDuration;\n        }\n\n        this._mediaInfo = null;\n        this._demuxer = null;\n        this._remuxer = null;\n        this._ioctl = null;\n\n        this._pendingSeekTime = null;\n        this._pendingResolveSeekPoint = null;\n\n        this._statisticsReporter = null;\n    }\n\n    _createClass(TransmuxingController, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._mediaInfo = null;\n            this._mediaDataSource = null;\n\n            if (this._statisticsReporter) {\n                this._disableStatisticsReporter();\n            }\n            if (this._ioctl) {\n                this._ioctl.destroy();\n                this._ioctl = null;\n            }\n            if (this._demuxer) {\n                this._demuxer.destroy();\n                this._demuxer = null;\n            }\n            if (this._remuxer) {\n                this._remuxer.destroy();\n                this._remuxer = null;\n            }\n\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            this._loadSegment(0);\n            this._enableStatisticsReporter();\n        }\n    }, {\n        key: '_loadSegment',\n        value: function _loadSegment(segmentIndex, optionalFrom) {\n            this._currentSegmentIndex = segmentIndex;\n            var dataSource = this._mediaDataSource.segments[segmentIndex];\n\n            var ioctl = this._ioctl = new _ioController2.default(dataSource, this._config, segmentIndex);\n            ioctl.onError = this._onIOException.bind(this);\n            ioctl.onSeeked = this._onIOSeeked.bind(this);\n            ioctl.onComplete = this._onIOComplete.bind(this);\n            ioctl.onRedirect = this._onIORedirect.bind(this);\n            ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);\n\n            if (optionalFrom) {\n                this._demuxer.bindDataSource(this._ioctl);\n            } else {\n                ioctl.onDataArrival = this._onInitChunkArrival.bind(this);\n            }\n\n            ioctl.open(optionalFrom);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this._internalAbort();\n            this._disableStatisticsReporter();\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._ioctl) {\n                this._ioctl.destroy();\n                this._ioctl = null;\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            // take a rest\n            if (this._ioctl && this._ioctl.isWorking()) {\n                this._ioctl.pause();\n                this._disableStatisticsReporter();\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._ioctl && this._ioctl.isPaused()) {\n                this._ioctl.resume();\n                this._enableStatisticsReporter();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(milliseconds) {\n            if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {\n                return;\n            }\n\n            var targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);\n\n            if (targetSegmentIndex === this._currentSegmentIndex) {\n                // intra-segment seeking\n                var segmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n                if (segmentInfo == undefined) {\n                    // current segment loading started, but mediainfo hasn't received yet\n                    // wait for the metadata loaded, then seek to expected position\n                    this._pendingSeekTime = milliseconds;\n                } else {\n                    var keyframe = segmentInfo.getNearestKeyframe(milliseconds);\n                    this._remuxer.seek(keyframe.milliseconds);\n                    this._ioctl.seek(keyframe.fileposition);\n                    // Will be resolved in _onRemuxerMediaSegmentArrival()\n                    this._pendingResolveSeekPoint = keyframe.milliseconds;\n                }\n            } else {\n                // cross-segment seeking\n                var targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n                if (targetSegmentInfo == undefined) {\n                    // target segment hasn't been loaded. We need metadata then seek to expected time\n                    this._pendingSeekTime = milliseconds;\n                    this._internalAbort();\n                    this._remuxer.seek();\n                    this._remuxer.insertDiscontinuity();\n                    this._loadSegment(targetSegmentIndex);\n                    // Here we wait for the metadata loaded, then seek to expected position\n                } else {\n                    // We have target segment's metadata, direct seek to target position\n                    var _keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);\n                    this._internalAbort();\n                    this._remuxer.seek(milliseconds);\n                    this._remuxer.insertDiscontinuity();\n                    this._demuxer.resetMediaInfo();\n                    this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;\n                    this._loadSegment(targetSegmentIndex, _keyframe.fileposition);\n                    this._pendingResolveSeekPoint = _keyframe.milliseconds;\n                    this._reportSegmentMediaInfo(targetSegmentIndex);\n                }\n            }\n\n            this._enableStatisticsReporter();\n        }\n    }, {\n        key: '_searchSegmentIndexContains',\n        value: function _searchSegmentIndexContains(milliseconds) {\n            var segments = this._mediaDataSource.segments;\n            var idx = segments.length - 1;\n\n            for (var i = 0; i < segments.length; i++) {\n                if (milliseconds < segments[i].timestampBase) {\n                    idx = i - 1;\n                    break;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: '_onInitChunkArrival',\n        value: function _onInitChunkArrival(data, byteStart) {\n            var _this = this;\n\n            var probeData = null;\n            var consumed = 0;\n\n            if (byteStart > 0) {\n                // IOController seeked immediately after opened, byteStart > 0 callback may received\n                this._demuxer.bindDataSource(this._ioctl);\n                this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;\n\n                consumed = this._demuxer.parseChunks(data, byteStart);\n            } else if ((probeData = _flvDemuxer2.default.probe(data)).match) {\n                // Always create new FLVDemuxer\n                this._demuxer = new _flvDemuxer2.default(probeData, this._config);\n\n                if (!this._remuxer) {\n                    this._remuxer = new _mp4Remuxer2.default(this._config);\n                }\n\n                var mds = this._mediaDataSource;\n                if (mds.duration != undefined && !isNaN(mds.duration)) {\n                    this._demuxer.overridedDuration = mds.duration;\n                }\n                if (typeof mds.hasAudio === 'boolean') {\n                    this._demuxer.overridedHasAudio = mds.hasAudio;\n                }\n                if (typeof mds.hasVideo === 'boolean') {\n                    this._demuxer.overridedHasVideo = mds.hasVideo;\n                }\n\n                this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;\n\n                this._demuxer.onError = this._onDemuxException.bind(this);\n                this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);\n                this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this);\n                this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this);\n                this._demuxer.onStreamTime = this._onStreamTime.bind(this);\n\n                this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl));\n\n                this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);\n                this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);\n\n                consumed = this._demuxer.parseChunks(data, byteStart);\n            } else {\n                probeData = null;\n                _logger2.default.e(this.TAG, 'Non-FLV, Unsupported media type!');\n                Promise.resolve().then(function () {\n                    _this._internalAbort();\n                });\n                this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, _demuxErrors2.default.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');\n\n                consumed = 0;\n            }\n\n            return consumed;\n        }\n    }, {\n        key: '_onMediaInfo',\n        value: function _onMediaInfo(mediaInfo) {\n            var _this2 = this;\n\n            if (this._mediaInfo == null) {\n                // Store first segment's mediainfo as global mediaInfo\n                this._mediaInfo = Object.assign({}, mediaInfo);\n                this._mediaInfo.keyframesIndex = null;\n                this._mediaInfo.segments = [];\n                this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;\n                Object.setPrototypeOf(this._mediaInfo, _mediaInfo2.default.prototype);\n            }\n\n            var segmentInfo = Object.assign({}, mediaInfo);\n            Object.setPrototypeOf(segmentInfo, _mediaInfo2.default.prototype);\n            this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;\n\n            // notify mediaInfo update\n            this._reportSegmentMediaInfo(this._currentSegmentIndex);\n\n            if (this._pendingSeekTime != null) {\n                Promise.resolve().then(function () {\n                    var target = _this2._pendingSeekTime;\n                    _this2._pendingSeekTime = null;\n                    _this2.seek(target);\n                });\n            }\n        }\n    }, {\n        key: '_onMetaDataArrived',\n        value: function _onMetaDataArrived(metadata) {\n            this._emitter.emit(_transmuxingEvents2.default.METADATA_ARRIVED, metadata);\n        }\n    }, {\n        key: '_onScriptDataArrived',\n        value: function _onScriptDataArrived(data) {\n            this._emitter.emit(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, data);\n        }\n    }, {\n        key: '_onStreamTime',\n        value: function _onStreamTime(time) {\n            this._emitter.emit(_transmuxingEvents2.default.STREAM_TIME, time);\n        }\n    }, {\n        key: '_onIOSeeked',\n        value: function _onIOSeeked() {\n            this._remuxer.insertDiscontinuity();\n        }\n    }, {\n        key: '_onIOComplete',\n        value: function _onIOComplete(extraData) {\n            var segmentIndex = extraData;\n            var nextSegmentIndex = segmentIndex + 1;\n\n            if (nextSegmentIndex < this._mediaDataSource.segments.length) {\n                this._internalAbort();\n                this._remuxer.flushStashedSamples();\n                this._loadSegment(nextSegmentIndex);\n            } else {\n                this._remuxer.flushStashedSamples();\n                this._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);\n                this._disableStatisticsReporter();\n            }\n        }\n    }, {\n        key: '_onIORedirect',\n        value: function _onIORedirect(redirectedURL) {\n            var segmentIndex = this._ioctl.extraData;\n            this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;\n        }\n    }, {\n        key: '_onIORecoveredEarlyEof',\n        value: function _onIORecoveredEarlyEof() {\n            this._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);\n        }\n    }, {\n        key: '_onIOException',\n        value: function _onIOException(type, info) {\n            _logger2.default.e(this.TAG, 'IOException: type = ' + type + ', code = ' + info.code + ', msg = ' + info.msg);\n            this._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);\n            this._disableStatisticsReporter();\n        }\n    }, {\n        key: '_onDemuxException',\n        value: function _onDemuxException(type, info) {\n            _logger2.default.e(this.TAG, 'DemuxException: type = ' + type + ', info = ' + info);\n            this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);\n        }\n    }, {\n        key: '_onRemuxerInitSegmentArrival',\n        value: function _onRemuxerInitSegmentArrival(type, initSegment) {\n            this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);\n        }\n    }, {\n        key: '_onRemuxerMediaSegmentArrival',\n        value: function _onRemuxerMediaSegmentArrival(type, mediaSegment) {\n            if (this._pendingSeekTime != null) {\n                // Media segments after new-segment cross-seeking should be dropped.\n                return;\n            }\n            this._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);\n\n            // Resolve pending seekPoint\n            if (this._pendingResolveSeekPoint != null && type === 'video') {\n                var syncPoints = mediaSegment.info.syncPoints;\n                var seekpoint = this._pendingResolveSeekPoint;\n                this._pendingResolveSeekPoint = null;\n\n                // Safari: Pass PTS for recommend_seekpoint\n                if (_browser2.default.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {\n                    seekpoint = syncPoints[0].pts;\n                }\n                // else: use original DTS (keyframe.milliseconds)\n\n                this._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, seekpoint);\n            }\n        }\n    }, {\n        key: '_enableStatisticsReporter',\n        value: function _enableStatisticsReporter() {\n            if (this._statisticsReporter == null) {\n                this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n            }\n        }\n    }, {\n        key: '_disableStatisticsReporter',\n        value: function _disableStatisticsReporter() {\n            if (this._statisticsReporter) {\n                self.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: '_reportSegmentMediaInfo',\n        value: function _reportSegmentMediaInfo(segmentIndex) {\n            var segmentInfo = this._mediaInfo.segments[segmentIndex];\n            var exportInfo = Object.assign({}, segmentInfo);\n\n            exportInfo.duration = this._mediaInfo.duration;\n            exportInfo.segmentCount = this._mediaInfo.segmentCount;\n            delete exportInfo.segments;\n            delete exportInfo.keyframesIndex;\n\n            this._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, exportInfo);\n        }\n    }, {\n        key: '_reportStatisticsInfo',\n        value: function _reportStatisticsInfo() {\n            var info = {};\n\n            info.url = this._ioctl.currentURL;\n            info.hasRedirect = this._ioctl.hasRedirect;\n            if (info.hasRedirect) {\n                info.redirectedURL = this._ioctl.currentRedirectedURL;\n            }\n\n            info.speed = this._ioctl.currentSpeed;\n            info.loaderType = this._ioctl.loaderType;\n            info.currentSegmentIndex = this._currentSegmentIndex;\n            info.totalSegmentCount = this._mediaDataSource.segments.length;\n\n            this._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, info);\n        }\n    }]);\n\n    return TransmuxingController;\n}();\n\nexports.default = TransmuxingController;\n\n},{\"../demux/demux-errors.js\":16,\"../demux/flv-demuxer.js\":18,\"../io/io-controller.js\":23,\"../io/loader.js\":24,\"../remux/mp4-remuxer.js\":38,\"../utils/browser.js\":39,\"../utils/logger.js\":41,\"./media-info.js\":7,\"./transmuxing-events.js\":13,\"events\":2}],13:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar TransmuxingEvents = {\n  IO_ERROR: 'io_error',\n  DEMUX_ERROR: 'demux_error',\n  INIT_SEGMENT: 'init_segment',\n  MEDIA_SEGMENT: 'media_segment',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  METADATA_ARRIVED: 'metadata_arrived',\n  SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n  STATISTICS_INFO: 'statistics_info',\n  RECOMMEND_SEEKPOINT: 'recommend_seekpoint',\n  STREAM_TIME: 'stream_time'\n};\n\nexports.default = TransmuxingEvents;\n\n},{}],14:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loggingControl = _dereq_('../utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _polyfill = _dereq_('../utils/polyfill.js');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _transmuxingController = _dereq_('./transmuxing-controller.js');\n\nvar _transmuxingController2 = _interopRequireDefault(_transmuxingController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* post message to worker:\r\n   data: {\r\n       cmd: string\r\n       param: any\r\n   }\r\n\r\n   receive message from worker:\r\n   data: {\r\n       msg: string,\r\n       data: any\r\n   }\r\n */\n\nvar TransmuxingWorker = function TransmuxingWorker(self) {\n\n    var TAG = 'TransmuxingWorker';\n    var controller = null;\n    var logcatListener = onLogcatCallback.bind(this);\n\n    _polyfill2.default.install();\n\n    self.addEventListener('message', function (e) {\n        switch (e.data.cmd) {\n            case 'init':\n                controller = new _transmuxingController2.default(e.data.param[0], e.data.param[1]);\n                controller.on(_transmuxingEvents2.default.IO_ERROR, onIOError.bind(this));\n                controller.on(_transmuxingEvents2.default.DEMUX_ERROR, onDemuxError.bind(this));\n                controller.on(_transmuxingEvents2.default.INIT_SEGMENT, onInitSegment.bind(this));\n                controller.on(_transmuxingEvents2.default.MEDIA_SEGMENT, onMediaSegment.bind(this));\n                controller.on(_transmuxingEvents2.default.LOADING_COMPLETE, onLoadingComplete.bind(this));\n                controller.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n                controller.on(_transmuxingEvents2.default.MEDIA_INFO, onMediaInfo.bind(this));\n                controller.on(_transmuxingEvents2.default.METADATA_ARRIVED, onMetaDataArrived.bind(this));\n                controller.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\n                controller.on(_transmuxingEvents2.default.STATISTICS_INFO, onStatisticsInfo.bind(this));\n                controller.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n                break;\n            case 'destroy':\n                if (controller) {\n                    controller.destroy();\n                    controller = null;\n                }\n                self.postMessage({ msg: 'destroyed' });\n                break;\n            case 'start':\n                controller.start();\n                break;\n            case 'stop':\n                controller.stop();\n                break;\n            case 'seek':\n                controller.seek(e.data.param);\n                break;\n            case 'pause':\n                controller.pause();\n                break;\n            case 'resume':\n                controller.resume();\n                break;\n            case 'logging_config':\n                {\n                    var config = e.data.param;\n                    _loggingControl2.default.applyConfig(config);\n\n                    if (config.enableCallback === true) {\n                        _loggingControl2.default.addLogListener(logcatListener);\n                    } else {\n                        _loggingControl2.default.removeLogListener(logcatListener);\n                    }\n                    break;\n                }\n        }\n    });\n\n    function onInitSegment(type, initSegment) {\n        var obj = {\n            msg: _transmuxingEvents2.default.INIT_SEGMENT,\n            data: {\n                type: type,\n                data: initSegment\n            }\n        };\n        self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer\n    }\n\n    function onMediaSegment(type, mediaSegment) {\n        var obj = {\n            msg: _transmuxingEvents2.default.MEDIA_SEGMENT,\n            data: {\n                type: type,\n                data: mediaSegment\n            }\n        };\n        self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer\n    }\n\n    function onLoadingComplete() {\n        var obj = {\n            msg: _transmuxingEvents2.default.LOADING_COMPLETE\n        };\n        self.postMessage(obj);\n    }\n\n    function onRecoveredEarlyEof() {\n        var obj = {\n            msg: _transmuxingEvents2.default.RECOVERED_EARLY_EOF\n        };\n        self.postMessage(obj);\n    }\n\n    function onMediaInfo(mediaInfo) {\n        var obj = {\n            msg: _transmuxingEvents2.default.MEDIA_INFO,\n            data: mediaInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onMetaDataArrived(metadata) {\n        var obj = {\n            msg: _transmuxingEvents2.default.METADATA_ARRIVED,\n            data: metadata\n        };\n        self.postMessage(obj);\n    }\n\n    function onScriptDataArrived(data) {\n        var obj = {\n            msg: _transmuxingEvents2.default.SCRIPTDATA_ARRIVED,\n            data: data\n        };\n        self.postMessage(obj);\n    }\n\n    function onStatisticsInfo(statInfo) {\n        var obj = {\n            msg: _transmuxingEvents2.default.STATISTICS_INFO,\n            data: statInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onIOError(type, info) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.IO_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onDemuxError(type, info) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.DEMUX_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onRecommendSeekpoint(milliseconds) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.RECOMMEND_SEEKPOINT,\n            data: milliseconds\n        });\n    }\n\n    function onLogcatCallback(type, str) {\n        self.postMessage({\n            msg: 'logcat_callback',\n            data: {\n                type: type,\n                logcat: str\n            }\n        });\n    }\n}; /*\r\n    * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n    *\r\n    * @author zheng qian <xqq@xqq.im>\r\n    *\r\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License.\r\n    * You may obtain a copy of the License at\r\n    *\r\n    *     http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software\r\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    * See the License for the specific language governing permissions and\r\n    * limitations under the License.\r\n    */\n\nexports.default = TransmuxingWorker;\n\n},{\"../utils/logger.js\":41,\"../utils/logging-control.js\":42,\"../utils/polyfill.js\":43,\"./transmuxing-controller.js\":12,\"./transmuxing-events.js\":13}],15:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _utf8Conv = _dereq_('../utils/utf8-conv.js');\n\nvar _utf8Conv2 = _interopRequireDefault(_utf8Conv);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar le = function () {\n    var buf = new ArrayBuffer(2);\n    new DataView(buf).setInt16(0, 256, true); // little-endian write\n    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n}();\n\nvar AMF = function () {\n    function AMF() {\n        _classCallCheck(this, AMF);\n    }\n\n    _createClass(AMF, null, [{\n        key: 'parseScriptData',\n        value: function parseScriptData(arrayBuffer, dataOffset, dataSize) {\n            var data = {};\n\n            try {\n                var name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);\n                var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n\n                data[name.data] = value.data;\n            } catch (e) {\n                _logger2.default.e('AMF', e.toString());\n            }\n\n            return data;\n        }\n    }, {\n        key: 'parseObject',\n        value: function parseObject(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 3) {\n                throw new _exception.IllegalStateException('Data not enough when parse ScriptDataObject');\n            }\n            var name = AMF.parseString(arrayBuffer, dataOffset, dataSize);\n            var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n            var isObjectEnd = value.objectEnd;\n\n            return {\n                data: {\n                    name: name.data,\n                    value: value.data\n                },\n                size: name.size + value.size,\n                objectEnd: isObjectEnd\n            };\n        }\n    }, {\n        key: 'parseVariable',\n        value: function parseVariable(arrayBuffer, dataOffset, dataSize) {\n            return AMF.parseObject(arrayBuffer, dataOffset, dataSize);\n        }\n    }, {\n        key: 'parseString',\n        value: function parseString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 2) {\n                throw new _exception.IllegalStateException('Data not enough when parse String');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var length = v.getUint16(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 2 + length\n            };\n        }\n    }, {\n        key: 'parseLongString',\n        value: function parseLongString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 4) {\n                throw new _exception.IllegalStateException('Data not enough when parse LongString');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var length = v.getUint32(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 4 + length\n            };\n        }\n    }, {\n        key: 'parseDate',\n        value: function parseDate(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 10) {\n                throw new _exception.IllegalStateException('Data size invalid when parse Date');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var timestamp = v.getFloat64(0, !le);\n            var localTimeOffset = v.getInt16(8, !le);\n            timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n            return {\n                data: new Date(timestamp),\n                size: 8 + 2\n            };\n        }\n    }, {\n        key: 'parseValue',\n        value: function parseValue(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 1) {\n                throw new _exception.IllegalStateException('Data not enough when parse Value');\n            }\n\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var offset = 1;\n            var type = v.getUint8(0);\n            var value = void 0;\n            var objectEnd = false;\n\n            try {\n                switch (type) {\n                    case 0:\n                        // Number(Double) type\n                        value = v.getFloat64(1, !le);\n                        offset += 8;\n                        break;\n                    case 1:\n                        {\n                            // Boolean type\n                            var b = v.getUint8(1);\n                            value = b ? true : false;\n                            offset += 1;\n                            break;\n                        }\n                    case 2:\n                        {\n                            // String type\n                            var amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = amfstr.data;\n                            offset += amfstr.size;\n                            break;\n                        }\n                    case 3:\n                        {\n                            // Object(s) type\n                            value = {};\n                            var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                                terminal = 3;\n                            }\n                            while (offset < dataSize - 4) {\n                                // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                                var amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\n                                if (amfobj.objectEnd) break;\n                                value[amfobj.data.name] = amfobj.data.value;\n                                offset += amfobj.size;\n                            }\n                            if (offset <= dataSize - 3) {\n                                var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                                if (marker === 9) {\n                                    offset += 3;\n                                }\n                            }\n                            break;\n                        }\n                    case 8:\n                        {\n                            // ECMA array type (Mixed array)\n                            value = {};\n                            offset += 4; // ECMAArrayLength(UI32)\n                            var _terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                                _terminal = 3;\n                            }\n                            while (offset < dataSize - 8) {\n                                // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                                var amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - _terminal);\n                                if (amfvar.objectEnd) break;\n                                value[amfvar.data.name] = amfvar.data.value;\n                                offset += amfvar.size;\n                            }\n                            if (offset <= dataSize - 3) {\n                                var _marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                                if (_marker === 9) {\n                                    offset += 3;\n                                }\n                            }\n                            break;\n                        }\n                    case 9:\n                        // ScriptDataObjectEnd\n                        value = undefined;\n                        offset = 1;\n                        objectEnd = true;\n                        break;\n                    case 10:\n                        {\n                            // Strict array type\n                            // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                            value = [];\n                            var strictArrayLength = v.getUint32(1, !le);\n                            offset += 4;\n                            for (var i = 0; i < strictArrayLength; i++) {\n                                var val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);\n                                value.push(val.data);\n                                offset += val.size;\n                            }\n                            break;\n                        }\n                    case 11:\n                        {\n                            // Date type\n                            var date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = date.data;\n                            offset += date.size;\n                            break;\n                        }\n                    case 12:\n                        {\n                            // Long string type\n                            var amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = amfLongStr.data;\n                            offset += amfLongStr.size;\n                            break;\n                        }\n                    default:\n                        // ignore and skip\n                        offset = dataSize;\n                        _logger2.default.w('AMF', 'Unsupported AMF value type ' + type);\n                }\n            } catch (e) {\n                _logger2.default.e('AMF', e.toString());\n            }\n\n            return {\n                data: value,\n                size: offset,\n                objectEnd: objectEnd\n            };\n        }\n    }]);\n\n    return AMF;\n}();\n\nexports.default = AMF;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"../utils/utf8-conv.js\":44}],16:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DemuxErrors = {\n  OK: 'OK',\n  FORMAT_ERROR: 'FormatError',\n  FORMAT_UNSUPPORTED: 'FormatUnsupported',\n  CODEC_UNSUPPORTED: 'CodecUnsupported'\n};\n\nexports.default = DemuxErrors;\n\n},{}],17:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Exponential-Golomb buffer decoder\nvar ExpGolomb = function () {\n    function ExpGolomb(uint8array) {\n        _classCallCheck(this, ExpGolomb);\n\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    _createClass(ExpGolomb, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._buffer = null;\n        }\n    }, {\n        key: '_fillCurrentWord',\n        value: function _fillCurrentWord() {\n            var buffer_bytes_left = this._total_bytes - this._buffer_index;\n            if (buffer_bytes_left <= 0) throw new _exception.IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n            var bytes_read = Math.min(4, buffer_bytes_left);\n            var word = new Uint8Array(4);\n            word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n            this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n            this._buffer_index += bytes_read;\n            this._current_word_bits_left = bytes_read * 8;\n        }\n    }, {\n        key: 'readBits',\n        value: function readBits(bits) {\n            if (bits > 32) throw new _exception.InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n            if (bits <= this._current_word_bits_left) {\n                var _result = this._current_word >>> 32 - bits;\n                this._current_word <<= bits;\n                this._current_word_bits_left -= bits;\n                return _result;\n            }\n\n            var result = this._current_word_bits_left ? this._current_word : 0;\n            result = result >>> 32 - this._current_word_bits_left;\n            var bits_need_left = bits - this._current_word_bits_left;\n\n            this._fillCurrentWord();\n            var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n            var result2 = this._current_word >>> 32 - bits_read_next;\n            this._current_word <<= bits_read_next;\n            this._current_word_bits_left -= bits_read_next;\n\n            result = result << bits_read_next | result2;\n            return result;\n        }\n    }, {\n        key: 'readBool',\n        value: function readBool() {\n            return this.readBits(1) === 1;\n        }\n    }, {\n        key: 'readByte',\n        value: function readByte() {\n            return this.readBits(8);\n        }\n    }, {\n        key: '_skipLeadingZero',\n        value: function _skipLeadingZero() {\n            var zero_count = void 0;\n            for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n                if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n                    this._current_word <<= zero_count;\n                    this._current_word_bits_left -= zero_count;\n                    return zero_count;\n                }\n            }\n            this._fillCurrentWord();\n            return zero_count + this._skipLeadingZero();\n        }\n    }, {\n        key: 'readUEG',\n        value: function readUEG() {\n            // unsigned exponential golomb\n            var leading_zeros = this._skipLeadingZero();\n            return this.readBits(leading_zeros + 1) - 1;\n        }\n    }, {\n        key: 'readSEG',\n        value: function readSEG() {\n            // signed exponential golomb\n            var value = this.readUEG();\n            if (value & 0x01) {\n                return value + 1 >>> 1;\n            } else {\n                return -1 * (value >>> 1);\n            }\n        }\n    }]);\n\n    return ExpGolomb;\n}();\n\nexports.default = ExpGolomb;\n\n},{\"../utils/exception.js\":40}],18:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _amfParser = _dereq_('./amf-parser.js');\n\nvar _amfParser2 = _interopRequireDefault(_amfParser);\n\nvar _spsParser = _dereq_('./sps-parser.js');\n\nvar _spsParser2 = _interopRequireDefault(_spsParser);\n\nvar _demuxErrors = _dereq_('./demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nvar _mediaInfo = _dereq_('../core/media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Swap16(src) {\n    return src >>> 8 & 0xFF | (src & 0xFF) << 8;\n}\n\nfunction Swap32(src) {\n    return (src & 0xFF000000) >>> 24 | (src & 0x00FF0000) >>> 8 | (src & 0x0000FF00) << 8 | (src & 0x000000FF) << 24;\n}\n\nfunction ReadBig32(array, index) {\n    return array[index] << 24 | array[index + 1] << 16 | array[index + 2] << 8 | array[index + 3];\n}\n\nvar FLVDemuxer = function () {\n    function FLVDemuxer(probeData, config) {\n        _classCallCheck(this, FLVDemuxer);\n\n        this.TAG = 'FLVDemuxer';\n\n        this._config = config;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n        this._onStreamTime = null;\n\n        this._dataOffset = probeData.dataOffset;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = probeData.hasAudioTrack;\n        this._hasVideo = probeData.hasVideoTrack;\n\n        this._hasAudioFlagOverrided = false;\n        this._hasVideoFlagOverrided = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new _mediaInfo2.default();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n        this._mpegSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];\n\n        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];\n        this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1];\n        this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1];\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0 };\n\n        this._littleEndian = function () {\n            var buf = new ArrayBuffer(2);\n            new DataView(buf).setInt16(0, 256, true); // little-endian write\n            return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n        }();\n    }\n\n    _createClass(FLVDemuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._mediaInfo = null;\n            this._metadata = null;\n            this._audioMetadata = null;\n            this._videoMetadata = null;\n            this._videoTrack = null;\n            this._audioTrack = null;\n\n            this._onError = null;\n            this._onMediaInfo = null;\n            this._onMetaDataArrived = null;\n            this._onScriptDataArrived = null;\n            this._onTrackMetadata = null;\n            this._onDataAvailable = null;\n            this._onStreamTime = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(loader) {\n            loader.onDataArrival = this.parseChunks.bind(this);\n            return this;\n        }\n\n        // prototype: function(type: string, metadata: any): void\n\n    }, {\n        key: 'resetMediaInfo',\n        value: function resetMediaInfo() {\n            this._mediaInfo = new _mediaInfo2.default();\n        }\n    }, {\n        key: '_isInitialMetadataDispatched',\n        value: function _isInitialMetadataDispatched() {\n            if (this._hasAudio && this._hasVideo) {\n                // both audio & video\n                return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n            }\n            if (this._hasAudio && !this._hasVideo) {\n                // audio only\n                return this._audioInitialMetadataDispatched;\n            }\n            if (!this._hasAudio && this._hasVideo) {\n                // video only\n                return this._videoInitialMetadataDispatched;\n            }\n            return false;\n        }\n\n        // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;\n\n    }, {\n        key: 'parseChunks',\n        value: function parseChunks(chunk, byteStart) {\n            if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {\n                throw new _exception.IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');\n            }\n\n            var offset = 0;\n            var le = this._littleEndian;\n\n            if (byteStart === 0) {\n                // buffer with FLV header\n                if (chunk.byteLength > 13) {\n                    var probeData = FLVDemuxer.probe(chunk);\n                    offset = probeData.dataOffset;\n                } else {\n                    return 0;\n                }\n            }\n\n            if (this._firstParse) {\n                // handle PreviousTagSize0 before Tag1\n                this._firstParse = false;\n                if (byteStart + offset !== this._dataOffset) {\n                    _logger2.default.w(this.TAG, 'First time parsing but chunk byteStart invalid!');\n                }\n\n                var v = new DataView(chunk, offset);\n                var prevTagSize0 = v.getUint32(0, !le);\n                if (prevTagSize0 !== 0) {\n                    _logger2.default.w(this.TAG, 'PrevTagSize0 !== 0 !!!');\n                }\n                offset += 4;\n            }\n\n            while (offset < chunk.byteLength) {\n                this._dispatch = true;\n\n                var _v = new DataView(chunk, offset);\n\n                if (offset + 11 + 4 > chunk.byteLength) {\n                    // data not enough for parsing an flv tag\n                    break;\n                }\n\n                var tagType = _v.getUint8(0);\n                var dataSize = _v.getUint32(0, !le) & 0x00FFFFFF;\n\n                if (offset + 11 + dataSize + 4 > chunk.byteLength) {\n                    // data not enough for parsing actual data body\n                    break;\n                }\n\n                if (tagType !== 8 && tagType !== 9 && tagType !== 18) {\n                    _logger2.default.w(this.TAG, 'Unsupported tag type ' + tagType + ', skipped');\n                    // consume the whole tag (skip it)\n                    offset += 11 + dataSize + 4;\n                    continue;\n                }\n\n                var ts2 = _v.getUint8(4);\n                var ts1 = _v.getUint8(5);\n                var ts0 = _v.getUint8(6);\n                var ts3 = _v.getUint8(7);\n\n                var timestamp = ts0 | ts1 << 8 | ts2 << 16 | ts3 << 24;\n\n                var streamId = _v.getUint32(7, !le) & 0x00FFFFFF;\n                if (streamId !== 0) {\n                    _logger2.default.w(this.TAG, 'Meet tag which has StreamID != 0!');\n                }\n\n                var dataOffset = offset + 11;\n\n                switch (tagType) {\n                    case 8:\n                        // Audio\n                        this._parseAudioData(chunk, dataOffset, dataSize, timestamp);\n                        break;\n                    case 9:\n                        // Video\n                        if (this._onStreamTime != null) {\n                            this._onStreamTime(timestamp);\n                        }\n                        this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);\n                        break;\n                    case 18:\n                        // ScriptDataObject\n                        this._parseScriptData(chunk, dataOffset, dataSize);\n                        break;\n                }\n\n                var prevTagSize = _v.getUint32(11 + dataSize, !le);\n                if (prevTagSize !== 11 + dataSize) {\n                    _logger2.default.w(this.TAG, 'Invalid PrevTagSize ' + prevTagSize);\n                }\n\n                offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize\n            }\n\n            // dispatch parsed frames to consumer (typically, the remuxer)\n            if (this._isInitialMetadataDispatched()) {\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            }\n\n            return offset; // consumed bytes, just equals latest offset index\n        }\n    }, {\n        key: '_parseScriptData',\n        value: function _parseScriptData(arrayBuffer, dataOffset, dataSize) {\n            var scriptData = _amfParser2.default.parseScriptData(arrayBuffer, dataOffset, dataSize);\n\n            if (scriptData.hasOwnProperty('onMetaData')) {\n                if (scriptData.onMetaData == null || _typeof(scriptData.onMetaData) !== 'object') {\n                    _logger2.default.w(this.TAG, 'Invalid onMetaData structure!');\n                    return;\n                }\n                if (this._metadata) {\n                    _logger2.default.w(this.TAG, 'Found another onMetaData tag!');\n                }\n                this._metadata = scriptData;\n                var onMetaData = this._metadata.onMetaData;\n\n                if (this._onMetaDataArrived) {\n                    this._onMetaDataArrived(Object.assign({}, onMetaData));\n                }\n\n                if (typeof onMetaData.hasAudio === 'boolean') {\n                    // hasAudio\n                    if (this._hasAudioFlagOverrided === false) {\n                        this._hasAudio = onMetaData.hasAudio;\n                        this._mediaInfo.hasAudio = this._hasAudio;\n                    }\n                }\n                if (typeof onMetaData.hasVideo === 'boolean') {\n                    // hasVideo\n                    if (this._hasVideoFlagOverrided === false) {\n                        this._hasVideo = onMetaData.hasVideo;\n                        this._mediaInfo.hasVideo = this._hasVideo;\n                    }\n                }\n                if (typeof onMetaData.audiodatarate === 'number') {\n                    // audiodatarate\n                    this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n                }\n                if (typeof onMetaData.videodatarate === 'number') {\n                    // videodatarate\n                    this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n                }\n                if (typeof onMetaData.width === 'number') {\n                    // width\n                    this._mediaInfo.width = onMetaData.width;\n                }\n                if (typeof onMetaData.height === 'number') {\n                    // height\n                    this._mediaInfo.height = onMetaData.height;\n                }\n                if (typeof onMetaData.duration === 'number') {\n                    // duration\n                    if (!this._durationOverrided) {\n                        var duration = Math.floor(onMetaData.duration * this._timescale);\n                        this._duration = duration;\n                        this._mediaInfo.duration = duration;\n                    }\n                } else {\n                    this._mediaInfo.duration = 0;\n                }\n                if (typeof onMetaData.framerate === 'number') {\n                    // framerate\n                    var fps_num = Math.floor(onMetaData.framerate * 1000);\n                    if (fps_num > 0) {\n                        var fps = fps_num / 1000;\n                        this._referenceFrameRate.fixed = true;\n                        this._referenceFrameRate.fps = fps;\n                        this._referenceFrameRate.fps_num = fps_num;\n                        this._referenceFrameRate.fps_den = 1000;\n                        this._mediaInfo.fps = fps;\n                    }\n                }\n                if (_typeof(onMetaData.keyframes) === 'object') {\n                    // keyframes\n                    this._mediaInfo.hasKeyframesIndex = true;\n                    var keyframes = onMetaData.keyframes;\n                    this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                    onMetaData.keyframes = null; // keyframes has been extracted, remove it\n                } else {\n                    this._mediaInfo.hasKeyframesIndex = false;\n                }\n                this._dispatch = false;\n                this._mediaInfo.metadata = onMetaData;\n                _logger2.default.v(this.TAG, 'Parsed onMetaData');\n                if (this._mediaInfo.isComplete()) {\n                    this._onMediaInfo(this._mediaInfo);\n                }\n            }\n\n            if (Object.keys(scriptData).length > 0) {\n                if (this._onScriptDataArrived) {\n                    this._onScriptDataArrived(Object.assign({}, scriptData));\n                }\n            }\n        }\n    }, {\n        key: '_parseKeyframesIndex',\n        value: function _parseKeyframesIndex(keyframes) {\n            var times = [];\n            var filepositions = [];\n\n            // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n            for (var i = 1; i < keyframes.times.length; i++) {\n                var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n                times.push(time);\n                filepositions.push(keyframes.filepositions[i]);\n            }\n\n            return {\n                times: times,\n                filepositions: filepositions\n            };\n        }\n    }, {\n        key: '_parseAudioData',\n        value: function _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n                return;\n            }\n\n            if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {\n                // If hasAudio: false indicated explicitly in MediaDataSource,\n                // Ignore all the audio packets\n                return;\n            }\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var soundSpec = v.getUint8(0);\n\n            var soundFormat = soundSpec >>> 4;\n            if (soundFormat !== 2 && soundFormat !== 10) {\n                // MP3 or AAC\n                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                return;\n            }\n\n            var soundRate = 0;\n            var soundRateIndex = (soundSpec & 12) >>> 2;\n            if (soundRateIndex >= 0 && soundRateIndex <= 4) {\n                soundRate = this._flvSoundRateTable[soundRateIndex];\n            } else {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                return;\n            }\n\n            var soundSize = (soundSpec & 2) >>> 1; // unused\n            var soundType = soundSpec & 1;\n\n            var meta = this._audioMetadata;\n            var track = this._audioTrack;\n\n            if (!meta) {\n                if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {\n                    this._hasAudio = true;\n                    this._mediaInfo.hasAudio = true;\n                }\n\n                // initial metadata\n                meta = this._audioMetadata = {};\n                meta.type = 'audio';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n                meta.audioSampleRate = soundRate;\n                meta.channelCount = soundType === 0 ? 1 : 2;\n            }\n\n            if (soundFormat === 10) {\n                // AAC\n                var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n                if (aacData == undefined) {\n                    return;\n                }\n\n                if (aacData.packetType === 0) {\n                    // AAC sequence header (AudioSpecificConfig)\n                    if (meta.config) {\n                        _logger2.default.w(this.TAG, 'Found another AudioSpecificConfig!');\n                    }\n                    var misc = aacData.data;\n                    meta.audioSampleRate = misc.samplingRate;\n                    meta.channelCount = misc.channelCount;\n                    meta.codec = misc.codec;\n                    meta.originalCodec = misc.originalCodec;\n                    meta.config = misc.config;\n                    // The decode result of an aac sample is 1024 PCM samples\n                    meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;\n                    _logger2.default.v(this.TAG, 'Parsed AudioSpecificConfig');\n\n                    if (this._isInitialMetadataDispatched()) {\n                        // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                        if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                            this._onDataAvailable(this._audioTrack, this._videoTrack);\n                        }\n                    } else {\n                        this._audioInitialMetadataDispatched = true;\n                    }\n                    // then notify new metadata\n                    this._dispatch = false;\n                    this._onTrackMetadata('audio', meta);\n\n                    var mi = this._mediaInfo;\n                    mi.audioCodec = meta.originalCodec;\n                    mi.audioSampleRate = meta.audioSampleRate;\n                    mi.audioChannelCount = meta.channelCount;\n                    if (mi.hasVideo) {\n                        if (mi.videoCodec != null) {\n                            mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                        }\n                    } else {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                    }\n                    if (mi.isComplete()) {\n                        this._onMediaInfo(mi);\n                    }\n                } else if (aacData.packetType === 1) {\n                    // AAC raw frame data\n                    var dts = this._timestampBase + tagTimestamp;\n                    var aacSample = { unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts };\n                    track.samples.push(aacSample);\n                    track.length += aacData.data.length;\n                } else {\n                    _logger2.default.e(this.TAG, 'Flv: Unsupported AAC data type ' + aacData.packetType);\n                }\n            } else if (soundFormat === 2) {\n                // MP3\n                if (!meta.codec) {\n                    // We need metadata for mp3 audio track, extract info from frame header\n                    var _misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);\n                    if (_misc == undefined) {\n                        return;\n                    }\n                    meta.audioSampleRate = _misc.samplingRate;\n                    meta.channelCount = _misc.channelCount;\n                    meta.codec = _misc.codec;\n                    meta.originalCodec = _misc.originalCodec;\n                    // The decode result of an mp3 sample is 1152 PCM samples\n                    meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;\n                    _logger2.default.v(this.TAG, 'Parsed MPEG Audio Frame Header');\n\n                    this._audioInitialMetadataDispatched = true;\n                    this._onTrackMetadata('audio', meta);\n\n                    var _mi = this._mediaInfo;\n                    _mi.audioCodec = meta.codec;\n                    _mi.audioSampleRate = meta.audioSampleRate;\n                    _mi.audioChannelCount = meta.channelCount;\n                    _mi.audioDataRate = _misc.bitRate;\n                    if (_mi.hasVideo) {\n                        if (_mi.videoCodec != null) {\n                            _mi.mimeType = 'video/x-flv; codecs=\"' + _mi.videoCodec + ',' + _mi.audioCodec + '\"';\n                        }\n                    } else {\n                        _mi.mimeType = 'video/x-flv; codecs=\"' + _mi.audioCodec + '\"';\n                    }\n                    if (_mi.isComplete()) {\n                        this._onMediaInfo(_mi);\n                    }\n                }\n\n                // This packet is always a valid audio packet, extract it\n                var data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);\n                if (data == undefined) {\n                    return;\n                }\n                var _dts = this._timestampBase + tagTimestamp;\n                var mp3Sample = { unit: data, length: data.byteLength, dts: _dts, pts: _dts };\n                track.samples.push(mp3Sample);\n                track.length += data.length;\n            }\n        }\n    }, {\n        key: '_parseAACAudioData',\n        value: function _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n                return;\n            }\n\n            var result = {};\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n            result.packetType = array[0];\n\n            if (array[0] === 0) {\n                result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n            } else {\n                result.data = array.subarray(1);\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseAACAudioSpecificConfig',\n        value: function _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var config = null;\n\n            /* Audio Object Type:\r\n               0: Null\r\n               1: AAC Main\r\n               2: AAC LC\r\n               3: AAC SSR (Scalable Sample Rate)\r\n               4: AAC LTP (Long Term Prediction)\r\n               5: HE-AAC / SBR (Spectral Band Replication)\r\n               6: AAC Scalable\r\n            */\n\n            var audioObjectType = 0;\n            var originalAudioObjectType = 0;\n            var audioExtensionObjectType = null;\n            var samplingIndex = 0;\n            var extensionSamplingIndex = null;\n\n            // 5 bits\n            audioObjectType = originalAudioObjectType = array[0] >>> 3;\n            // 4 bits\n            samplingIndex = (array[0] & 0x07) << 1 | array[1] >>> 7;\n            if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n                return;\n            }\n\n            var samplingFrequence = this._mpegSamplingRates[samplingIndex];\n\n            // 4 bits\n            var channelConfig = (array[1] & 0x78) >>> 3;\n            if (channelConfig < 0 || channelConfig >= 8) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n                return;\n            }\n\n            if (audioObjectType === 5) {\n                // HE-AAC?\n                // 4 bits\n                extensionSamplingIndex = (array[1] & 0x07) << 1 | array[2] >>> 7;\n                // 5 bits\n                audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n            }\n\n            // workarounds for various browsers\n            var userAgent = self.navigator.userAgent.toLowerCase();\n\n            if (userAgent.indexOf('firefox') !== -1) {\n                // firefox: use SBR (HE-AAC) if freq less than 24kHz\n                if (samplingIndex >= 6) {\n                    audioObjectType = 5;\n                    config = new Array(4);\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else {\n                    // use LC-AAC\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            } else if (userAgent.indexOf('android') !== -1) {\n                // android: always use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            } else {\n                // for other browsers, e.g. chrome...\n                // Always use HE-AAC to make it easier to switch aac codec profile\n                audioObjectType = 5;\n                extensionSamplingIndex = samplingIndex;\n                config = new Array(4);\n\n                if (samplingIndex >= 6) {\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else if (channelConfig === 1) {\n                    // Mono channel\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            }\n\n            config[0] = audioObjectType << 3;\n            config[0] |= (samplingIndex & 0x0F) >>> 1;\n            config[1] = (samplingIndex & 0x0F) << 7;\n            config[1] |= (channelConfig & 0x0F) << 3;\n            if (audioObjectType === 5) {\n                config[1] |= (extensionSamplingIndex & 0x0F) >>> 1;\n                config[2] = (extensionSamplingIndex & 0x01) << 7;\n                // extended audio object type: force to 2 (LC-AAC)\n                config[2] |= 2 << 2;\n                config[3] = 0;\n            }\n\n            return {\n                config: config,\n                samplingRate: samplingFrequence,\n                channelCount: channelConfig,\n                codec: 'mp4a.40.' + audioObjectType,\n                originalCodec: 'mp4a.40.' + originalAudioObjectType\n            };\n        }\n    }, {\n        key: '_parseMP3AudioData',\n        value: function _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {\n            if (dataSize < 4) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var result = null;\n\n            if (requestHeader) {\n                if (array[0] !== 0xFF) {\n                    return;\n                }\n                var ver = array[1] >>> 3 & 0x03;\n                var layer = (array[1] & 0x06) >> 1;\n\n                var bitrate_index = (array[2] & 0xF0) >>> 4;\n                var sampling_freq_index = (array[2] & 0x0C) >>> 2;\n\n                var channel_mode = array[3] >>> 6 & 0x03;\n                var channel_count = channel_mode !== 3 ? 2 : 1;\n\n                var sample_rate = 0;\n                var bit_rate = 0;\n                var object_type = 34; // Layer-3, listed in MPEG-4 Audio Object Types\n\n                var codec = 'mp3';\n\n                switch (ver) {\n                    case 0:\n                        // MPEG 2.5\n                        sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];\n                        break;\n                    case 2:\n                        // MPEG 2\n                        sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];\n                        break;\n                    case 3:\n                        // MPEG 1\n                        sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];\n                        break;\n                }\n\n                switch (layer) {\n                    case 1:\n                        // Layer 3\n                        object_type = 34;\n                        if (bitrate_index < this._mpegAudioL3BitRateTable.length) {\n                            bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];\n                        }\n                        break;\n                    case 2:\n                        // Layer 2\n                        object_type = 33;\n                        if (bitrate_index < this._mpegAudioL2BitRateTable.length) {\n                            bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];\n                        }\n                        break;\n                    case 3:\n                        // Layer 1\n                        object_type = 32;\n                        if (bitrate_index < this._mpegAudioL1BitRateTable.length) {\n                            bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];\n                        }\n                        break;\n                }\n\n                result = {\n                    bitRate: bit_rate,\n                    samplingRate: sample_rate,\n                    channelCount: channel_count,\n                    codec: codec,\n                    originalCodec: codec\n                };\n            } else {\n                result = array;\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseVideoData',\n        value: function _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n                return;\n            }\n\n            if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {\n                // If hasVideo: false indicated explicitly in MediaDataSource,\n                // Ignore all the video packets\n                return;\n            }\n\n            var spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];\n\n            var frameType = (spec & 240) >>> 4;\n            var codecId = spec & 15;\n\n            if (codecId !== 7) {\n                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported codec in video frame: ' + codecId);\n                return;\n            }\n\n            this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n        }\n    }, {\n        key: '_parseAVCVideoPacket',\n        value: function _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n            if (dataSize < 4) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var packetType = v.getUint8(0);\n            var cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;\n            var cts = cts_unsigned << 8 >> 8; // convert to 24-bit signed int\n\n            if (packetType === 0) {\n                // AVCDecoderConfigurationRecord\n                this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n            } else if (packetType === 1) {\n                // One or more Nalus\n                this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n            } else if (packetType === 2) {\n                // empty, AVC end of sequence\n            } else {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid video packet type ' + packetType);\n                return;\n            }\n        }\n    }, {\n        key: '_parseAVCDecoderConfigurationRecord',\n        value: function _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 7) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n                return;\n            }\n\n            var meta = this._videoMetadata;\n            var track = this._videoTrack;\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            if (!meta) {\n                if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {\n                    this._hasVideo = true;\n                    this._mediaInfo.hasVideo = true;\n                }\n\n                meta = this._videoMetadata = {};\n                meta.type = 'video';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n            } else {\n                if (typeof meta.avcc !== 'undefined') {\n                    _logger2.default.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n                }\n            }\n\n            var version = v.getUint8(0); // configurationVersion\n            var avcProfile = v.getUint8(1); // avcProfileIndication\n            var profileCompatibility = v.getUint8(2); // profile_compatibility\n            var avcLevel = v.getUint8(3); // AVCLevelIndication\n\n            if (version !== 1 || avcProfile === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n                return;\n            }\n\n            this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n            if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n                // holy shit!!!\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Strange NaluLengthSizeMinusOne: ' + (this._naluLengthSize - 1));\n                return;\n            }\n\n            var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n            if (spsCount === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\n                return;\n            } else if (spsCount > 1) {\n                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ' + spsCount);\n            }\n\n            var offset = 6;\n\n            for (var i = 0; i < spsCount; i++) {\n                var len = v.getUint16(offset, !le); // sequenceParameterSetLength\n                offset += 2;\n\n                if (len === 0) {\n                    continue;\n                }\n\n                // Notice: Nalu without startcode header (00 00 00 01)\n                var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n                offset += len;\n\n                var config = _spsParser2.default.parseSPS(sps);\n                if (i !== 0) {\n                    // ignore other sps's config\n                    continue;\n                }\n\n                meta.codecWidth = config.codec_size.width;\n                meta.codecHeight = config.codec_size.height;\n                meta.presentWidth = config.present_size.width;\n                meta.presentHeight = config.present_size.height;\n\n                meta.profile = config.profile_string;\n                meta.level = config.level_string;\n                meta.bitDepth = config.bit_depth;\n                meta.chromaFormat = config.chroma_format;\n                meta.sarRatio = config.sar_ratio;\n                meta.frameRate = config.frame_rate;\n\n                if (config.frame_rate.fixed === false || config.frame_rate.fps_num === 0 || config.frame_rate.fps_den === 0) {\n                    meta.frameRate = this._referenceFrameRate;\n                }\n\n                var fps_den = meta.frameRate.fps_den;\n                var fps_num = meta.frameRate.fps_num;\n                meta.refSampleDuration = meta.timescale * (fps_den / fps_num);\n\n                var codecArray = sps.subarray(1, 4);\n                var codecString = 'avc1.';\n                for (var j = 0; j < 3; j++) {\n                    var h = codecArray[j].toString(16);\n                    if (h.length < 2) {\n                        h = '0' + h;\n                    }\n                    codecString += h;\n                }\n                meta.codec = codecString;\n\n                var mi = this._mediaInfo;\n                mi.width = meta.codecWidth;\n                mi.height = meta.codecHeight;\n                mi.fps = meta.frameRate.fps;\n                mi.profile = meta.profile;\n                mi.level = meta.level;\n                mi.refFrames = config.ref_frames;\n                mi.chromaFormat = config.chroma_format_string;\n                mi.sarNum = meta.sarRatio.width;\n                mi.sarDen = meta.sarRatio.height;\n                mi.videoCodec = codecString;\n\n                if (mi.hasAudio) {\n                    if (mi.audioCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            }\n\n            var ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n            if (ppsCount === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\n                return;\n            } else if (ppsCount > 1) {\n                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ' + ppsCount);\n            }\n\n            offset++;\n\n            for (var _i = 0; _i < ppsCount; _i++) {\n                var _len = v.getUint16(offset, !le); // pictureParameterSetLength\n                offset += 2;\n\n                if (_len === 0) {\n                    continue;\n                }\n\n                // pps is useless for extracting video information\n                offset += _len;\n            }\n\n            meta.avcc = new Uint8Array(dataSize);\n            meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n            _logger2.default.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n            if (this._isInitialMetadataDispatched()) {\n                // flush parsed frames\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._videoInitialMetadataDispatched = true;\n            }\n            // notify new metadata\n            this._dispatch = false;\n            this._onTrackMetadata('video', meta);\n        }\n    }, {\n        key: '_parseAVCVideoData',\n        value: function _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var units = [],\n                length = 0;\n\n            var offset = 0;\n            var lengthSize = this._naluLengthSize;\n            var dts = this._timestampBase + tagTimestamp;\n            var keyframe = frameType === 1; // from FLV Frame Type constants\n\n            while (offset < dataSize) {\n                if (offset + 4 >= dataSize) {\n                    _logger2.default.w(this.TAG, 'Malformed Nalu near timestamp ' + dts + ', offset = ' + offset + ', dataSize = ' + dataSize);\n                    break; // data not enough for next Nalu\n                }\n                // Nalu with length-header (AVC1)\n                var naluSize = v.getUint32(offset, !le); // Big-Endian read\n                if (lengthSize === 3) {\n                    naluSize >>>= 8;\n                }\n                if (naluSize > dataSize - lengthSize) {\n                    _logger2.default.w(this.TAG, 'Malformed Nalus near timestamp ' + dts + ', NaluSize > DataSize!');\n                    return;\n                }\n\n                var unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n                if (unitType === 5) {\n                    // IDR\n                    keyframe = true;\n                }\n\n                var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n                var unit = { type: unitType, data: data };\n                units.push(unit);\n                length += data.byteLength;\n\n                offset += lengthSize + naluSize;\n            }\n\n            if (units.length) {\n                var track = this._videoTrack;\n                var avcSample = {\n                    units: units,\n                    length: length,\n                    isKeyframe: keyframe,\n                    dts: dts,\n                    cts: cts,\n                    pts: dts + cts\n                };\n                if (keyframe) {\n                    avcSample.fileposition = tagPosition;\n                }\n                track.samples.push(avcSample);\n                track.length += length;\n            }\n        }\n    }, {\n        key: 'onTrackMetadata',\n        get: function get() {\n            return this._onTrackMetadata;\n        },\n        set: function set(callback) {\n            this._onTrackMetadata = callback;\n        }\n\n        // prototype: function(mediaInfo: MediaInfo): void\n\n    }, {\n        key: 'onMediaInfo',\n        get: function get() {\n            return this._onMediaInfo;\n        },\n        set: function set(callback) {\n            this._onMediaInfo = callback;\n        }\n    }, {\n        key: 'onMetaDataArrived',\n        get: function get() {\n            return this._onMetaDataArrived;\n        },\n        set: function set(callback) {\n            this._onMetaDataArrived = callback;\n        }\n    }, {\n        key: 'onScriptDataArrived',\n        get: function get() {\n            return this._onScriptDataArrived;\n        },\n        set: function set(callback) {\n            this._onScriptDataArrived = callback;\n        }\n\n        // prototype: function(type: number, info: string): void\n\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n\n        // prototype: function(videoTrack: any, audioTrack: any): void\n\n    }, {\n        key: 'onDataAvailable',\n        get: function get() {\n            return this._onDataAvailable;\n        },\n        set: function set(callback) {\n            this._onDataAvailable = callback;\n        }\n    }, {\n        key: 'onStreamTime',\n        get: function get() {\n            return this._onStreamTime;\n        },\n        set: function set(callback) {\n            this._onStreamTime = callback;\n        }\n\n        // timestamp base for output samples, must be in milliseconds\n\n    }, {\n        key: 'timestampBase',\n        get: function get() {\n            return this._timestampBase;\n        },\n        set: function set(base) {\n            this._timestampBase = base;\n        }\n    }, {\n        key: 'overridedDuration',\n        get: function get() {\n            return this._duration;\n        }\n\n        // Force-override media duration. Must be in milliseconds, int32\n        ,\n        set: function set(duration) {\n            this._durationOverrided = true;\n            this._duration = duration;\n            this._mediaInfo.duration = duration;\n        }\n\n        // Force-override audio track present flag, boolean\n\n    }, {\n        key: 'overridedHasAudio',\n        set: function set(hasAudio) {\n            this._hasAudioFlagOverrided = true;\n            this._hasAudio = hasAudio;\n            this._mediaInfo.hasAudio = hasAudio;\n        }\n\n        // Force-override video track present flag, boolean\n\n    }, {\n        key: 'overridedHasVideo',\n        set: function set(hasVideo) {\n            this._hasVideoFlagOverrided = true;\n            this._hasVideo = hasVideo;\n            this._mediaInfo.hasVideo = hasVideo;\n        }\n    }], [{\n        key: 'probe',\n        value: function probe(buffer) {\n            var data = new Uint8Array(buffer);\n            var mismatch = { match: false };\n\n            if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n                return mismatch;\n            }\n\n            var hasAudio = (data[4] & 4) >>> 2 !== 0;\n            var hasVideo = (data[4] & 1) !== 0;\n\n            var offset = ReadBig32(data, 5);\n\n            if (offset < 9) {\n                return mismatch;\n            }\n\n            return {\n                match: true,\n                consumed: offset,\n                dataOffset: offset,\n                hasAudioTrack: hasAudio,\n                hasVideoTrack: hasVideo\n            };\n        }\n    }]);\n\n    return FLVDemuxer;\n}();\n\nexports.default = FLVDemuxer;\n\n},{\"../core/media-info.js\":7,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./amf-parser.js\":15,\"./demux-errors.js\":16,\"./sps-parser.js\":19}],19:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\r\nn\nvar _expGolomb = _dereq_('./exp-golomb.js');\n\nvar _expGolomb2 = _interopRequireDefault(_expGolomb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SPSParser = function () {\n    function SPSParser() {\n        _classCallCheck(this, SPSParser);\n    }\n\n    _createClass(SPSParser, null, [{\n        key: '_ebsp2rbsp',\n        value: function _ebsp2rbsp(uint8array) {\n            var src = uint8array;\n            var src_length = src.byteLength;\n            var dst = new Uint8Array(src_length);\n            var dst_idx = 0;\n\n            for (var i = 0; i < src_length; i++) {\n                if (i >= 2) {\n                    // Unescape: Skip 0x03 after 00 00\n                    if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                        continue;\n                    }\n                }\n                dst[dst_idx] = src[i];\n                dst_idx++;\n            }\n\n            return new Uint8Array(dst.buffer, 0, dst_idx);\n        }\n    }, {\n        key: 'parseSPS',\n        value: function parseSPS(uint8array) {\n            var rbsp = SPSParser._ebsp2rbsp(uint8array);\n            var gb = new _expGolomb2.default(rbsp);\n\n            gb.readByte();\n            var profile_idc = gb.readByte(); // profile_idc\n            gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n            var level_idc = gb.readByte(); // level_idc\n            gb.readUEG(); // seq_parameter_set_id\n\n            var profile_string = SPSParser.getProfileString(profile_idc);\n            var level_string = SPSParser.getLevelString(level_idc);\n            var chroma_format_idc = 1;\n            var chroma_format = 420;\n            var chroma_format_table = [0, 420, 422, 444];\n            var bit_depth = 8;\n\n            if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {\n\n                chroma_format_idc = gb.readUEG();\n                if (chroma_format_idc === 3) {\n                    gb.readBits(1); // separate_colour_plane_flag\n                }\n                if (chroma_format_idc <= 3) {\n                    chroma_format = chroma_format_table[chroma_format_idc];\n                }\n\n                bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8\n                gb.readUEG(); // bit_depth_chroma_minus8\n                gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n                if (gb.readBool()) {\n                    // seq_scaling_matrix_present_flag\n                    var scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;\n                    for (var i = 0; i < scaling_list_count; i++) {\n                        if (gb.readBool()) {\n                            // seq_scaling_list_present_flag\n                            if (i < 6) {\n                                SPSParser._skipScalingList(gb, 16);\n                            } else {\n                                SPSParser._skipScalingList(gb, 64);\n                            }\n                        }\n                    }\n                }\n            }\n            gb.readUEG(); // log2_max_frame_num_minus4\n            var pic_order_cnt_type = gb.readUEG();\n            if (pic_order_cnt_type === 0) {\n                gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n            } else if (pic_order_cnt_type === 1) {\n                gb.readBits(1); // delta_pic_order_always_zero_flag\n                gb.readSEG(); // offset_for_non_ref_pic\n                gb.readSEG(); // offset_for_top_to_bottom_field\n                var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n                for (var _i = 0; _i < num_ref_frames_in_pic_order_cnt_cycle; _i++) {\n                    gb.readSEG(); // offset_for_ref_frame\n                }\n            }\n            var ref_frames = gb.readUEG(); // max_num_ref_frames\n            gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n            var pic_width_in_mbs_minus1 = gb.readUEG();\n            var pic_height_in_map_units_minus1 = gb.readUEG();\n\n            var frame_mbs_only_flag = gb.readBits(1);\n            if (frame_mbs_only_flag === 0) {\n                gb.readBits(1); // mb_adaptive_frame_field_flag\n            }\n            gb.readBits(1); // direct_8x8_inference_flag\n\n            var frame_crop_left_offset = 0;\n            var frame_crop_right_offset = 0;\n            var frame_crop_top_offset = 0;\n            var frame_crop_bottom_offset = 0;\n\n            var frame_cropping_flag = gb.readBool();\n            if (frame_cropping_flag) {\n                frame_crop_left_offset = gb.readUEG();\n                frame_crop_right_offset = gb.readUEG();\n                frame_crop_top_offset = gb.readUEG();\n                frame_crop_bottom_offset = gb.readUEG();\n            }\n\n            var sar_width = 1,\n                sar_height = 1;\n            var fps = 0,\n                fps_fixed = true,\n                fps_num = 0,\n                fps_den = 0;\n\n            var vui_parameters_present_flag = gb.readBool();\n            if (vui_parameters_present_flag) {\n                if (gb.readBool()) {\n                    // aspect_ratio_info_present_flag\n                    var aspect_ratio_idc = gb.readByte();\n                    var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                    var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                    if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                        sar_width = sar_w_table[aspect_ratio_idc - 1];\n                        sar_height = sar_h_table[aspect_ratio_idc - 1];\n                    } else if (aspect_ratio_idc === 255) {\n                        sar_width = gb.readByte() << 8 | gb.readByte();\n                        sar_height = gb.readByte() << 8 | gb.readByte();\n                    }\n                }\n\n                if (gb.readBool()) {\n                    // overscan_info_present_flag\n                    gb.readBool(); // overscan_appropriate_flag\n                }\n                if (gb.readBool()) {\n                    // video_signal_type_present_flag\n                    gb.readBits(4); // video_format & video_full_range_flag\n                    if (gb.readBool()) {\n                        // colour_description_present_flag\n                        gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                    }\n                }\n                if (gb.readBool()) {\n                    // chroma_loc_info_present_flag\n                    gb.readUEG(); // chroma_sample_loc_type_top_field\n                    gb.readUEG(); // chroma_sample_loc_type_bottom_field\n                }\n                if (gb.readBool()) {\n                    // timing_info_present_flag\n                    var num_units_in_tick = gb.readBits(32);\n                    var time_scale = gb.readBits(32);\n                    fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n                    fps_num = time_scale;\n                    fps_den = num_units_in_tick * 2;\n                    fps = fps_num / fps_den;\n                }\n            }\n\n            var sarScale = 1;\n            if (sar_width !== 1 || sar_height !== 1) {\n                sarScale = sar_width / sar_height;\n            }\n\n            var crop_unit_x = 0,\n                crop_unit_y = 0;\n            if (chroma_format_idc === 0) {\n                crop_unit_x = 1;\n                crop_unit_y = 2 - frame_mbs_only_flag;\n            } else {\n                var sub_wc = chroma_format_idc === 3 ? 1 : 2;\n                var sub_hc = chroma_format_idc === 1 ? 2 : 1;\n                crop_unit_x = sub_wc;\n                crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n            }\n\n            var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n            var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n            codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n            codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n            var present_width = Math.ceil(codec_width * sarScale);\n\n            gb.destroy();\n            gb = null;\n\n            return {\n                profile_string: profile_string, // baseline, high, high10, ...\n                level_string: level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n                bit_depth: bit_depth, // 8bit, 10bit, ...\n                ref_frames: ref_frames,\n                chroma_format: chroma_format, // 4:2:0, 4:2:2, ...\n                chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n                frame_rate: {\n                    fixed: fps_fixed,\n                    fps: fps,\n                    fps_den: fps_den,\n                    fps_num: fps_num\n                },\n\n                sar_ratio: {\n                    width: sar_width,\n                    height: sar_height\n                },\n\n                codec_size: {\n                    width: codec_width,\n                    height: codec_height\n                },\n\n                present_size: {\n                    width: present_width,\n                    height: codec_height\n                }\n            };\n        }\n    }, {\n        key: '_skipScalingList',\n        value: function _skipScalingList(gb, count) {\n            var last_scale = 8,\n                next_scale = 8;\n            var delta_scale = 0;\n            for (var i = 0; i < count; i++) {\n                if (next_scale !== 0) {\n                    delta_scale = gb.readSEG();\n                    next_scale = (last_scale + delta_scale + 256) % 256;\n                }\n                last_scale = next_scale === 0 ? last_scale : next_scale;\n            }\n        }\n    }, {\n        key: 'getProfileString',\n        value: function getProfileString(profile_idc) {\n            switch (profile_idc) {\n                case 66:\n                    return 'Baseline';\n                case 77:\n                    return 'Main';\n                case 88:\n                    return 'Extended';\n                case 100:\n                    return 'High';\n                case 110:\n                    return 'High10';\n                case 122:\n                    return 'High422';\n                case 244:\n                    return 'High444';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }, {\n        key: 'getLevelString',\n        value: function getLevelString(level_idc) {\n            return (level_idc / 10).toFixed(1);\n        }\n    }, {\n        key: 'getChromaFormatString',\n        value: function getChromaFormatString(chroma) {\n            switch (chroma) {\n                case 420:\n                    return '4:2:0';\n                case 422:\n                    return '4:2:2';\n                case 444:\n                    return '4:4:4';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }]);\n\n    return SPSParser;\n}();\n\nexports.default = SPSParser;\n\n},{\"./exp-golomb.js\":17}],20:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\r\n                                                                                                                                                                                                                                                                               * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               *     http://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                               * limitations under the License.\r\n                                                                                                                                                                                                                                                                               */\n\nvar _polyfill = _dereq_('./utils/polyfill.js');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _features = _dereq_('./core/features.js');\n\nvar _features2 = _interopRequireDefault(_features);\n\nvar _loader = _dereq_('./io/loader.js');\n\nvar _flvPlayer = _dereq_('./player/flv-player.js');\n\nvar _flvPlayer2 = _interopRequireDefault(_flvPlayer);\n\nvar _nativePlayer = _dereq_('./player/native-player.js');\n\nvar _nativePlayer2 = _interopRequireDefault(_nativePlayer);\n\nvar _playerEvents = _dereq_('./player/player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _playerErrors = _dereq_('./player/player-errors.js');\n\nvar _loggingControl = _dereq_('./utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _exception = _dereq_('./utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// here are all the interfaces\n\n// install polyfills\n_polyfill2.default.install();\n\n// factory method\nfunction createPlayer(mediaDataSource, optionalConfig) {\n    var mds = mediaDataSource;\n    if (mds == null || (typeof mds === 'undefined' ? 'undefined' : _typeof(mds)) !== 'object') {\n        throw new _exception.InvalidArgumentException('MediaDataSource must be an javascript object!');\n    }\n\n    if (!mds.hasOwnProperty('type')) {\n        throw new _exception.InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\n    }\n\n    switch (mds.type) {\n        case 'flv':\n            return new _flvPlayer2.default(mds, optionalConfig);\n        default:\n            return new _nativePlayer2.default(mds, optionalConfig);\n    }\n}\n\n// feature detection\nfunction isSupported() {\n    return _features2.default.supportMSEH264Playback();\n}\n\nfunction getFeatureList() {\n    return _features2.default.getFeatureList();\n}\n\n// interfaces\nvar flvjs = {};\n\nflvjs.createPlayer = createPlayer;\nflvjs.isSupported = isSupported;\nflvjs.getFeatureList = getFeatureList;\n\nflvjs.BaseLoader = _loader.BaseLoader;\nflvjs.LoaderStatus = _loader.LoaderStatus;\nflvjs.LoaderErrors = _loader.LoaderErrors;\n\nflvjs.Events = _playerEvents2.default;\nflvjs.ErrorTypes = _playerErrors.ErrorTypes;\nflvjs.ErrorDetails = _playerErrors.ErrorDetails;\n\nflvjs.FlvPlayer = _flvPlayer2.default;\nflvjs.NativePlayer = _nativePlayer2.default;\nflvjs.LoggingControl = _loggingControl2.default;\n\nObject.defineProperty(flvjs, 'version', {\n    enumerable: true,\n    get: function get() {\n        // replaced by browserify-versionify transform\n        return '1.6.1';\n    }\n});\n\nexports.default = flvjs;\n\n},{\"./core/features.js\":6,\"./io/loader.js\":24,\"./player/flv-player.js\":32,\"./player/native-player.js\":33,\"./player/player-errors.js\":34,\"./player/player-events.js\":35,\"./utils/exception.js\":40,\"./utils/logging-control.js\":42,\"./utils/polyfill.js\":43}],21:[function(_dereq_,module,exports){\n'use strict';\n\n// entry/index file\n\n// make it compatible with browserify's umd wrapper\nmodule.exports = _dereq_('./flv.js').default;\n\n},{\"./flv.js\":20}],22:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/* fetch + stream IO loader. Currently working on chrome 43+.\r\n * fetch provides a better alternative http API to XMLHttpRequest\r\n *\r\n * fetch spec   https://fetch.spec.whatwg.org/\r\n * stream spec  https://streams.spec.whatwg.org/\r\n */\nvar FetchStreamLoader = function (_BaseLoader) {\n    _inherits(FetchStreamLoader, _BaseLoader);\n\n    _createClass(FetchStreamLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\n                // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\n                // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\n                var isWorkWellEdge = _browser2.default.msedge && _browser2.default.version.minor >= 15048;\n                var browserNotBlacklisted = _browser2.default.msedge ? isWorkWellEdge : true;\n                return self.fetch && self.ReadableStream && browserNotBlacklisted;\n            } catch (e) {\n                return false;\n            }\n        }\n    }]);\n\n    function FetchStreamLoader(seekHandler, config) {\n        _classCallCheck(this, FetchStreamLoader);\n\n        var _this = _possibleConstructorReturn(this, (FetchStreamLoader.__proto__ || Object.getPrototypeOf(FetchStreamLoader)).call(this, 'fetch-stream-loader'));\n\n        _this.TAG = 'FetchStreamLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._requestAbort = false;\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(FetchStreamLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            _get(FetchStreamLoader.prototype.__proto__ || Object.getPrototypeOf(FetchStreamLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            var _this2 = this;\n\n            this._dataSource = dataSource;\n            this._range = range;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n            var headers = new self.Headers();\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var configHeaders = seekConfig.headers;\n                for (var key in configHeaders) {\n                    if (configHeaders.hasOwnProperty(key)) {\n                        headers.append(key, configHeaders[key]);\n                    }\n                }\n            }\n\n            var params = {\n                method: 'GET',\n                headers: headers,\n                mode: 'cors',\n                cache: 'default',\n                // The default policy of Fetch API in the whatwg standard\n                // Safari incorrectly indicates 'no-referrer' as default policy, fuck it\n                referrerPolicy: 'no-referrer-when-downgrade'\n            };\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                for (var _key in this._config.headers) {\n                    headers.append(_key, this._config.headers[_key]);\n                }\n            }\n\n            // cors is enabled by default\n            if (dataSource.cors === false) {\n                // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\n                params.mode = 'same-origin';\n            }\n\n            // withCredentials is disabled by default\n            if (dataSource.withCredentials) {\n                params.credentials = 'include';\n            }\n\n            // referrerPolicy from config\n            if (dataSource.referrerPolicy) {\n                params.referrerPolicy = dataSource.referrerPolicy;\n            }\n\n            // add abort controller, by wmlgl 2019-5-10 12:21:27\n            if (self.AbortController) {\n                this._abortController = new self.AbortController();\n                params.signal = this._abortController.signal;\n            }\n\n            this._status = _loader.LoaderStatus.kConnecting;\n            self.fetch(seekConfig.url, params).then(function (res) {\n                if (_this2._requestAbort) {\n                    _this2._status = _loader.LoaderStatus.kIdle;\n                    res.body.cancel();\n                    return;\n                }\n                if (res.ok && res.status >= 200 && res.status <= 299) {\n                    if (res.url !== seekConfig.url) {\n                        if (_this2._onURLRedirect) {\n                            var redirectedURL = _this2._seekHandler.removeURLParameters(res.url);\n                            _this2._onURLRedirect(redirectedURL);\n                        }\n                    }\n\n                    var lengthHeader = res.headers.get('Content-Length');\n                    if (lengthHeader != null) {\n                        _this2._contentLength = parseInt(lengthHeader);\n                        if (_this2._contentLength !== 0) {\n                            if (_this2._onContentLengthKnown) {\n                                _this2._onContentLengthKnown(_this2._contentLength);\n                            }\n                        }\n                    }\n\n                    return _this2._pump.call(_this2, res.body.getReader());\n                } else {\n                    _this2._status = _loader.LoaderStatus.kError;\n                    if (_this2._onError) {\n                        _this2._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: res.status, msg: res.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\n                    }\n                }\n            }).catch(function (e) {\n                if (_this2._abortController && _this2._abortController.signal.aborted) {\n                    return;\n                }\n\n                _this2._status = _loader.LoaderStatus.kError;\n                if (_this2._onError) {\n                    _this2._onError(_loader.LoaderErrors.EXCEPTION, { code: -1, msg: e.message });\n                } else {\n                    throw e;\n                }\n            });\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n\n            if (this._status !== _loader.LoaderStatus.kBuffering || !_browser2.default.chrome) {\n                // Chrome may throw Exception-like things here, avoid using if is buffering\n                if (this._abortController) {\n                    try {\n                        this._abortController.abort();\n                    } catch (e) {\n                        return;\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_pump',\n        value: function _pump(reader) {\n            var _this3 = this;\n\n            // ReadableStreamReader\n            return reader.read().then(function (result) {\n                if (result.done) {\n                    // First check received length\n                    if (_this3._contentLength !== null && _this3._receivedLength < _this3._contentLength) {\n                        // Report Early-EOF\n                        _this3._status = _loader.LoaderStatus.kError;\n                        var type = _loader.LoaderErrors.EARLY_EOF;\n                        var info = { code: -1, msg: 'Fetch stream meet Early-EOF' };\n                        if (_this3._onError) {\n                            _this3._onError(type, info);\n                        } else {\n                            throw new _exception.RuntimeException(info.msg);\n                        }\n                    } else {\n                        // OK. Download complete\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        if (_this3._onComplete) {\n                            _this3._onComplete(_this3._range.from, _this3._range.from + _this3._receivedLength - 1);\n                        }\n                    }\n                } else {\n                    if (_this3._abortController && _this3._abortController.signal.aborted) {\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        return;\n                    } else if (_this3._requestAbort === true) {\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        return reader.cancel();\n                    }\n\n                    _this3._status = _loader.LoaderStatus.kBuffering;\n\n                    var chunk = result.value.buffer;\n                    var byteStart = _this3._range.from + _this3._receivedLength;\n                    _this3._receivedLength += chunk.byteLength;\n\n                    if (_this3._onDataArrival) {\n                        _this3._onDataArrival(chunk, byteStart, _this3._receivedLength);\n                    }\n\n                    _this3._pump(reader);\n                }\n            }).catch(function (e) {\n                if (_this3._abortController && _this3._abortController.signal.aborted) {\n                    _this3._status = _loader.LoaderStatus.kComplete;\n                    return;\n                }\n\n                if (e.code === 11 && _browser2.default.msedge) {\n                    // InvalidStateError on Microsoft Edge\n                    // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\n                    // Ignore the unknown exception.\n                    // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\n                    return;\n                }\n\n                _this3._status = _loader.LoaderStatus.kError;\n                var type = 0;\n                var info = null;\n\n                if ((e.code === 19 || e.message === 'network error') && ( // NETWORK_ERR\n                _this3._contentLength === null || _this3._contentLength !== null && _this3._receivedLength < _this3._contentLength)) {\n                    type = _loader.LoaderErrors.EARLY_EOF;\n                    info = { code: e.code, msg: 'Fetch stream meet Early-EOF' };\n                } else {\n                    type = _loader.LoaderErrors.EXCEPTION;\n                    info = { code: e.code, msg: e.message };\n                }\n\n                if (_this3._onError) {\n                    _this3._onError(type, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            });\n        }\n    }]);\n\n    return FetchStreamLoader;\n}(_loader.BaseLoader);\n\nexports.default = FetchStreamLoader;\n\n},{\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],23:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _speedSampler = _dereq_('./speed-sampler.js');\n\nvar _speedSampler2 = _interopRequireDefault(_speedSampler);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _fetchStreamLoader = _dereq_('./fetch-stream-loader.js');\n\nvar _fetchStreamLoader2 = _interopRequireDefault(_fetchStreamLoader);\n\nvar _xhrMozChunkedLoader = _dereq_('./xhr-moz-chunked-loader.js');\n\nvar _xhrMozChunkedLoader2 = _interopRequireDefault(_xhrMozChunkedLoader);\n\nvar _xhrMsstreamLoader = _dereq_('./xhr-msstream-loader.js');\n\nvar _xhrMsstreamLoader2 = _interopRequireDefault(_xhrMsstreamLoader);\n\nvar _xhrRangeLoader = _dereq_('./xhr-range-loader.js');\n\nvar _xhrRangeLoader2 = _interopRequireDefault(_xhrRangeLoader);\n\nvar _websocketLoader = _dereq_('./websocket-loader.js');\n\nvar _websocketLoader2 = _interopRequireDefault(_websocketLoader);\n\nvar _rangeSeekHandler = _dereq_('./range-seek-handler.js');\n\nvar _rangeSeekHandler2 = _interopRequireDefault(_rangeSeekHandler);\n\nvar _paramSeekHandler = _dereq_('./param-seek-handler.js');\n\nvar _paramSeekHandler2 = _interopRequireDefault(_paramSeekHandler);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * DataSource: {\r\n *     url: string,\r\n *     filesize: number,\r\n *     cors: boolean,\r\n *     withCredentials: boolean\r\n * }\r\n * \r\n */\n\n// Manage IO Loaders\nvar IOController = function () {\n    function IOController(dataSource, config, extraData) {\n        _classCallCheck(this, IOController);\n\n        this.TAG = 'IOController';\n\n        this._config = config;\n        this._extraData = extraData;\n\n        this._stashInitialSize = 1024 * 384; // default initial size: 384KB\n        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {\n            // apply from config\n            this._stashInitialSize = config.stashInitialSize;\n        }\n\n        this._stashUsed = 0;\n        this._stashSize = this._stashInitialSize;\n        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB\n        this._stashBuffer = new ArrayBuffer(this._bufferSize);\n        this._stashByteStart = 0;\n        this._enableStash = true;\n        if (config.enableStashBuffer === false) {\n            this._enableStash = false;\n        }\n\n        this._loader = null;\n        this._loaderClass = null;\n        this._seekHandler = null;\n\n        this._dataSource = dataSource;\n        this._isWebSocketURL = /wss?:\\/\\/(.+?)/.test(dataSource.url);\n        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;\n        this._totalLength = this._refTotalLength;\n        this._fullRequestFlag = false;\n        this._currentRange = null;\n        this._redirectedURL = null;\n\n        this._speedNormalized = 0;\n        this._speedSampler = new _speedSampler2.default();\n        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];\n\n        this._isEarlyEofReconnecting = false;\n\n        this._paused = false;\n        this._resumeFrom = 0;\n\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n\n        this._selectSeekHandler();\n        this._selectLoader();\n        this._createLoader();\n    }\n\n    _createClass(IOController, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._loader.isWorking()) {\n                this._loader.abort();\n            }\n            this._loader.destroy();\n            this._loader = null;\n            this._loaderClass = null;\n            this._dataSource = null;\n            this._stashBuffer = null;\n            this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;\n            this._currentRange = null;\n            this._speedSampler = null;\n\n            this._isEarlyEofReconnecting = false;\n\n            this._onDataArrival = null;\n            this._onSeeked = null;\n            this._onError = null;\n            this._onComplete = null;\n            this._onRedirect = null;\n            this._onRecoveredEarlyEof = null;\n\n            this._extraData = null;\n        }\n    }, {\n        key: 'isWorking',\n        value: function isWorking() {\n            return this._loader && this._loader.isWorking() && !this._paused;\n        }\n    }, {\n        key: 'isPaused',\n        value: function isPaused() {\n            return this._paused;\n        }\n    }, {\n        key: '_selectSeekHandler',\n        value: function _selectSeekHandler() {\n            var config = this._config;\n\n            if (config.seekType === 'range') {\n                this._seekHandler = new _rangeSeekHandler2.default(this._config.rangeLoadZeroStart);\n            } else if (config.seekType === 'param') {\n                var paramStart = config.seekParamStart || 'bstart';\n                var paramEnd = config.seekParamEnd || 'bend';\n\n                this._seekHandler = new _paramSeekHandler2.default(paramStart, paramEnd);\n            } else if (config.seekType === 'custom') {\n                if (typeof config.customSeekHandler !== 'function') {\n                    throw new _exception.InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');\n                }\n                this._seekHandler = new config.customSeekHandler();\n            } else {\n                throw new _exception.InvalidArgumentException('Invalid seekType in config: ' + config.seekType);\n            }\n        }\n    }, {\n        key: '_selectLoader',\n        value: function _selectLoader() {\n            if (this._config.customLoader != null) {\n                this._loaderClass = this._config.customLoader;\n            } else if (this._isWebSocketURL) {\n                this._loaderClass = _websocketLoader2.default;\n            } else if (_fetchStreamLoader2.default.isSupported()) {\n                this._loaderClass = _fetchStreamLoader2.default;\n            } else if (_xhrMozChunkedLoader2.default.isSupported()) {\n                this._loaderClass = _xhrMozChunkedLoader2.default;\n            } else if (_xhrRangeLoader2.default.isSupported()) {\n                this._loaderClass = _xhrRangeLoader2.default;\n            } else {\n                throw new _exception.RuntimeException('Your browser doesn\\'t support xhr with arraybuffer responseType!');\n            }\n        }\n    }, {\n        key: '_createLoader',\n        value: function _createLoader() {\n            this._loader = new this._loaderClass(this._seekHandler, this._config);\n            if (this._loader.needStashBuffer === false) {\n                this._enableStash = false;\n            }\n            this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);\n            this._loader.onURLRedirect = this._onURLRedirect.bind(this);\n            this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);\n            this._loader.onComplete = this._onLoaderComplete.bind(this);\n            this._loader.onError = this._onLoaderError.bind(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(optionalFrom) {\n            this._currentRange = { from: 0, to: -1 };\n            if (optionalFrom) {\n                this._currentRange.from = optionalFrom;\n            }\n\n            this._speedSampler.reset();\n            if (!optionalFrom) {\n                this._fullRequestFlag = true;\n            }\n\n            this._loader.open(this._dataSource, Object.assign({}, this._currentRange));\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._loader.abort();\n\n            if (this._paused) {\n                this._paused = false;\n                this._resumeFrom = 0;\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (this.isWorking()) {\n                this._loader.abort();\n\n                if (this._stashUsed !== 0) {\n                    this._resumeFrom = this._stashByteStart;\n                    this._currentRange.to = this._stashByteStart - 1;\n                } else {\n                    this._resumeFrom = this._currentRange.to + 1;\n                }\n                this._stashUsed = 0;\n                this._stashByteStart = 0;\n                this._paused = true;\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._paused) {\n                this._paused = false;\n                var bytes = this._resumeFrom;\n                this._resumeFrom = 0;\n                this._internalSeek(bytes, true);\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(bytes) {\n            this._paused = false;\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            this._internalSeek(bytes, true);\n        }\n\n        /**\r\n         * When seeking request is from media seeking, unconsumed stash data should be dropped\r\n         * However, stash data shouldn't be dropped if seeking requested from http reconnection\r\n         *\r\n         * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer\r\n         */\n\n    }, {\n        key: '_internalSeek',\n        value: function _internalSeek(bytes, dropUnconsumed) {\n            if (this._loader.isWorking()) {\n                this._loader.abort();\n            }\n\n            // dispatch & flush stash buffer before seek\n            this._flushStashBuffer(dropUnconsumed);\n\n            this._loader.destroy();\n            this._loader = null;\n\n            var requestRange = { from: bytes, to: -1 };\n            this._currentRange = { from: requestRange.from, to: -1 };\n\n            this._speedSampler.reset();\n            this._stashSize = this._stashInitialSize;\n            this._createLoader();\n            this._loader.open(this._dataSource, requestRange);\n\n            if (this._onSeeked) {\n                this._onSeeked();\n            }\n        }\n    }, {\n        key: 'updateUrl',\n        value: function updateUrl(url) {\n            if (!url || typeof url !== 'string' || url.length === 0) {\n                throw new _exception.InvalidArgumentException('Url must be a non-empty string!');\n            }\n\n            this._dataSource.url = url;\n\n            // TODO: replace with new url\n        }\n    }, {\n        key: '_expandBuffer',\n        value: function _expandBuffer(expectedBytes) {\n            var bufferNewSize = this._stashSize;\n            while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {\n                bufferNewSize *= 2;\n            }\n\n            bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB\n            if (bufferNewSize === this._bufferSize) {\n                return;\n            }\n\n            var newBuffer = new ArrayBuffer(bufferNewSize);\n\n            if (this._stashUsed > 0) {\n                // copy existing data into new buffer\n                var stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);\n                var stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);\n                stashNewArray.set(stashOldArray, 0);\n            }\n\n            this._stashBuffer = newBuffer;\n            this._bufferSize = bufferNewSize;\n        }\n    }, {\n        key: '_normalizeSpeed',\n        value: function _normalizeSpeed(input) {\n            var list = this._speedNormalizeList;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (input < list[0]) {\n                return list[0];\n            }\n\n            // binary search\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || input >= list[mid] && input < list[mid + 1]) {\n                    return list[mid];\n                } else if (list[mid] < input) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n        }\n    }, {\n        key: '_adjustStashSize',\n        value: function _adjustStashSize(normalized) {\n            var stashSizeKB = 0;\n\n            if (this._config.isLive) {\n                // live stream: always use single normalized speed for size of stashSizeKB\n                stashSizeKB = normalized;\n            } else {\n                if (normalized < 512) {\n                    stashSizeKB = normalized;\n                } else if (normalized >= 512 && normalized <= 1024) {\n                    stashSizeKB = Math.floor(normalized * 1.5);\n                } else {\n                    stashSizeKB = normalized * 2;\n                }\n            }\n\n            if (stashSizeKB > 8192) {\n                stashSizeKB = 8192;\n            }\n\n            var bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB\n            if (this._bufferSize < bufferSize) {\n                this._expandBuffer(bufferSize);\n            }\n            this._stashSize = stashSizeKB * 1024;\n        }\n    }, {\n        key: '_dispatchChunks',\n        value: function _dispatchChunks(chunks, byteStart) {\n            this._currentRange.to = byteStart + chunks.byteLength - 1;\n            return this._onDataArrival(chunks, byteStart);\n        }\n    }, {\n        key: '_onURLRedirect',\n        value: function _onURLRedirect(redirectedURL) {\n            this._redirectedURL = redirectedURL;\n            if (this._onRedirect) {\n                this._onRedirect(redirectedURL);\n            }\n        }\n    }, {\n        key: '_onContentLengthKnown',\n        value: function _onContentLengthKnown(contentLength) {\n            if (contentLength && this._fullRequestFlag) {\n                this._totalLength = contentLength;\n                this._fullRequestFlag = false;\n            }\n        }\n    }, {\n        key: '_onLoaderChunkArrival',\n        value: function _onLoaderChunkArrival(chunk, byteStart, receivedLength) {\n            if (!this._onDataArrival) {\n                throw new _exception.IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');\n            }\n            if (this._paused) {\n                return;\n            }\n            if (this._isEarlyEofReconnecting) {\n                // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback\n                this._isEarlyEofReconnecting = false;\n                if (this._onRecoveredEarlyEof) {\n                    this._onRecoveredEarlyEof();\n                }\n            }\n\n            this._speedSampler.addBytes(chunk.byteLength);\n\n            // adjust stash buffer size according to network speed dynamically\n            var KBps = this._speedSampler.lastSecondKBps;\n            if (KBps !== 0) {\n                var normalized = this._normalizeSpeed(KBps);\n                if (this._speedNormalized !== normalized) {\n                    this._speedNormalized = normalized;\n                    this._adjustStashSize(normalized);\n                }\n            }\n\n            if (!this._enableStash) {\n                // disable stash\n                if (this._stashUsed === 0) {\n                    // dispatch chunk directly to consumer;\n                    // check ret value (consumed bytes) and stash unconsumed to stashBuffer\n                    var consumed = this._dispatchChunks(chunk, byteStart);\n                    if (consumed < chunk.byteLength) {\n                        // unconsumed data remain.\n                        var remain = chunk.byteLength - consumed;\n                        if (remain > this._bufferSize) {\n                            this._expandBuffer(remain);\n                        }\n                        var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        stashArray.set(new Uint8Array(chunk, consumed), 0);\n                        this._stashUsed += remain;\n                        this._stashByteStart = byteStart + consumed;\n                    }\n                } else {\n                    // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.\n                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                        this._expandBuffer(this._stashUsed + chunk.byteLength);\n                    }\n                    var _stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    _stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                    var _consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);\n                    if (_consumed < this._stashUsed && _consumed > 0) {\n                        // unconsumed data remain\n                        var remainArray = new Uint8Array(this._stashBuffer, _consumed);\n                        _stashArray.set(remainArray, 0);\n                    }\n                    this._stashUsed -= _consumed;\n                    this._stashByteStart += _consumed;\n                }\n            } else {\n                // enable stash\n                if (this._stashUsed === 0 && this._stashByteStart === 0) {\n                    // seeked? or init chunk?\n                    // This is the first chunk after seek action\n                    this._stashByteStart = byteStart;\n                }\n                if (this._stashUsed + chunk.byteLength <= this._stashSize) {\n                    // just stash\n                    var _stashArray2 = new Uint8Array(this._stashBuffer, 0, this._stashSize);\n                    _stashArray2.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                } else {\n                    // stashUsed + chunkSize > stashSize, size limit exceeded\n                    var _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    if (this._stashUsed > 0) {\n                        // There're stash datas in buffer\n                        // dispatch the whole stashBuffer, and stash remain data\n                        // then append chunk to stashBuffer (stash)\n                        var buffer = this._stashBuffer.slice(0, this._stashUsed);\n                        var _consumed2 = this._dispatchChunks(buffer, this._stashByteStart);\n                        if (_consumed2 < buffer.byteLength) {\n                            if (_consumed2 > 0) {\n                                var _remainArray = new Uint8Array(buffer, _consumed2);\n                                _stashArray3.set(_remainArray, 0);\n                                this._stashUsed = _remainArray.byteLength;\n                                this._stashByteStart += _consumed2;\n                            }\n                        } else {\n                            this._stashUsed = 0;\n                            this._stashByteStart += _consumed2;\n                        }\n                        if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                            this._expandBuffer(this._stashUsed + chunk.byteLength);\n                            _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        }\n                        _stashArray3.set(new Uint8Array(chunk), this._stashUsed);\n                        this._stashUsed += chunk.byteLength;\n                    } else {\n                        // stash buffer empty, but chunkSize > stashSize (oh, holy shit)\n                        // dispatch chunk directly and stash remain data\n                        var _consumed3 = this._dispatchChunks(chunk, byteStart);\n                        if (_consumed3 < chunk.byteLength) {\n                            var _remain = chunk.byteLength - _consumed3;\n                            if (_remain > this._bufferSize) {\n                                this._expandBuffer(_remain);\n                                _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                            }\n                            _stashArray3.set(new Uint8Array(chunk, _consumed3), 0);\n                            this._stashUsed += _remain;\n                            this._stashByteStart = byteStart + _consumed3;\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_flushStashBuffer',\n        value: function _flushStashBuffer(dropUnconsumed) {\n            if (this._stashUsed > 0) {\n                var buffer = this._stashBuffer.slice(0, this._stashUsed);\n                var consumed = this._dispatchChunks(buffer, this._stashByteStart);\n                var remain = buffer.byteLength - consumed;\n\n                if (consumed < buffer.byteLength) {\n                    if (dropUnconsumed) {\n                        _logger2.default.w(this.TAG, remain + ' bytes unconsumed data remain when flush buffer, dropped');\n                    } else {\n                        if (consumed > 0) {\n                            var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                            var remainArray = new Uint8Array(buffer, consumed);\n                            stashArray.set(remainArray, 0);\n                            this._stashUsed = remainArray.byteLength;\n                            this._stashByteStart += consumed;\n                        }\n                        return 0;\n                    }\n                }\n                this._stashUsed = 0;\n                this._stashByteStart = 0;\n                return remain;\n            }\n            return 0;\n        }\n    }, {\n        key: '_onLoaderComplete',\n        value: function _onLoaderComplete(from, to) {\n            // Force-flush stash buffer, and drop unconsumed data\n            this._flushStashBuffer(true);\n\n            if (this._onComplete) {\n                this._onComplete(this._extraData);\n            }\n        }\n    }, {\n        key: '_onLoaderError',\n        value: function _onLoaderError(type, data) {\n            _logger2.default.e(this.TAG, 'Loader error, code = ' + data.code + ', msg = ' + data.msg);\n\n            this._flushStashBuffer(false);\n\n            if (this._isEarlyEofReconnecting) {\n                // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer\n                this._isEarlyEofReconnecting = false;\n                type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n            }\n\n            switch (type) {\n                case _loader.LoaderErrors.EARLY_EOF:\n                    {\n                        if (!this._config.isLive) {\n                            // Do internal http reconnect if not live stream\n                            if (this._totalLength) {\n                                var nextFrom = this._currentRange.to + 1;\n                                if (nextFrom < this._totalLength) {\n                                    _logger2.default.w(this.TAG, 'Connection lost, trying reconnect...');\n                                    this._isEarlyEofReconnecting = true;\n                                    this._internalSeek(nextFrom, false);\n                                }\n                                return;\n                            }\n                            // else: We don't know totalLength, throw UnrecoverableEarlyEof\n                        }\n                        // live stream: throw UnrecoverableEarlyEof error to upper-layer\n                        type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n                        break;\n                    }\n                case _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF:\n                case _loader.LoaderErrors.CONNECTING_TIMEOUT:\n                case _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID:\n                case _loader.LoaderErrors.EXCEPTION:\n                    break;\n            }\n\n            if (this._onError) {\n                this._onError(type, data);\n            } else {\n                throw new _exception.RuntimeException('IOException: ' + data.msg);\n            }\n        }\n    }, {\n        key: 'status',\n        get: function get() {\n            return this._loader.status;\n        }\n    }, {\n        key: 'extraData',\n        get: function get() {\n            return this._extraData;\n        },\n        set: function set(data) {\n            this._extraData = data;\n        }\n\n        // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number\n\n    }, {\n        key: 'onDataArrival',\n        get: function get() {\n            return this._onDataArrival;\n        },\n        set: function set(callback) {\n            this._onDataArrival = callback;\n        }\n    }, {\n        key: 'onSeeked',\n        get: function get() {\n            return this._onSeeked;\n        },\n        set: function set(callback) {\n            this._onSeeked = callback;\n        }\n\n        // prototype: function onError(type: number, info: {code: number, msg: string}): void\n\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n    }, {\n        key: 'onComplete',\n        get: function get() {\n            return this._onComplete;\n        },\n        set: function set(callback) {\n            this._onComplete = callback;\n        }\n    }, {\n        key: 'onRedirect',\n        get: function get() {\n            return this._onRedirect;\n        },\n        set: function set(callback) {\n            this._onRedirect = callback;\n        }\n    }, {\n        key: 'onRecoveredEarlyEof',\n        get: function get() {\n            return this._onRecoveredEarlyEof;\n        },\n        set: function set(callback) {\n            this._onRecoveredEarlyEof = callback;\n        }\n    }, {\n        key: 'currentURL',\n        get: function get() {\n            return this._dataSource.url;\n        }\n    }, {\n        key: 'hasRedirect',\n        get: function get() {\n            return this._redirectedURL != null || this._dataSource.redirectedURL != undefined;\n        }\n    }, {\n        key: 'currentRedirectedURL',\n        get: function get() {\n            return this._redirectedURL || this._dataSource.redirectedURL;\n        }\n\n        // in KB/s\n\n    }, {\n        key: 'currentSpeed',\n        get: function get() {\n            if (this._loaderClass === _xhrRangeLoader2.default) {\n                // SpeedSampler is inaccuracy if loader is RangeLoader\n                return this._loader.currentSpeed;\n            }\n            return this._speedSampler.lastSecondKBps;\n        }\n    }, {\n        key: 'loaderType',\n        get: function get() {\n            return this._loader.type;\n        }\n    }]);\n\n    return IOController;\n}();\n\nexports.default = IOController;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./fetch-stream-loader.js\":22,\"./loader.js\":24,\"./param-seek-handler.js\":25,\"./range-seek-handler.js\":26,\"./speed-sampler.js\":27,\"./websocket-loader.js\":28,\"./xhr-moz-chunked-loader.js\":29,\"./xhr-msstream-loader.js\":30,\"./xhr-range-loader.js\":31}],24:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BaseLoader = exports.LoaderErrors = exports.LoaderStatus = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoaderStatus = exports.LoaderStatus = {\n    kIdle: 0,\n    kConnecting: 1,\n    kBuffering: 2,\n    kError: 3,\n    kComplete: 4\n};\n\nvar LoaderErrors = exports.LoaderErrors = {\n    OK: 'OK',\n    EXCEPTION: 'Exception',\n    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\n    CONNECTING_TIMEOUT: 'ConnectingTimeout',\n    EARLY_EOF: 'EarlyEof',\n    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\n};\n\n/* Loader has callbacks which have following prototypes:\r\n *     function onContentLengthKnown(contentLength: number): void\r\n *     function onURLRedirect(url: string): void\r\n *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void\r\n *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void\r\n *     function onComplete(rangeFrom: number, rangeTo: number): void\r\n */\n\nvar BaseLoader = exports.BaseLoader = function () {\n    function BaseLoader(typeName) {\n        _classCallCheck(this, BaseLoader);\n\n        this._type = typeName || 'undefined';\n        this._status = LoaderStatus.kIdle;\n        this._needStash = false;\n        // callbacks\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    _createClass(BaseLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._status = LoaderStatus.kIdle;\n            this._onContentLengthKnown = null;\n            this._onURLRedirect = null;\n            this._onDataArrival = null;\n            this._onError = null;\n            this._onComplete = null;\n        }\n    }, {\n        key: 'isWorking',\n        value: function isWorking() {\n            return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\n        }\n    }, {\n        key: 'open',\n\n\n        // pure virtual\n        value: function open(dataSource, range) {\n            throw new _exception.NotImplementedException('Unimplemented abstract function!');\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            throw new _exception.NotImplementedException('Unimplemented abstract function!');\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'status',\n        get: function get() {\n            return this._status;\n        }\n    }, {\n        key: 'needStashBuffer',\n        get: function get() {\n            return this._needStash;\n        }\n    }, {\n        key: 'onContentLengthKnown',\n        get: function get() {\n            return this._onContentLengthKnown;\n        },\n        set: function set(callback) {\n            this._onContentLengthKnown = callback;\n        }\n    }, {\n        key: 'onURLRedirect',\n        get: function get() {\n            return this._onURLRedirect;\n        },\n        set: function set(callback) {\n            this._onURLRedirect = callback;\n        }\n    }, {\n        key: 'onDataArrival',\n        get: function get() {\n            return this._onDataArrival;\n        },\n        set: function set(callback) {\n            this._onDataArrival = callback;\n        }\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n    }, {\n        key: 'onComplete',\n        get: function get() {\n            return this._onComplete;\n        },\n        set: function set(callback) {\n            this._onComplete = callback;\n        }\n    }]);\n\n    return BaseLoader;\n}();\n\n},{\"../utils/exception.js\":40}],25:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ParamSeekHandler = function () {\n    function ParamSeekHandler(paramStart, paramEnd) {\n        _classCallCheck(this, ParamSeekHandler);\n\n        this._startName = paramStart;\n        this._endName = paramEnd;\n    }\n\n    _createClass(ParamSeekHandler, [{\n        key: 'getConfig',\n        value: function getConfig(baseUrl, range) {\n            var url = baseUrl;\n\n            if (range.from !== 0 || range.to !== -1) {\n                var needAnd = true;\n                if (url.indexOf('?') === -1) {\n                    url += '?';\n                    needAnd = false;\n                }\n\n                if (needAnd) {\n                    url += '&';\n                }\n\n                url += this._startName + '=' + range.from.toString();\n\n                if (range.to !== -1) {\n                    url += '&' + this._endName + '=' + range.to.toString();\n                }\n            }\n\n            return {\n                url: url,\n                headers: {}\n            };\n        }\n    }, {\n        key: 'removeURLParameters',\n        value: function removeURLParameters(seekedURL) {\n            var baseURL = seekedURL.split('?')[0];\n            var params = undefined;\n\n            var queryIndex = seekedURL.indexOf('?');\n            if (queryIndex !== -1) {\n                params = seekedURL.substring(queryIndex + 1);\n            }\n\n            var resultParams = '';\n\n            if (params != undefined && params.length > 0) {\n                var pairs = params.split('&');\n\n                for (var i = 0; i < pairs.length; i++) {\n                    var pair = pairs[i].split('=');\n                    var requireAnd = i > 0;\n\n                    if (pair[0] !== this._startName && pair[0] !== this._endName) {\n                        if (requireAnd) {\n                            resultParams += '&';\n                        }\n                        resultParams += pairs[i];\n                    }\n                }\n            }\n\n            return resultParams.length === 0 ? baseURL : baseURL + '?' + resultParams;\n        }\n    }]);\n\n    return ParamSeekHandler;\n}();\n\nexports.default = ParamSeekHandler;\n\n},{}],26:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RangeSeekHandler = function () {\n    function RangeSeekHandler(zeroStart) {\n        _classCallCheck(this, RangeSeekHandler);\n\n        this._zeroStart = zeroStart || false;\n    }\n\n    _createClass(RangeSeekHandler, [{\n        key: 'getConfig',\n        value: function getConfig(url, range) {\n            var headers = {};\n\n            if (range.from !== 0 || range.to !== -1) {\n                var param = void 0;\n                if (range.to !== -1) {\n                    param = 'bytes=' + range.from.toString() + '-' + range.to.toString();\n                } else {\n                    param = 'bytes=' + range.from.toString() + '-';\n                }\n                headers['Range'] = param;\n            } else if (this._zeroStart) {\n                headers['Range'] = 'bytes=0-';\n            }\n\n            return {\n                url: url,\n                headers: headers\n            };\n        }\n    }, {\n        key: 'removeURLParameters',\n        value: function removeURLParameters(seekedURL) {\n            return seekedURL;\n        }\n    }]);\n\n    return RangeSeekHandler;\n}();\n\nexports.default = RangeSeekHandler;\n\n},{}],27:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n// Utility class to calculate realtime network I/O speed\nvar SpeedSampler = function () {\n    function SpeedSampler() {\n        _classCallCheck(this, SpeedSampler);\n\n        // milliseconds\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n\n        // compatibility detection\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n    }\n\n    _createClass(SpeedSampler, [{\n        key: \"reset\",\n        value: function reset() {\n            this._firstCheckpoint = this._lastCheckpoint = 0;\n            this._totalBytes = this._intervalBytes = 0;\n            this._lastSecondBytes = 0;\n        }\n    }, {\n        key: \"addBytes\",\n        value: function addBytes(bytes) {\n            if (this._firstCheckpoint === 0) {\n                this._firstCheckpoint = this._now();\n                this._lastCheckpoint = this._firstCheckpoint;\n                this._intervalBytes += bytes;\n                this._totalBytes += bytes;\n            } else if (this._now() - this._lastCheckpoint < 1000) {\n                this._intervalBytes += bytes;\n                this._totalBytes += bytes;\n            } else {\n                // duration >= 1000\n                this._lastSecondBytes = this._intervalBytes;\n                this._intervalBytes = bytes;\n                this._totalBytes += bytes;\n                this._lastCheckpoint = this._now();\n            }\n        }\n    }, {\n        key: \"currentKBps\",\n        get: function get() {\n            this.addBytes(0);\n\n            var durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\n            if (durationSeconds == 0) durationSeconds = 1;\n            return this._intervalBytes / durationSeconds / 1024;\n        }\n    }, {\n        key: \"lastSecondKBps\",\n        get: function get() {\n            this.addBytes(0);\n\n            if (this._lastSecondBytes !== 0) {\n                return this._lastSecondBytes / 1024;\n            } else {\n                // lastSecondBytes === 0\n                if (this._now() - this._lastCheckpoint >= 500) {\n                    // if time interval since last checkpoint has exceeded 500ms\n                    // the speed is nearly accurate\n                    return this.currentKBps;\n                } else {\n                    // We don't know\n                    return 0;\n                }\n            }\n        }\n    }, {\n        key: \"averageKBps\",\n        get: function get() {\n            var durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\n            return this._totalBytes / durationSeconds / 1024;\n        }\n    }]);\n\n    return SpeedSampler;\n}();\n\nexports.default = SpeedSampler;\n\n},{}],28:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *     http://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// For FLV over WebSocket live stream\nvar WebSocketLoader = function (_BaseLoader) {\n    _inherits(WebSocketLoader, _BaseLoader);\n\n    _createClass(WebSocketLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                return typeof self.WebSocket !== 'undefined';\n            } catch (e) {\n                return false;\n            }\n        }\n    }]);\n\n    function WebSocketLoader() {\n        _classCallCheck(this, WebSocketLoader);\n\n        var _this = _possibleConstructorReturn(this, (WebSocketLoader.__proto__ || Object.getPrototypeOf(WebSocketLoader)).call(this, 'websocket-loader'));\n\n        _this.TAG = 'WebSocketLoader';\n\n        _this._needStash = true;\n\n        _this._ws = null;\n        _this._requestAbort = false;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(WebSocketLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._ws) {\n                this.abort();\n            }\n            _get(WebSocketLoader.prototype.__proto__ || Object.getPrototypeOf(WebSocketLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource) {\n            try {\n                var ws = this._ws = new self.WebSocket(dataSource.url);\n                ws.binaryType = 'arraybuffer';\n                ws.onopen = this._onWebSocketOpen.bind(this);\n                ws.onclose = this._onWebSocketClose.bind(this);\n                ws.onmessage = this._onWebSocketMessage.bind(this);\n                ws.onerror = this._onWebSocketError.bind(this);\n\n                this._status = _loader.LoaderStatus.kConnecting;\n            } catch (e) {\n                this._status = _loader.LoaderStatus.kError;\n\n                var info = { code: e.code, msg: e.message };\n\n                if (this._onError) {\n                    this._onError(_loader.LoaderErrors.EXCEPTION, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            }\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            var ws = this._ws;\n            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {\n                // CONNECTING || OPEN\n                this._requestAbort = true;\n                ws.close();\n            }\n\n            this._ws = null;\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_onWebSocketOpen',\n        value: function _onWebSocketOpen(e) {\n            this._status = _loader.LoaderStatus.kBuffering;\n        }\n    }, {\n        key: '_onWebSocketClose',\n        value: function _onWebSocketClose(e) {\n            if (this._requestAbort === true) {\n                this._requestAbort = false;\n                return;\n            }\n\n            this._status = _loader.LoaderStatus.kComplete;\n\n            if (this._onComplete) {\n                this._onComplete(0, this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_onWebSocketMessage',\n        value: function _onWebSocketMessage(e) {\n            var _this2 = this;\n\n            if (e.data instanceof ArrayBuffer) {\n                this._dispatchArrayBuffer(e.data);\n            } else if (e.data instanceof Blob) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    _this2._dispatchArrayBuffer(reader.result);\n                };\n                reader.readAsArrayBuffer(e.data);\n            } else {\n                this._status = _loader.LoaderStatus.kError;\n                var info = { code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name };\n\n                if (this._onError) {\n                    this._onError(_loader.LoaderErrors.EXCEPTION, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            }\n        }\n    }, {\n        key: '_dispatchArrayBuffer',\n        value: function _dispatchArrayBuffer(arraybuffer) {\n            var chunk = arraybuffer;\n            var byteStart = this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n        }\n    }, {\n        key: '_onWebSocketError',\n        value: function _onWebSocketError(e) {\n            this._status = _loader.LoaderStatus.kError;\n\n            var info = {\n                code: e.code,\n                msg: e.message\n            };\n\n            if (this._onError) {\n                this._onError(_loader.LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return WebSocketLoader;\n}(_loader.BaseLoader);\n\nexports.default = WebSocketLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],29:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\nvar MozChunkedLoader = function (_BaseLoader) {\n    _inherits(MozChunkedLoader, _BaseLoader);\n\n    _createClass(MozChunkedLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                var xhr = new XMLHttpRequest();\n                // Firefox 37- requires .open() to be called before setting responseType\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'moz-chunked-arraybuffer';\n                return xhr.responseType === 'moz-chunked-arraybuffer';\n            } catch (e) {\n                _logger2.default.w('MozChunkedLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function MozChunkedLoader(seekHandler, config) {\n        _classCallCheck(this, MozChunkedLoader);\n\n        var _this = _possibleConstructorReturn(this, (MozChunkedLoader.__proto__ || Object.getPrototypeOf(MozChunkedLoader)).call(this, 'xhr-moz-chunked-loader'));\n\n        _this.TAG = 'MozChunkedLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._xhr = null;\n        _this._requestAbort = false;\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(MozChunkedLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onloadend = null;\n                this._xhr.onerror = null;\n                this._xhr = null;\n            }\n            _get(MozChunkedLoader.prototype.__proto__ || Object.getPrototypeOf(MozChunkedLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._dataSource = dataSource;\n            this._range = range;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._requestURL = seekConfig.url;\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'moz-chunked-arraybuffer';\n            xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onloadend = this._onLoadEnd.bind(this);\n            xhr.onerror = this._onXhrError.bind(this);\n\n            // cors is auto detected and enabled by xhr\n\n            // withCredentials is disabled by default\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                var _headers = this._config.headers;\n\n                for (var _key in _headers) {\n                    if (_headers.hasOwnProperty(_key)) {\n                        xhr.setRequestHeader(_key, _headers[_key]);\n                    }\n                }\n            }\n\n            this._status = _loader.LoaderStatus.kConnecting;\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n            if (this._xhr) {\n                this._xhr.abort();\n            }\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_onReadyStateChange',\n        value: function _onReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n                    if (this._onURLRedirect) {\n                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n\n                if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                } else {\n                    this._status = _loader.LoaderStatus.kBuffering;\n                }\n            }\n        }\n    }, {\n        key: '_onProgress',\n        value: function _onProgress(e) {\n            if (this._status === _loader.LoaderStatus.kError) {\n                // Ignore error response\n                return;\n            }\n\n            if (this._contentLength === null) {\n                if (e.total !== null && e.total !== 0) {\n                    this._contentLength = e.total;\n                    if (this._onContentLengthKnown) {\n                        this._onContentLengthKnown(this._contentLength);\n                    }\n                }\n            }\n\n            var chunk = e.target.response;\n            var byteStart = this._range.from + this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n        }\n    }, {\n        key: '_onLoadEnd',\n        value: function _onLoadEnd(e) {\n            if (this._requestAbort === true) {\n                this._requestAbort = false;\n                return;\n            } else if (this._status === _loader.LoaderStatus.kError) {\n                return;\n            }\n\n            this._status = _loader.LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_onXhrError',\n        value: function _onXhrError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && e.loaded < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'Moz-Chunked stream meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EXCEPTION;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return MozChunkedLoader;\n}(_loader.BaseLoader);\n\nexports.default = MozChunkedLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],30:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!\r\n * The browser may crash in wininet.dll. Disable for now.\r\n *\r\n * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`\r\n * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.\r\n *\r\n * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.\r\n * in order to release previous ArrayBuffer to avoid memory leak\r\n *\r\n * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.\r\n */\nvar MSStreamLoader = function (_BaseLoader) {\n    _inherits(MSStreamLoader, _BaseLoader);\n\n    _createClass(MSStreamLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                if (typeof self.MSStream === 'undefined' || typeof self.MSStreamReader === 'undefined') {\n                    return false;\n                }\n\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'ms-stream';\n                return xhr.responseType === 'ms-stream';\n            } catch (e) {\n                _logger2.default.w('MSStreamLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function MSStreamLoader(seekHandler, config) {\n        _classCallCheck(this, MSStreamLoader);\n\n        var _this = _possibleConstructorReturn(this, (MSStreamLoader.__proto__ || Object.getPrototypeOf(MSStreamLoader)).call(this, 'xhr-msstream-loader'));\n\n        _this.TAG = 'MSStreamLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._xhr = null;\n        _this._reader = null; // MSStreamReader\n\n        _this._totalRange = null;\n        _this._currentRange = null;\n\n        _this._currentRequestURL = null;\n        _this._currentRedirectedURL = null;\n\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n\n        _this._bufferLimit = 16 * 1024 * 1024; // 16MB\n        _this._lastTimeBufferSize = 0;\n        _this._isReconnecting = false;\n        return _this;\n    }\n\n    _createClass(MSStreamLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._reader) {\n                this._reader.onprogress = null;\n                this._reader.onload = null;\n                this._reader.onerror = null;\n                this._reader = null;\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr = null;\n            }\n            _get(MSStreamLoader.prototype.__proto__ || Object.getPrototypeOf(MSStreamLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._internalOpen(dataSource, range, false);\n        }\n    }, {\n        key: '_internalOpen',\n        value: function _internalOpen(dataSource, range, isSubrange) {\n            this._dataSource = dataSource;\n\n            if (!isSubrange) {\n                this._totalRange = range;\n            } else {\n                this._currentRange = range;\n            }\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL) {\n                if (this._currentRedirectedURL != undefined) {\n                    sourceURL = this._currentRedirectedURL;\n                } else if (dataSource.redirectedURL != undefined) {\n                    sourceURL = dataSource.redirectedURL;\n                }\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._currentRequestURL = seekConfig.url;\n\n            var reader = this._reader = new self.MSStreamReader();\n            reader.onprogress = this._msrOnProgress.bind(this);\n            reader.onload = this._msrOnLoad.bind(this);\n            reader.onerror = this._msrOnError.bind(this);\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'ms-stream';\n            xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);\n            xhr.onerror = this._xhrOnError.bind(this);\n\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                var _headers = this._config.headers;\n\n                for (var _key in _headers) {\n                    if (_headers.hasOwnProperty(_key)) {\n                        xhr.setRequestHeader(_key, _headers[_key]);\n                    }\n                }\n            }\n\n            if (this._isReconnecting) {\n                this._isReconnecting = false;\n            } else {\n                this._status = _loader.LoaderStatus.kConnecting;\n            }\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._internalAbort();\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._reader) {\n                if (this._reader.readyState === 1) {\n                    // LOADING\n                    this._reader.abort();\n                }\n                this._reader.onprogress = null;\n                this._reader.onload = null;\n                this._reader.onerror = null;\n                this._reader = null;\n            }\n            if (this._xhr) {\n                this._xhr.abort();\n                this._xhr.onreadystatechange = null;\n                this._xhr = null;\n            }\n        }\n    }, {\n        key: '_xhrOnReadyStateChange',\n        value: function _xhrOnReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    this._status = _loader.LoaderStatus.kBuffering;\n\n                    if (xhr.responseURL != undefined) {\n                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                        if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                            this._currentRedirectedURL = redirectedURL;\n                            if (this._onURLRedirect) {\n                                this._onURLRedirect(redirectedURL);\n                            }\n                        }\n                    }\n\n                    var lengthHeader = xhr.getResponseHeader('Content-Length');\n                    if (lengthHeader != null && this._contentLength == null) {\n                        var length = parseInt(lengthHeader);\n                        if (length > 0) {\n                            this._contentLength = length;\n                            if (this._onContentLengthKnown) {\n                                this._onContentLengthKnown(this._contentLength);\n                            }\n                        }\n                    }\n                } else {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                }\n            } else if (xhr.readyState === 3) {\n                // LOADING\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    this._status = _loader.LoaderStatus.kBuffering;\n\n                    var msstream = xhr.response;\n                    this._reader.readAsArrayBuffer(msstream);\n                }\n            }\n        }\n    }, {\n        key: '_xhrOnError',\n        value: function _xhrOnError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = _loader.LoaderErrors.EXCEPTION;\n            var info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }, {\n        key: '_msrOnProgress',\n        value: function _msrOnProgress(e) {\n            var reader = e.target;\n            var bigbuffer = reader.result;\n            if (bigbuffer == null) {\n                // result may be null, workaround for buggy M$\n                this._doReconnectIfNeeded();\n                return;\n            }\n\n            var slice = bigbuffer.slice(this._lastTimeBufferSize);\n            this._lastTimeBufferSize = bigbuffer.byteLength;\n            var byteStart = this._totalRange.from + this._receivedLength;\n            this._receivedLength += slice.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(slice, byteStart, this._receivedLength);\n            }\n\n            if (bigbuffer.byteLength >= this._bufferLimit) {\n                _logger2.default.v(this.TAG, 'MSStream buffer exceeded max size near ' + (byteStart + slice.byteLength) + ', reconnecting...');\n                this._doReconnectIfNeeded();\n            }\n        }\n    }, {\n        key: '_doReconnectIfNeeded',\n        value: function _doReconnectIfNeeded() {\n            if (this._contentLength == null || this._receivedLength < this._contentLength) {\n                this._isReconnecting = true;\n                this._lastTimeBufferSize = 0;\n                this._internalAbort();\n\n                var range = {\n                    from: this._totalRange.from + this._receivedLength,\n                    to: -1\n                };\n                this._internalOpen(this._dataSource, range, true);\n            }\n        }\n    }, {\n        key: '_msrOnLoad',\n        value: function _msrOnLoad(e) {\n            // actually it is onComplete event\n            this._status = _loader.LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_msrOnError',\n        value: function _msrOnError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && this._receivedLength < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'MSStream meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return MSStreamLoader;\n}(_loader.BaseLoader);\n\nexports.default = MSStreamLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],31:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _speedSampler = _dereq_('./speed-sampler.js');\n\nvar _speedSampler2 = _interopRequireDefault(_speedSampler);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *     http://www.apache.org/licenses/LICENSE-2.0\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// Universal IO Loader, implemented by adding Range header in xhr's request header\nvar RangeLoader = function (_BaseLoader) {\n    _inherits(RangeLoader, _BaseLoader);\n\n    _createClass(RangeLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'arraybuffer';\n                return xhr.responseType === 'arraybuffer';\n            } catch (e) {\n                _logger2.default.w('RangeLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function RangeLoader(seekHandler, config) {\n        _classCallCheck(this, RangeLoader);\n\n        var _this = _possibleConstructorReturn(this, (RangeLoader.__proto__ || Object.getPrototypeOf(RangeLoader)).call(this, 'xhr-range-loader'));\n\n        _this.TAG = 'RangeLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = false;\n\n        _this._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192];\n        _this._currentChunkSizeKB = 384;\n        _this._currentSpeedNormalized = 0;\n        _this._zeroSpeedChunkCount = 0;\n\n        _this._xhr = null;\n        _this._speedSampler = new _speedSampler2.default();\n\n        _this._requestAbort = false;\n        _this._waitForTotalLength = false;\n        _this._totalLengthReceived = false;\n\n        _this._currentRequestURL = null;\n        _this._currentRedirectedURL = null;\n        _this._currentRequestRange = null;\n        _this._totalLength = null; // size of the entire file\n        _this._contentLength = null; // Content-Length of entire request range\n        _this._receivedLength = 0; // total received bytes\n        _this._lastTimeLoaded = 0; // received bytes of current request sub-range\n        return _this;\n    }\n\n    _createClass(RangeLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onload = null;\n                this._xhr.onerror = null;\n                this._xhr = null;\n            }\n            _get(RangeLoader.prototype.__proto__ || Object.getPrototypeOf(RangeLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._dataSource = dataSource;\n            this._range = range;\n            this._status = _loader.LoaderStatus.kConnecting;\n\n            var useRefTotalLength = false;\n            if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {\n                useRefTotalLength = true;\n                this._totalLength = this._dataSource.filesize;\n            }\n\n            if (!this._totalLengthReceived && !useRefTotalLength) {\n                // We need total filesize\n                this._waitForTotalLength = true;\n                this._internalOpen(this._dataSource, { from: 0, to: -1 });\n            } else {\n                // We have filesize, start loading\n                this._openSubRange();\n            }\n        }\n    }, {\n        key: '_openSubRange',\n        value: function _openSubRange() {\n            var chunkSize = this._currentChunkSizeKB * 1024;\n\n            var from = this._range.from + this._receivedLength;\n            var to = from + chunkSize;\n\n            if (this._contentLength != null) {\n                if (to - this._range.from >= this._contentLength) {\n                    to = this._range.from + this._contentLength - 1;\n                }\n            }\n\n            this._currentRequestRange = { from: from, to: to };\n            this._internalOpen(this._dataSource, this._currentRequestRange);\n        }\n    }, {\n        key: '_internalOpen',\n        value: function _internalOpen(dataSource, range) {\n            this._lastTimeLoaded = 0;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL) {\n                if (this._currentRedirectedURL != undefined) {\n                    sourceURL = this._currentRedirectedURL;\n                } else if (dataSource.redirectedURL != undefined) {\n                    sourceURL = dataSource.redirectedURL;\n                }\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._currentRequestURL = seekConfig.url;\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'arraybuffer';\n            xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onload = this._onLoad.bind(this);\n            xhr.onerror = this._onXhrError.bind(this);\n\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            // add additional headers\n            if (_typeof(this._config.headers) === 'object') {\n                var _headers = this._config.headers;\n\n                for (var _key in _headers) {\n                    if (_headers.hasOwnProperty(_key)) {\n                        xhr.setRequestHeader(_key, _headers[_key]);\n                    }\n                }\n            }\n\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n            this._internalAbort();\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onload = null;\n                this._xhr.onerror = null;\n                this._xhr.abort();\n                this._xhr = null;\n            }\n        }\n    }, {\n        key: '_onReadyStateChange',\n        value: function _onReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.responseURL != undefined) {\n                    // if the browser support this property\n                    var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                        this._currentRedirectedURL = redirectedURL;\n                        if (this._onURLRedirect) {\n                            this._onURLRedirect(redirectedURL);\n                        }\n                    }\n                }\n\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    if (this._waitForTotalLength) {\n                        return;\n                    }\n                    this._status = _loader.LoaderStatus.kBuffering;\n                } else {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_onProgress',\n        value: function _onProgress(e) {\n            if (this._status === _loader.LoaderStatus.kError) {\n                // Ignore error response\n                return;\n            }\n\n            if (this._contentLength === null) {\n                var openNextRange = false;\n\n                if (this._waitForTotalLength) {\n                    this._waitForTotalLength = false;\n                    this._totalLengthReceived = true;\n                    openNextRange = true;\n\n                    var total = e.total;\n                    this._internalAbort();\n                    if (total != null & total !== 0) {\n                        this._totalLength = total;\n                    }\n                }\n\n                // calculate currrent request range's contentLength\n                if (this._range.to === -1) {\n                    this._contentLength = this._totalLength - this._range.from;\n                } else {\n                    // to !== -1\n                    this._contentLength = this._range.to - this._range.from + 1;\n                }\n\n                if (openNextRange) {\n                    this._openSubRange();\n                    return;\n                }\n                if (this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n\n            var delta = e.loaded - this._lastTimeLoaded;\n            this._lastTimeLoaded = e.loaded;\n            this._speedSampler.addBytes(delta);\n        }\n    }, {\n        key: '_normalizeSpeed',\n        value: function _normalizeSpeed(input) {\n            var list = this._chunkSizeKBList;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (input < list[0]) {\n                return list[0];\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || input >= list[mid] && input < list[mid + 1]) {\n                    return list[mid];\n                } else if (list[mid] < input) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n        }\n    }, {\n        key: '_onLoad',\n        value: function _onLoad(e) {\n            if (this._status === _loader.LoaderStatus.kError) {\n                // Ignore error response\n                return;\n            }\n\n            if (this._waitForTotalLength) {\n                this._waitForTotalLength = false;\n                return;\n            }\n\n            this._lastTimeLoaded = 0;\n            var KBps = this._speedSampler.lastSecondKBps;\n            if (KBps === 0) {\n                this._zeroSpeedChunkCount++;\n                if (this._zeroSpeedChunkCount >= 3) {\n                    // Try get currentKBps after 3 chunks\n                    KBps = this._speedSampler.currentKBps;\n                }\n            }\n\n            if (KBps !== 0) {\n                var normalized = this._normalizeSpeed(KBps);\n                if (this._currentSpeedNormalized !== normalized) {\n                    this._currentSpeedNormalized = normalized;\n                    this._currentChunkSizeKB = normalized;\n                }\n            }\n\n            var chunk = e.target.response;\n            var byteStart = this._range.from + this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            var reportComplete = false;\n\n            if (this._contentLength != null && this._receivedLength < this._contentLength) {\n                // continue load next chunk\n                this._openSubRange();\n            } else {\n                reportComplete = true;\n            }\n\n            // dispatch received chunk\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n\n            if (reportComplete) {\n                this._status = _loader.LoaderStatus.kComplete;\n                if (this._onComplete) {\n                    this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n                }\n            }\n        }\n    }, {\n        key: '_onXhrError',\n        value: function _onXhrError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'RangeLoader meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EXCEPTION;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }, {\n        key: 'currentSpeed',\n        get: function get() {\n            return this._speedSampler.lastSecondKBps;\n        }\n    }]);\n\n    return RangeLoader;\n}(_loader.BaseLoader);\n\nexports.default = RangeLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24,\"./speed-sampler.js\":27}],32:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _playerEvents = _dereq_('./player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _transmuxer = _dereq_('../core/transmuxer.js');\n\nvar _transmuxer2 = _interopRequireDefault(_transmuxer);\n\nvar _transmuxingEvents = _dereq_('../core/transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _mseController = _dereq_('../core/mse-controller.js');\n\nvar _mseController2 = _interopRequireDefault(_mseController);\n\nvar _mseEvents = _dereq_('../core/mse-events.js');\n\nvar _mseEvents2 = _interopRequireDefault(_mseEvents);\n\nvar _playerErrors = _dereq_('./player-errors.js');\n\nvar _config = _dereq_('../config.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlvPlayer = function () {\n    function FlvPlayer(mediaDataSource, config) {\n        _classCallCheck(this, FlvPlayer);\n\n        this.TAG = 'FlvPlayer';\n        this._type = 'FlvPlayer';\n        this._emitter = new _events2.default();\n\n        this._config = (0, _config.createDefaultConfig)();\n        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() !== 'flv') {\n            throw new _exception.InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');\n        }\n\n        if (mediaDataSource.isLive === true) {\n            this._config.isLive = true;\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n            onvSeeking: this._onvSeeking.bind(this),\n            onvCanPlay: this._onvCanPlay.bind(this),\n            onvStalled: this._onvStalled.bind(this),\n            onvProgress: this._onvProgress.bind(this)\n        };\n\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n\n        this._pendingSeekTime = null; // in seconds\n        this._requestSetTime = false;\n        this._seekpointRecord = null;\n        this._progressChecker = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n        this._msectl = null;\n        this._transmuxer = null;\n\n        this._mseSourceOpened = false;\n        this._hasPendingLoad = false;\n        this._receivedCanPlay = false;\n\n        this._mediaInfo = null;\n        this._statisticsInfo = null;\n\n        var chromeNeedIDRFix = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661);\n        this._alwaysSeekKeyframe = chromeNeedIDRFix || _browser2.default.msedge || _browser2.default.msie ? true : false;\n\n        if (this._alwaysSeekKeyframe) {\n            this._config.accurateSeek = false;\n        }\n\n        this.callbackStreamTime = null;\n        this._mediaSourceEndCallback = null;\n    }\n\n    _createClass(FlvPlayer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._progressChecker != null) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n            }\n            if (this._transmuxer) {\n                this.unload();\n            }\n            if (this._mediaElement) {\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._mediaDataSource = null;\n\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n\n            this.callbackStreamTime = null;\n            this._mediaSourceEndCallback = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            var _this = this;\n\n            if (event === _playerEvents2.default.MEDIA_INFO) {\n                if (this._mediaInfo != null) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);\n                    });\n                }\n            } else if (event === _playerEvents2.default.STATISTICS_INFO) {\n                if (this._statisticsInfo != null) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);\n                    });\n                }\n            }\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            var _this2 = this;\n\n            this._mediaElement = mediaElement;\n            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            //mediaElement.addEventListener('seeking', this.e.onvSeeking);\n            mediaElement.addEventListener('canplay', this.e.onvCanPlay);\n            mediaElement.addEventListener('stalled', this.e.onvStalled);\n            //mediaElement.addEventListener('progress', this.e.onvProgress);\n\n            this._msectl = new _mseController2.default(this._config);\n\n            this._msectl.on(_mseEvents2.default.UPDATE_END, this._onmseUpdateEnd.bind(this));\n            this._msectl.on(_mseEvents2.default.BUFFER_FULL, this._onmseBufferFull.bind(this));\n            this._msectl.on(_mseEvents2.default.SOURCE_OPEN, function () {\n                _this2._mseSourceOpened = true;\n                if (_this2._hasPendingLoad) {\n                    _this2._hasPendingLoad = false;\n                    _this2.load();\n                }\n            });\n            this._msectl.on(_mseEvents2.default.ERROR, function (info) {\n                _this2._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_MSE_ERROR, info);\n            });\n            this._msectl.on(_mseEvents2.default.SOURCE_END, function (info) {\n                if (_this2._mediaSourceEndCallback != null) {\n                    _this2._mediaSourceEndCallback(info);\n                }\n            });\n\n            this._msectl.attachMediaElement(mediaElement);\n\n            if (this._pendingSeekTime != null) {\n                try {\n                    mediaElement.currentTime = this._pendingSeekTime;\n                    this._pendingSeekTime = null;\n                } catch (e) {\n                    // IE11 may throw InvalidStateError if readyState === 0\n                    // We can defer set currentTime operation after loadedmetadata\n                }\n            }\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaElement) {\n                this._msectl.detachMediaElement();\n                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n                //this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);\n                this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n                this._mediaElement.removeEventListener('stalled', this.e.onvStalled);\n                //this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n                this._mediaElement = null;\n            }\n            if (this._msectl) {\n                this._msectl.destroy();\n                this._msectl = null;\n            }\n        }\n    }, {\n        key: 'load',\n        value: function load() {\n            var _this3 = this;\n\n            if (!this._mediaElement) {\n                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');\n            }\n            if (this._transmuxer) {\n                throw new _exception.IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');\n            }\n            if (this._hasPendingLoad) {\n                return;\n            }\n\n            if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {\n                this._hasPendingLoad = true;\n                return;\n            }\n\n            if (this._mediaElement.readyState > 0) {\n                this._requestSetTime = true;\n                // IE11 may throw InvalidStateError if readyState === 0\n                this._mediaElement.currentTime = 0;\n            }\n\n            this._transmuxer = new _transmuxer2.default(this._mediaDataSource, this._config);\n\n            this._transmuxer.on(_transmuxingEvents2.default.INIT_SEGMENT, function (type, is) {\n                _this3._msectl.appendInitSegment(is);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_SEGMENT, function (type, ms) {\n                _this3._msectl.appendMediaSegment(ms);\n\n                // lazyLoad check\n                if (_this3._config.lazyLoad && !_this3._config.isLive) {\n                    var currentTime = _this3._mediaElement.currentTime;\n                    if (ms.info.endDts >= (currentTime + _this3._config.lazyLoadMaxDuration) * 1000) {\n                        if (_this3._progressChecker == null) {\n                            _logger2.default.v(_this3.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                            _this3._suspendTransmuxer();\n                        }\n                    }\n                }\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.LOADING_COMPLETE, function () {\n                _this3._msectl.endOfStream();\n                _this3._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, function () {\n                _this3._emitter.emit(_playerEvents2.default.RECOVERED_EARLY_EOF);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.IO_ERROR, function (detail, info) {\n                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.DEMUX_ERROR, function (detail, info) {\n                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_INFO, function (mediaInfo) {\n                _this3._mediaInfo = mediaInfo;\n                _this3._emitter.emit(_playerEvents2.default.MEDIA_INFO, Object.assign({}, mediaInfo));\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.METADATA_ARRIVED, function (metadata) {\n                _this3._emitter.emit(_playerEvents2.default.METADATA_ARRIVED, metadata);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, function (data) {\n                _this3._emitter.emit(_playerEvents2.default.SCRIPTDATA_ARRIVED, data);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.STATISTICS_INFO, function (statInfo) {\n                _this3._statisticsInfo = _this3._fillStatisticsInfo(statInfo);\n                _this3._emitter.emit(_playerEvents2.default.STATISTICS_INFO, Object.assign({}, _this3._statisticsInfo));\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, function (milliseconds) {\n                if (_this3._mediaElement && !_this3._config.accurateSeek) {\n                    _this3._requestSetTime = true;\n                    _this3._mediaElement.currentTime = milliseconds / 1000;\n                }\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.STREAM_TIME, function (ts) {\n                _this3._receiveStreamTime(ts);\n            });\n\n            this._transmuxer.open();\n        }\n    }, {\n        key: 'unload',\n        value: function unload() {\n            if (this._mediaElement) {\n                this._mediaElement.pause();\n            }\n            if (this._msectl) {\n                this._msectl.seek(0);\n            }\n            if (this._transmuxer) {\n                this._transmuxer.close();\n                this._transmuxer.destroy();\n                this._transmuxer = null;\n            }\n        }\n    }, {\n        key: 'play',\n        value: function play() {\n            return this._mediaElement.play();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._mediaElement.pause();\n        }\n    }, {\n        key: '_fillStatisticsInfo',\n        value: function _fillStatisticsInfo(statInfo) {\n            statInfo.playerType = this._type;\n\n            if (!(this._mediaElement instanceof HTMLVideoElement)) {\n                return statInfo;\n            }\n\n            var hasQualityInfo = true;\n            var decoded = 0;\n            var dropped = 0;\n\n            if (this._mediaElement.getVideoPlaybackQuality) {\n                var quality = this._mediaElement.getVideoPlaybackQuality();\n                decoded = quality.totalVideoFrames;\n                dropped = quality.droppedVideoFrames;\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n                decoded = this._mediaElement.webkitDecodedFrameCount;\n                dropped = this._mediaElement.webkitDroppedFrameCount;\n            } else {\n                hasQualityInfo = false;\n            }\n\n            if (hasQualityInfo) {\n                statInfo.decodedFrames = decoded;\n                statInfo.droppedFrames = dropped;\n            }\n\n            return statInfo;\n        }\n    }, {\n        key: '_onmseUpdateEnd',\n        value: function _onmseUpdateEnd() {\n            if (!this._config.lazyLoad || this._config.isLive) {\n                return;\n            }\n\n            var buffered = this._mediaElement.buffered;\n            var currentTime = this._mediaElement.currentTime;\n            var currentRangeStart = 0;\n            var currentRangeEnd = 0;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var start = buffered.start(i);\n                var end = buffered.end(i);\n                if (start <= currentTime && currentTime < end) {\n                    currentRangeStart = start;\n                    currentRangeEnd = end;\n                    break;\n                }\n            }\n\n            if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {\n                _logger2.default.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                this._suspendTransmuxer();\n            }\n        }\n    }, {\n        key: '_onmseBufferFull',\n        value: function _onmseBufferFull() {\n            _logger2.default.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');\n            if (this._progressChecker == null) {\n                this._suspendTransmuxer();\n            }\n        }\n    }, {\n        key: '_suspendTransmuxer',\n        value: function _suspendTransmuxer() {\n            if (this._transmuxer) {\n                this._transmuxer.pause();\n\n                if (this._progressChecker == null) {\n                    this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);\n                }\n            }\n        }\n    }, {\n        key: '_checkProgressAndResume',\n        value: function _checkProgressAndResume() {\n            var currentTime = this._mediaElement.currentTime;\n            var buffered = this._mediaElement.buffered;\n\n            var needResume = false;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var from = buffered.start(i);\n                var to = buffered.end(i);\n                if (currentTime >= from && currentTime < to) {\n                    if (currentTime >= to - this._config.lazyLoadRecoverDuration) {\n                        needResume = true;\n                    }\n                    break;\n                }\n            }\n\n            if (needResume) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n                if (needResume) {\n                    _logger2.default.v(this.TAG, 'Continue loading from paused position');\n                    this._transmuxer.resume();\n                }\n            }\n        }\n    }, {\n        key: '_isTimepointBuffered',\n        value: function _isTimepointBuffered(seconds) {\n            var buffered = this._mediaElement.buffered;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var from = buffered.start(i);\n                var to = buffered.end(i);\n                if (seconds >= from && seconds < to) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: '_internalSeek',\n        value: function _internalSeek(seconds) {\n            var directSeek = this._isTimepointBuffered(seconds);\n\n            var directSeekBegin = false;\n            var directSeekBeginTime = 0;\n\n            if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {\n                var videoBeginTime = this._mediaElement.buffered.start(0);\n                if (videoBeginTime < 1.0 && seconds < videoBeginTime || _browser2.default.safari) {\n                    directSeekBegin = true;\n                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                    directSeekBeginTime = _browser2.default.safari ? 0.1 : videoBeginTime;\n                }\n            }\n\n            if (directSeekBegin) {\n                // seek to video begin, set currentTime directly if beginPTS buffered\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = directSeekBeginTime;\n            } else if (directSeek) {\n                // buffered position\n                if (!this._alwaysSeekKeyframe) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = seconds;\n                } else {\n                    var idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));\n                    this._requestSetTime = true;\n                    if (idr != null) {\n                        this._mediaElement.currentTime = idr.dts / 1000;\n                    } else {\n                        this._mediaElement.currentTime = seconds;\n                    }\n                }\n                if (this._progressChecker != null) {\n                    this._checkProgressAndResume();\n                }\n            } else {\n                if (this._progressChecker != null) {\n                    window.clearInterval(this._progressChecker);\n                    this._progressChecker = null;\n                }\n                this._msectl.seek(seconds);\n                this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds\n                // no need to set mediaElement.currentTime if non-accurateSeek,\n                // just wait for the recommend_seekpoint callback\n                if (this._config.accurateSeek) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = seconds;\n                }\n            }\n        }\n    }, {\n        key: '_checkAndApplyUnbufferedSeekpoint',\n        value: function _checkAndApplyUnbufferedSeekpoint() {\n            if (this._seekpointRecord) {\n                if (this._seekpointRecord.recordTime <= this._now() - 100) {\n                    var target = this._mediaElement.currentTime;\n                    this._seekpointRecord = null;\n                    if (!this._isTimepointBuffered(target)) {\n                        if (this._progressChecker != null) {\n                            window.clearTimeout(this._progressChecker);\n                            this._progressChecker = null;\n                        }\n                        // .currentTime is consists with .buffered timestamp\n                        // Chrome/Edge use DTS, while FireFox/Safari use PTS\n                        this._msectl.seek(target);\n                        this._transmuxer.seek(Math.floor(target * 1000));\n                        // set currentTime if accurateSeek, or wait for recommend_seekpoint callback\n                        if (this._config.accurateSeek) {\n                            this._requestSetTime = true;\n                            this._mediaElement.currentTime = target;\n                        }\n                    }\n                } else {\n                    window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n                }\n            }\n        }\n    }, {\n        key: '_checkAndResumeStuckPlayback',\n        value: function _checkAndResumeStuckPlayback(stalled) {\n            var media = this._mediaElement;\n            if (stalled || !this._receivedCanPlay || media.readyState < 2) {\n                // HAVE_CURRENT_DATA\n                var buffered = media.buffered;\n                if (buffered.length > 0 && media.currentTime < buffered.start(0)) {\n                    _logger2.default.w(this.TAG, 'Playback seems stuck at ' + media.currentTime + ', seek to ' + buffered.start(0));\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = buffered.start(0);\n                    this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n                }\n            } else {\n                // Playback didn't stuck, remove progress event listener\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            }\n        }\n    }, {\n        key: '_onvLoadedMetadata',\n        value: function _onvLoadedMetadata(e) {\n            if (this._pendingSeekTime != null) {\n                this._mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            }\n        }\n    }, {\n        key: '_onvSeeking',\n        value: function _onvSeeking(e) {\n            // handle seeking request from browser's progress bar\n            var target = this._mediaElement.currentTime;\n            var buffered = this._mediaElement.buffered;\n\n            if (this._requestSetTime) {\n                this._requestSetTime = false;\n                return;\n            }\n\n            if (target < 1.0 && buffered.length > 0) {\n                // seek to video begin, set currentTime directly if beginPTS buffered\n                var videoBeginTime = buffered.start(0);\n                if (videoBeginTime < 1.0 && target < videoBeginTime || _browser2.default.safari) {\n                    this._requestSetTime = true;\n                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                    this._mediaElement.currentTime = _browser2.default.safari ? 0.1 : videoBeginTime;\n                    return;\n                }\n            }\n\n            if (this._isTimepointBuffered(target)) {\n                if (this._alwaysSeekKeyframe) {\n                    var idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));\n                    if (idr != null) {\n                        this._requestSetTime = true;\n                        this._mediaElement.currentTime = idr.dts / 1000;\n                    }\n                }\n                if (this._progressChecker != null) {\n                    this._checkProgressAndResume();\n                }\n                return;\n            }\n\n            this._seekpointRecord = {\n                seekPoint: target,\n                recordTime: this._now()\n            };\n            window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n        }\n    }, {\n        key: '_onvCanPlay',\n        value: function _onvCanPlay(e) {\n            this._receivedCanPlay = true;\n            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n        }\n    }, {\n        key: '_onvStalled',\n        value: function _onvStalled(e) {\n            this._checkAndResumeStuckPlayback(true);\n        }\n    }, {\n        key: '_onvProgress',\n        value: function _onvProgress(e) {\n            this._checkAndResumeStuckPlayback();\n        }\n    }, {\n        key: 'setMediaSourceEndCallback',\n        value: function setMediaSourceEndCallback(call) {\n            this._mediaSourceEndCallback = call;\n        }\n    }, {\n        key: 'setStreamTimeCallback',\n        value: function setStreamTimeCallback(call) {\n            this.callbackStreamTime = call;\n        }\n    }, {\n        key: '_receiveStreamTime',\n        value: function _receiveStreamTime(ts) {\n            if (this.callbackStreamTime != null) {\n                this.callbackStreamTime(ts);\n            }\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'buffered',\n        get: function get() {\n            return this._mediaElement.buffered;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this._mediaElement.duration;\n        }\n    }, {\n        key: 'volume',\n        get: function get() {\n            return this._mediaElement.volume;\n        },\n        set: function set(value) {\n            this._mediaElement.volume = value;\n        }\n    }, {\n        key: 'muted',\n        get: function get() {\n            return this._mediaElement.muted;\n        },\n        set: function set(muted) {\n            this._mediaElement.muted = muted;\n        }\n    }, {\n        key: 'currentTime',\n        get: function get() {\n            if (this._mediaElement) {\n                return this._mediaElement.currentTime;\n            }\n            return 0;\n        },\n        set: function set(seconds) {\n            if (this._mediaElement) {\n                this._internalSeek(seconds);\n            } else {\n                this._pendingSeekTime = seconds;\n            }\n        }\n    }, {\n        key: 'mediaInfo',\n        get: function get() {\n            return Object.assign({}, this._mediaInfo);\n        }\n    }, {\n        key: 'statisticsInfo',\n        get: function get() {\n            if (this._statisticsInfo == null) {\n                this._statisticsInfo = {};\n            }\n            this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);\n            return Object.assign({}, this._statisticsInfo);\n        }\n    }]);\n\n    return FlvPlayer;\n}();\n\nexports.default = FlvPlayer;\n\n},{\"../config.js\":5,\"../core/mse-controller.js\":9,\"../core/mse-events.js\":10,\"../core/transmuxer.js\":11,\"../core/transmuxing-events.js\":13,\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./player-errors.js\":34,\"./player-events.js\":35,\"events\":2}],33:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _playerEvents = _dereq_('./player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _config = _dereq_('../config.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \nvar NativePlayer = function () {\n    function NativePlayer(mediaDataSource, config) {\n        _classCallCheck(this, NativePlayer);\n\n        this.TAG = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new _events2.default();\n\n        this._config = (0, _config.createDefaultConfig)();\n        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\n            throw new _exception.InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n        }\n        if (mediaDataSource.hasOwnProperty('segments')) {\n            throw new _exception.InvalidArgumentException('NativePlayer(' + mediaDataSource.type + ') doesn\\'t support multipart playback!');\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReporter = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n    }\n\n    _createClass(NativePlayer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._mediaElement) {\n                this.unload();\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._mediaDataSource = null;\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            var _this = this;\n\n            if (event === _playerEvents2.default.MEDIA_INFO) {\n                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                    // HAVE_NOTHING\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);\n                    });\n                }\n            } else if (event === _playerEvents2.default.STATISTICS_INFO) {\n                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);\n                    });\n                }\n            }\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            this._mediaElement = mediaElement;\n            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n            if (this._pendingSeekTime != null) {\n                try {\n                    mediaElement.currentTime = this._pendingSeekTime;\n                    this._pendingSeekTime = null;\n                } catch (e) {\n                    // IE11 may throw InvalidStateError if readyState === 0\n                    // Defer set currentTime operation after loadedmetadata\n                }\n            }\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n                this._mediaElement = null;\n            }\n            if (this._statisticsReporter != null) {\n                window.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: 'load',\n        value: function load() {\n            if (!this._mediaElement) {\n                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');\n            }\n            this._mediaElement.src = this._mediaDataSource.url;\n\n            if (this._mediaElement.readyState > 0) {\n                this._mediaElement.currentTime = 0;\n            }\n\n            this._mediaElement.preload = 'auto';\n            this._mediaElement.load();\n            this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n        }\n    }, {\n        key: 'unload',\n        value: function unload() {\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n            }\n            if (this._statisticsReporter != null) {\n                window.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: 'play',\n        value: function play() {\n            return this._mediaElement.play();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._mediaElement.pause();\n        }\n    }, {\n        key: '_onvLoadedMetadata',\n        value: function _onvLoadedMetadata(e) {\n            if (this._pendingSeekTime != null) {\n                this._mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            }\n            this._emitter.emit(_playerEvents2.default.MEDIA_INFO, this.mediaInfo);\n        }\n    }, {\n        key: '_reportStatisticsInfo',\n        value: function _reportStatisticsInfo() {\n            this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, this.statisticsInfo);\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'buffered',\n        get: function get() {\n            return this._mediaElement.buffered;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this._mediaElement.duration;\n        }\n    }, {\n        key: 'volume',\n        get: function get() {\n            return this._mediaElement.volume;\n        },\n        set: function set(value) {\n            this._mediaElement.volume = value;\n        }\n    }, {\n        key: 'muted',\n        get: function get() {\n            return this._mediaElement.muted;\n        },\n        set: function set(muted) {\n            this._mediaElement.muted = muted;\n        }\n    }, {\n        key: 'currentTime',\n        get: function get() {\n            if (this._mediaElement) {\n                return this._mediaElement.currentTime;\n            }\n            return 0;\n        },\n        set: function set(seconds) {\n            if (this._mediaElement) {\n                this._mediaElement.currentTime = seconds;\n            } else {\n                this._pendingSeekTime = seconds;\n            }\n        }\n    }, {\n        key: 'mediaInfo',\n        get: function get() {\n            var mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n            var info = {\n                mimeType: mediaPrefix + this._mediaDataSource.type\n            };\n            if (this._mediaElement) {\n                info.duration = Math.floor(this._mediaElement.duration * 1000);\n                if (this._mediaElement instanceof HTMLVideoElement) {\n                    info.width = this._mediaElement.videoWidth;\n                    info.height = this._mediaElement.videoHeight;\n                }\n            }\n            return info;\n        }\n    }, {\n        key: 'statisticsInfo',\n        get: function get() {\n            var info = {\n                playerType: this._type,\n                url: this._mediaDataSource.url\n            };\n\n            if (!(this._mediaElement instanceof HTMLVideoElement)) {\n                return info;\n            }\n\n            var hasQualityInfo = true;\n            var decoded = 0;\n            var dropped = 0;\n\n            if (this._mediaElement.getVideoPlaybackQuality) {\n                var quality = this._mediaElement.getVideoPlaybackQuality();\n                decoded = quality.totalVideoFrames;\n                dropped = quality.droppedVideoFrames;\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n                decoded = this._mediaElement.webkitDecodedFrameCount;\n                dropped = this._mediaElement.webkitDroppedFrameCount;\n            } else {\n                hasQualityInfo = false;\n            }\n\n            if (hasQualityInfo) {\n                info.decodedFrames = decoded;\n                info.droppedFrames = dropped;\n            }\n\n            return info;\n        }\n    }]);\n\n    return NativePlayer;\n}();\n\nexports.default = NativePlayer;\n\n},{\"../config.js\":5,\"../utils/exception.js\":40,\"./player-events.js\":35,\"events\":2}],34:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ErrorDetails = exports.ErrorTypes = undefined;\n\nvar _loader = _dereq_('../io/loader.js');\n\nvar _demuxErrors = _dereq_('../demux/demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ErrorTypes = exports.ErrorTypes = {\n    NETWORK_ERROR: 'NetworkError',\n    MEDIA_ERROR: 'MediaError',\n    OTHER_ERROR: 'OtherError'\n};\n\nvar ErrorDetails = exports.ErrorDetails = {\n    NETWORK_EXCEPTION: _loader.LoaderErrors.EXCEPTION,\n    NETWORK_STATUS_CODE_INVALID: _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID,\n    NETWORK_TIMEOUT: _loader.LoaderErrors.CONNECTING_TIMEOUT,\n    NETWORK_UNRECOVERABLE_EARLY_EOF: _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF,\n\n    MEDIA_MSE_ERROR: 'MediaMSEError',\n\n    MEDIA_FORMAT_ERROR: _demuxErrors2.default.FORMAT_ERROR,\n    MEDIA_FORMAT_UNSUPPORTED: _demuxErrors2.default.FORMAT_UNSUPPORTED,\n    MEDIA_CODEC_UNSUPPORTED: _demuxErrors2.default.CODEC_UNSUPPORTED\n};\n\n},{\"../demux/demux-errors.js\":16,\"../io/loader.js\":24}],35:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PlayerEvents = {\n  ERROR: 'error',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  METADATA_ARRIVED: 'metadata_arrived',\n  SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n  STATISTICS_INFO: 'statistics_info'\n};\n\nexports.default = PlayerEvents;\n\n},{}],36:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar AAC = function () {\n    function AAC() {\n        _classCallCheck(this, AAC);\n    }\n\n    _createClass(AAC, null, [{\n        key: 'getSilentFrame',\n        value: function getSilentFrame(codec, channelCount) {\n            if (codec === 'mp4a.40.2') {\n                // handle LC-AAC\n                if (channelCount === 1) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n                } else if (channelCount === 2) {\n                    return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n                } else if (channelCount === 3) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n                } else if (channelCount === 4) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n                } else if (channelCount === 5) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n                } else if (channelCount === 6) {\n                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n                }\n            } else {\n                // handle HE-AAC (mp4a.40.5 / mp4a.40.29)\n                if (channelCount === 1) {\n                    // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n                } else if (channelCount === 2) {\n                    // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n                } else if (channelCount === 3) {\n                    // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n                }\n            }\n            return null;\n        }\n    }]);\n\n    return AAC;\n}();\n\nexports.default = AAC;\n\n},{}],37:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nvar MP4 = function () {\n    function MP4() {\n        _classCallCheck(this, MP4);\n    }\n\n    _createClass(MP4, null, [{\n        key: 'init',\n        value: function init() {\n            MP4.types = {\n                avc1: [], avcC: [], btrt: [], dinf: [],\n                dref: [], esds: [], ftyp: [], hdlr: [],\n                mdat: [], mdhd: [], mdia: [], mfhd: [],\n                minf: [], moof: [], moov: [], mp4a: [],\n                mvex: [], mvhd: [], sdtp: [], stbl: [],\n                stco: [], stsc: [], stsd: [], stsz: [],\n                stts: [], tfdt: [], tfhd: [], traf: [],\n                trak: [], trun: [], trex: [], tkhd: [],\n                vmhd: [], smhd: [], '.mp3': []\n            };\n\n            for (var name in MP4.types) {\n                if (MP4.types.hasOwnProperty(name)) {\n                    MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n                }\n            }\n\n            var constants = MP4.constants = {};\n\n            constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\n            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D, // isom\n            0x61, 0x76, 0x63, 0x31 // avc1\n            ]);\n\n            constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01 // entry_count\n            ]);\n\n            constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // entry_count\n            ]);\n\n            constants.STSC = constants.STCO = constants.STTS;\n\n            constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00 // sample_count\n            ]);\n\n            constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler\n            ]);\n\n            constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler\n            ]);\n\n            constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01, // entry_count\n            0x00, 0x00, 0x00, 0x0C, // entry_size\n            0x75, 0x72, 0x6C, 0x20, // type 'url '\n            0x00, 0x00, 0x00, 0x01 // version(0) + flags\n            ]);\n\n            // Sound media header\n            constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)\n            ]);\n\n            // video media header\n            constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags\n            0x00, 0x00, // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes\n            0x00, 0x00]);\n        }\n\n        // Generate a box\n\n    }, {\n        key: 'box',\n        value: function box(type) {\n            var size = 8;\n            var result = null;\n            var datas = Array.prototype.slice.call(arguments, 1);\n            var arrayCount = datas.length;\n\n            for (var i = 0; i < arrayCount; i++) {\n                size += datas[i].byteLength;\n            }\n\n            result = new Uint8Array(size);\n            result[0] = size >>> 24 & 0xFF; // size\n            result[1] = size >>> 16 & 0xFF;\n            result[2] = size >>> 8 & 0xFF;\n            result[3] = size & 0xFF;\n\n            result.set(type, 4); // type\n\n            var offset = 8;\n            for (var _i = 0; _i < arrayCount; _i++) {\n                // data body\n                result.set(datas[_i], offset);\n                offset += datas[_i].byteLength;\n            }\n\n            return result;\n        }\n\n        // emit ftyp & moov\n\n    }, {\n        key: 'generateInitSegment',\n        value: function generateInitSegment(meta) {\n            var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n            var moov = MP4.moov(meta);\n\n            var result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n            result.set(ftyp, 0);\n            result.set(moov, ftyp.byteLength);\n            return result;\n        }\n\n        // Movie metadata box\n\n    }, {\n        key: 'moov',\n        value: function moov(meta) {\n            var mvhd = MP4.mvhd(meta.timescale, meta.duration);\n            var trak = MP4.trak(meta);\n            var mvex = MP4.mvex(meta);\n            return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n        }\n\n        // Movie header box\n\n    }, {\n        key: 'mvhd',\n        value: function mvhd(timescale, duration) {\n            return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID\n            ]));\n        }\n\n        // Track box\n\n    }, {\n        key: 'trak',\n        value: function trak(meta) {\n            return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n        }\n\n        // Track header box\n\n    }, {\n        key: 'tkhd',\n        value: function tkhd(meta) {\n            var trackId = meta.id,\n                duration = meta.duration;\n            var width = meta.presentWidth,\n                height = meta.presentHeight;\n\n            return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            trackId >>> 24 & 0xFF, // track_ID: 4 bytes\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n            duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            width >>> 8 & 0xFF, // width and height\n            width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));\n        }\n\n        // Media Box\n\n    }, {\n        key: 'mdia',\n        value: function mdia(meta) {\n            return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n        }\n\n        // Media header box\n\n    }, {\n        key: 'mdhd',\n        value: function mdhd(meta) {\n            var timescale = meta.timescale;\n            var duration = meta.duration;\n            return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)\n            0x00, 0x00 // pre_defined = 0\n            ]));\n        }\n\n        // Media handler reference box\n\n    }, {\n        key: 'hdlr',\n        value: function hdlr(meta) {\n            var data = null;\n            if (meta.type === 'audio') {\n                data = MP4.constants.HDLR_AUDIO;\n            } else {\n                data = MP4.constants.HDLR_VIDEO;\n            }\n            return MP4.box(MP4.types.hdlr, data);\n        }\n\n        // Media infomation box\n\n    }, {\n        key: 'minf',\n        value: function minf(meta) {\n            var xmhd = null;\n            if (meta.type === 'audio') {\n                xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n            } else {\n                xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n            }\n            return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n        }\n\n        // Data infomation box\n\n    }, {\n        key: 'dinf',\n        value: function dinf() {\n            var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));\n            return result;\n        }\n\n        // Sample table box\n\n    }, {\n        key: 'stbl',\n        value: function stbl(meta) {\n            var result = MP4.box(MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO // Chunk offset\n            ));\n            return result;\n        }\n\n        // Sample description box\n\n    }, {\n        key: 'stsd',\n        value: function stsd(meta) {\n            if (meta.type === 'audio') {\n                if (meta.codec === 'mp3') {\n                    return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n                }\n                // else: aac -> mp4a\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n            } else {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n            }\n        }\n    }, {\n        key: 'mp3',\n        value: function mp3(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4)\n            sampleRate >>> 8 & 0xFF, // Audio sample rate\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types['.mp3'], data);\n        }\n    }, {\n        key: 'mp4a',\n        value: function mp4a(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4)\n            sampleRate >>> 8 & 0xFF, // Audio sample rate\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n        }\n    }, {\n        key: 'esds',\n        value: function esds(meta) {\n            var config = meta.config || [];\n            var configSize = config.length;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags\n\n            0x03, // descriptor_type\n            0x17 + configSize, // length3\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type\n            0x0F + configSize, // length\n            0x40, // codec: mpeg4_audio\n            0x15, // stream_type: Audio\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05 // descriptor_type\n            ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig\n            ]));\n            return MP4.box(MP4.types.esds, data);\n        }\n    }, {\n        key: 'avc1',\n        value: function avc1(meta) {\n            var avcc = meta.avcc;\n            var width = meta.codecWidth,\n                height = meta.codecHeight;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes\n            width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes\n            height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n            0x00, 0x01, // frame_count\n            0x0A, // strlen\n            0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth\n            0xFF, 0xFF // pre_defined = -1\n            ]);\n            return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n        }\n\n        // Movie Extends box\n\n    }, {\n        key: 'mvex',\n        value: function mvex(meta) {\n            return MP4.box(MP4.types.mvex, MP4.trex(meta));\n        }\n\n        // Track Extends box\n\n    }, {\n        key: 'trex',\n        value: function trex(meta) {\n            var trackId = meta.id;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\n            ]);\n            return MP4.box(MP4.types.trex, data);\n        }\n\n        // Movie fragment box\n\n    }, {\n        key: 'moof',\n        value: function moof(track, baseMediaDecodeTime) {\n            return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n        }\n    }, {\n        key: 'mfhd',\n        value: function mfhd(sequenceNumber) {\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32\n            sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);\n            return MP4.box(MP4.types.mfhd, data);\n        }\n\n        // Track fragment box\n\n    }, {\n        key: 'traf',\n        value: function traf(track, baseMediaDecodeTime) {\n            var trackId = track.id;\n\n            // Track fragment header box\n            var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF]));\n            // Track Fragment Decode Time\n            var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32\n            baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));\n            var sdtp = MP4.sdtp(track);\n            var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n            return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n        }\n\n        // Sample Dependency Type box\n\n    }, {\n        key: 'sdtp',\n        value: function sdtp(track) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var data = new Uint8Array(4 + sampleCount);\n            // 0~4 bytes: version(0) & flags\n            for (var i = 0; i < sampleCount; i++) {\n                var flags = samples[i].flags;\n                data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)\n                flags.dependsOn << 4 // sample_depends_on\n                | flags.isDependedOn << 2 // sample_is_depended_on\n                | flags.hasRedundancy; // sample_has_redundancy\n            }\n            return MP4.box(MP4.types.sdtp, data);\n        }\n\n        // Track fragment run box\n\n    }, {\n        key: 'trun',\n        value: function trun(track, offset) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var dataSize = 12 + 16 * sampleCount;\n            var data = new Uint8Array(dataSize);\n            offset += 8 + dataSize;\n\n            data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n            sampleCount >>> 24 & 0xFF, // sample_count\n            sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset\n            offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);\n\n            for (var i = 0; i < sampleCount; i++) {\n                var duration = samples[i].duration;\n                var size = samples[i].size;\n                var flags = samples[i].flags;\n                var cts = samples[i].cts;\n                data.set([duration >>> 24 & 0xFF, // sample_duration\n                duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size\n                size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags\n                flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority\n                cts >>> 24 & 0xFF, // sample_composition_time_offset\n                cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);\n            }\n            return MP4.box(MP4.types.trun, data);\n        }\n    }, {\n        key: 'mdat',\n        value: function mdat(data) {\n            return MP4.box(MP4.types.mdat, data);\n        }\n    }]);\n\n    return MP4;\n}();\n\nMP4.init();\n\nexports.default = MP4;\n\n},{}],38:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _mp4Generator = _dereq_('./mp4-generator.js');\n\nvar _mp4Generator2 = _interopRequireDefault(_mp4Generator);\n\nvar _aacSilent = _dereq_('./aac-silent.js');\n\nvar _aacSilent2 = _interopRequireDefault(_aacSilent);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mediaSegmentInfo = _dereq_('../core/media-segment-info.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Fragmented mp4 remuxer\nvar MP4Remuxer = function () {\n    function MP4Remuxer(config) {\n        _classCallCheck(this, MP4Remuxer);\n\n        this.TAG = 'MP4Remuxer';\n\n        this._config = config;\n        this._isLive = config.isLive === true ? true : false;\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n        this._audioStashedLastSample = null;\n        this._videoStashedLastSample = null;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661) ? true : false;\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = _browser2.default.msedge || _browser2.default.msie;\n\n        // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n        this._mp3UseMpegAudio = !_browser2.default.firefox;\n\n        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;\n    }\n\n    _createClass(MP4Remuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._dtsBase = -1;\n            this._dtsBaseInited = false;\n            this._audioMeta = null;\n            this._videoMeta = null;\n            this._audioSegmentInfoList.clear();\n            this._audioSegmentInfoList = null;\n            this._videoSegmentInfoList.clear();\n            this._videoSegmentInfoList = null;\n            this._onInitSegment = null;\n            this._onMediaSegment = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(producer) {\n            producer.onDataAvailable = this.remux.bind(this);\n            producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n            return this;\n        }\n\n        /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\r\n           InitSegment: {\r\n               type: string,\r\n               data: ArrayBuffer,\r\n               codec: string,\r\n               container: string\r\n           }\r\n        */\n\n    }, {\n        key: 'insertDiscontinuity',\n        value: function insertDiscontinuity() {\n            this._audioNextDts = this._videoNextDts = undefined;\n        }\n    }, {\n        key: 'seek',\n        value: function seek(originalDts) {\n            this._audioStashedLastSample = null;\n            this._videoStashedLastSample = null;\n            this._videoSegmentInfoList.clear();\n            this._audioSegmentInfoList.clear();\n        }\n    }, {\n        key: 'remux',\n        value: function remux(audioTrack, videoTrack) {\n            if (!this._onMediaSegment) {\n                throw new _exception.IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n            }\n            if (!this._dtsBaseInited) {\n                this._calculateDtsBase(audioTrack, videoTrack);\n            }\n            this._remuxVideo(videoTrack);\n            this._remuxAudio(audioTrack);\n        }\n    }, {\n        key: '_onTrackMetadataReceived',\n        value: function _onTrackMetadataReceived(type, metadata) {\n            var metabox = null;\n\n            var container = 'mp4';\n            var codec = metadata.codec;\n\n            if (type === 'audio') {\n                this._audioMeta = metadata;\n                if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\n                    // 'audio/mpeg' for MP3 audio track\n                    container = 'mpeg';\n                    codec = '';\n                    metabox = new Uint8Array();\n                } else {\n                    // 'audio/mp4, codecs=\"codec\"'\n                    metabox = _mp4Generator2.default.generateInitSegment(metadata);\n                }\n            } else if (type === 'video') {\n                this._videoMeta = metadata;\n                metabox = _mp4Generator2.default.generateInitSegment(metadata);\n            } else {\n                return;\n            }\n\n            // dispatch metabox (Initialization Segment)\n            if (!this._onInitSegment) {\n                throw new _exception.IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n            }\n            this._onInitSegment(type, {\n                type: type,\n                data: metabox.buffer,\n                codec: codec,\n                container: type + '/' + container,\n                mediaDuration: metadata.duration // in timescale 1000 (milliseconds)\n            });\n        }\n    }, {\n        key: '_calculateDtsBase',\n        value: function _calculateDtsBase(audioTrack, videoTrack) {\n            if (this._dtsBaseInited) {\n                return;\n            }\n\n            if (audioTrack.samples && audioTrack.samples.length) {\n                this._audioDtsBase = audioTrack.samples[0].dts;\n            }\n            if (videoTrack.samples && videoTrack.samples.length) {\n                this._videoDtsBase = videoTrack.samples[0].dts;\n            }\n\n            this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n            this._dtsBaseInited = true;\n        }\n    }, {\n        key: 'flushStashedSamples',\n        value: function flushStashedSamples() {\n            var videoSample = this._videoStashedLastSample;\n            var audioSample = this._audioStashedLastSample;\n\n            var videoTrack = {\n                type: 'video',\n                id: 1,\n                sequenceNumber: 0,\n                samples: [],\n                length: 0\n            };\n\n            if (videoSample != null) {\n                videoTrack.samples.push(videoSample);\n                videoTrack.length = videoSample.length;\n            }\n\n            var audioTrack = {\n                type: 'audio',\n                id: 2,\n                sequenceNumber: 0,\n                samples: [],\n                length: 0\n            };\n\n            if (audioSample != null) {\n                audioTrack.samples.push(audioSample);\n                audioTrack.length = audioSample.length;\n            }\n\n            this._videoStashedLastSample = null;\n            this._audioStashedLastSample = null;\n\n            this._remuxVideo(videoTrack, true);\n            this._remuxAudio(audioTrack, true);\n        }\n    }, {\n        key: '_remuxAudio',\n        value: function _remuxAudio(audioTrack, force) {\n            if (this._audioMeta == null) {\n                return;\n            }\n\n            var track = audioTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1,\n                lastPts = -1;\n            var refSampleDuration = this._audioMeta.refSampleDuration;\n\n            var mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\n            var firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\n\n            var insertPrefixSilentFrame = false;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n            if (samples.length === 1 && !force) {\n                // If [sample count in current batch] === 1 && (force != true)\n                // Ignore and keep in demuxer's queue\n                return;\n            } // else if (force === true) do remux\n\n            var offset = 0;\n            var mdatbox = null;\n            var mdatBytes = 0;\n\n            // calculate initial mdat size\n            if (mpegRawTrack) {\n                // for raw mpeg buffer\n                offset = 0;\n                mdatBytes = track.length;\n            } else {\n                // for fmp4 mdat box\n                offset = 8; // size + type\n                mdatBytes = 8 + track.length;\n            }\n\n            var lastSample = null;\n\n            // Pop the lastSample and waiting for stash\n            if (samples.length > 1) {\n                lastSample = samples.pop();\n                mdatBytes -= lastSample.length;\n            }\n\n            // Insert [stashed lastSample in the previous batch] to the front\n            if (this._audioStashedLastSample != null) {\n                var sample = this._audioStashedLastSample;\n                this._audioStashedLastSample = null;\n                samples.unshift(sample);\n                mdatBytes += sample.length;\n            }\n\n            // Stash the lastSample of current batch, waiting for next batch\n            if (lastSample != null) {\n                this._audioStashedLastSample = lastSample;\n            }\n\n            var firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n            // calculate dtsCorrection\n            if (this._audioNextDts) {\n                dtsCorrection = firstSampleOriginalDts - this._audioNextDts;\n            } else {\n                // this._audioNextDts == undefined\n                if (this._audioSegmentInfoList.isEmpty()) {\n                    dtsCorrection = 0;\n                    if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                        if (this._audioMeta.originalCodec !== 'mp3') {\n                            insertPrefixSilentFrame = true;\n                        }\n                    }\n                } else {\n                    var _lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                    if (_lastSample != null) {\n                        var distance = firstSampleOriginalDts - (_lastSample.originalDts + _lastSample.duration);\n                        if (distance <= 3) {\n                            distance = 0;\n                        }\n                        var expectedDts = _lastSample.dts + _lastSample.duration + distance;\n                        dtsCorrection = firstSampleOriginalDts - expectedDts;\n                    } else {\n                        // lastSample == null, cannot found\n                        dtsCorrection = 0;\n                    }\n                }\n            }\n\n            if (insertPrefixSilentFrame) {\n                // align audio segment beginDts to match with current video segment's beginDts\n                var firstSampleDts = firstSampleOriginalDts - dtsCorrection;\n                var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);\n                if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {\n                    var silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                    if (silentUnit) {\n                        var dts = videoSegment.beginDts;\n                        var silentFrameDuration = firstSampleDts - videoSegment.beginDts;\n                        _logger2.default.v(this.TAG, 'InsertPrefixSilentAudio: dts: ' + dts + ', duration: ' + silentFrameDuration);\n                        samples.unshift({ unit: silentUnit, dts: dts, pts: dts });\n                        mdatBytes += silentUnit.byteLength;\n                    } // silentUnit == null: Cannot generate, skip\n                } else {\n                    insertPrefixSilentFrame = false;\n                }\n            }\n\n            var mp4Samples = [];\n\n            // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n            for (var i = 0; i < samples.length; i++) {\n                var _sample = samples[i];\n                var unit = _sample.unit;\n                var originalDts = _sample.dts - this._dtsBase;\n                var _dts = originalDts;\n                var needFillSilentFrames = false;\n                var silentFrames = null;\n                var sampleDuration = 0;\n\n                if (originalDts < -0.001) {\n                    continue; //pass the first sample with the invalid dts\n                }\n\n                if (this._audioMeta.codec !== 'mp3') {\n                    // for AAC codec, we need to keep dts increase based on refSampleDuration\n                    var curRefDts = originalDts;\n                    var maxAudioFramesDrift = 3;\n                    if (this._audioNextDts) {\n                        curRefDts = this._audioNextDts;\n                    }\n\n                    dtsCorrection = originalDts - curRefDts;\n                    if (dtsCorrection <= -maxAudioFramesDrift * refSampleDuration) {\n                        // If we're overlapping by more than maxAudioFramesDrift number of frame, drop this sample\n                        //Log.w(this.TAG, `Dropping 1 audio frame (originalDts: ${originalDts} ms ,curRefDts: ${curRefDts} ms)  due to dtsCorrection: ${dtsCorrection} ms overlap.`);\n                        continue;\n                    } else if (dtsCorrection >= maxAudioFramesDrift * refSampleDuration && this._fillAudioTimestampGap && !_browser2.default.safari) {\n                        // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap\n                        needFillSilentFrames = true;\n                        // We need to insert silent frames to fill timestamp gap\n                        var frameCount = Math.floor(dtsCorrection / refSampleDuration);\n                        _logger2.default.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' + 'Silent frames will be generated to avoid unsync.\\n' + ('originalDts: ' + originalDts + ' ms, curRefDts: ' + curRefDts + ' ms, ') + ('dtsCorrection: ' + Math.round(dtsCorrection) + ' ms, generate: ' + frameCount + ' frames'));\n\n                        _dts = Math.floor(curRefDts);\n                        sampleDuration = Math.floor(curRefDts + refSampleDuration) - _dts;\n\n                        var _silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                        if (_silentUnit == null) {\n                            _logger2.default.w(this.TAG, 'Unable to generate silent frame for ' + (this._audioMeta.originalCodec + ' with ' + this._audioMeta.channelCount + ' channels, repeat last frame'));\n                            // Repeat last frame\n                            _silentUnit = unit;\n                        }\n                        silentFrames = [];\n\n                        for (var j = 0; j < frameCount; j++) {\n                            curRefDts = curRefDts + refSampleDuration;\n                            var intDts = Math.floor(curRefDts); // change to integer\n                            var intDuration = Math.floor(curRefDts + refSampleDuration) - intDts;\n                            var frame = {\n                                dts: intDts,\n                                pts: intDts,\n                                cts: 0,\n                                unit: _silentUnit,\n                                size: _silentUnit.byteLength,\n                                duration: intDuration, // wait for next sample\n                                originalDts: originalDts,\n                                flags: {\n                                    isLeading: 0,\n                                    dependsOn: 1,\n                                    isDependedOn: 0,\n                                    hasRedundancy: 0\n                                }\n                            };\n                            silentFrames.push(frame);\n                            mdatBytes += frame.size;\n                        }\n\n                        this._audioNextDts = curRefDts + refSampleDuration;\n                    } else {\n\n                        _dts = Math.floor(curRefDts);\n                        sampleDuration = Math.floor(curRefDts + refSampleDuration) - _dts;\n                        this._audioNextDts = curRefDts + refSampleDuration;\n                    }\n                } else {\n                    // keep the original dts calculate algorithm for mp3\n                    _dts = originalDts - dtsCorrection;\n\n                    if (i !== samples.length - 1) {\n                        var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                        sampleDuration = nextDts - _dts;\n                    } else {\n                        // the last sample\n                        if (lastSample != null) {\n                            // use stashed sample's dts to calculate sample duration\n                            var _nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n                            sampleDuration = _nextDts - _dts;\n                        } else if (mp4Samples.length >= 1) {\n                            // use second last sample duration\n                            sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                        } else {\n                            // the only one sample, use reference sample duration\n                            sampleDuration = Math.floor(refSampleDuration);\n                        }\n                    }\n                    this._audioNextDts = _dts + sampleDuration;\n                }\n\n                if (firstDts === -1) {\n                    firstDts = _dts;\n                }\n                mp4Samples.push({\n                    dts: _dts,\n                    pts: _dts,\n                    cts: 0,\n                    unit: _sample.unit,\n                    size: _sample.unit.byteLength,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: 1,\n                        isDependedOn: 0,\n                        hasRedundancy: 0\n                    }\n                });\n\n                if (needFillSilentFrames) {\n                    // Silent frames should be inserted after wrong-duration frame\n                    mp4Samples.push.apply(mp4Samples, silentFrames);\n                }\n            }\n\n            if (mp4Samples.length === 0) {\n                //no samples need to remux\n                track.samples = [];\n                track.length = 0;\n                return;\n            }\n\n            // allocate mdatbox\n            if (mpegRawTrack) {\n                // allocate for raw mpeg buffer\n                mdatbox = new Uint8Array(mdatBytes);\n            } else {\n                // allocate for fmp4 mdat box\n                mdatbox = new Uint8Array(mdatBytes);\n                // size field\n                mdatbox[0] = mdatBytes >>> 24 & 0xFF;\n                mdatbox[1] = mdatBytes >>> 16 & 0xFF;\n                mdatbox[2] = mdatBytes >>> 8 & 0xFF;\n                mdatbox[3] = mdatBytes & 0xFF;\n                // type field (fourCC)\n                mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n            }\n\n            // Write samples into mdatbox\n            for (var _i = 0; _i < mp4Samples.length; _i++) {\n                var _unit = mp4Samples[_i].unit;\n                mdatbox.set(_unit, offset);\n                offset += _unit.byteLength;\n            }\n\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            //this._audioNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstDts;\n            info.endPts = lastDts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);\n            if (!this._isLive) {\n                this._audioSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber++;\n\n            var moofbox = null;\n\n            if (mpegRawTrack) {\n                // Generate empty buffer, because useless for raw mpeg\n                moofbox = new Uint8Array();\n            } else {\n                // Generate moof for fmp4 segment\n                moofbox = _mp4Generator2.default.moof(track, firstDts);\n            }\n\n            track.samples = [];\n            track.length = 0;\n\n            var segment = {\n                type: 'audio',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            };\n\n            if (mpegRawTrack && firstSegmentAfterSeek) {\n                // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\n                // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                segment.timestampOffset = firstDts;\n            }\n\n            this._onMediaSegment('audio', segment);\n        }\n    }, {\n        key: '_remuxVideo',\n        value: function _remuxVideo(videoTrack, force) {\n            if (this._videoMeta == null) {\n                return;\n            }\n\n            var track = videoTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1;\n            var firstPts = -1,\n                lastPts = -1;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n            if (samples.length === 1 && !force) {\n                // If [sample count in current batch] === 1 && (force != true)\n                // Ignore and keep in demuxer's queue\n                return;\n            } // else if (force === true) do remux\n\n            var offset = 8;\n            var mdatbox = null;\n            var mdatBytes = 8 + videoTrack.length;\n\n            var lastSample = null;\n\n            // Pop the lastSample and waiting for stash\n            if (samples.length > 1) {\n                lastSample = samples.pop();\n                mdatBytes -= lastSample.length;\n            }\n\n            // Insert [stashed lastSample in the previous batch] to the front\n            if (this._videoStashedLastSample != null) {\n                var sample = this._videoStashedLastSample;\n                this._videoStashedLastSample = null;\n                samples.unshift(sample);\n                mdatBytes += sample.length;\n            }\n\n            // Stash the lastSample of current batch, waiting for next batch\n            if (lastSample != null) {\n                this._videoStashedLastSample = lastSample;\n            }\n\n            var firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n            // calculate dtsCorrection\n            if (this._videoNextDts) {\n                dtsCorrection = firstSampleOriginalDts - this._videoNextDts;\n            } else {\n                // this._videoNextDts == undefined\n                if (this._videoSegmentInfoList.isEmpty()) {\n                    dtsCorrection = 0;\n                } else {\n                    var _lastSample2 = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                    if (_lastSample2 != null) {\n                        var distance = firstSampleOriginalDts - (_lastSample2.originalDts + _lastSample2.duration);\n                        if (distance <= 3) {\n                            distance = 0;\n                        }\n                        var expectedDts = _lastSample2.dts + _lastSample2.duration + distance;\n                        dtsCorrection = firstSampleOriginalDts - expectedDts;\n                    } else {\n                        // lastSample == null, cannot found\n                        dtsCorrection = 0;\n                    }\n                }\n            }\n\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n            var mp4Samples = [];\n\n            // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n            for (var i = 0; i < samples.length; i++) {\n                var _sample2 = samples[i];\n                var originalDts = _sample2.dts - this._dtsBase;\n                var isKeyframe = _sample2.isKeyframe;\n                var dts = originalDts - dtsCorrection;\n                var cts = _sample2.cts;\n                var pts = dts + cts;\n\n                if (firstDts === -1) {\n                    firstDts = dts;\n                    firstPts = pts;\n                }\n\n                var sampleDuration = 0;\n\n                if (i !== samples.length - 1) {\n                    var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else {\n                    // the last sample\n                    if (lastSample != null) {\n                        // use stashed sample's dts to calculate sample duration\n                        var _nextDts2 = lastSample.dts - this._dtsBase - dtsCorrection;\n                        sampleDuration = _nextDts2 - dts;\n                    } else if (mp4Samples.length >= 1) {\n                        // use second last sample duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else {\n                        // the only one sample, use reference sample duration\n                        sampleDuration = Math.floor(this._videoMeta.refSampleDuration);\n                    }\n                }\n\n                if (isKeyframe) {\n                    var syncPoint = new _mediaSegmentInfo.SampleInfo(dts, pts, sampleDuration, _sample2.dts, true);\n                    syncPoint.fileposition = _sample2.fileposition;\n                    info.appendSyncPoint(syncPoint);\n                }\n\n                mp4Samples.push({\n                    dts: dts,\n                    pts: pts,\n                    cts: cts,\n                    units: _sample2.units,\n                    size: _sample2.length,\n                    isKeyframe: isKeyframe,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: isKeyframe ? 2 : 1,\n                        isDependedOn: isKeyframe ? 1 : 0,\n                        hasRedundancy: 0,\n                        isNonSync: isKeyframe ? 0 : 1\n                    }\n                });\n            }\n\n            // allocate mdatbox\n            mdatbox = new Uint8Array(mdatBytes);\n            mdatbox[0] = mdatBytes >>> 24 & 0xFF;\n            mdatbox[1] = mdatBytes >>> 16 & 0xFF;\n            mdatbox[2] = mdatBytes >>> 8 & 0xFF;\n            mdatbox[3] = mdatBytes & 0xFF;\n            mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n\n            // Write samples into mdatbox\n            for (var _i2 = 0; _i2 < mp4Samples.length; _i2++) {\n                var units = mp4Samples[_i2].units;\n                while (units.length) {\n                    var unit = units.shift();\n                    var data = unit.data;\n                    mdatbox.set(data, offset);\n                    offset += data.byteLength;\n                }\n            }\n\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            lastPts = latest.pts + latest.duration;\n            this._videoNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstPts;\n            info.endPts = lastPts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);\n            if (!this._isLive) {\n                this._videoSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber++;\n\n            // workaround for chrome < 50: force first sample as a random access point\n            // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n            if (this._forceFirstIDR) {\n                var flags = mp4Samples[0].flags;\n                flags.dependsOn = 2;\n                flags.isNonSync = 0;\n            }\n\n            var moofbox = _mp4Generator2.default.moof(track, firstDts);\n            track.samples = [];\n            track.length = 0;\n\n            this._onMediaSegment('video', {\n                type: 'video',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            });\n        }\n    }, {\n        key: '_mergeBoxes',\n        value: function _mergeBoxes(moof, mdat) {\n            var result = new Uint8Array(moof.byteLength + mdat.byteLength);\n            result.set(moof, 0);\n            result.set(mdat, moof.byteLength);\n            return result;\n        }\n    }, {\n        key: 'onInitSegment',\n        get: function get() {\n            return this._onInitSegment;\n        },\n        set: function set(callback) {\n            this._onInitSegment = callback;\n        }\n\n        /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\r\n           MediaSegment: {\r\n               type: string,\r\n               data: ArrayBuffer,\r\n               sampleCount: int32\r\n               info: MediaSegmentInfo\r\n           }\r\n        */\n\n    }, {\n        key: 'onMediaSegment',\n        get: function get() {\n            return this._onMediaSegment;\n        },\n        set: function set(callback) {\n            this._onMediaSegment = callback;\n        }\n    }]);\n\n    return MP4Remuxer;\n}();\n\nexports.default = MP4Remuxer;\n\n},{\"../core/media-segment-info.js\":8,\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./aac-silent.js\":36,\"./mp4-generator.js\":37}],39:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    var ua = self.navigator.userAgent.toLowerCase();\n\n    var match = /(edge)\\/([\\w.]+)/.exec(ua) || /(opr)[\\/]([\\w.]+)/.exec(ua) || /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(iemobile)[\\/]([\\w.]+)/.exec(ua) || /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(firefox)[ \\/]([\\w.]+)/.exec(ua) || [];\n\n    var platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(android)/.exec(ua) || /(windows)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || [];\n\n    var matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    var browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        var versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        var msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        var msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        var opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        var android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (var key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexports.default = Browser;\n\n},{}],40:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RuntimeException = exports.RuntimeException = function () {\n    function RuntimeException(message) {\n        _classCallCheck(this, RuntimeException);\n\n        this._message = message;\n    }\n\n    _createClass(RuntimeException, [{\n        key: 'toString',\n        value: function toString() {\n            return this.name + ': ' + this.message;\n        }\n    }, {\n        key: 'name',\n        get: function get() {\n            return 'RuntimeException';\n        }\n    }, {\n        key: 'message',\n        get: function get() {\n            return this._message;\n        }\n    }]);\n\n    return RuntimeException;\n}();\n\nvar IllegalStateException = exports.IllegalStateException = function (_RuntimeException) {\n    _inherits(IllegalStateException, _RuntimeException);\n\n    function IllegalStateException(message) {\n        _classCallCheck(this, IllegalStateException);\n\n        return _possibleConstructorReturn(this, (IllegalStateException.__proto__ || Object.getPrototypeOf(IllegalStateException)).call(this, message));\n    }\n\n    _createClass(IllegalStateException, [{\n        key: 'name',\n        get: function get() {\n            return 'IllegalStateException';\n        }\n    }]);\n\n    return IllegalStateException;\n}(RuntimeException);\n\nvar InvalidArgumentException = exports.InvalidArgumentException = function (_RuntimeException2) {\n    _inherits(InvalidArgumentException, _RuntimeException2);\n\n    function InvalidArgumentException(message) {\n        _classCallCheck(this, InvalidArgumentException);\n\n        return _possibleConstructorReturn(this, (InvalidArgumentException.__proto__ || Object.getPrototypeOf(InvalidArgumentException)).call(this, message));\n    }\n\n    _createClass(InvalidArgumentException, [{\n        key: 'name',\n        get: function get() {\n            return 'InvalidArgumentException';\n        }\n    }]);\n\n    return InvalidArgumentException;\n}(RuntimeException);\n\nvar NotImplementedException = exports.NotImplementedException = function (_RuntimeException3) {\n    _inherits(NotImplementedException, _RuntimeException3);\n\n    function NotImplementedException(message) {\n        _classCallCheck(this, NotImplementedException);\n\n        return _possibleConstructorReturn(this, (NotImplementedException.__proto__ || Object.getPrototypeOf(NotImplementedException)).call(this, message));\n    }\n\n    _createClass(NotImplementedException, [{\n        key: 'name',\n        get: function get() {\n            return 'NotImplementedException';\n        }\n    }]);\n\n    return NotImplementedException;\n}(RuntimeException);\n\n},{}],41:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\nauthor zheng qian <xqq@xqq.im>\r\nr\nicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Log = function () {\n    function Log() {\n        _classCallCheck(this, Log);\n    }\n\n    _createClass(Log, null, [{\n        key: 'e',\n        value: function e(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'error', str);\n            }\n\n            if (!Log.ENABLE_ERROR) {\n                return;\n            }\n\n            if (console.error) {\n                console.error(str);\n            } else if (console.warn) {\n                console.warn(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'i',\n        value: function i(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'info', str);\n            }\n\n            if (!Log.ENABLE_INFO) {\n                return;\n            }\n\n            if (console.info) {\n                console.info(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'w',\n        value: function w(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'warn', str);\n            }\n\n            if (!Log.ENABLE_WARN) {\n                return;\n            }\n\n            if (console.warn) {\n                console.warn(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'd',\n        value: function d(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'debug', str);\n            }\n\n            if (!Log.ENABLE_DEBUG) {\n                return;\n            }\n\n            if (console.debug) {\n                console.debug(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'v',\n        value: function v(tag, msg) {\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (Log.ENABLE_CALLBACK) {\n                Log.emitter.emit('log', 'verbose', str);\n            }\n\n            if (!Log.ENABLE_VERBOSE) {\n                return;\n            }\n\n            console.log(str);\n        }\n    }]);\n\n    return Log;\n}();\n\nLog.GLOBAL_TAG = 'flv.js';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nLog.ENABLE_CALLBACK = false;\n\nLog.emitter = new _events2.default();\n\nexports.default = Log;\n\n},{\"events\":2}],42:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nopyright (C) 2016 Bilibili. All Rights Reserved.\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nou may obtain a copy of the License at\r\nr\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nr\nnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\neither express or implied.\r\nee the License for the specific language governing permissions and\r\nlimitations under the License.\r\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('./logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoggingControl = function () {\n    function LoggingControl() {\n        _classCallCheck(this, LoggingControl);\n    }\n\n    _createClass(LoggingControl, null, [{\n        key: 'getConfig',\n        value: function getConfig() {\n            return {\n                globalTag: _logger2.default.GLOBAL_TAG,\n                forceGlobalTag: _logger2.default.FORCE_GLOBAL_TAG,\n                enableVerbose: _logger2.default.ENABLE_VERBOSE,\n                enableDebug: _logger2.default.ENABLE_DEBUG,\n                enableInfo: _logger2.default.ENABLE_INFO,\n                enableWarn: _logger2.default.ENABLE_WARN,\n                enableError: _logger2.default.ENABLE_ERROR,\n                enableCallback: _logger2.default.ENABLE_CALLBACK\n            };\n        }\n    }, {\n        key: 'applyConfig',\n        value: function applyConfig(config) {\n            _logger2.default.GLOBAL_TAG = config.globalTag;\n            _logger2.default.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n            _logger2.default.ENABLE_VERBOSE = config.enableVerbose;\n            _logger2.default.ENABLE_DEBUG = config.enableDebug;\n            _logger2.default.ENABLE_INFO = config.enableInfo;\n            _logger2.default.ENABLE_WARN = config.enableWarn;\n            _logger2.default.ENABLE_ERROR = config.enableError;\n            _logger2.default.ENABLE_CALLBACK = config.enableCallback;\n        }\n    }, {\n        key: '_notifyChange',\n        value: function _notifyChange() {\n            var emitter = LoggingControl.emitter;\n\n            if (emitter.listenerCount('change') > 0) {\n                var config = LoggingControl.getConfig();\n                emitter.emit('change', config);\n            }\n        }\n    }, {\n        key: 'registerListener',\n        value: function registerListener(listener) {\n            LoggingControl.emitter.addListener('change', listener);\n        }\n    }, {\n        key: 'removeListener',\n        value: function removeListener(listener) {\n            LoggingControl.emitter.removeListener('change', listener);\n        }\n    }, {\n        key: 'addLogListener',\n        value: function addLogListener(listener) {\n            _logger2.default.emitter.addListener('log', listener);\n            if (_logger2.default.emitter.listenerCount('log') > 0) {\n                _logger2.default.ENABLE_CALLBACK = true;\n                LoggingControl._notifyChange();\n            }\n        }\n    }, {\n        key: 'removeLogListener',\n        value: function removeLogListener(listener) {\n            _logger2.default.emitter.removeListener('log', listener);\n            if (_logger2.default.emitter.listenerCount('log') === 0) {\n                _logger2.default.ENABLE_CALLBACK = false;\n                LoggingControl._notifyChange();\n            }\n        }\n    }, {\n        key: 'forceGlobalTag',\n        get: function get() {\n            return _logger2.default.FORCE_GLOBAL_TAG;\n        },\n        set: function set(enable) {\n            _logger2.default.FORCE_GLOBAL_TAG = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'globalTag',\n        get: function get() {\n            return _logger2.default.GLOBAL_TAG;\n        },\n        set: function set(tag) {\n            _logger2.default.GLOBAL_TAG = tag;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableAll',\n        get: function get() {\n            return _logger2.default.ENABLE_VERBOSE && _logger2.default.ENABLE_DEBUG && _logger2.default.ENABLE_INFO && _logger2.default.ENABLE_WARN && _logger2.default.ENABLE_ERROR;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_VERBOSE = enable;\n            _logger2.default.ENABLE_DEBUG = enable;\n            _logger2.default.ENABLE_INFO = enable;\n            _logger2.default.ENABLE_WARN = enable;\n            _logger2.default.ENABLE_ERROR = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableDebug',\n        get: function get() {\n            return _logger2.default.ENABLE_DEBUG;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_DEBUG = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableVerbose',\n        get: function get() {\n            return _logger2.default.ENABLE_VERBOSE;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_VERBOSE = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableInfo',\n        get: function get() {\n            return _logger2.default.ENABLE_INFO;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_INFO = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableWarn',\n        get: function get() {\n            return _logger2.default.ENABLE_WARN;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_WARN = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableError',\n        get: function get() {\n            return _logger2.default.ENABLE_ERROR;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_ERROR = enable;\n            LoggingControl._notifyChange();\n        }\n    }]);\n\n    return LoggingControl;\n}();\n\nLoggingControl.emitter = new _events2.default();\n\nexports.default = LoggingControl;\n\n},{\"./logger.js\":41,\"events\":2}],43:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar Polyfill = function () {\n    function Polyfill() {\n        _classCallCheck(this, Polyfill);\n    }\n\n    _createClass(Polyfill, null, [{\n        key: 'install',\n        value: function install() {\n            // ES6 Object.setPrototypeOf\n            Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {\n                obj.__proto__ = proto;\n                return obj;\n            };\n\n            // ES6 Object.assign\n            Object.assign = Object.assign || function (target) {\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert undefined or null to object');\n                }\n\n                var output = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var source = arguments[i];\n                    if (source !== undefined && source !== null) {\n                        for (var key in source) {\n                            if (source.hasOwnProperty(key)) {\n                                output[key] = source[key];\n                            }\n                        }\n                    }\n                }\n                return output;\n            };\n\n            // ES6 Promise (missing support in IE11)\n            if (typeof self.Promise !== 'function') {\n                _dereq_('es6-promise').polyfill();\n            }\n        }\n    }]);\n\n    return Polyfill;\n}();\n\nPolyfill.install();\n\nexports.default = Polyfill;\n\n},{\"es6-promise\":1}],44:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    var array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80) return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction decodeUTF8(uint8array) {\n    var out = [];\n    var input = uint8array;\n    var i = 0;\n    var length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(_ucs & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;\n                if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {\n                    _ucs2 -= 0x10000;\n                    out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));\n                    out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nexports.default = decodeUTF8;\n\n},{}]},{},[21])(21)\n});\n\n//# sourceMappingURL=flv.js.map\n","/*\nmp3编码器用到的lamejs编码引擎，一般都用MP3格式，浏览器支持广泛，此引擎测试的也比较多，稳定\nhttps://github.com/xiangyuecn/Recorder\n*/\n(function(){\n\"use strict\";\n\n//end2 ****开始copy lamejs*****\n/*\nmp3编码依赖lamejs，如果无需mp3支持直接移除此代码\nhttps://github.com/zhuker/lamejs/blob/bfb7f6c6d7877e0fe1ad9e72697a871676119a0e/lame.all.js\n*/\n\nfunction lamejs() {\nvar Math_log10=function(s){//坚决不能用也不要报语言问题的错误\n\treturn Math.log(s)/Math.log(10);\n};\n\nfunction new_byte(count) {\n    return new Int8Array(count);\n}\n\nfunction new_short(count) {\n    return new Int16Array(count);\n}\n\nfunction new_int(count) {\n    return new Int32Array(count);\n}\n\nfunction new_float(count) {\n    return new Float32Array(count);\n}\n\nfunction new_double(count) {\n    return new Float64Array(count);\n}\n\nfunction new_float_n(args) {\n    if (args.length == 1) {\n        return new_float(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n    }\n    return A;\n}\nfunction new_int_n(args) {\n    if (args.length == 1) {\n        return new_int(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n    }\n    return A;\n}\n\nfunction new_short_n(args) {\n    if (args.length == 1) {\n        return new_short(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n    }\n    return A;\n}\n\nfunction new_array_n(args) {\n    if (args.length == 1) {\n        return new Array(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n    }\n    return A;\n}\n\n\nvar Arrays = {};\n\nArrays.fill = function (a, fromIndex, toIndex, val) {\n    if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n            a[i] = arguments[1];\n        }\n    } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n            a[i] = val;\n        }\n    }\n};\n\nvar System = {};\n\nSystem.arraycopy = function (src, srcPos, dest, destPos, length) {\n    var srcEnd = srcPos + length;\n    while (srcPos < srcEnd)\n        dest[destPos++] = src[srcPos++];\n};\n\n\nvar Util = {};\nUtil.SQRT2 = 1.41421356237309504880;\nUtil.FAST_LOG10 = function (x) {\n    return Math_log10(x);\n};\n\nUtil.FAST_LOG10_X = function (x, y) {\n    return Math_log10(x) * y;\n};\n\nfunction ShortBlock(ordinal) {\n    this.ordinal = ordinal;\n}\n/**\n * LAME may use them, even different block types for L/R.\n */\nShortBlock.short_block_allowed = new ShortBlock(0);\n/**\n * LAME may use them, but always same block types in L/R.\n */\nShortBlock.short_block_coupled = new ShortBlock(1);\n/**\n * LAME will not use short blocks, long blocks only.\n */\nShortBlock.short_block_dispensed = new ShortBlock(2);\n/**\n * LAME will not use long blocks, short blocks only.\n */\nShortBlock.short_block_forced = new ShortBlock(3);\n\nvar Float = {};\nFloat.MAX_VALUE = 3.4028235e+38;\n\nfunction VbrMode(ordinal) {\n    this.ordinal = ordinal;\n}\nVbrMode.vbr_off = new VbrMode(0);\nVbrMode.vbr_mt = new VbrMode(1);\nVbrMode.vbr_rh = new VbrMode(2);\nVbrMode.vbr_abr = new VbrMode(3);\nVbrMode.vbr_mtrh = new VbrMode(4);\nVbrMode.vbr_default = VbrMode.vbr_mtrh;\n\nvar assert = function (x) {\n    //console.assert(x);\n};\n\nvar module_exports = {\n    \"System\": System,\n    \"VbrMode\": VbrMode,\n    \"Float\": Float,\n    \"ShortBlock\": ShortBlock,\n    \"Util\": Util,\n    \"Arrays\": Arrays,\n    \"new_array_n\": new_array_n,\n    \"new_byte\": new_byte,\n    \"new_double\": new_double,\n    \"new_float\": new_float,\n    \"new_float_n\": new_float_n,\n    \"new_int\": new_int,\n    \"new_int_n\": new_int_n,\n    \"new_short\": new_short,\n    \"new_short_n\": new_short_n,\n    \"assert\": assert\n};\n//package mp3;\n\n/* MPEG modes */\nfunction MPEGMode(ordinal) {\n    var _ordinal = ordinal;\n    this.ordinal = function () {\n        return _ordinal;\n    }\n}\n\nMPEGMode.STEREO = new MPEGMode(0);\nMPEGMode.JOINT_STEREO = new MPEGMode(1);\nMPEGMode.DUAL_CHANNEL = new MPEGMode(2);\nMPEGMode.MONO = new MPEGMode(3);\nMPEGMode.NOT_SET = new MPEGMode(4);\n\nfunction Version() {\n\n    /**\n     * URL for the LAME website.\n     */\n    var LAME_URL = \"http://www.mp3dev.org/\";\n\n    /**\n     * Major version number.\n     */\n    var LAME_MAJOR_VERSION = 3;\n    /**\n     * Minor version number.\n     */\n    var LAME_MINOR_VERSION = 98;\n    /**\n     * Patch level.\n     */\n    var LAME_PATCH_VERSION = 4;\n\n    /**\n     * Major version number.\n     */\n    var PSY_MAJOR_VERSION = 0;\n    /**\n     * Minor version number.\n     */\n    var PSY_MINOR_VERSION = 93;\n\n    /**\n     * A string which describes the version of LAME.\n     *\n     * @return string which describes the version of LAME\n     */\n    this.getLameVersion = function () {\n        // primary to write screen reports\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The short version of the LAME version string.\n     *\n     * @return short version of the LAME version string\n     */\n    this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The shortest version of the LAME version string.\n     *\n     * @return shortest version of the LAME version string\n     */\n    this.getLameVeryShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        return (\"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\");\n    }\n\n    /**\n     * String which describes the version of GPSYCHO\n     *\n     * @return string which describes the version of GPSYCHO\n     */\n    this.getPsyVersion = function () {\n        return (PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION);\n    }\n\n    /**\n     * String which is a URL for the LAME website.\n     *\n     * @return string which is a URL for the LAME website\n     */\n    this.getLameUrl = function () {\n        return LAME_URL;\n    }\n\n    /**\n     * Quite useless for a java version, however we are compatible ;-)\n     *\n     * @return \"32bits\"\n     */\n    this.getLameOsBitness = function () {\n        return \"32bits\";\n    }\n\n}\n\n/*\n *\tMP3 huffman table selecting and bit counting\n *\n *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\n *\tCopyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\n\nfunction Takehiro() {\n\n    var qupvt = null;\n    this.qupvt = null;\n\n    this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n    }\n\n    function Bits(b) {\n        this.bits = 0 | b;\n    }\n\n    var subdv_table = [[0, 0], /* 0 bands */\n        [0, 0], /* 1 bands */\n        [0, 0], /* 2 bands */\n        [0, 0], /* 3 bands */\n        [0, 0], /* 4 bands */\n        [0, 1], /* 5 bands */\n        [1, 1], /* 6 bands */\n        [1, 1], /* 7 bands */\n        [1, 2], /* 8 bands */\n        [2, 2], /* 9 bands */\n        [2, 3], /* 10 bands */\n        [2, 3], /* 11 bands */\n        [3, 4], /* 12 bands */\n        [3, 4], /* 13 bands */\n        [3, 4], /* 14 bands */\n        [4, 5], /* 15 bands */\n        [4, 5], /* 16 bands */\n        [4, 6], /* 17 bands */\n        [5, 6], /* 18 bands */\n        [5, 6], /* 19 bands */\n        [5, 7], /* 20 bands */\n        [6, 7], /* 21 bands */\n        [6, 7], /* 22 bands */\n    ];\n\n\n    /**\n     * nonlinear quantization of xr More accurate formula than the ISO formula.\n     * Takes into account the fact that we are quantizing xr . ix, but we want\n     * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\n     * mean ix is as close as possible to xr, which is different.)\n     *\n     * From Segher Boessenkool <segher@eastsite.nl> 11/1999\n     *\n     * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\n     * If you need the ASM code, check CVS circa Aug 2000.\n     *\n     * 01/2004: Optimizations by Gabriel Bouvigne\n     */\n    function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n\n        l = l >> 1;\n        while ((l--) != 0) {\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n        }\n    }\n\n    /**\n     * XRPOW_FTOI is a macro to convert floats to ints.<BR>\n     * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\n     * ROUNDFAC= -0.0946<BR>\n     *\n     * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\n     * ROUNDFAC=0.4054<BR>\n     *\n     * Note: using floor() or 0| is extremely slow. On machines where the\n     * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\n     * some ASM for XRPOW_FTOI().\n     */\n    function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n            var x0, x1, x2, x3;\n            var rx0, rx1, rx2, rx3;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            x2 = xr[xrPos++] * istep;\n            rx1 = 0 | x1;\n            x3 = xr[xrPos++] * istep;\n            rx2 = 0 | x2;\n            x0 += qupvt.adj43[rx0];\n            rx3 = 0 | x3;\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            x2 += qupvt.adj43[rx2];\n            ix[ixPos++] = 0 | x1;\n            x3 += qupvt.adj43[rx3];\n            ix[ixPos++] = 0 | x2;\n            ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n            var x0, x1;\n            var rx0, rx1;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            rx1 = 0 | x1;\n            x0 += qupvt.adj43[rx0];\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            ix[ixPos++] = 0 | x1;\n        }\n    }\n\n    /**\n     * Quantization function This function will select which lines to quantize\n     * and call the proper quantization function\n     */\n    function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */\n        var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0;\n\n        /*\n         * Reusing previously computed data does not seems to work if global\n         * gain is changed. Finding why it behaves this way would allow to use a\n         * cache of previously computed values (let's 10 cached values per sfb)\n         * that would probably provide a noticeable speedup\n         */\n        prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\n\n        if (codInfo.block_type == Encoder.SHORT_TYPE)\n            sfbmax = 38;\n        else\n            sfbmax = 21;\n\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n            var step = -1;\n\n            if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n                step = codInfo.global_gain\n                    - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\n                        : 0)) << (codInfo.scalefac_scale + 1))\n                    - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n            }\n            if (prev_data_use && (prevNoise.step[sfb] == step)) {\n                /*\n                 * do not recompute this part, but compute accumulated lines\n                 */\n                if (accumulate != 0) {\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                        acc_iData, acc_iDataPos);\n                    accumulate = 0;\n                }\n                if (accumulate01 != 0) {\n                    quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                        acc_xpPos, acc_iData, acc_iDataPos);\n                    accumulate01 = 0;\n                }\n            } else { /* should compute this part */\n                var l = codInfo.width[sfb];\n\n                if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\n                    /* do not compute upper zero part */\n                    var usefullsize;\n                    usefullsize = codInfo.max_nonzero_coeff - j + 1;\n                    Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n                    l = usefullsize;\n\n                    if (l < 0) {\n                        l = 0;\n                    }\n\n                    /* no need to compute higher sfb values */\n                    sfb = sfbmax + 1;\n                }\n\n                /* accumulate lines to quantize */\n                if (0 == accumulate && 0 == accumulate01) {\n                    acc_iData = iData;\n                    acc_iDataPos = iDataPos;\n                    acc_xp = xp;\n                    acc_xpPos = xpPos;\n                }\n                if (prevNoise != null && prevNoise.sfb_count1 > 0\n                    && sfb >= prevNoise.sfb_count1\n                    && prevNoise.step[sfb] > 0\n                    && step >= prevNoise.step[sfb]) {\n\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate01 += l;\n                } else {\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate += l;\n                }\n\n                if (l <= 0) {\n                    /*\n                     * rh: 20040215 may happen due to \"prev_data_use\"\n                     * optimization\n                     */\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                    }\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                    }\n\n                    break;\n                    /* ends for-loop */\n                }\n            }\n            if (sfb <= sfbmax) {\n                iDataPos += codInfo.width[sfb];\n                xpPos += codInfo.width[sfb];\n                j += codInfo.width[sfb];\n            }\n        }\n        if (accumulate != 0) { /* last data part */\n            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate = 0;\n        }\n        if (accumulate01 != 0) { /* last data part */\n            quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate01 = 0;\n        }\n\n    }\n\n    /**\n     * ix_max\n     */\n    function ix_max(ix, ixPos, endPos) {\n        var max1 = 0, max2 = 0;\n\n        do {\n            var x1 = ix[ixPos++];\n            var x2 = ix[ixPos++];\n            if (max1 < x1)\n                max1 = x1;\n\n            if (max2 < x2)\n                max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2)\n            max1 = max2;\n        return max1;\n    }\n\n    function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */\n        var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0, sum2;\n\n        do {\n            var x = ix[ixPos++];\n            var y = ix[ixPos++];\n\n            if (x != 0) {\n                if (x > 14) {\n                    x = 15;\n                    sum += linbits;\n                }\n                x *= 16;\n            }\n\n            if (y != 0) {\n                if (y > 14) {\n                    y = 15;\n                    sum += linbits;\n                }\n                x += y;\n            }\n\n            sum += Tables.largetbl[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1 = t2;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n        } while (ixPos < end);\n\n        s.bits += sum1;\n        return 1;\n    }\n\n    function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum = 0, sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2)\n            hlen = Tables.table23;\n        else\n            hlen = Tables.table56;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum += hlen[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1++;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n            sum2 += hlen2[x];\n            sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n            sum1 = sum2;\n            t++;\n        }\n        if (sum1 > sum3) {\n            sum1 = sum3;\n            t = t1 + 2;\n        }\n        s.bits += sum1;\n\n        return t;\n    }\n\n    /*************************************************************************/\n    /* choose table */\n    /*************************************************************************/\n\n    var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\n        13, 13, 13, 13, 13, 13];\n\n    /**\n     * Choose the Huffman table that will encode ix[begin..end] with the fewest\n     * bits.\n     *\n     * Note: This code contains knowledge about the sizes and characteristics of\n     * the Huffman tables as defined in the IS (Table B.7), and will not work\n     * with any arbitrary tables.\n     */\n    function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n\n        switch (max) {\n            case 0:\n                return max;\n\n            case 1:\n                return count_bit_noESC(ix, ixPos, endPos, s);\n\n            case 2:\n            case 3:\n                return count_bit_noESC_from2(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                return count_bit_noESC_from3(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            default:\n                /* try tables with linbits */\n                if (max > QuantizePVT.IXMAX_VAL) {\n                    s.bits = QuantizePVT.LARGE_BITS;\n                    return -1;\n                }\n                max -= 15;\n                var choice2;\n                for (choice2 = 24; choice2 < 32; choice2++) {\n                    if (Tables.ht[choice2].linmax >= max) {\n                        break;\n                    }\n                }\n                var choice;\n                for (choice = choice2 - 8; choice < 24; choice++) {\n                    if (Tables.ht[choice].linmax >= max) {\n                        break;\n                    }\n                }\n                return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n    }\n\n    /**\n     * count_bit\n     */\n    this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\n\n        if (prev_noise != null)\n            prev_noise.sfb_count1 = 0;\n\n        /* Determine count1 region */\n        for (; i > 1; i -= 2)\n            if ((ix[i - 1] | ix[i - 2]) != 0)\n                break;\n        gi.count1 = i;\n\n        /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n            var p;\n            /* hack to check if all values <= 1 */\n            //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n            //if (true) {\n            if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n                break;\n            }\n            p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n            bits = a2;\n            gi.count1table_select = 1;\n        }\n\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0)\n            return bits;\n\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n            a1 = 3 * gfc.scalefac_band.s[3];\n            if (a1 > gi.big_values)\n                a1 = gi.big_values;\n            a2 = gi.big_values;\n\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n            /* bv_scf has 576 entries (0..575) */\n            a1 = gi.region0_count = gfc.bv_scf[i - 2];\n            a2 = gi.region1_count = gfc.bv_scf[i - 1];\n\n            a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n            a1 = gfc.scalefac_band.l[a1 + 1];\n            if (a2 < i) {\n                var bi = new Bits(bits);\n                gi.table_select[2] = choose_table(ix, a2, i, bi);\n                bits = bi.bits;\n            }\n        } else {\n            gi.region0_count = 7;\n            /* gi.region1_count = SBPSY_l - 7 - 1; */\n            gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            a2 = i;\n            if (a1 > a2) {\n                a1 = a2;\n            }\n        }\n\n        /* have to allow for the case when bigvalues < region0 < region1 */\n        /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i);\n\n\n        /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n            var bi = new Bits(bits);\n            gi.table_select[0] = choose_table(ix, 0, a1, bi);\n            bits = bi.bits;\n        }\n        if (a1 < a2) {\n            var bi = new Bits(bits);\n            gi.table_select[1] = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n            gi.part2_3_length = bits;\n            best_huffman_divide(gfc, gi);\n            bits = gi.part2_3_length;\n        }\n\n        if (prev_noise != null) {\n            if (gi.block_type == Encoder.NORM_TYPE) {\n                var sfb = 0;\n                while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n                    sfb++;\n                }\n                prev_noise.sfb_count1 = sfb;\n            }\n        }\n\n        return bits;\n    }\n\n    this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc;\n\n        /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\n\n        if (gi.xrpow_max > w)\n            return QuantizePVT.LARGE_BITS;\n\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n\n        if ((gfc.substep_shaping & 2) != 0) {\n            var j = 0;\n            /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\n            var gain = gi.global_gain + gi.scalefac_scale;\n            var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\n            for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\n                var width = gi.width[sfb];\n                if (0 == gfc.pseudohalf[sfb]) {\n                    j += width;\n                } else {\n                    var k;\n                    for (k = j, j += width; k < j; ++k) {\n                        ix[k] = (xr[k] >= roundfac) ? ix[k] : 0;\n                    }\n                }\n            }\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n    }\n\n    /**\n     * re-calculate the best scalefac_compress using scfsi the saved bits are\n     * kept in the bit reservoir.\n     */\n    function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n            r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n\n        for (var r0 = 0; r0 < 16; r0++) {\n            var a1 = gfc.scalefac_band.l[r0 + 1];\n            if (a1 >= bigv)\n                break;\n            var r0bits = 0;\n            var bi = new Bits(r0bits);\n            var r0t = choose_table(ix, 0, a1, bi);\n            r0bits = bi.bits;\n\n            for (var r1 = 0; r1 < 8; r1++) {\n                var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n                if (a2 >= bigv)\n                    break;\n                var bits = r0bits;\n                bi = new Bits(bits);\n                var r1t = choose_table(ix, a1, a2, bi);\n                bits = bi.bits;\n                if (r01_bits[r0 + r1] > bits) {\n                    r01_bits[r0 + r1] = bits;\n                    r01_div[r0 + r1] = r0;\n                    r0_tbl[r0 + r1] = r0t;\n                    r1_tbl[r0 + r1] = r1t;\n                }\n            }\n        }\n    }\n\n    function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n            var a2 = gfc.scalefac_band.l[r2];\n            if (a2 >= bigv)\n                break;\n            var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n            if (gi.part2_3_length <= bits)\n                break;\n\n            var bi = new Bits(bits);\n            var r2t = choose_table(ix, a2, bigv, bi);\n            bits = bi.bits;\n            if (gi.part2_3_length <= bits)\n                continue;\n\n            gi.assign(cod_info2);\n            gi.part2_3_length = bits;\n            gi.region0_count = r01_div[r2 - 2];\n            gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n            gi.table_select[0] = r0_tbl[r2 - 2];\n            gi.table_select[1] = r1_tbl[r2 - 2];\n            gi.table_select[2] = r2t;\n        }\n    }\n\n    this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1);\n\n        /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\n            return;\n\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n            recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\n            return;\n\n        i = gi.count1 + 2;\n        if (i > 576)\n            return;\n\n        /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n\n\n        for (; i > cod_info2.big_values; i -= 4) {\n            var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\n                + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n            a1 = a2;\n            cod_info2.count1table_select = 1;\n        }\n\n        cod_info2.count1bits = a1;\n\n        if (cod_info2.block_type == Encoder.NORM_TYPE)\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        else {\n            /* Count the number of bits necessary to code the bigvalues region. */\n            cod_info2.part2_3_length = a1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            if (a1 > i) {\n                a1 = i;\n            }\n            if (a1 > 0) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (i > a1) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (gi.part2_3_length > cod_info2.part2_3_length)\n                gi.assign(cod_info2);\n        }\n    }\n\n    var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n    var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n    var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n    var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n    Takehiro.slen1_tab = slen1_tab;\n    Takehiro.slen2_tab = slen2_tab;\n\n    function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                if (g0.scalefac[sfb] != gi.scalefac[sfb]\n                    && gi.scalefac[sfb] >= 0)\n                    break;\n            }\n            if (sfb == Tables.scfsi_band[i + 1]) {\n                for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                    gi.scalefac[sfb] = -1;\n                }\n                l3_side.scfsi[ch][i] = 1;\n            }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c1++;\n            if (s1 < gi.scalefac[sfb])\n                s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c2++;\n            if (s2 < gi.scalefac[sfb])\n                s2 = gi.scalefac[sfb];\n        }\n\n        for (var i = 0; i < 16; i++) {\n            if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n                var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n                if (gi.part2_length > c) {\n                    gi.part2_length = c;\n                    gi.scalefac_compress = i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find the optimal way to store the scalefactors. Only call this routine\n     * after final scalefactors have been chosen and the channel/granule will\n     * not be re-encoded.\n     */\n    this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */\n        var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0;\n\n        /*\n         * remove scalefacs from bands with ix=0. This idea comes from the AAC\n         * ISO docs. added mt 3/00\n         */\n        /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            j += width;\n            for (l = -width; l < 0; l++) {\n                if (gi.l3_enc[l + j] != 0)\n                    break;\n            }\n            if (l == 0)\n                gi.scalefac[sfb] = recalc = -2;\n            /* anything goes. */\n            /*\n             * only best_scalefac_store and calc_scfsi know--and only they\n             * should know--about the magic number -2.\n             */\n        }\n\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n            var s = 0;\n            for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                if (gi.scalefac[sfb] > 0)\n                    s |= gi.scalefac[sfb];\n\n            if (0 == (s & 1) && s != 0) {\n                for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] >>= 1;\n\n                gi.scalefac_scale = recalc = 1;\n            }\n        }\n\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\n            && gfc.mode_gr == 2) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                if (gi.scalefac[sfb] < qupvt.pretab[sfb]\n                    && gi.scalefac[sfb] != -2)\n                    break;\n            if (sfb == Encoder.SBPSY_l) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] -= qupvt.pretab[sfb];\n\n                gi.preflag = recalc = 1;\n            }\n        }\n\n        for (i = 0; i < 4; i++)\n            l3_side.scfsi[ch][i] = 0;\n\n        if (gfc.mode_gr == 2 && gr == 1\n            && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\n            && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n            scfsi_calc(ch, l3_side);\n            recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] == -2) {\n                gi.scalefac[sfb] = 0;\n                /* if anything goes, then 0 is a good choice */\n            }\n        }\n        if (recalc != 0) {\n            if (gfc.mode_gr == 2) {\n                this.scale_bitcount(gi);\n            } else {\n                this.scale_bitcount_lsf(gfc, gi);\n            }\n        }\n    }\n\n    function all_scalefactors_not_negative(scalefac, n) {\n        for (var i = 0; i < n; ++i) {\n            if (scalefac[i] < 0)\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 18*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\n        54, 72, 90, 72, 90, 108, 108, 126];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 17*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\n        52, 70, 88, 69, 87, 105, 104, 122];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 11*slen1_tab[i] + 10*slen2_tab[i]\n     */\n    var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\n        52, 43, 53, 63, 64, 74];\n\n    /**\n     * Also calculates the number of bits necessary to code the scalefactors.\n     */\n    this.scale_bitcount = function (cod_info) {\n        var k, sfb, max_slen1 = 0, max_slen2 = 0;\n\n        /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            tab = scale_short;\n            if (cod_info.mixed_block_flag != 0)\n                tab = scale_mixed;\n        } else { /* block_type == 1,2,or 3 */\n            tab = scale_long;\n            if (0 == cod_info.preflag) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (scalefac[sfb] < qupvt.pretab[sfb])\n                        break;\n\n                if (sfb == Encoder.SBPSY_l) {\n                    cod_info.preflag = 1;\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                        scalefac[sfb] -= qupvt.pretab[sfb];\n                }\n            }\n        }\n\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\n            if (max_slen1 < scalefac[sfb])\n                max_slen1 = scalefac[sfb];\n\n        for (; sfb < cod_info.sfbmax; sfb++)\n            if (max_slen2 < scalefac[sfb])\n                max_slen2 = scalefac[sfb];\n\n        /*\n         * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\n         * posible values of scalefac_compress to find the one which uses the\n         * smallest number of bits. ISO would stop at first valid index\n         */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n            if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\n                && cod_info.part2_length > tab[k]) {\n                cod_info.part2_length = tab[k];\n                cod_info.scalefac_compress = k;\n            }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n    }\n\n    /**\n     * table of largest scalefactor values for MPEG2\n     */\n    var max_range_sfac_tab = [[15, 15, 7, 7],\n        [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\n        [7, 7, 7, 0], [3, 3, 0, 0]];\n\n    /**\n     * Also counts the number of bits to encode the scalefacs but for MPEG 2\n     * Lower sampling frequencies (24, 22.05 and 16 kHz.)\n     *\n     * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\n     * \"Audio Decoding Layer III\"\n     */\n    this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4);\n//var partition_table;\n        var scalefac = cod_info.scalefac;\n\n        /*\n         * Set partition table. Note that should try to use table one, but do\n         * not yet...\n         */\n        if (cod_info.preflag != 0)\n            table_number = 2;\n        else\n            table_number = 0;\n\n        for (i = 0; i < 4; i++)\n            max_sfac[i] = 0;\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            row_in_table = 1;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition] / 3;\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    for (window = 0; window < 3; window++)\n                        if (scalefac[sfb * 3 + window] > max_sfac[partition])\n                            max_sfac[partition] = scalefac[sfb * 3 + window];\n            }\n        } else {\n            row_in_table = 0;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition];\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    if (scalefac[sfb] > max_sfac[partition])\n                        max_sfac[partition] = scalefac[sfb];\n            }\n        }\n\n        for (over = false, partition = 0; partition < 4; partition++) {\n            if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\n                over = true;\n        }\n        if (!over) {\n            var slen1, slen2, slen3, slen4;\n\n            cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (partition = 0; partition < 4; partition++)\n                cod_info.slen[partition] = log2tab[max_sfac[partition]];\n\n            /* set scalefac_compress */\n            slen1 = cod_info.slen[0];\n            slen2 = cod_info.slen[1];\n            slen3 = cod_info.slen[2];\n            slen4 = cod_info.slen[3];\n\n            switch (table_number) {\n                case 0:\n                    cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\n                        + (slen3 << 2) + slen4;\n                    break;\n\n                case 1:\n                    cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\n                        + slen3;\n                    break;\n\n                case 2:\n                    cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\n                    break;\n\n                default:\n                    System.err.printf(\"intensity stereo not implemented yet\\n\");\n                    break;\n            }\n        }\n        if (!over) {\n            cod_info.part2_length = 0;\n            for (partition = 0; partition < 4; partition++)\n                cod_info.part2_length += cod_info.slen[partition]\n                    * cod_info.sfb_partition_table[partition];\n        }\n        return over;\n    }\n\n    /*\n     * Since no bands have been over-amplified, we can set scalefac_compress and\n     * slen[] for the formatter\n     */\n    var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\n        4, 4, 4, 4];\n\n    this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n            var scfb_anz = 0, bv_index;\n            while (gfc.scalefac_band.l[++scfb_anz] < i)\n                ;\n\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            while (gfc.scalefac_band.l[bv_index + 1] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                /*\n                 * this is an indication that everything is going to be encoded\n                 * as region0: bigvalues < region0 < region1 so lets set\n                 * region0, region1 to some value larger than bigvalues\n                 */\n                bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            }\n\n            gfc.bv_scf[i - 2] = bv_index;\n\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            }\n\n            gfc.bv_scf[i - 1] = bv_index;\n        }\n    }\n}\n\n/*\n *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\n *  Copyright (C) 2001 David Robinson and Glen Sawyer\n *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller \n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  concept and filter values by David Robinson (David@Robinson.org)\n *    -- blame him if you think the idea is flawed\n *  original coding by Glen Sawyer (mp3gain@hotmail.com)\n *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\n *\n *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\n *    -- credit him for all the _good_ programming ;)\n *\n *\n *  For an explanation of the concepts and the basic algorithms involved, go to:\n *    http://www.replaygain.org/\n */\n\n/*\n *  Here's the deal. Call\n *\n *    InitGainAnalysis ( long samplefreq );\n *\n *  to initialize everything. Call\n *\n *    AnalyzeSamples ( var Float_t*  left_samples,\n *                     var Float_t*  right_samples,\n *                     size_t          num_samples,\n *                     int             num_channels );\n *\n *  as many times as you want, with as many or as few samples as you want.\n *  If mono, pass the sample buffer in through left_samples, leave\n *  right_samples NULL, and make sure num_channels = 1.\n *\n *    GetTitleGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\n *\n *    GetAlbumGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  since InitGainAnalysis() was called and finalized with GetTitleGain().\n *\n *  Pseudo-code to process an album:\n *\n *    Float_t       l_samples [4096];\n *    Float_t       r_samples [4096];\n *    size_t        num_samples;\n *    unsigned int  num_songs;\n *    unsigned int  i;\n *\n *    InitGainAnalysis ( 44100 );\n *    for ( i = 1; i <= num_songs; i++ ) {\n *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\n *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\n *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\n *    }\n *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\n */\n\n/*\n *  So here's the main source of potential code confusion:\n *\n *  The filters applied to the incoming samples are IIR filters,\n *  meaning they rely on up to <filter order> number of previous samples\n *  AND up to <filter order> number of previous filtered samples.\n *\n *  I set up the AnalyzeSamples routine to minimize memory usage and interface\n *  complexity. The speed isn't compromised too much (I don't think), but the\n *  internal complexity is higher than it should be for such a relatively\n *  simple routine.\n *\n *  Optimization/clarity suggestions are welcome.\n */\n\n/**\n * Table entries per dB\n */\nGainAnalysis.STEPS_per_dB = 100.;\n/**\n * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\n */\nGainAnalysis.MAX_dB = 120.;\nGainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\nGainAnalysis.GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.GAIN_ANALYSIS_OK = 1;\nGainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n\nGainAnalysis.YULE_ORDER = 10;\nGainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n\nGainAnalysis.MAX_SAMP_FREQ = 48000;\nGainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\nGainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\nGainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\n\nfunction GainAnalysis() {\n\t//fix 精简\n}\n\n\nfunction Presets() {\n    function VBRPresets(qual, comp, compS,\n                        y, shThreshold, shThresholdS,\n                        adj, adjShort, lower,\n                        curve, sens, inter,\n                        joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n    }\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n    /**\n     * <PRE>\n     * Switch mappings for VBR mode VBR_RH\n     *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_old_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\n        new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\n        new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\n        new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\n        new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\n        new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\n        new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\n        new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\n    ];\n\n    /**\n     * <PRE>\n     *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_psy_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\n        new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\n        new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\n        new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\n        new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\n        new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\n        new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\n        new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\n    ];\n\n    function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\n            : vbr_psy_switch_map;\n\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p;\n\n        // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n        // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s);\n        // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n        // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x\n            * (q.masking_adj_short - p.masking_adj_short);\n        // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n        // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n        // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x\n            * (q.ath_sensitivity - p.ath_sensitivity);\n        // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch);\n        // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix);\n        // LERP(msfix);\n\n        lame_set_VBR_q(gfp, set.vbr_q);\n\n        if (enforce != 0)\n            gfp.quant_comp = set.quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = set.quant_comp;\n        // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = set.quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = set.quant_comp_s;\n        // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n            gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0)\n            gfp.maskingadjust = set.masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = set.masking_adj;\n        // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0)\n            gfp.maskingadjust_short = set.masking_adj_short;\n        else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n            gfp.maskingadjust_short = set.masking_adj_short;\n        // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0)\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = set.ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = set.ath_curve;\n        // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0)\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n            if (enforce != 0)\n                gfp.interChRatio = set.interch;\n            else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n                gfp.interChRatio = set.interch;\n            // SET_OPTION(interChRatio, set.interch, -1);\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\n        }\n        if (enforce != 0)\n            gfp.msfix = set.msfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = set.msfix;\n        // SET_OPTION(msfix, set.msfix, -1);\n\n        if (enforce == 0) {\n            gfp.VBR_q = a;\n            gfp.VBR_q_frac = x;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    /**\n     * VBR quality level.<BR>\n     * 0 = highest<BR>\n     * 9 = lowest\n     */\n    function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n\n        if (0 > VBR_q) {\n            /* Unknown VBR quality level! */\n            ret = -1;\n            VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n            ret = -1;\n            VBR_q = 9;\n        }\n\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n    }\n\n}\n\n/*\n *      bit reservoir source file\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n/**\n * ResvFrameBegin:<BR>\n * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\n * the reservoir, and checks to make sure main_data_begin was set properly by\n * the formatter<BR>\n * Background information:\n * \n * This is the original text from the ISO standard. Because of sooo many bugs\n * and irritations correcting comments are added in brackets []. A '^W' means\n * you should remove the last word.\n * \n * <PRE>\n *  1. The following rule can be used to calculate the maximum\n *     number of bits used for one granule [^W frame]:<BR>\n *     At the highest possible bitrate of Layer III (320 kbps\n *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\n *     [^W^W^W are designed to have] constant length, i.e.\n *     one buffer [^W^W the frame] length is:<BR>\n * \n *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\n * \n *     This value is used as the maximum buffer per channel [^W^W] at\n *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\n *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\n *     [per granule and channel] at 48 kHz sampling frequency.\n *     This means that there is a maximum deviation (short time buffer\n *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\n *     The actual deviation is equal to the number of bytes [with the\n *     meaning of octets] denoted by the main_data_end offset pointer.\n *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\n *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\n *     ... The xchange of buffer bits between the left and right channel\n *     is allowed without restrictions [exception: dual channel].\n *     Because of the [constructed] constraint on the buffer size\n *     main_data_end is always set to 0 in the case of bit_rate_index==14,\n *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\n *     all data are allocated between adjacent header [^W sync] words\n *     [, i.e. there is no buffering at all].\n * </PRE>\n */\n\n\nfunction Reservoir() {\n\tvar bs;\n\n\tthis.setModules  = function(_bs) {\n\t\tbs = _bs;\n\t}\n\n\tthis.ResvFrameBegin = function(gfp, mean_bits) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar maxmp3buf;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar frameLength = bs.getframebits(gfp);\n\t\tmean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\n\n\t\t/**\n\t\t * <PRE>\n\t\t *  Meaning of the variables:\n\t\t *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\n\t\t *          Number of bits can be stored in previous frame(s) due to\n\t\t *          counter size constaints\n\t\t *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\n\t\t *          Number of bits allowed to encode one frame (you can take 8*511 bit\n\t\t *          from the bit reservoir and at most 8*1440 bit from the current\n\t\t *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\n\t\t *          value for MPEG-1 and -2)\n\t\t * \n\t\t *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\n\t\t *          so this is the absolute maximum supported by the format.\n\t\t * \n\t\t * \n\t\t *      fullFrameBits:  maximum number of bits available for encoding\n\t\t *                      the current frame.\n\t\t * \n\t\t *      mean_bits:      target number of bits per granule.\n\t\t * \n\t\t *      frameLength:\n\t\t * \n\t\t *      gfc.ResvMax:   maximum allowed reservoir\n\t\t * \n\t\t *      gfc.ResvSize:  current reservoir size\n\t\t * \n\t\t *      l3_side.resvDrain_pre:\n\t\t *         ancillary data to be added to previous frame:\n\t\t *         (only usefull in VBR modes if it is possible to have\n\t\t *         maxmp3buf < fullFrameBits)).  Currently disabled,\n\t\t *         see #define NEW_DRAIN\n\t\t *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\n\t\t *                     as there exists one example, where the FhG decoder\n\t\t *                     can't decode a -b320 CBR file anymore.\n\t\t * \n\t\t *      l3_side.resvDrain_post:\n\t\t *         ancillary data to be added to this frame:\n\t\t * \n\t\t * </PRE>\n\t\t */\n\n\t\t/* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n\t\tvar resvLimit = (8 * 256) * gfc.mode_gr - 8;\n\n\t\t/*\n\t\t * maximum allowed frame size. dont use more than this number of bits,\n\t\t * even if the frame has the space for them:\n\t\t */\n\t\tif (gfp.brate > 320) {\n\t\t\t/* in freeformat the buffer is constant */\n\t\t\tmaxmp3buf = 8 * ((int) ((gfp.brate * 1000)\n\t\t\t\t\t/ (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t} else {\n\t\t\t/*\n\t\t\t * all mp3 decoders should have enough buffer to handle this value:\n\t\t\t * size of a 320kbps 32kHz frame\n\t\t\t */\n\t\t\tmaxmp3buf = 8 * 1440;\n\n\t\t\t/*\n\t\t\t * Bouvigne suggests this more lax interpretation of the ISO doc\n\t\t\t * instead of using 8*960.\n\t\t\t */\n\n\t\t\tif (gfp.strict_ISO) {\n\t\t\t\tmaxmp3buf = 8 * ((int) (320000 / (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t\t}\n\t\t}\n\n\t\tgfc.ResvMax = maxmp3buf - frameLength;\n\t\tif (gfc.ResvMax > resvLimit)\n\t\t\tgfc.ResvMax = resvLimit;\n\t\tif (gfc.ResvMax < 0 || gfp.disable_reservoir)\n\t\t\tgfc.ResvMax = 0;\n\n\t\tvar fullFrameBits = mean_bits.bits * gfc.mode_gr\n\t\t\t\t+ Math.min(gfc.ResvSize, gfc.ResvMax);\n\n\t\tif (fullFrameBits > maxmp3buf)\n\t\t\tfullFrameBits = maxmp3buf;\n\n\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t// frame analyzer code\n\t\tif (gfc.pinfo != null) {\n\t\t\t/*\n\t\t\t * expected bits per channel per granule [is this also right for\n\t\t\t * mono/stereo, MPEG-1/2 ?]\n\t\t\t */\n\t\t\tgfc.pinfo.mean_bits = mean_bits.bits / 2;\n\t\t\tgfc.pinfo.resvsize = gfc.ResvSize;\n\t\t}\n\n\t\treturn fullFrameBits;\n\t}\n\n\t/**\n\t * returns targ_bits: target number of bits to use for 1 granule<BR>\n\t * extra_bits: amount extra available from reservoir<BR>\n\t * Mark Taylor 4/99\n\t */\n\tthis.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar add_bits;\n        var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\n\n\t\t/* compensate the saved bits used in the 1st granule */\n\t\tif (cbr != 0)\n\t\t\tResvSize += mean_bits;\n\n\t\tif ((gfc.substep_shaping & 1) != 0)\n\t\t\tResvMax *= 0.9;\n\n\t\ttarg_bits.bits = mean_bits;\n\n\t\t/* extra bits if the reservoir is almost full */\n\t\tif (ResvSize * 10 > ResvMax * 9) {\n\t\t\tadd_bits = ResvSize - (ResvMax * 9) / 10;\n\t\t\ttarg_bits.bits += add_bits;\n\t\t\tgfc.substep_shaping |= 0x80;\n\t\t} else {\n\t\t\tadd_bits = 0;\n\t\t\tgfc.substep_shaping &= 0x7f;\n\t\t\t/*\n\t\t\t * build up reservoir. this builds the reservoir a little slower\n\t\t\t * than FhG. It could simple be mean_bits/15, but this was rigged to\n\t\t\t * always produce 100 (the old value) at 128kbs\n\t\t\t */\n\t\t\tif (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\n\t\t\t\ttarg_bits.bits -= .1 * mean_bits;\n\t\t}\n\n\t\t/* amount from the reservoir we are allowed to use. ISO says 6/10 */\n\t\tvar extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\n\t\t\t\t: (gfc.ResvMax * 6) / 10);\n\t\textra_bits -= add_bits;\n\n\t\tif (extra_bits < 0)\n\t\t\textra_bits = 0;\n\t\treturn extra_bits;\n\t}\n\n\t/**\n\t * Called after a granule's bit allocation. Readjusts the size of the\n\t * reservoir to reflect the granule's usage.\n\t */\n\tthis.ResvAdjust = function(gfc, gi) {\n\t\tgfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n\t}\n\n\t/**\n\t * Called after all granules in a frame have been allocated. Makes sure that\n\t * the reservoir size is within limits, possibly by adding stuffing bits.\n\t */\n\tthis.ResvFrameEnd = function(gfc, mean_bits) {\n\t\tvar over_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tgfc.ResvSize += mean_bits * gfc.mode_gr;\n\t\tvar stuffingBits = 0;\n\t\tl3_side.resvDrain_post = 0;\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t/* we must be byte aligned */\n\t\tif ((over_bits = gfc.ResvSize % 8) != 0)\n\t\t\tstuffingBits += over_bits;\n\n\t\tover_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\n\t\tif (over_bits > 0) {\n\t\t\tstuffingBits += over_bits;\n\t\t}\n\n\t\t/*\n\t\t * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\n\t\t * decoder shipped with MS Windows operating systems. Using this, it is\n\t\t * even possible to use Gabriel's lax buffer consideration again, which\n\t\t * assumes, any decoder should have a buffer large enough for a 320 kbps\n\t\t * frame at 32 kHz sample rate.\n\t\t * \n\t\t * old drain code: lame -b320 BlackBird.wav --. does not play with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * new drain code: lame -b320 BlackBird.wav --. plays fine with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * Robert Hegemann, 2010-02-13.\n\t\t */\n\t\t/*\n\t\t * drain as many bits as possible into previous frame ancillary data In\n\t\t * particular, in VBR mode ResvMax may have changed, and we have to make\n\t\t * sure main_data_begin does not create a reservoir bigger than ResvMax\n\t\t * mt 4/00\n\t\t */\n\t\t{\n\t\t\tvar mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n\t\t\tl3_side.resvDrain_pre += 8 * mdb_bytes;\n\t\t\tstuffingBits -= 8 * mdb_bytes;\n\t\t\tgfc.ResvSize -= 8 * mdb_bytes;\n\t\t\tl3_side.main_data_begin -= mdb_bytes;\n\t\t}\n\t\t/* drain the rest into this frames ancillary data */\n\t\tl3_side.resvDrain_post += stuffingBits;\n\t\tgfc.ResvSize -= stuffingBits;\n\t}\n}\n\n\n/**\n * A Vbr header may be present in the ancillary data field of the first frame of\n * an mp3 bitstream<BR>\n * The Vbr header (optionally) contains\n * <UL>\n * <LI>frames total number of audio frames in the bitstream\n * <LI>bytes total number of bytes in the bitstream\n * <LI>toc table of contents\n * </UL>\n *\n * toc (table of contents) gives seek points for random access.<BR>\n * The ith entry determines the seek point for i-percent duration.<BR>\n * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\n * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\n */\nVBRTag.NUMTOCENTRIES = 100;\nVBRTag.MAXFRAMESIZE = 2880;\n\nfunction VBRTag() {\n\n    var lame;\n    var bs;\n    var v;\n\n    this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n    };\n\t\n\t//fix 精简\n\t\n    /**\n     * Lookup table for fast CRC-16 computation. Uses the polynomial\n     * x^16+x^15+x^2+1\n     */\n    var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\n        0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\n        0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\n        0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\n        0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\n        0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\n        0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\n        0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\n        0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\n        0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\n        0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\n        0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\n        0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\n        0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\n        0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\n        0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\n        0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\n        0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\n        0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\n        0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\n        0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\n        0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\n        0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\n        0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\n        0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\n        0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\n        0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\n        0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\n        0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\n        0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\n        0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\n        0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\n        0x4100, 0x81C1, 0x8081, 0x4040];\n\t\t\n\t//fix 精简\n\t\n    /**\n     * Fast CRC-16 computation (uses table crc16Lookup).\n     *\n     * @param value\n     * @param crc\n     * @return\n     */\n    function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\n        return crc;\n    }\n\n    this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i)\n            crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n    }\n\n\t//fix 精简\n}\n\n\n\nBitStream.EQ = function (a, b) {\n    return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\n        .abs(a) * 1e-6))\n        : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\n};\n\nBitStream.NEQ = function (a, b) {\n    return !BitStream.EQ(a, b);\n};\n\nfunction BitStream() {\n    var self = this;\n    var CRC16_POLYNOMIAL = 0x8005;\n\n    /*\n     * we work with ints, so when doing bit manipulation, we limit ourselves to\n     * MAX_LENGTH-2 just to be on the safe side\n     */\n    var MAX_LENGTH = 32;\n\n    //GainAnalysis ga;\n    //MPGLib mpg;\n    //Version ver;\n    //VBRTag vbr;\n    var ga = null;\n    var mpg = null;\n    var ver = null;\n    var vbr = null;\n\n    //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n    //\tVBRTag vbr) {\n\n    this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n    };\n\n    /**\n     * Bit stream buffer.\n     */\n    //private byte[] buf;\n    var buf = null;\n    /**\n     * Bit counter of bit stream.\n     */\n    var totbit = 0;\n    /**\n     * Pointer to top byte in buffer.\n     */\n    var bufByteIdx = 0;\n    /**\n     * Pointer to top bit of top byte in buffer.\n     */\n    var bufBitIdx = 0;\n\n    /**\n     * compute bitsperframe and mean_bits for a layer III frame\n     */\n    this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate;\n\n        /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0)\n            bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        else\n            bit_rate = gfp.brate;\n\n        /* main encoding routine toggles padding on and off */\n        /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n    };\n\n    function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n    }\n\n    /**\n     * write j bits into the bit stream\n     */\n    function putbits2(gfc, val, j) {\n\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n                    putheader_bits(gfc);\n                }\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            /* 32 too large on 32 bit machines */\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * write j bits into the bit stream, ignoring frame headers\n     */\n    function putbits_noheaders(gfc, val, j) {\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            /* 32 too large on 32 bit machines */\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\n     * out a frame using just main_data, due to the limited number of bits to\n     * indicate main_data_length. In these situations, we put stuffing bits into\n     * the ancillary data...\n     */\n    function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4c, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x41, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4d, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x45, 8);\n            remainingBits -= 8;\n        }\n\n        if (remainingBits >= 32) {\n            var version = ver.getLameShortVersion();\n            if (remainingBits >= 32)\n                for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n                    remainingBits -= 8;\n                    putbits2(gfc, version.charCodeAt(i), 8); //fix 错误的使用charAt\n                }\n        }\n\n        for (; remainingBits >= 1; remainingBits -= 1) {\n            putbits2(gfc, gfc.ancillary_flag, 1);\n            gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\n        }\n\n\n    }\n\n    /**\n     * write N bits into the header\n     */\n    function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n\n        while (j > 0) {\n            var k = Math.min(j, 8 - (ptr & 7));\n            j -= k;\n            /* >> 32 too large for 32 bit machines */\n\n            gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\n            ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n    }\n\n    function CRC_update(value, crc) {\n        value <<= 8;\n        for (var i = 0; i < 8; i++) {\n            value <<= 1;\n            crc <<= 1;\n\n            if ((((crc ^ value) & 0x10000) != 0))\n                crc ^= CRC16_POLYNOMIAL;\n        }\n        return crc;\n    }\n\n    this.CRC_writeheader = function (gfc, header) {\n        var crc = 0xffff;\n        /* (jo) init crc16 for error_protection */\n\n        crc = CRC_update(header[2] & 0xff, crc);\n        crc = CRC_update(header[3] & 0xff, crc);\n        for (var i = 6; i < gfc.sideinfo_len; i++) {\n            crc = CRC_update(header[i] & 0xff, crc);\n        }\n\n        header[4] = (byte)(crc >> 8);\n        header[5] = (byte)(crc & 255);\n    };\n\n    function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000)\n            writeheader(gfc, 0xffe, 12);\n        else\n            writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, (gfp.version), 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\n        writeheader(gfc, (gfc.bitrate_index), 4);\n        writeheader(gfc, (gfc.samplerate_index), 2);\n        writeheader(gfc, (gfc.padding), 1);\n        writeheader(gfc, (gfp.extension), 1);\n        writeheader(gfc, (gfp.mode.ordinal()), 2);\n        writeheader(gfc, (gfc.mode_ext), 2);\n        writeheader(gfc, (gfp.copyright), 1);\n        writeheader(gfc, (gfp.original), 1);\n        writeheader(gfc, (gfp.emphasis), 2);\n        if (gfp.error_protection) {\n            writeheader(gfc, 0, 16);\n            /* dummy */\n        }\n\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            writeheader(gfc, (l3_side.main_data_begin), 9);\n\n            if (gfc.channels_out == 2)\n                writeheader(gfc, l3_side.private_bits, 3);\n            else\n                writeheader(gfc, l3_side.private_bits, 5);\n\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var band;\n                for (band = 0; band < 4; band++) {\n                    writeheader(gfc, l3_side.scfsi[ch][band], 1);\n                }\n            }\n\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                    writeheader(gfc, gi.big_values / 2, 9);\n                    writeheader(gfc, gi.global_gain, 8);\n                    writeheader(gfc, gi.scalefac_compress, 4);\n\n                    if (gi.block_type != Encoder.NORM_TYPE) {\n                        writeheader(gfc, 1, 1);\n                        /* window_switching_flag */\n                        writeheader(gfc, gi.block_type, 2);\n                        writeheader(gfc, gi.mixed_block_flag, 1);\n\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n\n                        writeheader(gfc, gi.subblock_gain[0], 3);\n                        writeheader(gfc, gi.subblock_gain[1], 3);\n                        writeheader(gfc, gi.subblock_gain[2], 3);\n                    } else {\n                        writeheader(gfc, 0, 1);\n                        /* window_switching_flag */\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n                        if (gi.table_select[2] == 14)\n                            gi.table_select[2] = 16;\n                        writeheader(gfc, gi.table_select[2], 5);\n\n                        writeheader(gfc, gi.region0_count, 4);\n                        writeheader(gfc, gi.region1_count, 3);\n                    }\n                    writeheader(gfc, gi.preflag, 1);\n                    writeheader(gfc, gi.scalefac_scale, 1);\n                    writeheader(gfc, gi.count1table_select, 1);\n                }\n            }\n        } else {\n            /* MPEG2 */\n            writeheader(gfc, (l3_side.main_data_begin), 8);\n            writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                writeheader(gfc, gi.big_values / 2, 9);\n                writeheader(gfc, gi.global_gain, 8);\n                writeheader(gfc, gi.scalefac_compress, 9);\n\n                if (gi.block_type != Encoder.NORM_TYPE) {\n                    writeheader(gfc, 1, 1);\n                    /* window_switching_flag */\n                    writeheader(gfc, gi.block_type, 2);\n                    writeheader(gfc, gi.mixed_block_flag, 1);\n\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n\n                    writeheader(gfc, gi.subblock_gain[0], 3);\n                    writeheader(gfc, gi.subblock_gain[1], 3);\n                    writeheader(gfc, gi.subblock_gain[2], 3);\n                } else {\n                    writeheader(gfc, 0, 1);\n                    /* window_switching_flag */\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n                    if (gi.table_select[2] == 14)\n                        gi.table_select[2] = 16;\n                    writeheader(gfc, gi.table_select[2], 5);\n\n                    writeheader(gfc, gi.region0_count, 4);\n                    writeheader(gfc, gi.region1_count, 3);\n                }\n\n                writeheader(gfc, gi.scalefac_scale, 1);\n                writeheader(gfc, gi.count1table_select, 1);\n            }\n        }\n\n        if (gfp.error_protection) {\n            /* (jo) error_protection: add crc16 information to header */\n            CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\n        }\n\n        {\n            var old = gfc.h_ptr;\n\n            gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n            gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\n                + bitsPerFrame;\n\n            if (gfc.h_ptr == gfc.w_ptr) {\n                /* yikes! we are out of header buffer space */\n                System.err\n                    .println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n            }\n\n        }\n    }\n\n    function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */\n        var h = Tables.ht[gi.count1table_select + 32];\n        var i, bits = 0;\n\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n            var huffbits = 0;\n            var p = 0, v;\n\n            v = gi.l3_enc[ix + 0];\n            if (v != 0) {\n                p += 8;\n                if (gi.xr[xr + 0] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 1];\n            if (v != 0) {\n                p += 4;\n                huffbits *= 2;\n                if (gi.xr[xr + 1] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 2];\n            if (v != 0) {\n                p += 2;\n                huffbits *= 2;\n                if (gi.xr[xr + 2] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 3];\n            if (v != 0) {\n                p++;\n                huffbits *= 2;\n                if (gi.xr[xr + 3] < 0)\n                    huffbits++;\n            }\n\n            ix += 4;\n            xr += 4;\n            putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n            bits += h.hlen[p];\n        }\n        return bits;\n    }\n\n    /**\n     * Implements the pseudocode of page 98 of the IS\n     */\n    function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n\n        if (0 == tableindex)\n            return bits;\n\n        for (var i = start; i < end; i += 2) {\n            var cbits = 0;\n            var xbits = 0;\n            var linbits = h.xlen;\n            var xlen = h.xlen;\n            var ext = 0;\n            var x1 = gi.l3_enc[i];\n            var x2 = gi.l3_enc[i + 1];\n\n            if (x1 != 0) {\n                if (gi.xr[i] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            if (tableindex > 15) {\n                /* use ESC-words */\n                if (x1 > 14) {\n                    var linbits_x1 = x1 - 15;\n                    ext |= linbits_x1 << 1;\n                    xbits = linbits;\n                    x1 = 15;\n                }\n\n                if (x2 > 14) {\n                    var linbits_x2 = x2 - 15;\n                    ext <<= linbits;\n                    ext |= linbits_x2;\n                    xbits += linbits;\n                    x2 = 15;\n                }\n                xlen = 16;\n            }\n\n            if (x2 != 0) {\n                ext <<= 1;\n                if (gi.xr[i + 1] < 0)\n                    ext++;\n                cbits--;\n            }\n\n\n            x1 = x1 * xlen + x2;\n            xbits -= cbits;\n            cbits += h.hlen[x1];\n\n\n            putbits2(gfc, h.table[x1], cbits);\n            putbits2(gfc, ext, xbits);\n            bits += cbits + xbits;\n        }\n        return bits;\n    }\n\n    /**\n     * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\n     * well as the definitions of the side information on pages 26 and 27.\n     */\n    function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values)\n            region1Start = gi.big_values;\n\n        /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            gi.big_values, gi);\n        return bits;\n    }\n\n    function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n\n        bigvalues = gi.big_values;\n\n        var i = gi.region0_count + 1;\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        region2Start = gfc.scalefac_band.l[i];\n\n        if (region1Start > bigvalues)\n            region1Start = bigvalues;\n\n        if (region2Start > bigvalues)\n            region2Start = bigvalues;\n\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\n            gi);\n        return bits;\n    }\n\n    function writeMainData(gfp) {\n        var gr, ch, sfb, data_bits, tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n\n        if (gfp.version == 1) {\n            /* MPEG 1 */\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n                    var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n                    data_bits = 0;\n                    for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen1);\n                        data_bits += slen1;\n                    }\n                    for (; sfb < gi.sfbmax; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen2);\n                        data_bits += slen2;\n                    }\n\n                    if (gi.block_type == Encoder.SHORT_TYPE) {\n                        data_bits += ShortHuffmancodebits(gfc, gi);\n                    } else {\n                        data_bits += LongHuffmancodebits(gfc, gi);\n                    }\n                    data_bits += huffman_coder_count1(gfc, gi);\n                    /* does bitcount in quantize.c agree with actual bit count? */\n                    tot_bits += data_bits;\n                }\n                /* for ch */\n            }\n            /* for gr */\n        } else {\n            /* MPEG 2 */\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                var i, sfb_partition, scale_bits = 0;\n                data_bits = 0;\n                sfb = 0;\n                sfb_partition = 0;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                            scale_bits += 3 * slen;\n                        }\n                    }\n                    data_bits += ShortHuffmancodebits(gfc, gi);\n                } else {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition];\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                            scale_bits += slen;\n                        }\n                    }\n                    data_bits += LongHuffmancodebits(gfc, gi);\n                }\n                data_bits += huffman_coder_count1(gfc, gi);\n                /* does bitcount in quantize.c agree with actual bit count? */\n                tot_bits += scale_bits + data_bits;\n            }\n            /* for ch */\n        }\n        /* for gf */\n        return tot_bits;\n    }\n\n    /* main_data */\n\n    function TotalBytes() {\n        this.total = 0;\n    }\n\n    /*\n     * compute the number of bits required to flush all mp3 frames currently in\n     * the buffer. This should be the same as the reservoir size. Only call this\n     * routine between frames - i.e. only after all headers and data have been\n     * added to the buffer by format_bitstream().\n     *\n     * Also compute total_bits_output = size of mp3 buffer (including frame\n     * headers which may not have yet been send to the mp3 buffer) + number of\n     * bits needed to flush all mp3 frames.\n     *\n     * total_bytes_output is the size of the mp3 output buffer if\n     * lame_encode_flush_nogap() was called right now.\n     */\n    function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr;\n        /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n\n        /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n\n        if (flushbits >= 0) {\n            /* if flushbits >= 0, some headers have not yet been written */\n            /* reduce flushbits by the size of the headers */\n            remaining_headers = 1 + last_ptr - first_ptr;\n            if (last_ptr < first_ptr)\n                remaining_headers = 1 + last_ptr - first_ptr\n                    + LameInternalFlags.MAX_HEADER_BUF;\n            flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\n        }\n\n        /*\n         * finally, add some bits so that the last frame is complete these bits\n         * are not necessary to decode the last frame, but some decoders will\n         * ignore last frame if these bits are missing\n         */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame;\n        /* round up: */\n        if ((total_bytes_output.total % 8) != 0)\n            total_bytes_output.total = 1 + (total_bytes_output.total / 8);\n        else\n            total_bytes_output.total = (total_bytes_output.total / 8);\n        total_bytes_output.total += bufByteIdx + 1;\n\n        if (flushbits < 0) {\n            System.err.println(\"strange error flushing buffer ... \\n\");\n        }\n        return flushbits;\n    }\n\n    this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\n            return;\n        drain_into_ancillary(gfp, flushbits);\n\n        /* check that the 100% of the last frame has been written to bitstream */\n\n        /*\n         * we have padded out all frames with ancillary data, which is the same\n         * as filling the bitreservoir with ancillary data, so :\n         */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0;\n\n        /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n            var RadioGain = ga.GetTitleGain(gfc.rgdata);\n            gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0;\n            /* round to nearest */\n        }\n\n        /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n            gfc.noclipGainChange = Math.ceil(\n                        Math_log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0;\n            /* round up */\n\n            if (gfc.noclipGainChange > 0) {\n                /* clipping occurs */\n                if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0))\n                    gfc.noclipScale = (Math\n                        .floor((32767.0 / gfc.PeakSample) * 100.0) / 100.0);\n                /* round down */\n                else {\n                    /*\n                     * the user specified his own scaling factor. We could\n                     * suggest the scaling factor of\n                     * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\n                     * very inaccurate. So we'd rather not advice him on the\n                     * scaling factor.\n                     */\n                    gfc.noclipScale = -1;\n                }\n            } else\n            /* no clipping */\n                gfc.noclipScale = -1;\n        }\n    };\n\n    this.add_dummy_byte = function (gfp, val, n) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        while (n-- > 0) {\n            putbits_noheaders(gfc, val, 8);\n\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing += 8;\n        }\n    };\n\n    /**\n     * This is called after a frame of audio has been quantized and coded. It\n     * will write the encoded audio to the bitstream. Note that from a layer3\n     * encoder's perspective the bit stream is primarily a series of main_data()\n     * blocks, with header and side information inserted at the proper locations\n     * to maintain framing. (See Figure A.7 in the IS).\n     */\n    this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\n\n        /*\n         * compare number of bits needed to clear all buffered mp3 frames with\n         * what we think the resvsize is:\n         */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n            System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\n        }\n\n        /*\n         * compare main_data_begin for the next frame with what we think the\n         * resvsize is:\n         */\n        if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\n            System.err.printf(\"bit reservoir error: \\n\"\n                + \"l3_side.main_data_begin: %d \\n\"\n                + \"Resvoir size:             %d \\n\"\n                + \"resv drain (post)         %d \\n\"\n                + \"resv drain (pre)          %d \\n\"\n                + \"header and sideinfo:      %d \\n\"\n                + \"data bits:                %d \\n\"\n                + \"total bits:               %d (remainder: %d) \\n\"\n                + \"bitsperframe:             %d \\n\",\n                8 * l3_side.main_data_begin, gfc.ResvSize,\n                l3_side.resvDrain_post, l3_side.resvDrain_pre,\n                8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8\n                * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\n\n            System.err.println(\"This is a fatal error.  It has several possible causes:\");\n            System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\n            System.err.println(\" 9%%  Your system is overclocked\");\n            System.err.println(\" 1%%  bug in LAME encoding library\");\n\n            gfc.ResvSize = l3_side.main_data_begin * 8;\n        }\n        //;\n\n        if (totbit > 1000000000) {\n            /*\n             * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\n             * bit counter\n             */\n            var i;\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing -= totbit;\n            totbit = 0;\n        }\n\n        return 0;\n    };\n\n    /**\n     * <PRE>\n     * copy data out of the internal MP3 bit buffer into a user supplied\n     *       unsigned char buffer.\n     *\n     *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\n     *       mp3data=1      data is real mp3 frame data.\n     * </PRE>\n     */\n    this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0)\n            return 0;\n        if (size != 0 && minimum > size) {\n            /* buffer is too small */\n            return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n\n        if (mp3data != 0) {\n            var crc = new_int(1);\n            crc[0] = gfc.nMusicCRC;\n            vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n            gfc.nMusicCRC = crc[0];\n\n            /**\n             * sum number of bytes belonging to the mp3 stream this info will be\n             * written into the Xing/LAME header for seeking\n             */\n            if (minimum > 0) {\n                gfc.VBR_seek_table.nBytesWritten += minimum;\n            }\n\n            if (gfc.decode_on_the_fly) { /* decode the frame */\n                var pcm_buf = new_float_n([2, 1152]);\n                var mp3_in = minimum;\n                var samples_out = -1;\n                var i;\n\n                /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\n                while (samples_out != 0) {\n\n                    samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer,\n                        bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]);\n                    /*\n                     * samples_out = 0: need more data to decode samples_out =\n                     * -1: error. Lets assume 0 pcm output samples_out = number\n                     * of samples output\n                     */\n\n                    /*\n                     * set the lenght of the mp3 input buffer to zero, so that\n                     * in the next iteration of the loop we will be querying\n                     * mpglib about buffered data\n                     */\n                    mp3_in = 0;\n\n                    if (samples_out == -1) {\n                        /*\n                         * error decoding. Not fatal, but might screw up the\n                         * ReplayGain tag. What should we do? Ignore for now\n                         */\n                        samples_out = 0;\n                    }\n                    if (samples_out > 0) {\n                        /* process the PCM data */\n\n                        /*\n                         * this should not be possible, and indicates we have\n                         * overflown the pcm_buf buffer\n                         */\n\n                        if (gfc.findPeakSample) {\n                            for (i = 0; i < samples_out; i++) {\n                                if (pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = pcm_buf[0][i];\n                                else if (-pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = -pcm_buf[0][i];\n                            }\n                            if (gfc.channels_out > 1)\n                                for (i = 0; i < samples_out; i++) {\n                                    if (pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = pcm_buf[1][i];\n                                    else if (-pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = -pcm_buf[1][i];\n                                }\n                        }\n\n                        if (gfc.findReplayGain)\n                            if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0,\n                                    pcm_buf[1], 0, samples_out,\n                                    gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                                return -6;\n\n                    }\n                    /* if (samples_out>0) */\n                }\n                /* while (samples_out!=0) */\n            }\n            /* if (gfc.decode_on_the_fly) */\n\n        }\n        /* if (mp3data) */\n        return minimum;\n    };\n\n    this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n    };\n\n    // From machine.h\n\n\n}\n\nfunction HuffCodeTab(len, max, tab, hl) {\n    this.xlen = len;\n    this.linmax = max;\n    this.table = tab;\n    this.hlen = hl;\n}\n\nvar Tables = {};\n\n\nTables.t1HB = [\n    1, 1,\n    1, 0\n];\n\nTables.t2HB = [\n    1, 2, 1,\n    3, 1, 1,\n    3, 2, 0\n];\n\nTables.t3HB = [\n    3, 2, 1,\n    1, 1, 1,\n    3, 2, 0\n];\n\nTables.t5HB = [\n    1, 2, 6, 5,\n    3, 1, 4, 4,\n    7, 5, 7, 1,\n    6, 1, 1, 0\n];\n\nTables.t6HB = [\n    7, 3, 5, 1,\n    6, 2, 3, 2,\n    5, 4, 4, 1,\n    3, 3, 2, 0\n];\n\nTables.t7HB = [\n    1, 2, 10, 19, 16, 10,\n    3, 3, 7, 10, 5, 3,\n    11, 4, 13, 17, 8, 4,\n    12, 11, 18, 15, 11, 2,\n    7, 6, 9, 14, 3, 1,\n    6, 4, 5, 3, 2, 0\n];\n\nTables.t8HB = [\n    3, 4, 6, 18, 12, 5,\n    5, 1, 2, 16, 9, 3,\n    7, 3, 5, 14, 7, 3,\n    19, 17, 15, 13, 10, 4,\n    13, 5, 8, 11, 5, 1,\n    12, 4, 4, 1, 1, 0\n];\n\nTables.t9HB = [\n    7, 5, 9, 14, 15, 7,\n    6, 4, 5, 5, 6, 7,\n    7, 6, 8, 8, 8, 5,\n    15, 6, 9, 10, 5, 1,\n    11, 7, 9, 6, 4, 1,\n    14, 4, 6, 2, 6, 0\n];\n\nTables.t10HB = [\n    1, 2, 10, 23, 35, 30, 12, 17,\n    3, 3, 8, 12, 18, 21, 12, 7,\n    11, 9, 15, 21, 32, 40, 19, 6,\n    14, 13, 22, 34, 46, 23, 18, 7,\n    20, 19, 33, 47, 27, 22, 9, 3,\n    31, 22, 41, 26, 21, 20, 5, 3,\n    14, 13, 10, 11, 16, 6, 5, 1,\n    9, 8, 7, 8, 4, 4, 2, 0\n];\n\nTables.t11HB = [\n    3, 4, 10, 24, 34, 33, 21, 15,\n    5, 3, 4, 10, 32, 17, 11, 10,\n    11, 7, 13, 18, 30, 31, 20, 5,\n    25, 11, 19, 59, 27, 18, 12, 5,\n    35, 33, 31, 58, 30, 16, 7, 5,\n    28, 26, 32, 19, 17, 15, 8, 14,\n    14, 12, 9, 13, 14, 9, 4, 1,\n    11, 4, 6, 6, 6, 3, 2, 0\n];\n\nTables.t12HB = [\n    9, 6, 16, 33, 41, 39, 38, 26,\n    7, 5, 6, 9, 23, 16, 26, 11,\n    17, 7, 11, 14, 21, 30, 10, 7,\n    17, 10, 15, 12, 18, 28, 14, 5,\n    32, 13, 22, 19, 18, 16, 9, 5,\n    40, 17, 31, 29, 17, 13, 4, 2,\n    27, 12, 11, 15, 10, 7, 4, 1,\n    27, 12, 8, 12, 6, 3, 1, 0\n];\n\nTables.t13HB = [\n    1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\n    3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\n    15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\n    22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\n    35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\n    58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\n    47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\n    72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\n    43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\n    53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\n    35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\n    53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\n    34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\n    45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\n    48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\n    16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\n];\n\nTables.t15HB = [\n    7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\n    13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\n    19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\n    29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\n    52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\n    77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\n    125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\n    109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\n    90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\n    71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\n    109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\n    86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\n    118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\n    91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\n    123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\n    71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\n];\n\nTables.t16HB = [\n    1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\n    3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\n    15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\n    45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\n    75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\n    66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\n    111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\n    98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\n    85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\n    154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\n    139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\n    243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\n    202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\n    747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\n    377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\n    12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\n];\n\nTables.t24HB = [\n    15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\n    14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\n    47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\n    81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\n    147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\n    263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\n    249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\n    435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\n    427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\n    335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\n    668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\n    652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\n    648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\n    620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\n    1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\n    43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\n];\n\nTables.t32HB = [\n    1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\n    7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\n];\n\nTables.t33HB = [\n    15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\n    7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\n];\n\nTables.t1l = [\n    1, 4,\n    3, 5\n];\n\nTables.t2l = [\n    1, 4, 7,\n    4, 5, 7,\n    6, 7, 8\n];\n\nTables.t3l = [\n    2, 3, 7,\n    4, 4, 7,\n    6, 7, 8\n];\n\nTables.t5l = [\n    1, 4, 7, 8,\n    4, 5, 8, 9,\n    7, 8, 9, 10,\n    8, 8, 9, 10\n];\n\nTables.t6l = [\n    3, 4, 6, 8,\n    4, 4, 6, 7,\n    5, 6, 7, 8,\n    7, 7, 8, 9\n];\n\nTables.t7l = [\n    1, 4, 7, 9, 9, 10,\n    4, 6, 8, 9, 9, 10,\n    7, 7, 9, 10, 10, 11,\n    8, 9, 10, 11, 11, 11,\n    8, 9, 10, 11, 11, 12,\n    9, 10, 11, 12, 12, 12\n];\n\nTables.t8l = [\n    2, 4, 7, 9, 9, 10,\n    4, 4, 6, 10, 10, 10,\n    7, 6, 8, 10, 10, 11,\n    9, 10, 10, 11, 11, 12,\n    9, 9, 10, 11, 12, 12,\n    10, 10, 11, 11, 13, 13\n];\n\nTables.t9l = [\n    3, 4, 6, 7, 9, 10,\n    4, 5, 6, 7, 8, 10,\n    5, 6, 7, 8, 9, 10,\n    7, 7, 8, 9, 9, 10,\n    8, 8, 9, 9, 10, 11,\n    9, 9, 10, 10, 11, 11\n];\n\nTables.t10l = [\n    1, 4, 7, 9, 10, 10, 10, 11,\n    4, 6, 8, 9, 10, 11, 10, 10,\n    7, 8, 9, 10, 11, 12, 11, 11,\n    8, 9, 10, 11, 12, 12, 11, 12,\n    9, 10, 11, 12, 12, 12, 12, 12,\n    10, 11, 12, 12, 13, 13, 12, 13,\n    9, 10, 11, 12, 12, 12, 13, 13,\n    10, 10, 11, 12, 12, 13, 13, 13\n];\n\nTables.t11l = [\n    2, 4, 6, 8, 9, 10, 9, 10,\n    4, 5, 6, 8, 10, 10, 9, 10,\n    6, 7, 8, 9, 10, 11, 10, 10,\n    8, 8, 9, 11, 10, 12, 10, 11,\n    9, 10, 10, 11, 11, 12, 11, 12,\n    9, 10, 11, 12, 12, 13, 12, 13,\n    9, 9, 9, 10, 11, 12, 12, 12,\n    9, 9, 10, 11, 12, 12, 12, 12\n];\n\nTables.t12l = [\n    4, 4, 6, 8, 9, 10, 10, 10,\n    4, 5, 6, 7, 9, 9, 10, 10,\n    6, 6, 7, 8, 9, 10, 9, 10,\n    7, 7, 8, 8, 9, 10, 10, 10,\n    8, 8, 9, 9, 10, 10, 10, 11,\n    9, 9, 10, 10, 10, 11, 10, 11,\n    9, 9, 9, 10, 10, 11, 11, 12,\n    10, 10, 10, 11, 11, 11, 11, 12\n];\n\nTables.t13l = [\n    1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\n    4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\n    7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\n    8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\n    9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\n    10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\n    10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n    11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\n    10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\n    11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\n    11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\n    12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\n    12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\n    13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\n    14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\n    13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\n];\n\nTables.t15l = [\n    3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\n    5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\n    6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\n    7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\n    10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n    10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\n    12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\n    12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n    13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\n    13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\n];\n\nTables.t16_5l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\n    11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\n];\n\nTables.t16l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\n    10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\n];\n\nTables.t24l = [\n    4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\n    5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\n    7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\n    8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\n    9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\n    10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\n    10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\n    11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\n    12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\n    13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\n    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\n];\n\nTables.t32l = [\n    1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\n    4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\n];\n\nTables.t33l = [\n    4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\n    4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\n];\n\nTables.ht = [\n    /* xlen, linmax, table, hlen */\n    new HuffCodeTab(0, 0, null, null),\n    new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\n    new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\n    new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\n    new HuffCodeTab(0, 0, null, null), /* Apparently not used */\n    new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\n    new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\n    new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\n    new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\n    new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\n    new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\n    new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\n    new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\n    new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\n    new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\n    new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\n\n    new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\n\n    new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\n\n    new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\n    new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 16*16; i++) [\n *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.largetbl = [\n    0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\n    0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\n    0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\n    0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\n    0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\n    0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\n    0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\n    0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\n    0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\n    0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\n    0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\n    0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\n    0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\n    0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\n    0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\n    0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\n    0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\n    0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\n    0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\n    0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\n    0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\n    0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\n    0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\n    0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\n    0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\n    0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\n];\n/**\n * <CODE>\n *  for (i = 0; i < 3*3; i++) [\n *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.table23 = [\n    0x010002, 0x040003, 0x070007,\n    0x040004, 0x050004, 0x070007,\n    0x060006, 0x070007, 0x080008\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 4*4; i++) [\n *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\n *   ]\n * </CODE>\n *\n */\nTables.table56 = [\n    0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\n    0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\n];\n\nTables.bitrate_table = [\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\n    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\n];\n\n/**\n * MPEG 2, MPEG 1, MPEG 2.5.\n */\nTables.samplerate_table = [\n    [22050, 24000, 16000, -1],\n    [44100, 48000, 32000, -1],\n    [11025, 12000, 8000, -1],\n];\n\n/**\n * This is the scfsi_band table from 2.4.2.7 of the IS.\n */\nTables.scfsi_band = [0, 6, 11, 16, 21];\n\nfunction MeanBits(meanBits) {\n    this.bits = meanBits;\n}\n\n//package mp3;\n\nfunction CalcNoiseResult() {\n    /**\n     * sum of quantization noise > masking\n     */\n    this.over_noise = 0.;\n    /**\n     * sum of all quantization noise\n     */\n    this.tot_noise = 0.;\n    /**\n     * max quantization noise\n     */\n    this.max_noise = 0.;\n    /**\n     * number of quantization noise > masking\n     */\n    this.over_count = 0;\n    /**\n     * SSD-like cost of distorted bands\n     */\n    this.over_SSD = 0;\n    this.bits = 0;\n}\n\nfunction VBRQuantize() {\n    var qupvt;\n    var tak;\n\n    this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n    }\n    //TODO\n\n}\n\n\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\n\nfunction LameGlobalFlags() {\n\n    this.class_id = 0;\n\n    /* input description */\n\n    /**\n     * number of samples. default=-1\n     */\n    this.num_samples = 0;\n    /**\n     * input number of channels. default=2\n     */\n    this.num_channels = 0;\n    /**\n     * input_samp_rate in Hz. default=44.1 kHz\n     */\n    this.in_samplerate = 0;\n    /**\n     * output_samp_rate. default: LAME picks best value at least not used for\n     * MP3 decoding: Remember 44.1 kHz MP3s and AC97\n     */\n    this.out_samplerate = 0;\n    /**\n     * scale input by this amount before encoding at least not used for MP3\n     * decoding\n     */\n    this.scale = 0.;\n    /**\n     * scale input of channel 0 (left) by this amount before encoding\n     */\n    this.scale_left = 0.;\n    /**\n     * scale input of channel 1 (right) by this amount before encoding\n     */\n    this.scale_right = 0.;\n\n    /* general control params */\n    /**\n     * collect data for a MP3 frame analyzer?\n     */\n    this.analysis = false;\n    /**\n     * add Xing VBR tag?\n     */\n    this.bWriteVbrTag = false;\n\n    /**\n     * use lame/mpglib to convert mp3 to wav\n     */\n    this.decode_only = false;\n    /**\n     * quality setting 0=best, 9=worst default=5\n     */\n    this.quality = 0;\n    /**\n     * see enum default = LAME picks best value\n     */\n    this.mode = MPEGMode.STEREO;\n    /**\n     * force M/S mode. requires mode=1\n     */\n    this.force_ms = false;\n    /**\n     * use free format? default=0\n     */\n    this.free_format = false;\n    /**\n     * find the RG value? default=0\n     */\n    this.findReplayGain = false;\n    /**\n     * decode on the fly? default=0\n     */\n    this.decode_on_the_fly = false;\n    /**\n     * 1 (default) writes ID3 tags, 0 not\n     */\n    this.write_id3tag_automatic = false;\n\n    /*\n     * set either brate>0 or compression_ratio>0, LAME will compute the value of\n     * the variable not set. Default is compression_ratio = 11.025\n     */\n    /**\n     * bitrate\n     */\n    this.brate = 0;\n    /**\n     * sizeof(wav file)/sizeof(mp3 file)\n     */\n    this.compression_ratio = 0.;\n\n    /* frame params */\n    /**\n     * mark as copyright. default=0\n     */\n    this.copyright = 0;\n    /**\n     * mark as original. default=1\n     */\n    this.original = 0;\n    /**\n     * the MP3 'private extension' bit. Meaningless\n     */\n    this.extension = 0;\n    /**\n     * Input PCM is emphased PCM (for instance from one of the rarely emphased\n     * CDs), it is STRONGLY not recommended to use this, because psycho does not\n     * take it into account, and last but not least many decoders don't care\n     * about these bits\n     */\n    this.emphasis = 0;\n    /**\n     * use 2 bytes per frame for a CRC checksum. default=0\n     */\n    this.error_protection = 0;\n    /**\n     * enforce ISO spec as much as possible\n     */\n    this.strict_ISO = false;\n\n    /**\n     * use bit reservoir?\n     */\n    this.disable_reservoir = false;\n\n    /* quantization/noise shaping */\n    this.quant_comp = 0;\n    this.quant_comp_short = 0;\n    this.experimentalY = false;\n    this.experimentalZ = 0;\n    this.exp_nspsytune = 0;\n\n    this.preset = 0;\n\n    /* VBR control */\n    this.VBR = null;\n    /**\n     * Range [0,...,1[\n     */\n    this.VBR_q_frac = 0.;\n    /**\n     * Range [0,...,9]\n     */\n    this.VBR_q = 0;\n    this.VBR_mean_bitrate_kbps = 0;\n    this.VBR_min_bitrate_kbps = 0;\n    this.VBR_max_bitrate_kbps = 0;\n    /**\n     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\n     * silence\n     */\n    this.VBR_hard_min = 0;\n\n    /* resampling and filtering */\n\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.lowpassfreq = 0;\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.highpassfreq = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.lowpasswidth = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.highpasswidth = 0;\n\n    /*\n     * psycho acoustics and other arguments which you should not change unless\n     * you know what you are doing\n     */\n\n    this.maskingadjust = 0.;\n    this.maskingadjust_short = 0.;\n    /**\n     * only use ATH\n     */\n    this.ATHonly = false;\n    /**\n     * only use ATH for short blocks\n     */\n    this.ATHshort = false;\n    /**\n     * disable ATH\n     */\n    this.noATH = false;\n    /**\n     * select ATH formula\n     */\n    this.ATHtype = 0;\n    /**\n     * change ATH formula 4 shape\n     */\n    this.ATHcurve = 0.;\n    /**\n     * lower ATH by this many db\n     */\n    this.ATHlower = 0.;\n    /**\n     * select ATH auto-adjust scheme\n     */\n    this.athaa_type = 0;\n    /**\n     * select ATH auto-adjust loudness calc\n     */\n    this.athaa_loudapprox = 0;\n    /**\n     * dB, tune active region of auto-level\n     */\n    this.athaa_sensitivity = 0.;\n    this.short_blocks = null;\n    /**\n     * use temporal masking effect\n     */\n    this.useTemporal = false;\n    this.interChRatio = 0.;\n    /**\n     * Naoki's adjustment of Mid/Side maskings\n     */\n    this.msfix = 0.;\n\n    /**\n     * 0 off, 1 on\n     */\n    this.tune = false;\n    /**\n     * used to pass values for debugging and stuff\n     */\n    this.tune_value_a = 0.;\n\n    /************************************************************************/\n    /* internal variables, do not set... */\n    /* provided because they may be of use to calling application */\n    /************************************************************************/\n\n    /**\n     * 0=MPEG-2/2.5 1=MPEG-1\n     */\n    this.version = 0;\n    this.encoder_delay = 0;\n    /**\n     * number of samples of padding appended to input\n     */\n    this.encoder_padding = 0;\n    this.framesize = 0;\n    /**\n     * number of frames encoded\n     */\n    this.frameNum = 0;\n    /**\n     * is this struct owned by calling program or lame?\n     */\n    this.lame_allocated_gfp = 0;\n    /**************************************************************************/\n    /* more internal variables are stored in this structure: */\n    /**************************************************************************/\n    this.internal_flags = null;\n}\n\n\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tthis.quantize.ms_convert(gfc.l3_side, gr);\n\t\t\t\tthis.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\n\t\t\t\t\t\tmean_bits, max_bits);\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\n\n\nfunction ReplayGain() {\n\t//fix 精简\n}\n\n//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\n\n\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n\n    this.l = new_int(1 + Encoder.SBMAX_l);\n    this.s = new_int(1 + Encoder.SBMAX_s);\n    this.psfb21 = new_int(1 + Encoder.PSFB21);\n    this.psfb12 = new_int(1 + Encoder.PSFB12);\n    var l = this.l;\n    var s = this.s;\n\n    if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n    }\n}\n\n/*\n *      quantize_pvt source file\n *\n *      Copyright (c) 1999-2002 Takehiro Tominaga\n *      Copyright (c) 2000-2002 Robert Hegemann\n *      Copyright (c) 2001 Naoki Shibata\n *      Copyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n\nQuantizePVT.Q_MAX = (256 + 1);\nQuantizePVT.Q_MAX2 = 116;\nQuantizePVT.LARGE_BITS = 100000;\nQuantizePVT.IXMAX_VAL = 8206;\n\nfunction QuantizePVT() {\n\n    var tak = null;\n    var rv = null;\n    var psy = null;\n\n    this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n    };\n\n    function POW20(x) {\n        return pow20[x + QuantizePVT.Q_MAX2];\n    }\n\n    this.IPOW20 = function (x) {\n        return ipow20[x];\n    }\n\n    /**\n     * smallest such that 1.0+DBL_EPSILON != 1.0\n     */\n    var DBL_EPSILON = 2.2204460492503131e-016;\n\n    /**\n     * ix always <= 8191+15. see count_bits()\n     */\n    var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n\n    var PRECALC_SIZE = (IXMAX_VAL + 2);\n\n    var Q_MAX = QuantizePVT.Q_MAX;\n\n\n    /**\n     * <CODE>\n     * minimum possible number of\n     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\n     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n     *\n     * for long block, 0+((15+3)<<2) = 18*4 = 72\n     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\n     * </CODE>\n     */\n    var Q_MAX2 = QuantizePVT.Q_MAX2;\n\n    var LARGE_BITS = QuantizePVT.LARGE_BITS;\n\n\n    /**\n     * Assuming dynamic range=96dB, this value should be 92\n     */\n    var NSATHSCALE = 100;\n\n    /**\n     * The following table is used to implement the scalefactor partitioning for\n     * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\n     * to the way the tables are presented in the IS:\n     *\n     * [table_number][row_in_table][column of nr_of_sfb]\n     */\n    this.nr_of_sfb_block = [\n        [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\n        [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\n        [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\n        [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\n        [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\n        [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n\n    /**\n     * Table B.6: layer3 preemphasis\n     */\n    var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n        2, 2, 3, 3, 3, 2, 0];\n    this.pretab = pretab;\n\n    /**\n     * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\n     * bands. <BR>\n     * Index into this using a method such as:<BR>\n     * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\n     */\n    this.sfBandIndex = [\n        // Table B.2.b: 22.05 kHz\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n        ),\n        /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\n                540, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.2.a: 16 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.b: 44.1 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.c: 48 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\n                576],\n            [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.a: 32 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 11.025 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 12 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 8 kHz */\n        new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\n                572, 574, 576],\n            [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\n                492 / 3, 498 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        )\n    ];\n\n    var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n    var ipow20 = new_float(Q_MAX);\n    var pow43 = new_float(PRECALC_SIZE);\n\n    var adj43 = new_float(PRECALC_SIZE);\n    this.adj43 = adj43;\n\n    /**\n     * <PRE>\n     * compute the ATH for each scalefactor band cd range: 0..96db\n     *\n     * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\n     * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\n     * -9db 0db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\n     * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\n     * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\n     *\n     *\n     * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\n     * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\n     * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\n     * -11 - 96 = -107db = ATH at 3.3kHz.\n     *\n     * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\n     * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\n     * </PRE>\n     */\n    function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n\n        ath -= NSATHSCALE;\n\n        /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n    }\n\n    function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            ATH_l[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            var start = gfc.scalefac_band.psfb21[sfb];\n            var end = gfc.scalefac_band.psfb21[sfb + 1];\n            ATH_psfb21[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            ATH_s[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n            }\n            ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            var start = gfc.scalefac_band.psfb12[sfb];\n            var end = gfc.scalefac_band.psfb12[sfb + 1];\n            ATH_psfb12[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n            }\n            /* not sure about the following */\n            ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\n        }\n\n        /*\n         * no-ATH mode: reduce ATH to -200 dB\n         */\n        if (gfp.noATH) {\n            for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n                ATH_l[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n                ATH_psfb21[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n                ATH_s[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n                ATH_psfb12[sfb] = 1E-20;\n            }\n        }\n\n        /*\n         * work in progress, don't rely on it too much\n         */\n        gfc.ATH.floor = 10. * Math_log10(ATHmdct(gfp, -1.));\n    }\n\n    /**\n     * initialization for iteration_loop\n     */\n    this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n\n        if (gfc.iteration_init_init == 0) {\n            gfc.iteration_init_init = 1;\n\n            l3_side.main_data_begin = 0;\n            compute_ath(gfp);\n\n            pow43[0] = 0.0;\n            for (i = 1; i < PRECALC_SIZE; i++)\n                pow43[i] = Math.pow(i, 4.0 / 3.0);\n\n            for (i = 0; i < PRECALC_SIZE - 1; i++)\n                adj43[i] = ((i + 1) - Math.pow(\n                    0.5 * (pow43[i] + pow43[i + 1]), 0.75));\n            adj43[i] = 0.5;\n\n            for (i = 0; i < Q_MAX; i++)\n                ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n            for (i = 0; i <= Q_MAX + Q_MAX2; i++)\n                pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n\n            tak.huffman_init(gfc);\n\n            {\n                var bass, alto, treble, sfb21;\n\n                i = (gfp.exp_nspsytune >> 2) & 63;\n                if (i >= 32)\n                    i -= 64;\n                bass = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 8) & 63;\n                if (i >= 32)\n                    i -= 64;\n                alto = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 14) & 63;\n                if (i >= 32)\n                    i -= 64;\n                treble = Math.pow(10, i / 4.0 / 10.0);\n\n                /*\n                 * to be compatible with Naoki's original code, the next 6 bits\n                 * define only the amount of changing treble for sfb21\n                 */\n                i = (gfp.exp_nspsytune >> 20) & 63;\n                if (i >= 32)\n                    i -= 64;\n                sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n                for (i = 0; i < Encoder.SBMAX_l; i++) {\n                    var f;\n                    if (i <= 6)\n                        f = bass;\n                    else if (i <= 13)\n                        f = alto;\n                    else if (i <= 20)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.longfact[i] = f;\n                }\n                for (i = 0; i < Encoder.SBMAX_s; i++) {\n                    var f;\n                    if (i <= 5)\n                        f = bass;\n                    else if (i <= 10)\n                        f = alto;\n                    else if (i <= 11)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.shortfact[i] = f;\n                }\n            }\n        }\n    }\n\n    /**\n     * allocate bits among 2 channels based on PE<BR>\n     * mt 6/99<BR>\n     * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\n     */\n    this.on_pe = function (gfp, pe,\n                           targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0, bits;\n        var add_bits = new_int(2);\n        var ch;\n\n        /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits;\n        /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            // hard limit per granule\n            max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            /******************************************************************\n             * allocate bits for each channel\n             ******************************************************************/\n            targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\n                tbits / gfc.channels_out);\n\n            add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\n\n            /* at most increase bits by 1.5*average */\n            if (add_bits[ch] > mean_bits * 3 / 4)\n                add_bits[ch] = mean_bits * 3 / 4;\n\n            if (add_bits[ch] < 0)\n                add_bits[ch] = 0;\n\n            if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                add_bits[ch] = Math.max(0,\n                    LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n\n            bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                add_bits[ch] = extra_bits * add_bits[ch] / bits;\n            }\n        }\n\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] += add_bits[ch];\n            extra_bits -= add_bits[ch];\n        }\n\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                targ_bits[ch] /= bits;\n                sum += targ_bits[ch];\n            }\n        }\n\n        return max_bits;\n    }\n\n    this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\n\n        /*\n         * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\n         * allocate 50/50 mid/side fac= 0\n         */\n        /* 75/25 split is fac=.5 */\n        var fac = .33 * (.5 - ms_ener_ratio) / .5;\n        if (fac < 0)\n            fac = 0;\n        if (fac > .5)\n            fac = .5;\n\n        /* number of bits to move from side channel to mid channel */\n        /* move_bits = fac*targ_bits[1]; */\n        var move_bits = 0 | (fac * .5 * (targ_bits[0] + targ_bits[1]));\n\n        if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\n            move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\n        }\n        if (move_bits < 0)\n            move_bits = 0;\n\n        if (targ_bits[1] >= 125) {\n            /* dont reduce side channel below 125 bits */\n            if (targ_bits[1] - move_bits > 125) {\n\n                /* if mid channel already has 2x more than average, dont bother */\n                /* mean_bits = bits per granule (for both channels) */\n                if (targ_bits[0] < mean_bits)\n                    targ_bits[0] += move_bits;\n                targ_bits[1] -= move_bits;\n            } else {\n                targ_bits[0] += targ_bits[1] - 125;\n                targ_bits[1] = 125;\n            }\n        }\n\n        move_bits = targ_bits[0] + targ_bits[1];\n        if (move_bits > max_bits) {\n            targ_bits[0] = (max_bits * targ_bits[0]) / move_bits;\n            targ_bits[1] = (max_bits * targ_bits[1]) / move_bits;\n        }\n    };\n\n    /**\n     *  Robert Hegemann 2001-04-27:\n     *  this adjusts the ATH, keeping the original noise floor\n     *  affects the higher frequencies more than the lower ones\n     */\n    this.athAdjust = function (a, x, athFloor) {\n        /*\n         * work in progress\n         */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor;\n        /* undo scaling */\n        if (v > 1E-20)\n            w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0)\n            w = 0.;\n        u *= w;\n        u += athFloor + o - p;\n        /* redo scaling */\n\n        return Math.pow(10., 0.1 * u);\n    };\n\n    /**\n     * Calculate the allowed distortion for each scalefactor band, as determined\n     * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\n     *\n     * returns number of sfb's with energy > ATH\n     */\n    this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb, j = 0, ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n            /* was already done in PSY-Model */\n            masking_lower = 1.0;\n        }\n\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n            var en0, xmin;\n            var rh1, rh2;\n            var width, l;\n\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\n            else\n                xmin = ATH.adjust * ATH.l[gsfb];\n\n            width = cod_info.width[gsfb];\n            rh1 = xmin / width;\n            rh2 = DBL_EPSILON;\n            l = width >> 1;\n            en0 = 0.0;\n            do {\n                var xa, xb;\n                xa = xr[j] * xr[j];\n                en0 += xa;\n                rh2 += (xa < rh1) ? xa : rh1;\n                j++;\n                xb = xr[j] * xr[j];\n                en0 += xb;\n                rh2 += (xb < rh1) ? xb : rh1;\n                j++;\n            } while (--l > 0);\n            if (en0 > xmin)\n                ath_over++;\n\n            if (gsfb == Encoder.SBPSY_l) {\n                var x = xmin * gfc.nsPsy.longfact[gsfb];\n                if (rh2 < x) {\n                    rh2 = x;\n                }\n            }\n            if (enable_athaa_fix != 0) {\n                xmin = rh2;\n            }\n            if (!gfp.ATHonly) {\n                var e = ratio.en.l[gsfb];\n                if (e > 0.0) {\n                    var x;\n                    x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n                    if (enable_athaa_fix != 0)\n                        x *= gfc.nsPsy.longfact[gsfb];\n                    if (xmin < x)\n                        xmin = x;\n                }\n            }\n            if (enable_athaa_fix != 0)\n                pxmin[pxminPos++] = xmin;\n            else\n                pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        }\n        /* end of long block loop */\n\n        /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            // NORM, START or STOP type, but not SHORT\n            var k = 576;\n            while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n                max_nonzero = k;\n            }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n            var width, b;\n            var tmpATH;\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\n            else\n                tmpATH = ATH.adjust * ATH.s[sfb];\n\n            width = cod_info.width[gsfb];\n            for (b = 0; b < 3; b++) {\n                var en0 = 0.0, xmin;\n                var rh1, rh2;\n                var l = width >> 1;\n\n                rh1 = tmpATH / width;\n                rh2 = DBL_EPSILON;\n                do {\n                    var xa, xb;\n                    xa = xr[j] * xr[j];\n                    en0 += xa;\n                    rh2 += (xa < rh1) ? xa : rh1;\n                    j++;\n                    xb = xr[j] * xr[j];\n                    en0 += xb;\n                    rh2 += (xb < rh1) ? xb : rh1;\n                    j++;\n                } while (--l > 0);\n                if (en0 > tmpATH)\n                    ath_over++;\n                if (sfb == Encoder.SBPSY_s) {\n                    var x = tmpATH * gfc.nsPsy.shortfact[sfb];\n                    if (rh2 < x) {\n                        rh2 = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    xmin = rh2;\n                else\n                    xmin = tmpATH;\n\n                if (!gfp.ATHonly && !gfp.ATHshort) {\n                    var e = ratio.en.s[sfb][b];\n                    if (e > 0.0) {\n                        var x;\n                        x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                        if (enable_athaa_fix != 0)\n                            x *= gfc.nsPsy.shortfact[sfb];\n                        if (xmin < x)\n                            xmin = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    pxmin[pxminPos++] = xmin;\n                else\n                    pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n            }\n            /* b */\n            if (gfp.useTemporal) {\n                if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\n                    pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\n                        * gfc.decay;\n                if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\n                    pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\n                        * gfc.decay;\n            }\n        }\n        /* end of short block sfb loop */\n\n        return ath_over;\n    };\n\n    function StartLine(j) {\n        this.s = j;\n    }\n\n    this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n\n        if (j > cod_info.count1) {\n            while ((l--) != 0) {\n                var temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n            }\n        } else if (j > cod_info.big_values) {\n            var ix01 = new_float(2);\n            ix01[0] = 0;\n            ix01[1] = step;\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n            }\n        } else {\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n            }\n        }\n\n        startline.s = j;\n        return noise;\n    }\n\n    /**\n     * <PRE>\n     * -oo dB  =>  -1.00\n     * - 6 dB  =>  -0.97\n     * - 3 dB  =>  -0.80\n     * - 2 dB  =>  -0.64\n     * - 1 dB  =>  -0.38\n     *   0 dB  =>   0.00\n     * + 1 dB  =>  +0.49\n     * + 2 dB  =>  +1.06\n     * + 3 dB  =>  +1.68\n     * + 6 dB  =>  +3.69\n     * +10 dB  =>  +6.45\n     * </PRE>\n     */\n    this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb, l, over = 0;\n        var over_noise_db = 0;\n        /* 0 dB relative to masking */\n        var tot_noise_db = 0;\n        /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n\n        res.over_SSD = 0;\n\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n            var s = cod_info.global_gain\n                - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\n                    : 0)) << (cod_info.scalefac_scale + 1))\n                - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n            var noise = 0.0;\n\n            if (prev_noise != null && (prev_noise.step[sfb] == s)) {\n\n                /* use previously computed values */\n                noise = prev_noise.noise[sfb];\n                j += cod_info.width[sfb];\n                distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                noise = prev_noise.noise_log[sfb];\n\n            } else {\n                var step = POW20(s);\n                l = cod_info.width[sfb] >> 1;\n\n                if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\n                    var usefullsize;\n                    usefullsize = cod_info.max_nonzero_coeff - j + 1;\n\n                    if (usefullsize > 0)\n                        l = usefullsize >> 1;\n                    else\n                        l = 0;\n                }\n\n                var sl = new StartLine(j);\n                noise = this.calc_noise_core(cod_info, sl, l, step);\n                j = sl.s;\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.step[sfb] = s;\n                    prev_noise.noise[sfb] = noise;\n                }\n\n                noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                /* multiplying here is adding in dB, but can overflow */\n                noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.noise_log[sfb] = noise;\n                }\n            }\n\n            if (prev_noise != null) {\n                /* save noise values */\n                prev_noise.global_gain = cod_info.global_gain;\n            }\n\n            tot_noise_db += noise;\n\n            if (noise > 0.0) {\n                var tmp;\n\n                tmp = Math.max(0 | (noise * 10 + .5), 1);\n                res.over_SSD += tmp * tmp;\n\n                over++;\n                /* multiplying here is adding in dB -but can overflow */\n                /* over_noise *= noise; */\n                over_noise_db += noise;\n            }\n            max_noise = Math.max(max_noise, noise);\n\n        }\n\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n\n        return over;\n    }\n\n    /**\n     * updates plotting data\n     *\n     * Mark Taylor 2000-??-??\n     *\n     * Robert Hegemann: moved noise/distortion calc into it\n     */\n    this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\n        var gfc = gfp.internal_flags;\n        var sfb, sfb2;\n        var l;\n        var en0, en1;\n        var ifqstep = (cod_info.scalefac_scale == 0) ? .5 : 1.0;\n        var scalefac = cod_info.scalefac;\n\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xfsf = new_float(L3Side.SFBMAX);\n        var noise = new CalcNoiseResult();\n\n        calc_xmin(gfp, ratio, cod_info, l3_xmin);\n        calc_noise(cod_info, l3_xmin, xfsf, noise, null);\n\n        var j = 0;\n        sfb2 = cod_info.sfb_lmax;\n        if (cod_info.block_type != Encoder.SHORT_TYPE\n            && 0 == cod_info.mixed_block_flag)\n            sfb2 = 22;\n        for (sfb = 0; sfb < sfb2; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            var bw = end - start;\n            for (en0 = 0.0; j < end; j++)\n                en0 += cod_info.xr[j] * cod_info.xr[j];\n            en0 /= bw;\n            /* convert to MDCT units */\n            /* scaling so it shows up on FFT plot */\n            en1 = 1e15;\n            gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\n            gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\n\n            if (ratio.en.l[sfb] > 0 && !gfp.ATHonly)\n                en0 = en0 / ratio.en.l[sfb];\n            else\n                en0 = 0.0;\n\n            gfc.pinfo.thr[gr][ch][sfb] = en1\n                * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]);\n\n            /* there is no scalefactor bands >= SBPSY_l */\n            gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\n            if (cod_info.preflag != 0 && sfb >= 11)\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\n\n            if (sfb < Encoder.SBPSY_l) {\n                /* scfsi should be decoded by caller side */\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\n            }\n        }\n        /* for sfb */\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            sfb2 = sfb;\n            for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                var bw = end - start;\n                for (var i = 0; i < 3; i++) {\n                    for (en0 = 0.0, l = start; l < end; l++) {\n                        en0 += cod_info.xr[j] * cod_info.xr[j];\n                        j++;\n                    }\n                    en0 = Math.max(en0 / bw, 1e-20);\n                    /* convert to MDCT units */\n                    /* scaling so it shows up on FFT plot */\n                    en1 = 1e15;\n\n                    gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\n                    gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2]\n                        * xfsf[sfb2] / bw;\n                    if (ratio.en.s[sfb][i] > 0)\n                        en0 = en0 / ratio.en.s[sfb][i];\n                    else\n                        en0 = 0.0;\n                    if (gfp.ATHonly || gfp.ATHshort)\n                        en0 = 0;\n\n                    gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1\n                        * Math.max(en0 * ratio.thm.s[sfb][i],\n                            gfc.ATH.s[sfb]);\n\n                    /* there is no scalefactor bands >= SBPSY_s */\n                    gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0\n                        * cod_info.subblock_gain[i];\n                    if (sfb < Encoder.SBPSY_s) {\n                        gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep\n                            * scalefac[sfb2];\n                    }\n                    sfb2++;\n                }\n            }\n        }\n        /* block type short */\n        gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\n        gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length\n            + cod_info.part2_length;\n        gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\n\n        gfc.pinfo.over[gr][ch] = noise.over_count;\n        gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\n        gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\n        gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\n        gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\n    }\n\n    /**\n     * updates plotting data for a whole frame\n     *\n     * Robert Hegemann 2000-10-21\n     */\n    function set_frame_pinfo(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n\n        gfc.masking_lower = 1.0;\n\n        /*\n         * for every granule and channel patch l3_enc and set info\n         */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n                var scalefac_sav = new_int(L3Side.SFBMAX);\n                System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0,\n                    scalefac_sav.length);\n\n                /*\n                 * reconstruct the scalefactors in case SCFSI was used\n                 */\n                if (gr == 1) {\n                    var sfb;\n                    for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n                        if (cod_info.scalefac[sfb] < 0) /* scfsi */\n                            cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\n                    }\n                }\n\n                set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\n                System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0,\n                    scalefac_sav.length);\n            }\n            /* for ch */\n        }\n        /* for gr */\n    }\n\n}\n\n\nfunction CalcNoiseData() {\n    this.global_gain = 0;\n    this.sfb_count1 = 0;\n    this.step = new_int(39);\n    this.noise = new_float(39);\n    this.noise_log = new_float(39);\n}\n\n//package mp3;\n\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\n\nvar L3Side = {};\n\n\n\t/**\n\t * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\n\t */\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n\n/*\n * MP3 quantization\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 1999-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2007 Robert Hegemann\n *      Copyright (c) 2001-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\nfunction Quantize() {\n    var bs;\n    this.rv = null;\n    var rv;\n    this.qupvt = null;\n    var qupvt;\n\n    var vbr = new VBRQuantize();\n    var tk;\n\n    this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n    }\n\n    /**\n     * convert from L/R <. Mid/Side\n     */\n    this.ms_convert = function (l3_side, gr) {\n        for (var i = 0; i < 576; ++i) {\n            var l = l3_side.tt[gr][0].xr[i];\n            var r = l3_side.tt[gr][1].xr[i];\n            l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\n            l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\n        }\n    };\n\n    /**\n     * mt 6/99\n     *\n     * initializes cod_info, scalefac and xrpow\n     *\n     * returns 0 if all energies in xr are zero, else 1\n     */\n    function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n            var tmp = Math.abs(cod_info.xr[i]);\n            sum += tmp;\n            xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n\n            if (xrpow[i] > cod_info.xrpow_max)\n                cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n    }\n\n    this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n\n        cod_info.xrpow_max = 0;\n\n        /*\n         * check if there is some energy we have to quantize and calculate xrpow\n         * matching our fresh scalefactors\n         */\n\n        Arrays.fill(xrpow, upper, 576, 0);\n\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum);\n\n        /*\n         * return 1 if we have something to quantize, else 0\n         */\n        if (sum > 1E-20) {\n            var j = 0;\n            if ((gfc.substep_shaping & 2) != 0)\n                j = 1;\n\n            for (var i = 0; i < cod_info.psymax; i++)\n                gfc.pseudohalf[i] = j;\n\n            return true;\n        }\n\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n    }\n\n    /**\n     * Gabriel Bouvigne feb/apr 2003<BR>\n     * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\n     *\n     * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\n     * stops on the first coeff higher than ath.\n     */\n    function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            /* NORM, START or STOP type, but not SHORT blocks */\n            var stop = false;\n            for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n                var start = gfc.scalefac_band.psfb21[gsfb];\n                var end = gfc.scalefac_band.psfb21[gsfb + 1];\n                var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\n                    ath.floor);\n\n                if (gfc.nsPsy.longfact[21] > 1e-12)\n                    ath21 *= gfc.nsPsy.longfact[21];\n\n                for (var j = end - 1; j >= start; j--) {\n                    if (Math.abs(xr[j]) < ath21)\n                        xr[j] = 0;\n                    else {\n                        stop = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            /* note: short blocks coeffs are reordered */\n            for (var block = 0; block < 3; block++) {\n                var stop = false;\n                for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n                    var start = gfc.scalefac_band.s[12]\n                        * 3\n                        + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                        * block\n                        + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n                    var end = start\n                        + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n                    var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\n                        ath.floor);\n\n                    if (gfc.nsPsy.shortfact[12] > 1e-12)\n                        ath12 *= gfc.nsPsy.shortfact[12];\n\n                    for (var j = end - 1; j >= start; j--) {\n                        if (Math.abs(xr[j]) < ath12)\n                            xr[j] = 0;\n                        else {\n                            stop = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    this.init_outer_loop = function (gfc, cod_info) {\n        /*\n         * initialize fresh cod_info\n         */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0;\n        /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0;\n        /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\n                - gfc.scalefac_band.l[sfb];\n            /* which is always 0. */\n            cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            var ixwork = new_float(576);\n\n            cod_info.sfb_smin = 0;\n            cod_info.sfb_lmax = 0;\n            if (cod_info.mixed_block_flag != 0) {\n                /*\n                 * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\n                 * sfbs 0-5 long block, 3-12 short blocks\n                 */\n                cod_info.sfb_smin = 3;\n                cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\n            }\n            cod_info.psymax = cod_info.sfb_lmax\n                + 3\n                * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n            cod_info.sfbmax = cod_info.sfb_lmax + 3\n                * (Encoder.SBPSY_s - cod_info.sfb_smin);\n            cod_info.sfbdivide = cod_info.sfbmax - 18;\n            cod_info.psy_lmax = cod_info.sfb_lmax;\n            /* re-order the short blocks, for more efficient encoding below */\n            /* By Takehiro TOMINAGA */\n            /*\n             * Within each scalefactor band, data is given for successive time\n             * windows, beginning with window 0 and ending with window 2. Within\n             * each window, the quantized values are then arranged in order of\n             * increasing frequency...\n             */\n            var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                for (var window = 0; window < 3; window++) {\n                    for (var l = start; l < end; l++) {\n                        cod_info.xr[ix++] = ixwork[3 * l + window];\n                    }\n                }\n            }\n\n            var j = cod_info.sfb_lmax;\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\n                    - gfc.scalefac_band.s[sfb];\n                cod_info.window[j] = 0;\n                cod_info.window[j + 1] = 1;\n                cod_info.window[j + 2] = 2;\n                j += 3;\n            }\n        }\n\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n\n        cod_info.max_nonzero_coeff = 575;\n\n        /*\n         * fresh scalefactors are all zero\n         */\n        Arrays.fill(cod_info.scalefac, 0);\n\n        psfb21_analogsilence(gfc, cod_info);\n    };\n\n    function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n    }\n\n    BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n    BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n    BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\n\n    /**\n     * author/date??\n     *\n     * binary step size search used by outer_loop to get a quantizer step size\n     * to start with\n     */\n    function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n\n        for (; ;) {\n            var step;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n\n            if (CurrentStep == 1 || nBits == desired_rate)\n                break;\n            /* nothing to adjust anymore */\n\n            if (nBits > desired_rate) {\n                /* increase Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_DOWN)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_UP;\n                step = CurrentStep;\n            } else {\n                /* decrease Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_UP)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_DOWN;\n                step = -CurrentStep;\n            }\n            cod_info.global_gain += step;\n            if (cod_info.global_gain < 0) {\n                cod_info.global_gain = 0;\n                flagGoneOver = true;\n            }\n            if (cod_info.global_gain > 255) {\n                cod_info.global_gain = 255;\n                flagGoneOver = true;\n            }\n        }\n\n\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n            cod_info.global_gain++;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n    }\n\n    this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\n        var distort = new_float(L3Side.SFBMAX);\n\n        if ((0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE)\n            || (gfc.substep_shaping & 0x80) != 0)\n            return;\n        qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\n        for (var j = 0; j < 576; j++) {\n            var xr = 0.0;\n            if (gi.l3_enc[j] != 0)\n                xr = Math.abs(gi.xr[j]);\n            work[j] = xr;\n        }\n\n        var j = 0;\n        var sfb = 8;\n        if (gi.block_type == Encoder.SHORT_TYPE)\n            sfb = 6;\n        do {\n            var allowedNoise, trancateThreshold;\n            var nsame, start;\n\n            var width = gi.width[sfb];\n            j += width;\n            if (distort[sfb] >= 1.0)\n                continue;\n\n            Arrays.sort(work, j - width, width);\n            if (BitStream.EQ(work[j - 1], 0.0))\n                continue;\n            /* all zero sfb */\n\n            allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\n            trancateThreshold = 0.0;\n            start = 0;\n            do {\n                var noise;\n                for (nsame = 1; start + nsame < width; nsame++)\n                    if (BitStream.NEQ(work[start + j - width], work[start + j\n                        + nsame - width]))\n                        break;\n\n                noise = work[start + j - width] * work[start + j - width]\n                    * nsame;\n                if (allowedNoise < noise) {\n                    if (start != 0)\n                        trancateThreshold = work[start + j - width - 1];\n                    break;\n                }\n                allowedNoise -= noise;\n                start += nsame;\n            } while (start < width);\n            if (BitStream.EQ(trancateThreshold, 0.0))\n                continue;\n\n            do {\n                if (Math.abs(gi.xr[j - width]) <= trancateThreshold)\n                    gi.l3_enc[j - width] = 0;\n            } while (--width > 0);\n        } while (++sfb < gi.psymax);\n\n        gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\n    };\n\n    /**\n     * author/date??\n     *\n     * Function: Returns zero if there is a scalefac which has not been\n     * amplified. Otherwise it returns one.\n     */\n    function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\n            if (cod_info.scalefac[sfb]\n                + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\n                return false;\n\n        return true;\n    }\n\n    /* mt 5/99: Function: Improved calc_noise for a single channel */\n\n    function penalties(noise) {\n        return Util.FAST_LOG10((0.368 + 0.632 * noise * noise * noise));\n    }\n\n    /**\n     * author/date??\n     *\n     * several different codes to decide which quantization is better\n     */\n    function get_klemm_noise(distort, gi) {\n        var klemm_noise = 1E-37;\n        for (var sfb = 0; sfb < gi.psymax; sfb++)\n            klemm_noise += penalties(distort[sfb]);\n\n        return Math.max(1e-20, klemm_noise);\n    }\n\n    function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\n         * noise is given in decibels (dB) relative to masking thesholds.<BR>\n         *\n         * over_noise: ??? (the previous comment is fully wrong)<BR>\n         * tot_noise: ??? (the previous comment is fully wrong)<BR>\n         * max_noise: max quantization noise\n         */\n        var better;\n\n        switch (quant_comp) {\n            default:\n            case 9:\n            {\n                if (best.over_count > 0) {\n                    /* there are distorted sfb */\n                    better = calc.over_SSD <= best.over_SSD;\n                    if (calc.over_SSD == best.over_SSD)\n                        better = calc.bits < best.bits;\n                } else {\n                    /* no distorted sfb */\n                    better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\n                }\n                break;\n            }\n\n            case 0:\n                better = calc.over_count < best.over_count\n                    || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\n                    || (calc.over_count == best.over_count\n                    && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n\n            case 8:\n                calc.max_noise = get_klemm_noise(distort, gi);\n            //$FALL-THROUGH$\n            case 1:\n                better = calc.max_noise < best.max_noise;\n                break;\n            case 2:\n                better = calc.tot_noise < best.tot_noise;\n                break;\n            case 3:\n                better = (calc.tot_noise < best.tot_noise)\n                    && (calc.max_noise < best.max_noise);\n                break;\n            case 4:\n                better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\n                    || (calc.max_noise <= 0.0 && best.max_noise < 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\n                    || (calc.max_noise <= 0.0 && best.max_noise > 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.05\n                    && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\n                    + calc.over_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.1\n                    && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\n                    + calc.over_noise + calc.over_noise < best.tot_noise\n                    + best.over_noise + best.over_noise);\n                break;\n            case 5:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n            case 6:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\n                        .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\n                break;\n            case 7:\n                better = calc.over_count < best.over_count\n                    || calc.over_noise < best.over_noise;\n                break;\n        }\n\n        if (best.over_count == 0) {\n            /*\n             * If no distorted bands, only use this quantization if it is\n             * better, and if it uses less bits. Unfortunately, part2_3_length\n             * is sometimes a poor estimator of the final size at low bitrates.\n             */\n            better = better && calc.bits < best.bits;\n        }\n\n        return better;\n    }\n\n    /**\n     * author/date??\n     *\n     * <PRE>\n     *  Amplify the scalefactor bands that violate the masking threshold.\n     *  See ISO 11172-3 Section C.1.5.4.3.5\n     *\n     *  distort[] = noise/masking\n     *  distort[] > 1   ==> noise is not masked\n     *  distort[] < 1   ==> noise is masked\n     *  max_dist = maximum value of distort[]\n     *\n     *  Three algorithms:\n     *  noise_shaping_amp\n     *        0             Amplify all bands with distort[]>1.\n     *\n     *        1             Amplify all bands with distort[] >= max_dist^(.5);\n     *                     ( 50% in the db scale)\n     *\n     *        2             Amplify first band with distort[] >= max_dist;\n     *\n     *\n     *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\n     *  with distort[] >= .95*max_dist.  This is to make sure we always\n     *  amplify at least one band.\n     * </PRE>\n     */\n    function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n\n        if (cod_info.scalefac_scale == 0) {\n            ifqstep34 = 1.29683955465100964055;\n            /* 2**(.75*.5) */\n        } else {\n            ifqstep34 = 1.68179283050742922612;\n            /* 2**(.75*1) */\n        }\n\n        /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            if (trigger < distort[sfb])\n                trigger = distort[sfb];\n        }\n\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n            if (bRefine)\n                noise_shaping_amp = 2;\n            else\n                noise_shaping_amp = 1;\n        }\n        switch (noise_shaping_amp) {\n            case 2:\n                /* amplify exactly 1 band */\n                break;\n\n            case 1:\n                /* amplify bands within 50% of max (on db scale) */\n                if (trigger > 1.0)\n                    trigger = Math.pow(trigger, .5);\n                else\n                    trigger *= .95;\n                break;\n\n            case 0:\n            default:\n                /* ISO algorithm. amplify all bands with distort>1 */\n                if (trigger > 1.0)\n                    trigger = 1.0;\n                else\n                    trigger *= .95;\n                break;\n        }\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var l;\n            j += width;\n            if (distort[sfb] < trigger)\n                continue;\n\n            if ((gfc.substep_shaping & 2) != 0) {\n                gfc.pseudohalf[sfb] = (0 == gfc.pseudohalf[sfb]) ? 1 : 0;\n                if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2)\n                    return;\n            }\n            cod_info.scalefac[sfb]++;\n            for (l = -width; l < 0; l++) {\n                xrpow[j + l] *= ifqstep34;\n                if (xrpow[j + l] > cod_info.xrpow_max)\n                    cod_info.xrpow_max = xrpow[j + l];\n            }\n\n            if (gfc.noise_shaping_amp == 2)\n                return;\n        }\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * turns on scalefac scale and adjusts scalefactors\n     */\n    function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var s = cod_info.scalefac[sfb];\n            if (cod_info.preflag != 0)\n                s += qupvt.pretab[sfb];\n            j += width;\n            if ((s & 1) != 0) {\n                s++;\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= ifqstep34;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n            cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * increases the subblock gain and adjusts scalefactors\n     */\n    function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac;\n\n        /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n            if (scalefac[sfb] >= 16)\n                return true;\n        }\n\n        for (var window = 0; window < 3; window++) {\n            var s1 = 0;\n            var s2 = 0;\n\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n                if (s1 < scalefac[sfb])\n                    s1 = scalefac[sfb];\n            }\n            for (; sfb < cod_info.sfbmax; sfb += 3) {\n                if (s2 < scalefac[sfb])\n                    s2 = scalefac[sfb];\n            }\n\n            if (s1 < 16 && s2 < 8)\n                continue;\n\n            if (cod_info.subblock_gain[window] >= 7)\n                return true;\n\n            /*\n             * even though there is no scalefactor for sfb12 subblock gain\n             * affects upper frequencies too, that's why we have to go up to\n             * SBMAX_s\n             */\n            cod_info.subblock_gain[window]++;\n            var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n                var amp;\n                var width = cod_info.width[sfb];\n                var s = scalefac[sfb];\n                s = s - (4 >> cod_info.scalefac_scale);\n                if (s >= 0) {\n                    scalefac[sfb] = s;\n                    j += width * 3;\n                    continue;\n                }\n\n                scalefac[sfb] = 0;\n                {\n                    var gain = 210 + (s << (cod_info.scalefac_scale + 1));\n                    amp = qupvt.IPOW20(gain);\n                }\n                j += width * (window + 1);\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n                j += width * (3 - window - 1);\n            }\n\n            {\n                var amp = qupvt.IPOW20(202);\n                j += cod_info.width[sfb] * (window + 1);\n                for (var l = -cod_info.width[sfb]; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <PRE>\n     *  Takehiro Tominaga /date??\n     *  Robert Hegemann 2000-09-06: made a function of it\n     *\n     *  amplifies scalefactor bands,\n     *   - if all are already amplified returns 0\n     *   - if some bands are amplified too much:\n     *      * try to increase scalefac_scale\n     *      * if already scalefac_scale was set\n     *          try on short blocks to increase subblock gain\n     * </PRE>\n     */\n    function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\n\n        /*\n         * check to make sure we have not amplified too much loop_break returns\n         * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\n         * scalefactors are too large\n         */\n\n        var status = loop_break(cod_info);\n\n        if (status)\n            return false;\n        /* all bands amplified */\n\n        /*\n         * not all scalefactors have been amplified. so these scalefacs are\n         * possibly valid. encode them:\n         */\n        if (gfc.mode_gr == 2)\n            status = tk.scale_bitcount(cod_info);\n        else\n            status = tk.scale_bitcount_lsf(gfc, cod_info);\n\n        if (!status)\n            return true;\n        /* amplified some bands not exceeding limits */\n\n        /*\n         * some scalefactors are too large. lets try setting scalefac_scale=1\n         */\n        if (gfc.noise_shaping > 1) {\n            Arrays.fill(gfc.pseudohalf, 0);\n            if (0 == cod_info.scalefac_scale) {\n                inc_scalefac_scale(cod_info, xrpow);\n                status = false;\n            } else {\n                if (cod_info.block_type == Encoder.SHORT_TYPE\n                    && gfc.subblock_gain > 0) {\n                    status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\n                }\n            }\n        }\n\n        if (!status) {\n            if (gfc.mode_gr == 2)\n                status = tk.scale_bitcount(cod_info);\n            else\n                status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n    }\n\n    /**\n     * <PRE>\n     *  Function: The outer iteration loop controls the masking conditions\n     *  of all scalefactorbands. It computes the best scalefac and\n     *  global gain. This module calls the inner iteration loop\n     *\n     *  mt 5/99 completely rewritten to allow for bit reservoir control,\n     *  mid/side channels with L/R or mid/side masking thresholds,\n     *  and chooses best quantization instead of last quantization when\n     *  no distortion free quantization can be found.\n     *\n     *  added VBR support mt 5/99\n\n     *\n     *  some code shuffle rh 9/00\n     * </PRE>\n     *\n     * @param l3_xmin\n     *            allowed distortion\n     * @param xrpow\n     *            coloured magnitudes of spectral\n     * @param targ_bits\n     *            maximum allowed bits\n     */\n    this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n\n        if (0 == gfc.noise_shaping)\n        /* fast mode, no noise shaping, we are ready */\n            return 100;\n        /* default noise_info.over_count */\n\n        /* compute the distortion in this quantization */\n        /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\n            prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n\n        while (!bEndOfSearch) {\n            /* BEGIN MAIN LOOP */\n            do {\n                var noise_info = new CalcNoiseResult();\n                var search_limit;\n                var maxggain = 255;\n\n                /*\n                 * When quantization with no distorted bands is found, allow up\n                 * to X new unsuccesful tries in serial. This gives us more\n                 * possibilities for different quant_compare modes. Much more\n                 * than 3 makes not a big difference, it is only slower.\n                 */\n\n                if ((gfc.substep_shaping & 2) != 0) {\n                    search_limit = 20;\n                } else {\n                    search_limit = 3;\n                }\n\n                /*\n                 * Check if the last scalefactor band is distorted. in VBR mode\n                 * we can't get rid of the distortion, so quit now and VBR mode\n                 * will try again with more bits. (makes a 10% speed increase,\n                 * the files I tested were binary identical, 2000/05/20 Robert\n                 * Hegemann) distort[] > 1 means noise > allowed noise\n                 */\n                if (gfc.sfb21_extra) {\n                    if (distort[cod_info_w.sfbmax] > 1.0)\n                        break;\n                    if (cod_info_w.block_type == Encoder.SHORT_TYPE\n                        && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0))\n                        break;\n                }\n\n                /* try a new scalefactor conbination on cod_info_w */\n                if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\n                    break;\n                if (cod_info_w.scalefac_scale != 0)\n                    maxggain = 254;\n\n                /*\n                 * inner_loop starts with the initial quantization step computed\n                 * above and slowly increases until the bits < huff_bits. Thus\n                 * it is important not to start with too large of an inital\n                 * quantization step. Too small is ok, but inner_loop will take\n                 * longer\n                 */\n                var huff_bits = targ_bits - cod_info_w.part2_length;\n                if (huff_bits <= 0)\n                    break;\n\n                /*\n                 * increase quantizer stepsize until needed bits are below\n                 * maximum\n                 */\n                while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\n                    cod_info_w, prev_noise)) > huff_bits\n                && cod_info_w.global_gain <= maxggain)\n                    cod_info_w.global_gain++;\n\n                if (cod_info_w.global_gain > maxggain)\n                    break;\n\n                if (best_noise_info.over_count == 0) {\n\n                    while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\n                        xrpow, cod_info_w, prev_noise)) > best_part2_3_length\n                    && cod_info_w.global_gain <= maxggain)\n                        cod_info_w.global_gain++;\n\n                    if (cod_info_w.global_gain > maxggain)\n                        break;\n                }\n\n                /* compute the distortion in this quantization */\n                qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\n                    prev_noise);\n                noise_info.bits = cod_info_w.part2_3_length;\n\n                /*\n                 * check if this quantization is better than our saved\n                 * quantization\n                 */\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    better = gfp.quant_comp;\n                } else\n                    better = gfp.quant_comp_short;\n\n                better = quant_compare(better, best_noise_info, noise_info,\n                    cod_info_w, distort) ? 1 : 0;\n\n                /* save data so we can restore this quantization later */\n                if (better != 0) {\n                    best_part2_3_length = cod_info.part2_3_length;\n                    best_noise_info = noise_info;\n                    cod_info.assign(cod_info_w);\n                    age = 0;\n                    /* save data so we can restore this quantization later */\n                    /* store for later reuse */\n                    System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n                } else {\n                    /* early stop? */\n                    if (gfc.full_outer_loop == 0) {\n                        if (++age > search_limit\n                            && best_noise_info.over_count == 0)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3)\n                            && bRefine\n                            && (cod_info_w.global_gain - best_ggain_pass1) > 15)\n                            break;\n                    }\n                }\n            } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\n\n            if (gfc.noise_shaping_amp == 3) {\n                if (!bRefine) {\n                    /* refine search */\n                    cod_info_w.assign(cod_info);\n                    System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n                    age = 0;\n                    best_ggain_pass1 = cod_info_w.global_gain;\n\n                    bRefine = true;\n                } else {\n                    /* search already refined, stop */\n                    bEndOfSearch = true;\n                }\n\n            } else {\n                bEndOfSearch = true;\n            }\n        }\n\n        /*\n         * finish up\n         */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n        /* restore for reuse on next try */\n            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n        /*\n         * do the 'substep shaping'\n         */\n        else if ((gfc.substep_shaping & 1) != 0)\n            trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\n\n        return best_noise_info.over_count;\n    }\n\n    /**\n     * Robert Hegemann 2000-09-06\n     *\n     * update reservoir status after FINAL quantization/bitrate\n     */\n    this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch];\n\n        /*\n         * try some better scalefac storage\n         */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side);\n\n        /*\n         * best huffman_divide may save some bits too\n         */\n        if (gfc.use_best_huffman == 1)\n            tk.best_huffman_divide(gfc, cod_info);\n\n        /*\n         * update reservoir status after FINAL quantization/bitrate\n         */\n        rv.ResvAdjust(gfc, cod_info);\n    };\n\n    /**\n     *\n     * 2000-09-04 Robert Hegemann\n     *\n     * @param l3_xmin\n     *            allowed distortion of the scalefactor\n     * @param xrpow\n     *            coloured magnitudes of spectral values\n     */\n    this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var bst_cod_info = new GrInfo();\n        var bst_xrpow = new_float(576);\n        var Max_bits = max_bits;\n        var real_bits = max_bits + 1;\n        var this_bits = (max_bits + min_bits) / 2;\n        var dbits, over, found = 0;\n        var sfb21_extra = gfc.sfb21_extra;\n\n        Arrays.fill(bst_cod_info.l3_enc, 0);\n\n        /*\n         * search within round about 40 bits of optimal\n         */\n        do {\n\n            if (this_bits > Max_bits - 42)\n                gfc.sfb21_extra = false;\n            else\n                gfc.sfb21_extra = sfb21_extra;\n\n            over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits);\n\n            /*\n             * is quantization as good as we are looking for ? in this case: is\n             * no scalefactor band distorted?\n             */\n            if (over <= 0) {\n                found = 1;\n                /*\n                 * now we know it can be done with \"real_bits\" and maybe we can\n                 * skip some iterations\n                 */\n                real_bits = cod_info.part2_3_length;\n\n                /*\n                 * store best quantization so far\n                 */\n                bst_cod_info.assign(cod_info);\n                System.arraycopy(xrpow, 0, bst_xrpow, 0, 576);\n\n                /*\n                 * try with fewer bits\n                 */\n                max_bits = real_bits - 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n            } else {\n                /*\n                 * try with more bits\n                 */\n                min_bits = this_bits + 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n\n                if (found != 0) {\n                    found = 2;\n                    /*\n                     * start again with best quantization so far\n                     */\n                    cod_info.assign(bst_cod_info);\n                    System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\n                }\n            }\n        } while (dbits > 12);\n\n        gfc.sfb21_extra = sfb21_extra;\n\n        /*\n         * found=0 => nothing found, use last one found=1 => we just found the\n         * best and left the loop found=2 => we restored a good one and have now\n         * l3_enc to restore too\n         */\n        if (found == 2) {\n            System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\n        }\n    }\n\n    /**\n     * Robert Hegemann 2000-09-05\n     *\n     * calculates * how many bits are available for analog silent granules * how\n     * many bits to use for the lowest allowed bitrate * how many bits each\n     * bitrate would provide\n     */\n    this.get_framebits = function (gfp, frameBits) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * always use at least this many bits per granule per channel unless we\n         * detect analog silence, see below\n         */\n        gfc.bitrate_index = gfc.VBR_min_bitrate;\n        var bitsPerFrame = bs.getframebits(gfp);\n\n        /*\n         * bits for analog silence\n         */\n        gfc.bitrate_index = 1;\n        bitsPerFrame = bs.getframebits(gfp);\n\n        for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\n            gfc.bitrate_index = i;\n            var mb = new MeanBits(bitsPerFrame);\n            frameBits[i] = rv.ResvFrameBegin(gfp, mb);\n            bitsPerFrame = mb.bits;\n        }\n    };\n\n    /* RH: this one needs to be overhauled sometime */\n\n    /**\n     * <PRE>\n     *  2000-09-04 Robert Hegemann\n     *\n     *  * converts LR to MS coding when necessary\n     *  * calculates allowed/adjusted quantization noise amounts\n     *  * detects analog silent frames\n     *\n     *  some remarks:\n     *  - lower masking depending on Quality setting\n     *  - quality control together with adjusted ATH MDCT scaling\n     *    on lower quality setting allocate more noise from\n     *    ATH masking, and on higher quality setting allocate\n     *    less noise from ATH masking.\n     *  - experiments show that going more than 2dB over GPSYCHO's\n     *    limits ends up in very annoying artefacts\n     * </PRE>\n     */\n    this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits,\n                                     max_bits, bands) {\n        var gfc = gfp.internal_flags;\n\n        var masking_lower_db, adjust = 0.0;\n        var analog_silence = 1;\n        var bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\n\n        get_framebits(gfp, frameBits);\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n                qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    adjust = 1.28 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\n                    masking_lower_db = gfc.PSY.mask_adjust - adjust;\n                } else {\n                    adjust = 2.56 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\n                    masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n                }\n                gfc.masking_lower = Math.pow(10.0,\n                    masking_lower_db * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                    l3_xmin[gr][ch]);\n                if (bands[gr][ch] != 0)\n                    analog_silence = 0;\n\n                min_bits[gr][ch] = 126;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > frameBits[gfc.VBR_max_bitrate]) {\n                    max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\n                    max_bits[gr][ch] /= bits;\n                }\n                if (min_bits[gr][ch] > max_bits[gr][ch])\n                    min_bits[gr][ch] = max_bits[gr][ch];\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = gfc.l3_side.tt[gr][ch];\n                var pxmin = l3_xmin[gr][ch];\n                var pxminPos = 0;\n                for (var sfb = 0; sfb < gi.psy_lmax; sfb++)\n                    pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                        / Encoder.SBMAX_l / Encoder.SBMAX_l;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                    }\n                }\n                max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch],\n                        0.9 * max_bits[gr][ch]);\n            }\n        }\n    };\n\n    this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\n        var gfc = gfp.internal_flags;\n\n        var analog_silence = 1;\n        var avg = 0, bits = 0;\n        var maximum_framebits;\n\n        if (!gfp.free_format) {\n            gfc.bitrate_index = gfc.VBR_max_bitrate;\n\n            var mb = new MeanBits(avg);\n            rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n\n            get_framebits(gfp, frameBits);\n            maximum_framebits = frameBits[gfc.VBR_max_bitrate];\n        } else {\n            gfc.bitrate_index = 0;\n            var mb = new MeanBits(avg);\n            maximum_framebits = rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n            frameBits[0] = maximum_framebits;\n        }\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                gfc.masking_lower = Math.pow(10.0,\n                    gfc.PSY.mask_adjust * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                        l3_xmin[gr][ch]))\n                    analog_silence = 0;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > maximum_framebits) {\n                    max_bits[gr][ch] *= maximum_framebits;\n                    max_bits[gr][ch] /= bits;\n                }\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    /**\n     * calculates target bits for ABR encoding\n     *\n     * mt 2000/05/31\n     */\n    this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var res_factor;\n        var gr, ch, totbits, mean_bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var mb = new MeanBits(mean_bits);\n        max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits;\n\n        gfc.bitrate_index = 1;\n        mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\n        analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\n\n        mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\n        if ((gfc.substep_shaping & 1) != 0)\n            mean_bits *= 1.09;\n        mean_bits /= gfp.out_samplerate;\n        mean_bits -= gfc.sideinfo_len * 8;\n        mean_bits /= (gfc.mode_gr * gfc.channels_out);\n\n        /**\n         * <PRE>\n         *           res_factor is the percentage of the target bitrate that should\n         *           be used on average.  the remaining bits are added to the\n         *           bitreservoir and used for difficult to encode frames.\n         *\n         *           Since we are tracking the average bitrate, we should adjust\n         *           res_factor \"on the fly\", increasing it if the average bitrate\n         *           is greater than the requested bitrate, and decreasing it\n         *           otherwise.  Reasonable ranges are from .9 to 1.0\n         *\n         *           Until we get the above suggestion working, we use the following\n         *           tuning:\n         *           compression ratio    res_factor\n         *           5.5  (256kbps)         1.0      no need for bitreservoir\n         *           11   (128kbps)         .93      7% held for reservoir\n         *\n         *           with linear interpolation for other values.\n         * </PRE>\n         */\n        res_factor = .93 + .07 * (11.0 - gfp.compression_ratio)\n            / (11.0 - 5.5);\n        if (res_factor < .90)\n            res_factor = .90;\n        if (res_factor > 1.00)\n            res_factor = 1.00;\n\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                if (pe[gr][ch] > 700) {\n                    var add_bits = (int)((pe[gr][ch] - 700) / 1.4);\n\n                    var cod_info = l3_side.tt[gr][ch];\n                    targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                    /* short blocks use a little extra, no matter what the pe */\n                    if (cod_info.block_type == Encoder.SHORT_TYPE) {\n                        if (add_bits < mean_bits / 2)\n                            add_bits = mean_bits / 2;\n                    }\n                    /* at most increase bits by 1.5*average */\n                    if (add_bits > mean_bits * 3 / 2)\n                        add_bits = mean_bits * 3 / 2;\n                    else if (add_bits < 0)\n                        add_bits = 0;\n\n                    targ_bits[gr][ch] += add_bits;\n                }\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                }\n                sum += targ_bits[gr][ch];\n            }\n            /* for ch */\n            if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n                for (ch = 0; ch < gfc.channels_out; ++ch) {\n                    targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                    targ_bits[gr][ch] /= sum;\n                }\n            }\n        }\n        /* for gr */\n\n        if (gfc.mode_ext == Encoder.MPG_MD_MS_LR)\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits\n                    * gfc.channels_out,\n                    LameInternalFlags.MAX_BITS_PER_GRANULE);\n            }\n\n        /*\n         * sum target bits\n         */\n        totbits = 0;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                totbits += targ_bits[gr][ch];\n            }\n        }\n\n        /*\n         * repartion target bits if needed\n         */\n        if (totbits > max_frame_bits[0]) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    targ_bits[gr][ch] *= max_frame_bits[0];\n                    targ_bits[gr][ch] /= totbits;\n                }\n            }\n        }\n    }\n\n}\n\n/*\n *      MP3 window subband -> subband filtering -> mdct routine\n *\n *      Copyright (c) 1999-2000 Takehiro Tominaga\n *\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n/*\n *         Special Thanks to Patrick De Smet for your advices.\n */\n\n/* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\n\nfunction NewMDCT() {\n\n\tvar enwindow = [\n\t\t\t-4.77e-07 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.03951e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.53674e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.841473e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.5758972e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.401756e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.83715e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\n\t\t\t1.2398e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.91212e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.283096e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.6994476e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.8756866e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.630711e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.47478e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.4782e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.063471690191471e-01, 1.960342806591213e-01,\n\n\t\t\t-4.77e-07 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.05858e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.30786e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.521515e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.5694122e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.643036e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.91821e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\n\t\t\t1.1444e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.65462e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.110004e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.6112804e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.9634247e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.803326e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.77042e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.6689e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t8.206787908286602e-01, 3.901806440322567e-01,\n\n\t\t\t-4.77e-07 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.07288e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.02653e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t2.174854e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.5586357e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.858566e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.95159e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\n\t\t\t1.0014e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.40190e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.937389e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.5233517e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.0506859e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.974033e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t-3.07560e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t-1.8120e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t7.416505462720353e-01, 5.805693545089249e-01,\n\n\t\t\t-4.77e-07 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t8.68797e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.800537e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t3.5435200e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t4.049301e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.94205e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\n\t\t\t9.060e-06 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.16348e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.766682e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.4358521e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-2.1372318e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.14188e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.39031e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t-1.9550e-05 * 0.831469612302545 / 2.384e-06,\n\t\t\t6.681786379192989e-01, 7.653668647301797e-01,\n\n\t\t\t-4.77e-07 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.29220e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.399517e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t3.5242081e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t4.215240e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.89437e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\n\t\t\t8.106e-06 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.3937e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.597881e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.3489246e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.2228718e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.306866e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.71456e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.1458e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t5.993769336819237e-01, 9.427934736519954e-01,\n\n\t\t\t-4.77e-07 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.8392e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.71317e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t3.5007000e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t4.357815e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.80854e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\n\t\t\t7.629e-06 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.2956e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.432419e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.2627602e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3074150e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-3.467083e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t-4.04358e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3365e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t5.345111359507916e-01, 1.111140466039205e+00,\n\n\t\t\t-9.54e-07 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t7.31945e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.15938e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t3.4730434e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.477024e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t9.68933e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\n\t\t\t6.676e-06 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.269817e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.1775017e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.3907185e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-3.622532e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t-4.38213e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.5272e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.729647758913199e-01, 1.268786568327291e+00,\n\n\t\t\t-9.54e-07 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.199e-06 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.1421356237309504879e-01, /* tan(PI/8) */\n\t\t\t1.414213562373095e+00,\n\n\t\t\t-9.54e-07 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.05381e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t6.10352e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-4.75883e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.4055710e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t4.649162e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.35555e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\n\t\t\t5.245e-06 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.7166e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.56535e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.0103703e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-2.5527000e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.914356e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t-5.07355e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.0041e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.578057213145241e-01, 1.546020906725474e+00,\n\n\t\t\t-9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t1.02520e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t5.39303e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-1.011848e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.3659935e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t4.703045e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.15051e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\n\t\t\t4.768e-06 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t8.06808e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.287834e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-2.6310921e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t-4.048824e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-5.42164e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-3.2425e-05 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.033466836073424e-01, 1.662939224605090e+00,\n\n\t\t\t-1.431e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.62532e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.573563e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t3.3225536e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.737377e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.91685e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\n\t\t\t4.292e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.3828e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.61850e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.487225e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-2.7073860e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t-4.174709e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-5.76973e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-3.4809e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t2.504869601913055e-01, 1.763842528696710e+00,\n\n\t\t\t-1.431e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t9.5367e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.78609e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.161503e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.2754898e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t4.752159e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t8.66413e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\n\t\t\t3.815e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.718e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t5.22137e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t7.703304e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.7815342e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t-4.290581e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-6.11782e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-3.7670e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t1.989123673796580e-01, 1.847759065022573e+00,\n\n\t\t\t-1.907e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t9.0122e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t2.88486e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.774239e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.2248020e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t4.748821e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t8.38757e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\n\t\t\t3.338e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t-3.9577e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.88145e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t6.937027e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.8532982e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.395962e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-6.46591e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.0531e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t1.483359875383474e-01, 1.913880671464418e+00,\n\n\t\t\t-1.907e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.4400e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t1.91689e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-3.411293e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.1706810e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t4.728317e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.09669e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t5.579e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.338e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t-5.0545e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t2.59876e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t6.189346e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-2.9224873e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.489899e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-6.80923e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.3392e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t9.849140335716425e-02, 1.961570560806461e+00,\n\n\t\t\t-2.384e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.7724e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t8.8215e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.072189e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t3.1132698e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.691124e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.79152e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t2.861e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t-6.0558e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t1.37329e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.462170e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-2.9890060e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.570484e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-7.14302e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.6253e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.912684976946725e-02, 1.990369453344394e+00,\n\n\t\t\t3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\n\n\t\t\t3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\n\t\t\t7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\n\t\t\t4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\n\t\t\t-6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\n\t];\n\n\tvar NS = 12;\n\tvar NL = 36;\n\n\tvar win = [\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049690e-13,\n\t     6.423305872147839e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943412e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758252e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558783e-12,\n\t     8.371015190102974e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.456116108943412e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758252e-12,\n\t     -2.858043359288076e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558783e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347923e-13,\n\t     -6.423305872147843e-13,\n\t     -9.400849094049696e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049694e-13,\n\t     -6.423305872147840e-13,\n\t     -2.382191739347918e-13,\n\t     ],\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049688e-13,\n\t     6.423305872147841e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943413e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758253e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558782e-12,\n\t     8.371015190102975e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.461314069809755e-12,\n\t     -4.921085770524055e-12,\n\t     -4.343405037091838e-12,\n\t     -3.732668368707687e-12,\n\t     -3.093523840190885e-12,\n\t     -2.430835727329465e-12,\n\t     -1.734679010007751e-12,\n\t     -9.748253656609281e-13,\n\t     -2.797435120168326e-13,\n\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     -2.283748241799531e-13,\n\t     -4.037858874020686e-13,\n\t     -2.146547464825323e-13,\n\t     ],\n\t    [\n\t     1.316524975873958e-01, /* win[SHORT_TYPE] */\n\t     4.142135623730950e-01,\n\t     7.673269879789602e-01,\n\n\t     1.091308501069271e+00, /* tantab_l */\n\t     1.303225372841206e+00,\n\t     1.569685577117490e+00,\n\t     1.920982126971166e+00,\n\t     2.414213562373094e+00,\n\t     3.171594802363212e+00,\n\t     4.510708503662055e+00,\n\t     7.595754112725146e+00,\n\t     2.290376554843115e+01,\n\n\t     0.98480775301220802032, /* cx */\n\t     0.64278760968653936292,\n\t     0.34202014332566882393,\n\t     0.93969262078590842791,\n\t     -0.17364817766693030343,\n\t     -0.76604444311897790243,\n\t     0.86602540378443870761,\n\t     0.500000000000000e+00,\n\n\t     -5.144957554275265e-01, /* ca */\n\t     -4.717319685649723e-01,\n\t     -3.133774542039019e-01,\n\t     -1.819131996109812e-01,\n\t     -9.457419252642064e-02,\n\t     -4.096558288530405e-02,\n\t     -1.419856857247115e-02,\n\t     -3.699974673760037e-03,\n\n\t     8.574929257125442e-01, /* cs */\n\t     8.817419973177052e-01,\n\t     9.496286491027329e-01,\n\t     9.833145924917901e-01,\n\t     9.955178160675857e-01,\n\t     9.991605581781475e-01,\n\t     9.998991952444470e-01,\n\t     9.999931550702802e-01,\n\t     ],\n\t    [\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     2.283748241799531e-13,\n\t     4.037858874020686e-13,\n\t     2.146547464825323e-13,\n\n\t     5.461314069809755e-12,\n\t     4.921085770524055e-12,\n\t     4.343405037091838e-12,\n\t     3.732668368707687e-12,\n\t     3.093523840190885e-12,\n\t     2.430835727329466e-12,\n\t     1.734679010007751e-12,\n\t     9.748253656609281e-13,\n\t     2.797435120168326e-13,\n\n\t     -5.456116108943413e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758253e-12,\n\t     -2.858043359288075e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558782e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347913e-13,\n\t     -6.423305872147834e-13,\n\t     -9.400849094049688e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049688e-13,\n\t     -6.423305872147841e-13,\n\t     -2.382191739347918e-13,\n\t     ]\n\t];\n\n\tvar tantab_l = win[Encoder.SHORT_TYPE];\n\tvar cx = win[Encoder.SHORT_TYPE];\n\tvar ca = win[Encoder.SHORT_TYPE];\n\tvar cs = win[Encoder.SHORT_TYPE];\n\n\t/**\n\t * new IDCT routine written by Takehiro TOMINAGA\n\t *\n\t * PURPOSE: Overlapping window on PCM samples<BR>\n\t *\n\t * SEMANTICS:<BR>\n\t * 32 16-bit pcm samples are scaled to fractional 2's complement and\n\t * concatenated to the end of the window buffer #x#. The updated window\n\t * buffer #x# is then windowed by the analysis window #c# to produce the\n\t * windowed sample #z#\n\t */\n\tvar order = [\n\t    0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\n\t    2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\n\t];\n\n\t/**\n\t * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\n\t */\n\tfunction window_subband(x1, x1Pos, a) {\n\t\tvar wp = 10;\n\n\t\tvar x2 = x1Pos + 238 - 14 - 286;\n\n\t\tfor (var i = -15; i < 0; i++) {\n\t\t\tvar w, s, t;\n\n\t\t\tw = enwindow[wp + -10];\n\t\t\ts = x1[x2 + -224] * w;\n\t\t\tt = x1[x1Pos + 224] * w;\n\t\t\tw = enwindow[wp + -9];\n\t\t\ts += x1[x2 + -160] * w;\n\t\t\tt += x1[x1Pos + 160] * w;\n\t\t\tw = enwindow[wp + -8];\n\t\t\ts += x1[x2 + -96] * w;\n\t\t\tt += x1[x1Pos + 96] * w;\n\t\t\tw = enwindow[wp + -7];\n\t\t\ts += x1[x2 + -32] * w;\n\t\t\tt += x1[x1Pos + 32] * w;\n\t\t\tw = enwindow[wp + -6];\n\t\t\ts += x1[x2 + 32] * w;\n\t\t\tt += x1[x1Pos + -32] * w;\n\t\t\tw = enwindow[wp + -5];\n\t\t\ts += x1[x2 + 96] * w;\n\t\t\tt += x1[x1Pos + -96] * w;\n\t\t\tw = enwindow[wp + -4];\n\t\t\ts += x1[x2 + 160] * w;\n\t\t\tt += x1[x1Pos + -160] * w;\n\t\t\tw = enwindow[wp + -3];\n\t\t\ts += x1[x2 + 224] * w;\n\t\t\tt += x1[x1Pos + -224] * w;\n\n\t\t\tw = enwindow[wp + -2];\n\t\t\ts += x1[x1Pos + -256] * w;\n\t\t\tt -= x1[x2 + 256] * w;\n\t\t\tw = enwindow[wp + -1];\n\t\t\ts += x1[x1Pos + -192] * w;\n\t\t\tt -= x1[x2 + 192] * w;\n\t\t\tw = enwindow[wp + 0];\n\t\t\ts += x1[x1Pos + -128] * w;\n\t\t\tt -= x1[x2 + 128] * w;\n\t\t\tw = enwindow[wp + 1];\n\t\t\ts += x1[x1Pos + -64] * w;\n\t\t\tt -= x1[x2 + 64] * w;\n\t\t\tw = enwindow[wp + 2];\n\t\t\ts += x1[x1Pos + 0] * w;\n\t\t\tt -= x1[x2 + 0] * w;\n\t\t\tw = enwindow[wp + 3];\n\t\t\ts += x1[x1Pos + 64] * w;\n\t\t\tt -= x1[x2 + -64] * w;\n\t\t\tw = enwindow[wp + 4];\n\t\t\ts += x1[x1Pos + 128] * w;\n\t\t\tt -= x1[x2 + -128] * w;\n\t\t\tw = enwindow[wp + 5];\n\t\t\ts += x1[x1Pos + 192] * w;\n\t\t\tt -= x1[x2 + -192] * w;\n\n\t\t\t/*\n\t\t\t * this multiplyer could be removed, but it needs more 256 FLOAT\n\t\t\t * data. thinking about the data cache performance, I think we\n\t\t\t * should not use such a huge table. tt 2000/Oct/25\n\t\t\t */\n\t\t\ts *= enwindow[wp + 6];\n\t\t\tw = t - s;\n\t\t\ta[30 + i * 2] = t + s;\n\t\t\ta[31 + i * 2] = enwindow[wp + 7] * w;\n\t\t\twp += 18;\n\t\t\tx1Pos--;\n\t\t\tx2++;\n\t\t}\n\t\t{\n\t\t\tvar s, t, u, v;\n\t\t\tt = x1[x1Pos + -16] * enwindow[wp + -10];\n\t\t\ts = x1[x1Pos + -32] * enwindow[wp + -2];\n\t\t\tt += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n\t\t\ts += x1[x1Pos + -96] * enwindow[wp + -1];\n\t\t\tt += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n\t\t\ts += x1[x1Pos + -160] * enwindow[wp + 0];\n\t\t\tt += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n\t\t\ts += x1[x1Pos + -224] * enwindow[wp + 1];\n\t\t\tt += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n\t\t\ts -= x1[x1Pos + 32] * enwindow[wp + 2];\n\t\t\tt += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n\t\t\ts -= x1[x1Pos + 96] * enwindow[wp + 3];\n\t\t\tt += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n\t\t\ts -= x1[x1Pos + 160] * enwindow[wp + 4];\n\t\t\tt += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n\t\t\ts -= x1[x1Pos + 224];\n\n\t\t\tu = s - t;\n\t\t\tv = s + t;\n\n\t\t\tt = a[14];\n\t\t\ts = a[15] - t;\n\n\t\t\ta[31] = v + t; /* A0 */\n\t\t\ta[30] = u + s; /* A1 */\n\t\t\ta[15] = u - s; /* A2 */\n\t\t\ta[14] = v - t; /* A3 */\n\t\t}\n\t\t{\n\t\t\tvar xr;\n\t\t\txr = a[28] - a[0];\n\t\t\ta[0] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -2 * 18 + 7];\n\t\t\txr = a[29] - a[1];\n\t\t\ta[1] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -2 * 18 + 7];\n\n\t\t\txr = a[26] - a[2];\n\t\t\ta[2] += a[26];\n\t\t\ta[26] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[27] - a[3];\n\t\t\ta[3] += a[27];\n\t\t\ta[27] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = a[24] - a[4];\n\t\t\ta[4] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -6 * 18 + 7];\n\t\t\txr = a[25] - a[5];\n\t\t\ta[5] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -6 * 18 + 7];\n\n\t\t\txr = a[22] - a[6];\n\t\t\ta[6] += a[22];\n\t\t\ta[22] = xr * Util.SQRT2;\n\t\t\txr = a[23] - a[7];\n\t\t\ta[7] += a[23];\n\t\t\ta[23] = xr * Util.SQRT2 - a[7];\n\t\t\ta[7] -= a[6];\n\t\t\ta[22] -= a[7];\n\t\t\ta[23] -= a[22];\n\n\t\t\txr = a[6];\n\t\t\ta[6] = a[31] - xr;\n\t\t\ta[31] = a[31] + xr;\n\t\t\txr = a[7];\n\t\t\ta[7] = a[30] - xr;\n\t\t\ta[30] = a[30] + xr;\n\t\t\txr = a[22];\n\t\t\ta[22] = a[15] - xr;\n\t\t\ta[15] = a[15] + xr;\n\t\t\txr = a[23];\n\t\t\ta[23] = a[14] - xr;\n\t\t\ta[14] = a[14] + xr;\n\n\t\t\txr = a[20] - a[8];\n\t\t\ta[8] += a[20];\n\t\t\ta[20] = xr * enwindow[wp + -10 * 18 + 7];\n\t\t\txr = a[21] - a[9];\n\t\t\ta[9] += a[21];\n\t\t\ta[21] = xr * enwindow[wp + -10 * 18 + 7];\n\n\t\t\txr = a[18] - a[10];\n\t\t\ta[10] += a[18];\n\t\t\ta[18] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[19] - a[11];\n\t\t\ta[11] += a[19];\n\t\t\ta[19] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[16] - a[12];\n\t\t\ta[12] += a[16];\n\t\t\ta[16] = xr * enwindow[wp + -14 * 18 + 7];\n\t\t\txr = a[17] - a[13];\n\t\t\ta[13] += a[17];\n\t\t\ta[17] = xr * enwindow[wp + -14 * 18 + 7];\n\n\t\t\txr = -a[20] + a[24];\n\t\t\ta[20] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = -a[21] + a[25];\n\t\t\ta[21] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[4] - a[8];\n\t\t\ta[4] += a[8];\n\t\t\ta[8] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[5] - a[9];\n\t\t\ta[5] += a[9];\n\t\t\ta[9] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[0] - a[12];\n\t\t\ta[0] += a[12];\n\t\t\ta[12] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[1] - a[13];\n\t\t\ta[1] += a[13];\n\t\t\ta[13] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[16] - a[28];\n\t\t\ta[16] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = -a[17] + a[29];\n\t\t\ta[17] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = Util.SQRT2 * (a[2] - a[10]);\n\t\t\ta[2] += a[10];\n\t\t\ta[10] = xr;\n\t\t\txr = Util.SQRT2 * (a[3] - a[11]);\n\t\t\ta[3] += a[11];\n\t\t\ta[11] = xr;\n\t\t\txr = Util.SQRT2 * (-a[18] + a[26]);\n\t\t\ta[18] += a[26];\n\t\t\ta[26] = xr - a[18];\n\t\t\txr = Util.SQRT2 * (-a[19] + a[27]);\n\t\t\ta[19] += a[27];\n\t\t\ta[27] = xr - a[19];\n\n\t\t\txr = a[2];\n\t\t\ta[19] -= a[3];\n\t\t\ta[3] -= xr;\n\t\t\ta[2] = a[31] - xr;\n\t\t\ta[31] += xr;\n\t\t\txr = a[3];\n\t\t\ta[11] -= a[19];\n\t\t\ta[18] -= xr;\n\t\t\ta[3] = a[30] - xr;\n\t\t\ta[30] += xr;\n\t\t\txr = a[18];\n\t\t\ta[27] -= a[11];\n\t\t\ta[19] -= xr;\n\t\t\ta[18] = a[15] - xr;\n\t\t\ta[15] += xr;\n\n\t\t\txr = a[19];\n\t\t\ta[10] -= xr;\n\t\t\ta[19] = a[14] - xr;\n\t\t\ta[14] += xr;\n\t\t\txr = a[10];\n\t\t\ta[11] -= xr;\n\t\t\ta[10] = a[23] - xr;\n\t\t\ta[23] += xr;\n\t\t\txr = a[11];\n\t\t\ta[26] -= xr;\n\t\t\ta[11] = a[22] - xr;\n\t\t\ta[22] += xr;\n\t\t\txr = a[26];\n\t\t\ta[27] -= xr;\n\t\t\ta[26] = a[7] - xr;\n\t\t\ta[7] += xr;\n\n\t\t\txr = a[27];\n\t\t\ta[27] = a[6] - xr;\n\t\t\ta[6] += xr;\n\n\t\t\txr = Util.SQRT2 * (a[0] - a[4]);\n\t\t\ta[0] += a[4];\n\t\t\ta[4] = xr;\n\t\t\txr = Util.SQRT2 * (a[1] - a[5]);\n\t\t\ta[1] += a[5];\n\t\t\ta[5] = xr;\n\t\t\txr = Util.SQRT2 * (a[16] - a[20]);\n\t\t\ta[16] += a[20];\n\t\t\ta[20] = xr;\n\t\t\txr = Util.SQRT2 * (a[17] - a[21]);\n\t\t\ta[17] += a[21];\n\t\t\ta[21] = xr;\n\n\t\t\txr = -Util.SQRT2 * (a[8] - a[12]);\n\t\t\ta[8] += a[12];\n\t\t\ta[12] = xr - a[8];\n\t\t\txr = -Util.SQRT2 * (a[9] - a[13]);\n\t\t\ta[9] += a[13];\n\t\t\ta[13] = xr - a[9];\n\t\t\txr = -Util.SQRT2 * (a[25] - a[29]);\n\t\t\ta[25] += a[29];\n\t\t\ta[29] = xr - a[25];\n\t\t\txr = -Util.SQRT2 * (a[24] + a[28]);\n\t\t\ta[24] -= a[28];\n\t\t\ta[28] = xr - a[24];\n\n\t\t\txr = a[24] - a[16];\n\t\t\ta[24] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\n\t\t\txr = a[25] - a[17];\n\t\t\ta[25] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[17] - a[1];\n\t\t\ta[17] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[1] - a[0];\n\t\t\ta[1] = xr;\n\t\t\txr = a[16] - xr;\n\t\t\ta[16] = xr;\n\t\t\txr = a[17] - xr;\n\t\t\ta[17] = xr;\n\t\t\txr = a[8] - xr;\n\t\t\ta[8] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[24] - xr;\n\t\t\ta[24] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[4] - xr;\n\t\t\ta[4] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[12] - xr;\n\t\t\ta[12] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[0];\n\t\t\ta[0] += a[31];\n\t\t\ta[31] -= xr;\n\t\t\txr = a[1];\n\t\t\ta[1] += a[30];\n\t\t\ta[30] -= xr;\n\t\t\txr = a[16];\n\t\t\ta[16] += a[15];\n\t\t\ta[15] -= xr;\n\t\t\txr = a[17];\n\t\t\ta[17] += a[14];\n\t\t\ta[14] -= xr;\n\t\t\txr = a[8];\n\t\t\ta[8] += a[23];\n\t\t\ta[23] -= xr;\n\t\t\txr = a[9];\n\t\t\ta[9] += a[22];\n\t\t\ta[22] -= xr;\n\t\t\txr = a[24];\n\t\t\ta[24] += a[7];\n\t\t\ta[7] -= xr;\n\t\t\txr = a[25];\n\t\t\ta[25] += a[6];\n\t\t\ta[6] -= xr;\n\t\t\txr = a[4];\n\t\t\ta[4] += a[27];\n\t\t\ta[27] -= xr;\n\t\t\txr = a[5];\n\t\t\ta[5] += a[26];\n\t\t\ta[26] -= xr;\n\t\t\txr = a[20];\n\t\t\ta[20] += a[11];\n\t\t\ta[11] -= xr;\n\t\t\txr = a[21];\n\t\t\ta[21] += a[10];\n\t\t\ta[10] -= xr;\n\t\t\txr = a[12];\n\t\t\ta[12] += a[19];\n\t\t\ta[19] -= xr;\n\t\t\txr = a[13];\n\t\t\ta[13] += a[18];\n\t\t\ta[18] -= xr;\n\t\t\txr = a[28];\n\t\t\ta[28] += a[3];\n\t\t\ta[3] -= xr;\n\t\t\txr = a[29];\n\t\t\ta[29] += a[2];\n\t\t\ta[2] -= xr;\n\t\t}\n\t}\n\n\t/**\n\t * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\n\t * there are 36 coefficents in the time domain and 18 in the frequency\n\t * domain.<BR>\n\t * In the case of short blocks (type 2) there are 3 transformations with\n\t * short length. This leads to 12 coefficents in the time and 6 in the\n\t * frequency domain. In this case the results are stored side by side in the\n\t * vector out[].\n\t *\n\t * New layer3\n\t */\n\tfunction mdct_short(inout, inoutPos) {\n\t\tfor (var l = 0; l < 3; l++) {\n\t\t\tvar tc0, tc1, tc2, ts0, ts1, ts2;\n\n\t\t\tts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t- inout[inoutPos + 5 * 3];\n\t\t\ttc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t- inout[inoutPos + 3 * 3];\n\t\t\ttc1 = ts0 + tc0;\n\t\t\ttc2 = ts0 - tc0;\n\n\t\t\tts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t+ inout[inoutPos + 2 * 3];\n\t\t\ttc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t+ inout[inoutPos + 0 * 3];\n\t\t\tts1 = ts0 + tc0;\n\t\t\tts2 = -ts0 + tc0;\n\n\t\t\ttc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\n\t\t\t/*\n\t\t\t * tritab_s[ 2 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\n\t\t\t/*\n\t\t\t * tritab_s[0 ]\n\t\t\t */\n\t\t\ttc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 2]\n\t\t\t */\n\t\t\tts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n\t\t\tinout[inoutPos + 3 * 1] = tc2 - ts1;\n\t\t\tinout[inoutPos + 3 * 2] = tc2 + ts1;\n\n\t\t\ttc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n\t\t\tts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 0]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 3] = tc1 + ts2;\n\t\t\tinout[inoutPos + 3 * 4] = tc1 - ts2;\n\n\t\t\tinoutPos++;\n\t\t}\n\t}\n\n\tfunction mdct_long(out, outPos, _in) {\n\t\tvar ct, st;\n\t\t{\n\t\t\tvar tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\n\t\t\t/* 1,2, 5,6, 9,10, 13,14, 17 */\n\t\t\ttc1 = _in[17] - _in[9];\n\t\t\ttc3 = _in[15] - _in[11];\n\t\t\ttc4 = _in[14] - _in[12];\n\t\t\tts5 = _in[0] + _in[8];\n\t\t\tts6 = _in[1] + _in[7];\n\t\t\tts7 = _in[2] + _in[6];\n\t\t\tts8 = _in[3] + _in[5];\n\n\t\t\tout[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\n\t\t\tst = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n\t\t\tct = (tc1 - tc3 - tc4) * cx[12 + 6];\n\t\t\tout[outPos + 5] = ct + st;\n\t\t\tout[outPos + 6] = ct - st;\n\n\t\t\ttc2 = (_in[16] - _in[10]) * cx[12 + 6];\n\t\t\tts6 = ts6 * cx[12 + 7] + _in[4];\n\t\t\tct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n\t\t\tst = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n\t\t\tout[outPos + 1] = ct + st;\n\t\t\tout[outPos + 2] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n\t\t\tst = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n\t\t\tout[outPos + 9] = ct + st;\n\t\t\tout[outPos + 10] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n\t\t\tst = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n\t\t\tout[outPos + 13] = ct + st;\n\t\t\tout[outPos + 14] = ct - st;\n\t\t}\n\t\t{\n\t\t\tvar ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n\n\t\t\tts1 = _in[8] - _in[0];\n\t\t\tts3 = _in[6] - _in[2];\n\t\t\tts4 = _in[5] - _in[3];\n\t\t\ttc5 = _in[17] + _in[9];\n\t\t\ttc6 = _in[16] + _in[10];\n\t\t\ttc7 = _in[15] + _in[11];\n\t\t\ttc8 = _in[14] + _in[12];\n\n\t\t\tout[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\n\t\t\tct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n\t\t\tst = (ts1 - ts3 + ts4) * cx[12 + 6];\n\t\t\tout[outPos + 11] = ct + st;\n\t\t\tout[outPos + 12] = ct - st;\n\n\t\t\tts2 = (_in[7] - _in[1]) * cx[12 + 6];\n\t\t\ttc6 = _in[13] - tc6 * cx[12 + 7];\n\t\t\tct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n\t\t\tst = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n\t\t\tout[outPos + 3] = ct + st;\n\t\t\tout[outPos + 4] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n\t\t\tst = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n\t\t\tout[outPos + 7] = ct + st;\n\t\t\tout[outPos + 8] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n\t\t\tst = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n\t\t\tout[outPos + 15] = ct + st;\n\t\t\tout[outPos + 16] = ct - st;\n\t\t}\n\t}\n\n\tthis.mdct_sub48 = function(gfc, w0, w1) {\n\t\tvar wk = w0;\n\t\tvar wkPos = 286;\n\t\t/* thinking cache performance, ch->gr loop is better than gr->ch loop */\n\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\t\t\t\tvar band;\n\t\t\t\tvar gi = (gfc.l3_side.tt[gr][ch]);\n\t\t\t\tvar mdct_enc = gi.xr;\n\t\t\t\tvar mdct_encPos = 0;\n\t\t\t\tvar samp = gfc.sb_sample[ch][1 - gr];\n\t\t\t\tvar sampPos = 0;\n\n\t\t\t\tfor (var k = 0; k < 18 / 2; k++) {\n\t\t\t\t\twindow_subband(wk, wkPos, samp[sampPos]);\n\t\t\t\t\twindow_subband(wk, wkPos + 32, samp[sampPos + 1]);\n\t\t\t\t\tsampPos += 2;\n\t\t\t\t\twkPos += 64;\n\t\t\t\t\t/*\n\t\t\t\t\t * Compensate for inversion in the analysis filter\n\t\t\t\t\t */\n\t\t\t\t\tfor (band = 1; band < 32; band += 2) {\n\t\t\t\t\t\tsamp[sampPos - 1][band] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Perform imdct of 18 previous subband samples + 18 current\n\t\t\t\t * subband samples\n\t\t\t\t */\n\t\t\t\tfor (band = 0; band < 32; band++, mdct_encPos += 18) {\n\t\t\t\t\tvar type = gi.block_type;\n\t\t\t\t\tvar band0 = gfc.sb_sample[ch][gr];\n\t\t\t\t\tvar band1 = gfc.sb_sample[ch][1 - gr];\n\t\t\t\t\tif (gi.mixed_block_flag != 0 && band < 2)\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\tif (gfc.amp_filter[band] < 1e-12) {\n\t\t\t\t\t\tArrays.fill(mdct_enc, mdct_encPos + 0,\n\t\t\t\t\t\t\t\tmdct_encPos + 18, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (gfc.amp_filter[band] < 1.0) {\n\t\t\t\t\t\t\tfor (var k = 0; k < 18; k++)\n\t\t\t\t\t\t\t\tband1[k][order[band]] *= gfc.amp_filter[band];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type == Encoder.SHORT_TYPE) {\n\t\t\t\t\t\t\tfor (var k = -NS / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar w = win[Encoder.SHORT_TYPE][k + 3];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band0[15 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[14 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[3 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band1[2 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[9 + k][order[band]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmdct_short(mdct_enc, mdct_encPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar work = new_float(18);\n\t\t\t\t\t\t\tfor (var k = -NL / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar a, b;\n\t\t\t\t\t\t\t\ta = win[type][k + 27]\n\t\t\t\t\t\t\t\t\t\t* band1[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t+ win[type][k + 36]\n\t\t\t\t\t\t\t\t\t\t* band1[8 - k][order[band]];\n\t\t\t\t\t\t\t\tb = win[type][k + 9]\n\t\t\t\t\t\t\t\t\t\t* band0[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t- win[type][k + 18]\n\t\t\t\t\t\t\t\t\t\t* band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\twork[k + 9] = a - b * tantab_l[3 + k + 9];\n\t\t\t\t\t\t\t\twork[k + 18] = a * tantab_l[3 + k + 9] + b;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmdct_long(mdct_enc, mdct_encPos, work);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * Perform aliasing reduction butterfly\n\t\t\t\t\t */\n\t\t\t\t\tif (type != Encoder.SHORT_TYPE && band != 0) {\n\t\t\t\t\t\tfor (var k = 7; k >= 0; --k) {\n\t\t\t\t\t\t\tvar bu, bd;\n\t\t\t\t\t\t\tbu = mdct_enc[mdct_encPos + k] * ca[20 + k]\n\t\t\t\t\t\t\t\t\t+ mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* cs[28 + k];\n\t\t\t\t\t\t\tbd = mdct_enc[mdct_encPos + k] * cs[28 + k]\n\t\t\t\t\t\t\t\t\t- mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* ca[20 + k];\n\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + -1 - k] = bu;\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k] = bd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twk = w1;\n\t\t\twkPos = 286;\n\t\t\tif (gfc.mode_gr == 1) {\n\t\t\t\tfor (var i = 0; i < 18; i++) {\n\t\t\t\t\tSystem.arraycopy(gfc.sb_sample[ch][1][i], 0,\n\t\t\t\t\t\t\tgfc.sb_sample[ch][0][i], 0, 32);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//package mp3;\n\n\nfunction III_psy_ratio() {\n\tthis.thm = new III_psy_xmin();\n\tthis.en = new III_psy_xmin();\n}\n\n\n/**\n * ENCDELAY The encoder delay.\n *\n * Minimum allowed is MDCTDELAY (see below)\n *\n * The first 96 samples will be attenuated, so using a value less than 96\n * will result in corrupt data for the first 96-ENCDELAY samples.\n *\n * suggested: 576 set to 1160 to sync with FhG.\n */\nEncoder.ENCDELAY = 576;\n/**\n * make sure there is at least one complete frame after the last frame\n * containing real data\n *\n * Using a value of 288 would be sufficient for a a very sophisticated\n * decoder that can decode granule-by-granule instead of frame by frame. But\n * lets not assume this, and assume the decoder will not decode frame N\n * unless it also has data for frame N+1\n */\nEncoder.POSTDELAY = 1152;\n\n/**\n * delay of the MDCT used in mdct.c original ISO routines had a delay of\n * 528! Takehiro's routines:\n */\nEncoder.MDCTDELAY = 48;\nEncoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\n\n/**\n * Most decoders, including the one we use, have a delay of 528 samples.\n */\nEncoder.DECDELAY = 528;\n\n/**\n * number of subbands\n */\nEncoder.SBLIMIT = 32;\n\n/**\n * parition bands bands\n */\nEncoder.CBANDS = 64;\n\n/**\n * number of critical bands/scale factor bands where masking is computed\n */\nEncoder.SBPSY_l = 21;\nEncoder.SBPSY_s = 12;\n\n/**\n * total number of scalefactor bands encoded\n */\nEncoder.SBMAX_l = 22;\nEncoder.SBMAX_s = 13;\nEncoder.PSFB21 = 6;\nEncoder.PSFB12 = 6;\n\n/**\n * FFT sizes\n */\nEncoder.BLKSIZE = 1024;\nEncoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\nEncoder.BLKSIZE_s = 256;\nEncoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\n\nEncoder.NORM_TYPE = 0;\nEncoder.START_TYPE = 1;\nEncoder.SHORT_TYPE = 2;\nEncoder.STOP_TYPE = 3;\n\n/**\n * <PRE>\n * Mode Extention:\n * When we are in stereo mode, there are 4 possible methods to store these\n * two channels. The stereo modes -m? are using a subset of them.\n *\n *  -ms: MPG_MD_LR_LR\n *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\n *  -mf: MPG_MD_MS_LR\n *  -mi: all\n * </PRE>\n */\nEncoder.MPG_MD_LR_LR = 0;\nEncoder.MPG_MD_LR_I = 1;\nEncoder.MPG_MD_MS_LR = 2;\nEncoder.MPG_MD_MS_I = 3;\n\nEncoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\n    -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\n    0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n\nfunction Encoder() {\n\n    var FFTOFFSET = Encoder.FFTOFFSET;\n    var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\n    //BitStream bs;\n    //PsyModel psy;\n    //VBRTag vbr;\n    //QuantizePVT qupvt;\n    var bs = null;\n    this.psy = null;\n    var psy = null;\n    var vbr = null;\n    var qupvt = null;\n\n    //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n    //    VBRTag vbr) {\n    this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n    };\n\n    var newMDCT = new NewMDCT();\n\n    /***********************************************************************\n     *\n     * encoder and decoder delays\n     *\n     ***********************************************************************/\n\n    /**\n     * <PRE>\n     * layer III enc->dec delay:  1056 (1057?)   (observed)\n     * layer  II enc->dec delay:   480  (481?)   (observed)\n     *\n     * polyphase 256-16             (dec or enc)        = 240\n     * mdct      256+32  (9*32)     (dec or enc)        = 288\n     * total:    512+16\n     *\n     * My guess is that delay of polyphase filterbank is actualy 240.5\n     * (there are technical reasons for this, see postings in mp3encoder).\n     * So total Encode+Decode delay = ENCDELAY + 528 + 1\n     * </PRE>\n     */\n\n\n    /**\n     * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\n     *\n     * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\n     */\n//private void adjust_ATH(final LameInternalFlags gfc) {\n    function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n\n        if (gfc.ATH.useAdjust == 0) {\n            gfc.ATH.adjust = 1.0;\n            /* no adjustment */\n            return;\n        }\n\n        /* jd - 2001 mar 12, 27, jun 30 */\n        /* loudness based on equal loudness curve; */\n        /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n            max_pow += gfc.loudness_sq[0][1];\n            gr2_max += gfc.loudness_sq[1][1];\n        } else {\n            max_pow += max_pow;\n            gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n            max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5;\n        /* max_pow approaches 1.0 for full band noise */\n\n        /* jd - 2001 mar 31, jun 30 */\n        /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP;\n\n        /*\n         * adjust ATH depending on range of maximum value\n         */\n\n        /* jd - 2001 feb27, mar12,20, jun30, jul22 */\n        /* continuous curves based on approximation */\n        /* to GB's original values. */\n        /* For an increase in approximate loudness, */\n        /* set ATH adjust to adjust_limit immediately */\n        /* after a delay of one frame. */\n        /* For a loudness decrease, reduce ATH adjust */\n        /* towards adjust_limit gradually. */\n        /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\n            if (gfc.ATH.adjust >= 1.0) {\n                gfc.ATH.adjust = 1.0;\n            } else {\n                /* preceding frame has lower ATH adjust; */\n                /* ascend only to the preceding adjust_limit */\n                /* in case there is leading low volume */\n                if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                    gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                }\n            }\n            gfc.ATH.adjustLimit = 1.0;\n        } else { /* adjustment curve */\n            /* about 32 dB maximum adjust (0.000625) */\n            var adj_lim_new = 31.98 * max_pow + 0.000625;\n            if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\n                gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n                if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\n                    gfc.ATH.adjust = adj_lim_new;\n                }\n            } else { /* ascend */\n                if (gfc.ATH.adjustLimit >= adj_lim_new) {\n                    gfc.ATH.adjust = adj_lim_new;\n                } else {\n                    /* preceding frame has lower ATH adjust; */\n                    /* ascend only to the preceding adjust_limit */\n                    if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                        gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                    }\n                }\n            }\n            gfc.ATH.adjustLimit = adj_lim_new;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  some simple statistics\n     *\n     *  bitrate index 0: free bitrate . not allowed in VBR mode\n     *  : bitrates, kbps depending on MPEG version\n     *  bitrate index 15: forbidden\n     *\n     *  mode_ext:\n     *  0:  LR\n     *  1:  LR-i\n     *  2:  MS\n     *  3:  MS-i\n     * </PRE>\n     */\n    function updateStats(gfc) {\n        var gr, ch;\n\n        /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++;\n\n        /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n            gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\n            gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n                if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\n                    bt = 4;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n                gfc.bitrate_blockType_Hist[15][bt]++;\n                gfc.bitrate_blockType_Hist[15][5]++;\n            }\n        }\n    }\n\n    function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n\n        var ch, gr;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* prime the MDCT/polyphase filterbank with a short block */\n            var i, j;\n            var primebuff0 = new_float(286 + 1152 + 576);\n            var primebuff1 = new_float(286 + 1152 + 576);\n            gfc.lame_encode_frame_init = 1;\n            for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n                if (i < 576 * gfc.mode_gr) {\n                    primebuff0[i] = 0;\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = 0;\n                } else {\n                    primebuff0[i] = inbuf[0][j];\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = inbuf[1][j];\n                    ++j;\n                }\n            }\n            /* polyphase filtering / mdct */\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n                }\n            }\n            newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\n\n            /* check FFT will not use a negative starting offset */\n            /* check if we have enough data for FFT */\n            /* check if we have enough data for polyphase filterbank */\n        }\n\n    }\n\n    /**\n     * <PRE>\n     * encodeframe()           Layer 3\n     *\n     * encode a single frame\n     *\n     *\n     *    lame_encode_frame()\n     *\n     *\n     *                           gr 0            gr 1\n     *    inbuf:           |--------------|--------------|--------------|\n     *\n     *\n     *    Polyphase (18 windows, each shifted 32)\n     *    gr 0:\n     *    window1          <----512---.\n     *    window18                 <----512---.\n     *\n     *    gr 1:\n     *    window1                         <----512---.\n     *    window18                                <----512---.\n     *\n     *\n     *\n     *    MDCT output:  |--------------|--------------|--------------|\n     *\n     *    FFT's                    <---------1024---------.\n     *                                             <---------1024-------.\n     *\n     *\n     *\n     *        inbuf = buffer of PCM data size=MP3 framesize\n     *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\n     *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\n     *\n     *        psy-model FFT has a 1 granule delay, so we feed it data for the\n     *        next granule.\n     *        FFT is centered over granule:  224+576+224\n     *        So FFT starts at:   576-224-MDCTDELAY\n     *\n     *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\n     *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\n     *\n     *        MPEG2:  polyphase first window:  [0..511]\n     *                          18th window:   [544..1055]          (1056)\n     *        MPEG1:            36th window:   [1120..1631]         (1632)\n     *                data needed:  512+framesize-32\n     *\n     *        A close look newmdct.c shows that the polyphase filterbank\n     *        only uses data from [0..510] for each window.  Perhaps because the window\n     *        used by the filterbank is zero for the last point, so Takehiro's\n     *        code doesn't bother to compute with it.\n     *\n     *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\n     *\n     * </PRE>\n     */\n\n\n    this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]);\n        /*\n         * LR masking &\n         * energy\n         */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]);\n        /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio();\n        //III_psy_ratio masking[][];\n        var masking;\n        /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]];\n\n//float[][] pe_use;\n        var pe_use;\n\n        var ch, gr;\n\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* first run? */\n            lame_encode_frame_init(gfp, inbuf);\n\n        }\n\n        /********************** padding *****************************/\n        /**\n         * <PRE>\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\n         * by Martin Sieler, Ralph Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         * </PRE>\n         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\n            gfc.slot_lag += gfp.out_samplerate;\n            gfc.padding = 1;\n        }\n\n        /****************************************\n         * Stage 1: psychoacoustic model *\n         ****************************************/\n\n        if (gfc.psymodel != 0) {\n            /*\n             * psychoacoustic model psy model has a 1 granule (576) delay that\n             * we must compensate for (mt 6/99).\n             */\n            var ret;\n            var bufp = [null, null];\n            /* address of beginning of left & right granule */\n            var bufpPos = 0;\n            /* address of beginning of left & right granule */\n            var blocktype = new_int(2);\n\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    bufp[ch] = inbuf[ch];\n                    bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n                }\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n                    ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                } else {\n                    ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                }\n                if (ret != 0)\n                    return -4;\n\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\n                    if (ms_ener_ratio[gr] > 0)\n                        ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\n                }\n\n                /* block type flags */\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var cod_info = gfc.l3_side.tt[gr][ch];\n                    cod_info.block_type = blocktype[ch];\n                    cod_info.mixed_block_flag = 0;\n                }\n            }\n        } else {\n            /* no psy model */\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\n                    gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\n                    pe_MS[gr][ch] = pe[gr][ch] = 700;\n                }\n        }\n\n        /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc);\n\n        /****************************************\n         * Stage 2: MDCT *\n         ****************************************/\n\n        /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\n\n        /****************************************\n         * Stage 3: MS/LR decision *\n         ****************************************/\n\n        /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n\n        if (gfp.force_ms) {\n            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            /*\n             * ms_ratio = is scaled, for historical reasons, to look like a\n             * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\n             * uncorrelated\n             */\n\n            /**\n             * <PRE>\n             * [0] and [1] are the results for the two granules in MPEG-1,\n             * in MPEG-2 it's only a faked averaging of the same value\n             * _prev is the value of the last granule of the previous frame\n             * _next is the value of the first granule of the next frame\n             * </PRE>\n             */\n\n            var sum_pe_MS = 0.;\n            var sum_pe_LR = 0.;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    sum_pe_MS += pe_MS[gr][ch];\n                    sum_pe_LR += pe[gr][ch];\n                }\n            }\n\n            /* based on PE: M/S coding would not use much more bits than L/R */\n            if (sum_pe_MS <= 1.00 * sum_pe_LR) {\n\n                var gi0 = gfc.l3_side.tt[0];\n                var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\n\n                if (gi0[0].block_type == gi0[1].block_type\n                    && gi1[0].block_type == gi1[1].block_type) {\n\n                    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n                }\n            }\n        }\n\n        /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n            masking = masking_MS;\n            /* use MS masking */\n            pe_use = pe_MS;\n        } else {\n            masking = masking_LR;\n            /* use LR masking */\n            pe_use = pe;\n        }\n\n        /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\n                    gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\n                    gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\n                    gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\n                    System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0,\n                        gfc.pinfo.xr[gr][ch], 0, 576);\n                    /*\n                     * in psymodel, LR and MS data was stored in pinfo. switch\n                     * to MS data:\n                     */\n                    if (gfc.mode_ext == MPG_MD_MS_LR) {\n                        gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\n                        System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0,\n                            gfc.pinfo.energy[gr][ch], 0,\n                            gfc.pinfo.energy[gr][ch].length);\n                    }\n                }\n            }\n        }\n\n        /****************************************\n         * Stage 4: quantization loop *\n         ****************************************/\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n\n            var i;\n            var f;\n\n            for (i = 0; i < 18; i++)\n                gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n\n            f = 0.0;\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    f += pe_use[gr][ch];\n            gfc.nsPsy.pefirbuf[18] = f;\n\n            f = gfc.nsPsy.pefirbuf[9];\n            for (i = 0; i < 9; i++)\n                f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\n                    * Encoder.fircoef[i];\n\n            f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    pe_use[gr][ch] *= f;\n                }\n            }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\n\n        /****************************************\n         * Stage 5: bitstream formatting *\n         ****************************************/\n\n        /* write the frame to the bitstream */\n        bs.format_bitstream(gfp);\n\n        /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n\n        if (gfp.bWriteVbrTag)\n            vbr.addVbrFrame(gfp);\n\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var j;\n                for (j = 0; j < FFTOFFSET; j++)\n                    gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j\n                    + gfp.framesize];\n                for (j = FFTOFFSET; j < 1600; j++) {\n                    gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\n                }\n            }\n            qupvt.set_frame_pinfo(gfp, masking);\n        }\n\n        updateStats(gfc);\n\n        return mp3count;\n    }\n}\n\n\n//package mp3;\n\nfunction VBRSeekInfo() {\n    /**\n     * What we have seen so far.\n     */\n    this.sum = 0;\n    /**\n     * How many frames we have seen in this chunk.\n     */\n    this.seen = 0;\n    /**\n     * How many frames we want to collect into one chunk.\n     */\n    this.want = 0;\n    /**\n     * Actual position in our bag.\n     */\n    this.pos = 0;\n    /**\n     * Size of our bag.\n     */\n    this.size = 0;\n    /**\n     * Pointer to our bag.\n     */\n    this.bag = null;\n    this.nVbrNumFrames = 0;\n    this.nBytesWritten = 0;\n    /* VBR tag data */\n    this.TotalFrameSize = 0;\n}\n\n\n\nfunction IIISideInfo() {\n    this.tt = [[null, null], [null, null]];\n    this.main_data_begin = 0;\n    this.private_bits = 0;\n    this.resvDrain_pre = 0;\n    this.resvDrain_post = 0;\n    this.scfsi = [new_int(4), new_int(4)];\n\n    for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n            this.tt[gr][ch] = new GrInfo();\n        }\n    }\n}\n\n\nfunction III_psy_xmin() {\n    this.l = new_float(Encoder.SBMAX_l);\n    this.s = new_float_n([Encoder.SBMAX_s, 3]);\n\n    var self = this;\n    this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n            for (var j = 0; j < 3; j++) {\n                self.s[i][j] = iii_psy_xmin.s[i][j];\n            }\n        }\n    }\n}\n\n\n\n//package mp3;\n\n/**\n * Variables used for --nspsytune\n *\n * @author Ken\n *\n */\nfunction NsPsy() {\n    this.last_en_subshort = new_float_n([4, 9]);\n    this.lastAttacks = new_int(4);\n    this.pefirbuf = new_float(19);\n    this.longfact = new_float(Encoder.SBMAX_l);\n    this.shortfact = new_float(Encoder.SBMAX_s);\n\n    /**\n     * short block tuning\n     */\n    this.attackthre = 0.;\n    this.attackthre_s = 0.;\n}\n\n\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\n\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\n/*\n *      psymodel.c\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 2001-2002 Naoki Shibata\n *      Copyright (c) 2000-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2008 Robert Hegemann\n *      Copyright (c) 2000-2005 Gabriel Bouvigne\n *      Copyright (c) 2000-2005 Alexander Leidinger\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\n\n\n/*\n PSYCHO ACOUSTICS\n\n\n This routine computes the psycho acoustics, delayed by one granule.\n\n Input: buffer of PCM data (1024 samples).\n\n This window should be centered over the 576 sample granule window.\n The routine will compute the psycho acoustics for\n this granule, but return the psycho acoustics computed\n for the *previous* granule.  This is because the block\n type of the previous granule can only be determined\n after we have computed the psycho acoustics for the following\n granule.\n\n Output:  maskings and energies for each scalefactor band.\n block type, PE, and some correlation measures.\n The PE is used by CBR modes to determine if extra bits\n from the bit reservoir should be used.  The correlation\n measures are used to determine mid/side or regular stereo.\n */\n/*\n Notation:\n\n barks:  a non-linear frequency scale.  Mapping from frequency to\n barks is given by freq2bark()\n\n scalefactor bands: The spectrum (frequencies) are broken into\n SBMAX \"scalefactor bands\".  Thes bands\n are determined by the MPEG ISO spec.  In\n the noise shaping/quantization code, we allocate\n bits among the partition bands to achieve the\n best possible quality\n\n partition bands:   The spectrum is also broken into about\n 64 \"partition bands\".  Each partition\n band is about .34 barks wide.  There are about 2-5\n partition bands for each scalefactor band.\n\n LAME computes all psycho acoustic information for each partition\n band.  Then at the end of the computations, this information\n is mapped to scalefactor bands.  The energy in each scalefactor\n band is taken as the sum of the energy in all partition bands\n which overlap the scalefactor band.  The maskings can be computed\n in the same way (and thus represent the average masking in that band)\n or by taking the minmum value multiplied by the number of\n partition bands used (which represents a minimum masking in that band).\n */\n/*\n The general outline is as follows:\n\n 1. compute the energy in each partition band\n 2. compute the tonality in each partition band\n 3. compute the strength of each partion band \"masker\"\n 4. compute the masking (via the spreading function applied to each masker)\n 5. Modifications for mid/side masking.\n\n Each partition band is considiered a \"masker\".  The strength\n of the i'th masker in band j is given by:\n\n s3(bark(i)-bark(j))*strength(i)\n\n The strength of the masker is a function of the energy and tonality.\n The more tonal, the less masking.  LAME uses a simple linear formula\n (controlled by NMT and TMN) which says the strength is given by the\n energy divided by a linear function of the tonality.\n */\n/*\n s3() is the \"spreading function\".  It is given by a formula\n determined via listening tests.\n\n The total masking in the j'th partition band is the sum over\n all maskings i.  It is thus given by the convolution of\n the strength with s3(), the \"spreading function.\"\n\n masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\n\n where \"o\" = convolution operator.  s3 is given by a formula determined\n via listening tests.  It is normalized so that s3 o 1 = 1.\n\n Note: instead of a simple convolution, LAME also has the\n option of using \"additive masking\"\n\n The most critical part is step 2, computing the tonality of each\n partition band.  LAME has two tonality estimators.  The first\n is based on the ISO spec, and measures how predictiable the\n signal is over time.  The more predictable, the more tonal.\n The second measure is based on looking at the spectrum of\n a single granule.  The more peaky the spectrum, the more\n tonal.  By most indications, the latter approach is better.\n\n Finally, in step 5, the maskings for the mid and side\n channel are possibly increased.  Under certain circumstances,\n noise in the mid & side channels is assumed to also\n be masked by strong maskers in the L or R channels.\n\n\n Other data computed by the psy-model:\n\n ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\n ms_ratio_next   side-channel / mid-channel masking ratio for this granule\n\n percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\n much pre-echo is in the previous granule\n percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\n energy[4]             L,R,M,S energy in each channel, prev granule\n blocktype_d[2]        block type to use for previous granule\n */\n//package mp3;\n\n//import java.util.Arrays;\n\n\nfunction PsyModel() {\n\n    var fft = new FFT();\n\n    var LOG10 = 2.30258509299404568402;\n\n    var rpelev = 2;\n    var rpelev2 = 16;\n    var rpelev_s = 2;\n    var rpelev2_s = 16;\n\n    /* size of each partition band, in barks: */\n    var DELBARK = .34;\n\n    /* tuned for output level (sensitive to energy scale) */\n    var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\n\n    var temporalmask_sustain_sec = 0.01;\n\n    var NS_PREECHO_ATT0 = 0.8;\n    var NS_PREECHO_ATT1 = 0.6;\n    var NS_PREECHO_ATT2 = 0.3;\n\n    var NS_MSFIX = 3.5;\n\n    var NSATTACKTHRE = 4.4;\n    var NSATTACKTHRE_S = 25;\n\n    var NSFIRLEN = 21;\n\n    /* size of each partition band, in barks: */\n    var LN_TO_LOG10 = 0.2302585093;\n\n    function NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n    }\n\n    /**\n     * <PRE>\n     *       L3psycho_anal.  Compute psycho acoustics.\n     *\n     *       Data returned to the calling program must be delayed by one\n     *       granule.\n     *\n     *       This is done in two places.\n     *       If we do not need to know the blocktype, the copying\n     *       can be done here at the top of the program: we copy the data for\n     *       the last granule (computed during the last call) before it is\n     *       overwritten with the new data.  It looks like this:\n     *\n     *       0. static psymodel_data\n     *       1. calling_program_data = psymodel_data\n     *       2. compute psymodel_data\n     *\n     *       For data which needs to know the blocktype, the copying must be\n     *       done at the end of this loop, and the old values must be saved:\n     *\n     *       0. static psymodel_data_old\n     *       1. compute psymodel_data\n     *       2. compute possible block type of this granule\n     *       3. compute final block type of previous granule based on #2.\n     *       4. calling_program_data = psymodel_data_old\n     *       5. psymodel_data_old = psymodel_data\n     *     psycho_loudness_approx\n     *       jd - 2001 mar 12\n     *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\n     *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\n     *    returns: loudness^2 approximation, a positive value roughly tuned for a value\n     *             of 1.0 for signals near clipping.\n     *    notes:   When calibrated, feeding this function binary white noise at sample\n     *             values +32767 or -32768 should return values that approach 3.\n     *             ATHformula is used to approximate an equal loudness curve.\n     *    future:  Data indicates that the shape of the equal loudness curve varies\n     *             with intensity.  This function might be improved by using an equal\n     *             loudness curve shaped for typical playback levels (instead of the\n     *             ATH, that is shaped for the threshold).  A flexible realization might\n     *             simply bend the existing ATH curve to achieve the desired shape.\n     *             However, the potential gain may not be enough to justify an effort.\n     * </PRE>\n     */\n    function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0;\n        /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\n            loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        loudness_power *= VO_SCALE;\n\n        return loudness_power;\n    }\n\n    function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        /* FFT data for mid and side channel is derived from L & R */\n        else if (chn == 2) {\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n            for (var b = 2; b >= 0; --b) {\n                for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                    var l = wsamp_s[wsamp_sPos + 0][b][j];\n                    var r = wsamp_s[wsamp_sPos + 1][b][j];\n                    wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\n                    wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\n                }\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\n            var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n            fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\n            fftenergy_s[b][0] *= fftenergy_s[b][0];\n            for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n                var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 - j];\n                var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 + j];\n                fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                    * re + im * im) * 0.5);\n            }\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n\n        /*********************************************************************\n         * compute loudness approximation (used for ATH auto-level adjustment)\n         *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    /* mask_add optimization */\n    /* init the limit values used to avoid computing log in mask_add when it is not necessary */\n\n    /**\n     * <PRE>\n     *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\n     *\n     * abs(i)>8 is equivalent (as i is an integer) to\n     * abs(i)>=9\n     * i>=9 || i<=-9\n     * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\n     * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\n     * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\n     * exp10 is strictly increasing thus this is equivalent to\n     * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\n     * </PRE>\n     */\n\n    /**\n     * as in if(i>8)\n     */\n    var I1LIMIT = 8;\n    /**\n     * as in if(i>24) . changed 23\n     */\n    var I2LIMIT = 23;\n    /**\n     * as in if(m<15)\n     */\n    var MLIMIT = 15;\n\n    var ma_max_i1;\n    var ma_max_i2;\n    var ma_max_m;\n\n    /**\n     * This is the masking table:<BR>\n     * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\n     * After additive masking computation, 8dB are added, so final values are\n     * going from 8dB to 17.3dB\n     *\n     * pow(10, -0.0..-0.6)\n     */\n    var tab = [1.0, 0.79433, 0.63096, 0.63096,\n        0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n\n    function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\n    }\n\n    var table1 = [3.3246 * 3.3246,\n        3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\n        2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\n        2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\n        1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\n        1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\n        1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\n        1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\n        1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n\n    var table2 = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    var table3 = [2.35364 * 2.35364,\n        2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\n        2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\n        1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\n        1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\n        1.03826 * 1.03826];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n\n        if (m2 > m1) {\n            if (m2 < (m1 * ma_max_i2))\n                ratio = m2 / m1;\n            else\n                return (m1 + m2);\n        } else {\n            if (m1 >= (m2 * ma_max_i2))\n                return (m1 + m2);\n            ratio = m1 / m2;\n        }\n\n        /* Should always be true, just checking */\n\n        m1 += m2;\n        //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if ((b + 3) <= 3 + 3) {\n            /* approximately, 1 bark = 3 partitions */\n            /* 65% of the cases */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                /* 43% of the total */\n                return m1;\n            }\n\n            /* 22% of the total */\n            var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n            return m1 * table2[i];\n        }\n\n        /**\n         * <PRE>\n         * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\n         * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\n         * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\n         * </PRE>\n         */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n            m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n            m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        if (m1 < ma_max_m * m2) {\n            /* 3% of the total */\n            /* Originally if (m > 0) { */\n            if (m1 > m2) {\n                var f, r;\n\n                f = 1.0;\n                if (i <= 13)\n                    f = table3[i];\n\n                r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n                return m1 * ((table1[i] - f) * r + f);\n            }\n\n            if (i > 13)\n                return m1;\n\n            return m1 * table3[i];\n        }\n\n        /* 10% of total */\n        return m1 * table1[i];\n    }\n\n    var table2_ = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function vbrpsy_mask_add(m1, m2, b) {\n        var ratio;\n\n        if (m1 < 0) {\n            m1 = 0;\n        }\n        if (m2 < 0) {\n            m2 = 0;\n        }\n        if (m1 <= 0) {\n            return m2;\n        }\n        if (m2 <= 0) {\n            return m1;\n        }\n        if (m2 > m1) {\n            ratio = m2 / m1;\n        } else {\n            ratio = m1 / m2;\n        }\n        if (-2 <= b && b <= 2) {\n            /* approximately, 1 bark = 3 partitions */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                return m1 + m2;\n            } else {\n                var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n                return (m1 + m2) * table2_[i];\n            }\n        }\n        if (ratio < ma_max_i2) {\n            return m1 + m2;\n        }\n        if (m1 < m2) {\n            m1 = m2;\n        }\n        return m1;\n    }\n\n    /**\n     * compute interchannel masking effects\n     */\n    function calc_interchannel_masking(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        if (gfc.channels_out > 1) {\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                var l = gfc.thm[0].l[sb];\n                var r = gfc.thm[1].l[sb];\n                gfc.thm[0].l[sb] += r * ratio;\n                gfc.thm[1].l[sb] += l * ratio;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                for (var sblock = 0; sblock < 3; sblock++) {\n                    var l = gfc.thm[0].s[sb][sblock];\n                    var r = gfc.thm[1].s[sb][sblock];\n                    gfc.thm[0].s[sb][sblock] += r * ratio;\n                    gfc.thm[1].s[sb][sblock] += l * ratio;\n                }\n            }\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function msfix1(gfc) {\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            /* use this fix if L & R masking differs by 2db or less */\n            /* if db = 10*log10(x2/x1) < 2 */\n            /* if (x2 < 1.58*x1) { */\n            if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb]\n                || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb])\n                continue;\n            var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\n            var rmid = Math.max(gfc.thm[2].l[sb],\n                Math.min(gfc.thm[3].l[sb], mld));\n\n            mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\n            var rside = Math.max(gfc.thm[3].l[sb],\n                Math.min(gfc.thm[2].l[sb], mld));\n            gfc.thm[2].l[sb] = rmid;\n            gfc.thm[3].l[sb] = rside;\n        }\n\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock]\n                    || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock])\n                    continue;\n                var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\n                var rmid = Math.max(gfc.thm[2].s[sb][sblock],\n                    Math.min(gfc.thm[3].s[sb][sblock], mld));\n\n                mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\n                var rside = Math.max(gfc.thm[3].s[sb][sblock],\n                    Math.min(gfc.thm[2].s[sb][sblock], mld));\n\n                gfc.thm[2].s[sb][sblock] = rmid;\n                gfc.thm[3].s[sb][sblock] = rside;\n            }\n        }\n    }\n\n    /**\n     * Adjust M/S maskings if user set \"msfix\"\n     *\n     * Naoki Shibata 2000\n     */\n    function ns_msfix(gfc, msfix, athadjust) {\n        var msfix2 = msfix;\n        var athlower = Math.pow(10, athadjust);\n\n        msfix *= 2.0;\n        msfix2 *= 2.0;\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            var thmLR, thmM, thmS, ath;\n            ath = (gfc.ATH.cb_l[gfc.bm_l[sb]]) * athlower;\n            thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath),\n                Math.max(gfc.thm[1].l[sb], ath));\n            thmM = Math.max(gfc.thm[2].l[sb], ath);\n            thmS = Math.max(gfc.thm[3].l[sb], ath);\n            if (thmLR * msfix < thmM + thmS) {\n                var f = thmLR * msfix2 / (thmM + thmS);\n                thmM *= f;\n                thmS *= f;\n            }\n            gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\n            gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\n        }\n\n        athlower *= ( Encoder.BLKSIZE_s / Encoder.BLKSIZE);\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thmLR, thmM, thmS, ath;\n                ath = (gfc.ATH.cb_s[gfc.bm_s[sb]]) * athlower;\n                thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath),\n                    Math.max(gfc.thm[1].s[sb][sblock], ath));\n                thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\n                thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\n\n                if (thmLR * msfix < thmM + thmS) {\n                    var f = thmLR * msfix / (thmM + thmS);\n                    thmM *= f;\n                    thmS *= f;\n                }\n                gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock],\n                    thmM);\n                gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock],\n                    thmS);\n            }\n        }\n    }\n\n    /**\n     * short block threshold calculation (part 2)\n     *\n     * partition band bo_s[sfb] is at the transition from scalefactor band sfb\n     * to the next one sfb+1; enn and thmm have to be split between them\n     */\n    function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n            var bo_s_sb = gfc.bo_s[sb];\n            var npart_s = gfc.npart_s;\n            var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n            while (b < b_lim) {\n                // iff failed, it may indicate some index error elsewhere\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].s[sb][sblock] = enn;\n            gfc.thm[chn].s[sb][sblock] = thmm;\n\n            if (b >= npart_s) {\n                ++sb;\n                break;\n            }\n            // iff failed, it may indicate some index error elsewhere\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_s_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].s[sb][sblock] += enn;\n                gfc.thm[chn].s[sb][sblock] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n            gfc.en[chn].s[sb][sblock] = 0;\n            gfc.thm[chn].s[sb][sblock] = 0;\n        }\n    }\n\n    /**\n     * longblock threshold calculation (part 2)\n     */\n    function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n            var bo_l_sb = gfc.bo_l[sb];\n            var npart_l = gfc.npart_l;\n            var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n            while (b < b_lim) {\n                // iff failed, it may indicate some index error elsewhere\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].l[sb] = enn;\n            gfc.thm[chn].l[sb] = thmm;\n\n            if (b >= npart_l) {\n                ++sb;\n                break;\n            }\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_l_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].l[sb] += enn;\n                gfc.thm[chn].l[sb] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n            gfc.en[chn].l[sb] = 0;\n            gfc.thm[chn].l[sb] = 0;\n        }\n    }\n\n    function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (var i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n        }\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var ecb = gfc.s3_ss[j++] * eb[kk];\n            ++kk;\n            while (kk <= gfc.s3ind_s[b][1]) {\n                ecb += gfc.s3_ss[j] * eb[kk];\n                ++j;\n                ++kk;\n            }\n\n            { /* limit calculated threshold by previous granule */\n                var x = rpelev_s * gfc.nb_s1[chn][b];\n                thr[b] = Math.min(ecb, x);\n            }\n            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n                /* limit calculated threshold by even older granule */\n                var x = rpelev2_s * gfc.nb_s2[chn][b];\n                var y = thr[b];\n                thr[b] = Math.min(x, y);\n            }\n\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            blocktype[chn] = Encoder.NORM_TYPE;\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed)\n                uselongblock[chn] = 1;\n            if (gfp.short_blocks == ShortBlock.short_block_forced)\n                uselongblock[chn] = 0;\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype[chn] = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype[chn] = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype[chn];\n            // save for next call to l3psy_anal\n        }\n    }\n\n    function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */\n        if (r >= 1.0) {\n            /* 99.7% of the time */\n            return x;\n        }\n        if (r <= 0.0)\n            return y;\n        if (y > 0.0) {\n            /* rest of the time */\n            return (Math.pow(x / y, r) * y);\n        }\n        /* never happens */\n        return 0.0;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\n        51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\n        /* 255.8 */\n    ];\n\n    function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thm = mr.thm.s[sb][sblock];\n                if (thm > 0.0) {\n                    var x = thm * masking_lower;\n                    var en = mr.en.s[sb][sblock];\n                    if (en > x) {\n                        if (en > x * 1e10) {\n                            pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                        } else {\n                            pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                        }\n                    }\n                }\n            }\n        }\n\n        return pe_s;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\n        12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\n        60.7, 73.9, 85.7, 93.4, 126.1,\n        /* 241.3 */\n    ];\n\n    function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n            var thm = mr.thm.l[sb];\n            if (thm > 0.0) {\n                var x = thm * masking_lower;\n                var en = mr.en.l[sb];\n                if (en > x) {\n                    if (en > x * 1e10) {\n                        pe_l += regcoef_l[sb] * (10.0 * LOG10);\n                    } else {\n                        pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n                    }\n                }\n            }\n        }\n        return pe_l;\n    }\n\n    function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n            var ebb = 0, m = 0;\n            var i;\n            for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n                var el = fftenergy[j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb * gfc.rnumlines_l[b];\n        }\n    }\n\n    function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\n                    + gfc.numlines_l[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n    }\n\n    var fircoef = [\n        -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\n        -5.52212e-17 * 2, -0.313819 * 2\n    ];\n\n    this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\n         * to get a good cache performance, one has to think about the sequence,\n         * in which the variables are used.\n         */\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n\n        /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2);\n\n        /* block type */\n        var blocktype = new_int(2), uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock;\n\n        /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\n\n        Arrays.fill(mask_idx_s, 0);\n\n        numchn = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO)\n            numchn = 4;\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\n            / gfc.ResvMax * 0.5;\n        else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            pcfact = 0.6;\n        } else\n            pcfact = 1.0;\n\n        /**********************************************************************\n         * Apply HPF of fs/4 to the input signal. This is used for attack\n         * detection / handling.\n         **********************************************************************/\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            var firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            for (i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (numchn > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n\n        for (chn = 0; chn < numchn; chn++) {\n            var wsamp_l;\n            var wsamp_s;\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var attack_intensity = new_float(12);\n            var ns_uselongblock = 1;\n            var attackThreshold;\n            var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n            var ns_attacks = [0, 0, 0, 0];\n            var fftenergy = new_float(Encoder.HBLKSIZE);\n            var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n\n            /*\n             * rh 20040301: the following loops do access one off the limits so\n             * I increase the array dimensions by one and initialize the\n             * accessed values to zero\n             */\n\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            if (chn == 2) {\n                for (i = 0; i < 576; i++) {\n                    var l, r;\n                    l = ns_hpfsmpl[0][i];\n                    r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            {\n                var pf = ns_hpfsmpl[chn & 1];\n                var pfPos = 0;\n                for (i = 0; i < 9; i++) {\n                    var pfe = pfPos + 576 / 9;\n                    var p = 1.;\n                    for (; pfPos < pfe; pfPos++)\n                        if (p < Math.abs(pf[pfPos]))\n                            p = Math.abs(pf[pfPos]);\n\n                    gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                    en_short[1 + i / 3] += p;\n                    if (p > en_subshort[i + 3 - 2]) {\n                        p = p / en_subshort[i + 3 - 2];\n                    } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                        p = en_subshort[i + 3 - 2] / (p * 10.0);\n                    } else\n                        p = 0.0;\n                    attack_intensity[i + 3] = p;\n                }\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (i = 1; i < 12; i++)\n                    if (x < attack_intensity[i])\n                        x = attack_intensity[i];\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            for (i = 0; i < 12; i++)\n                if (0 == ns_attacks[i / 3]\n                    && attack_intensity[i] > attackThreshold)\n                    ns_attacks[i / 3] = (i % 3) + 1;\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            for (i = 1; i < 4; i++) {\n                var ratio;\n                if (en_short[i - 1] > en_short[i]) {\n                    ratio = en_short[i - 1] / en_short[i];\n                } else {\n                    ratio = en_short[i] / en_short[i - 1];\n                }\n                if (ratio < 1.7) {\n                    ns_attacks[i] = 0;\n                    if (i == 1)\n                        ns_attacks[0] = 0;\n                }\n            }\n\n            if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\n                ns_attacks[0] = 0;\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\n                    ns_attacks[1] = 0;\n                if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\n                    ns_attacks[2] = 0;\n                if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\n                    ns_attacks[3] = 0;\n            }\n\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n\n            /*********************************************************************\n             * compute FFTs\n             *********************************************************************/\n            wsamp_s = wsamp_S;\n            wsamp_l = wsamp_L;\n            compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\n                wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\n\n            /*********************************************************************\n             * Calculate the energy and the tonality of each partition.\n             *********************************************************************/\n            calc_energy(gfc, fftenergy, eb_l, max, avg);\n            calc_mask_index_l(gfc, max, avg, mask_idx_l);\n            /* compute masking thresholds for short blocks */\n            for (sblock = 0; sblock < 3; sblock++) {\n                var enn, thmm;\n                compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n                convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\n                /**** short block pre-echo control ****/\n                for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    thmm = gfc.thm[chn].s[sb][sblock];\n\n                    thmm *= NS_PREECHO_ATT0;\n                    if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT1 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    if (ns_attacks[sblock] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\n                        || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                        var idx = (sblock != 2) ? sblock + 1 : 0;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    /* pulse like signal detection for fatboy.wav and so on */\n                    enn = en_subshort[sblock * 3 + 3]\n                        + en_subshort[sblock * 3 + 4]\n                        + en_subshort[sblock * 3 + 5];\n                    if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                        thmm *= 0.5;\n                        if (en_subshort[sblock * 3 + 4] * 6 < enn)\n                            thmm *= 0.5;\n                    }\n\n                    gfc.thm[chn].s[sb][sblock] = thmm;\n                }\n            }\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\n\n            /*********************************************************************\n             * convolve the partitioned energy and unpredictability with the\n             * spreading function, s3_l[b][k]\n             ********************************************************************/\n            k = 0;\n            {\n                for (b = 0; b < gfc.npart_l; b++) {\n                    /*\n                     * convolve the partitioned energy with the spreading\n                     * function\n                     */\n                    var kk = gfc.s3ind[b][0];\n                    var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                    var ecb = gfc.s3_ll[k++] * eb2;\n                    while (++kk <= gfc.s3ind[b][1]) {\n                        eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                        ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\n                            gfc, 0);\n                    }\n                    ecb *= 0.158489319246111;\n                    /* pow(10,-0.8) */\n\n                    /**** long block pre-echo control ****/\n                    /**\n                     * <PRE>\n                     * dont use long block pre-echo control if previous granule was\n                     * a short block.  This is to avoid the situation:\n                     * frame0:  quiet (very low masking)\n                     * frame1:  surge  (triggers short blocks)\n                     * frame2:  regular frame.  looks like pre-echo when compared to\n                     *          frame0, but all pre-echo was in frame1.\n                     * </PRE>\n                     */\n                    /*\n                     * chn=0,1 L and R channels\n                     *\n                     * chn=2,3 S and M channels.\n                     */\n\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\n                        thr[b] = ecb;\n                    else\n                        thr[b] = NS_INTERP(\n                            Math.min(ecb, Math.min(rpelev\n                                * gfc.nb_1[chn][b], rpelev2\n                                * gfc.nb_2[chn][b])), ecb, pcfact);\n\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n                    gfc.nb_1[chn][b] = ecb;\n                }\n            }\n            for (; b <= Encoder.CBANDS; ++b) {\n                eb_l[b] = 0;\n                thr[b] = 0;\n            }\n            /* compute masking thresholds for long blocks */\n            convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        }\n        /* end loop over chn */\n\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n            if (gfp.interChRatio > 0.0) {\n                calc_interchannel_masking(gfp, gfp.interChRatio);\n            }\n        }\n\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            var msfix;\n            msfix1(gfc);\n            msfix = gfp.msfix;\n            if (Math.abs(msfix) > 0.0)\n                ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n            var ppe;\n            var ppePos = 0;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE)\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            else\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n\n            if (gfp.analysis)\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n\n        }\n        return 0;\n    }\n\n    function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n        } else if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n            var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n    }\n\n    function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\n        var gfc = gfp.internal_flags;\n\n        if (sblock == 0 && chn < 2) {\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                var l = wsamp_s[wsamp_sPos + 0][sblock][j];\n                var r = wsamp_s[wsamp_sPos + 1][sblock][j];\n                wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\n        fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\n        for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n            var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\n            var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\n            fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n    }\n\n    /**\n     * compute loudness approximation (used for ATH auto-level adjustment)\n     */\n    function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\n        var gfc = gfp.internal_flags;\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    var fircoef_ = [-8.65163e-18 * 2,\n        -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2,\n        0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\n\n    /**\n     * Apply HPF of fs/4 to the input signal. This is used for attack detection\n     * / handling.\n     */\n    function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var gfc = gfp.internal_flags;\n        var n_chn_out = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4 : n_chn_out;\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (var chn = 0; chn < n_chn_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            for (var i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (var j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef_[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef_[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (n_chn_psy > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var attack_intensity = new_float(12);\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var pf = ns_hpfsmpl[chn & 1];\n            var pfPos = 0;\n            var attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            var ns_uselongblock = 1;\n\n            if (chn == 2) {\n                for (var i = 0, j = 576; j > 0; ++i, --j) {\n                    var l = ns_hpfsmpl[0][i];\n                    var r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (var i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                var pfe = pfPos + 576 / 9;\n                var p = 1.;\n                for (; pfPos < pfe; pfPos++)\n                    if (p < Math.abs(pf[pfPos]))\n                        p = Math.abs(pf[pfPos]);\n\n                gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                en_short[1 + i / 3] += p;\n                if (p > en_subshort[i + 3 - 2]) {\n                    p = p / en_subshort[i + 3 - 2];\n                } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                    p = en_subshort[i + 3 - 2] / (p * 10.0);\n                } else {\n                    p = 0.0;\n                }\n                attack_intensity[i + 3] = p;\n            }\n            /* pulse like signal detection for fatboy.wav and so on */\n            for (var i = 0; i < 3; ++i) {\n                var enn = en_subshort[i * 3 + 3]\n                    + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\n                var factor = 1.;\n                if (en_subshort[i * 3 + 5] * 6 < enn) {\n                    factor *= 0.5;\n                    if (en_subshort[i * 3 + 4] * 6 < enn) {\n                        factor *= 0.5;\n                    }\n                }\n                sub_short_factor[chn][i] = factor;\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (var i = 1; i < 12; i++) {\n                    if (x < attack_intensity[i]) {\n                        x = attack_intensity[i];\n                    }\n                }\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            for (var i = 0; i < 12; i++) {\n                if (0 == ns_attacks[chn][i / 3]\n                    && attack_intensity[i] > attackThreshold) {\n                    ns_attacks[chn][i / 3] = (i % 3) + 1;\n                }\n            }\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            /* Good samples to show the effect are Trumpet test songs */\n            /*\n             * GB: tuned (1) to avoid too many short blocks for test sample\n             * TRUMPET\n             */\n            /*\n             * RH: tuned (2) to let enough short blocks through for test sample\n             * FSOL and SNAPS\n             */\n            for (var i = 1; i < 4; i++) {\n                var u = en_short[i - 1];\n                var v = en_short[i];\n                var m = Math.max(u, v);\n                if (m < 40000) { /* (2) */\n                    if (u < 1.7 * v && v < 1.7 * u) { /* (1) */\n                        if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\n                            ns_attacks[chn][0] = 0;\n                        }\n                        ns_attacks[chn][i] = 0;\n                    }\n                }\n            }\n\n            if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\n                ns_attacks[chn][0] = 0;\n            }\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[chn][0] + ns_attacks[chn][1]\n                + ns_attacks[chn][2] + ns_attacks[chn][3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\n                    ns_attacks[chn][1] = 0;\n                }\n                if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\n                    ns_attacks[chn][2] = 0;\n                }\n                if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\n                    ns_attacks[chn][3] = 0;\n                }\n            }\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n        }\n    }\n\n    function vbrpsy_skip_masking_s(gfc, chn, sblock) {\n        if (sblock == 0) {\n            for (var b = 0; b < gfc.npart_s; b++) {\n                gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n                gfc.nb_s1[chn][b] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_skip_masking_l(gfc, chn) {\n        for (var b = 0; b < gfc.npart_l; b++) {\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = 0;\n        }\n    }\n\n    function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_s - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b]\n                    + gfc.numlines_s[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var max = new float[Encoder.CBANDS], avg = new_float(Encoder.CBANDS);\n        var i, j, b;\n        var mask_idx_s = new int[Encoder.CBANDS];\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb / n;\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            max[b] = 0;\n            avg[b] = 0;\n        }\n        psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var last = gfc.s3ind_s[b][1];\n            var dd, dd_n;\n            var x, ecb, avg_mask;\n            dd = mask_idx_s[kk];\n            dd_n = 1;\n            ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n            ++j;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_s[kk];\n                dd_n += 1;\n                x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n                ecb = vbrpsy_mask_add(ecb, x, kk - b);\n                ++j;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n            thr[b] = ecb;\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_s[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb[b]) {\n                thr[b] = eb[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\n        var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n        var mask_idx_l = new_int(Encoder.CBANDS + 2);\n        var b;\n\n        /*********************************************************************\n         * Calculate the energy and the tonality of each partition.\n         *********************************************************************/\n        calc_energy(gfc, fftenergy, eb_l, max, avg);\n        calc_mask_index_l(gfc, max, avg, mask_idx_l);\n\n        /*********************************************************************\n         * convolve the partitioned energy and unpredictability with the\n         * spreading function, s3_l[b][k]\n         ********************************************************************/\n        var k = 0;\n        for (b = 0; b < gfc.npart_l; b++) {\n            var x, ecb, avg_mask, t;\n            /* convolve the partitioned energy with the spreading function */\n            var kk = gfc.s3ind[b][0];\n            var last = gfc.s3ind[b][1];\n            var dd = 0, dd_n = 0;\n            dd = mask_idx_l[kk];\n            dd_n += 1;\n            ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n            ++k;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_l[kk];\n                dd_n += 1;\n                x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n                t = vbrpsy_mask_add(ecb, x, kk - b);\n                ecb = t;\n                ++k;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n\n            /**** long block pre-echo control ****/\n            /**\n             * <PRE>\n             * dont use long block pre-echo control if previous granule was\n             * a short block.  This is to avoid the situation:\n             * frame0:  quiet (very low masking)\n             * frame1:  surge  (triggers short blocks)\n             * frame2:  regular frame.  looks like pre-echo when compared to\n             *          frame0, but all pre-echo was in frame1.\n             * </PRE>\n             */\n            /*\n             * chn=0,1 L and R channels chn=2,3 S and M channels.\n             */\n            if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\n                var ecb_limit = rpelev * gfc.nb_1[chn][b];\n                if (ecb_limit > 0) {\n                    thr[b] = Math.min(ecb, ecb_limit);\n                } else {\n                    /**\n                     * <PRE>\n                     * Robert 071209:\n                     * Because we don't calculate long block psy when we know a granule\n                     * should be of short blocks, we don't have any clue how the granule\n                     * before would have looked like as a long block. So we have to guess\n                     * a little bit for this END_TYPE block.\n                     * Most of the time we get away with this sloppyness. (fingers crossed :)\n                     * The speed increase is worth it.\n                     * </PRE>\n                     */\n                    thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\n                }\n            } else {\n                var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\n                var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\n                var ecb_limit;\n                if (ecb_limit_2 <= 0) {\n                    ecb_limit_2 = ecb;\n                }\n                if (ecb_limit_1 <= 0) {\n                    ecb_limit_1 = ecb;\n                }\n                if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\n                    ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\n                } else {\n                    ecb_limit = ecb_limit_1;\n                }\n                thr[b] = Math.min(ecb, ecb_limit);\n            }\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_l[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb_l[b]) {\n                thr[b] = eb_l[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb_l[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_block_type(gfp, uselongblock) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\n                uselongblock[chn] = 1;\n            }\n            if (gfp.short_blocks == ShortBlock.short_block_forced) {\n                uselongblock[chn] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            var blocktype = Encoder.NORM_TYPE;\n            /* disable short blocks */\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype;\n            // save for next call to l3psy_anal\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\n        var msfix2 = msfix * 2;\n        var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\n        var rside, rmid;\n        for (var b = 0; b < n; ++b) {\n            var ebM = eb[2][b];\n            var ebS = eb[3][b];\n            var thmL = thr[0][b];\n            var thmR = thr[1][b];\n            var thmM = thr[2][b];\n            var thmS = thr[3][b];\n\n            /* use this fix if L & R masking differs by 2db or less */\n            if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\n                var mld_m = cb_mld[b] * ebS;\n                var mld_s = cb_mld[b] * ebM;\n                rmid = Math.max(thmM, Math.min(thmS, mld_m));\n                rside = Math.max(thmS, Math.min(thmM, mld_s));\n            } else {\n                rmid = thmM;\n                rside = thmS;\n            }\n            if (msfix > 0) {\n                /***************************************************************/\n                /* Adjust M/S maskings if user set \"msfix\" */\n                /***************************************************************/\n                /* Naoki Shibata 2000 */\n                var thmLR, thmMS;\n                var ath = ath_cb[b] * athlower;\n                thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\n                thmM = Math.max(rmid, ath);\n                thmS = Math.max(rside, ath);\n                thmMS = thmM + thmS;\n                if (thmMS > 0 && (thmLR * msfix2) < thmMS) {\n                    var f = thmLR * msfix2 / thmMS;\n                    thmM *= f;\n                    thmS *= f;\n                }\n                rmid = Math.min(thmM, rmid);\n                rside = Math.min(thmS, rside);\n            }\n            if (rmid > ebM) {\n                rmid = ebM;\n            }\n            if (rside > ebS) {\n                rside = ebS;\n            }\n            thr[2][b] = rmid;\n            thr[3][b] = rside;\n        }\n    }\n\n    this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_l;\n        var wsamp_s;\n        var fftenergy = new_float(Encoder.HBLKSIZE);\n        var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n        var eb = new_float_n([4, Encoder.CBANDS]), thr = new_float_n([4, Encoder.CBANDS]);\n        var sub_short_factor = new_float_n([4, 3]);\n        var pcfact = 0.6;\n\n        /* block type */\n        var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\n            [0, 0, 0, 0]];\n        var uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4\n            : gfc.channels_out;\n\n        vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio,\n            masking_MS_ratio, energy, sub_short_factor, ns_attacks,\n            uselongblock);\n\n        vbrpsy_compute_block_type(gfp, uselongblock);\n\n        /* LONG BLOCK CASE */\n        {\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                wsamp_l = wsamp_L;\n                vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out,\n                    fftenergy, wsamp_l, ch01);\n\n                vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn,\n                    fftenergy);\n\n                if (uselongblock[ch01] != 0) {\n                    vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn],\n                        chn);\n                } else {\n                    vbrpsy_skip_masking_l(gfc, chn);\n                }\n            }\n            if ((uselongblock[0] + uselongblock[1]) == 2) {\n                /* M/S channel */\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l,\n                        gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust,\n                        gfp.msfix, gfc.npart_l);\n                }\n            }\n            /* TODO: apply adaptive ATH masking here ?? */\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                if (uselongblock[ch01] != 0) {\n                    convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\n                }\n            }\n        }\n\n        /* SHORT BLOCKS CASE */\n        {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n\n                    if (uselongblock[ch01] != 0) {\n                        vbrpsy_skip_masking_s(gfc, chn, sblock);\n                    } else {\n                        /* compute masking thresholds for short blocks */\n                        wsamp_s = wsamp_S;\n                        vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock,\n                            fftenergy_s, wsamp_s, ch01);\n                        vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn],\n                            thr[chn], chn, sblock);\n                    }\n                }\n                if ((uselongblock[0] + uselongblock[1]) == 0) {\n                    /* M/S channel */\n                    if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                        vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s,\n                            gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust,\n                            gfp.msfix, gfc.npart_s);\n                    }\n                    /* L/R channel */\n                }\n                /* TODO: apply adaptive ATH masking here ?? */\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n                    if (0 == uselongblock[ch01]) {\n                        convert_partition2scalefac_s(gfc, eb[chn], thr[chn],\n                            chn, sblock);\n                    }\n                }\n            }\n\n            /**** short block pre-echo control ****/\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n\n                if (uselongblock[ch01] != 0) {\n                    continue;\n                }\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    var new_thmm = new_float(3);\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        var thmm = gfc.thm[chn].s[sb][sblock];\n                        thmm *= NS_PREECHO_ATT0;\n\n                        if (ns_attacks[chn][sblock] >= 2\n                            || ns_attacks[chn][sblock + 1] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT1 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if (ns_attacks[chn][sblock] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if ((sblock != 0 && ns_attacks[chn][sblock - 1] == 3)\n                            || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                            var idx = (sblock != 2) ? sblock + 1 : 0;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        }\n\n                        /* pulse like signal detection for fatboy.wav and so on */\n                        thmm *= sub_short_factor[chn][sblock];\n\n                        new_thmm[sblock] = thmm;\n                    }\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\n                    }\n                }\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ppe;\n            var ppePos;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE) {\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            } else {\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n            }\n\n            if (gfp.analysis) {\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n            }\n        }\n        return 0;\n    }\n\n    function s3_func_x(bark, hf_slope) {\n        var tempx = bark, tempy;\n\n        if (tempx >= 0) {\n            tempy = -tempx * 27;\n        } else {\n            tempy = tempx * hf_slope;\n        }\n        if (tempy <= -72.0) {\n            return 0;\n        }\n        return Math.exp(tempy * LN_TO_LOG10);\n    }\n\n    function norm_s3_func_x(hf_slope) {\n        var lim_a = 0, lim_b = 0;\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1)\n                ;\n            l = x;\n            h = 0;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    h = x;\n                } else {\n                    l = x;\n                }\n            }\n            lim_a = l;\n        }\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1)\n                ;\n            l = 0;\n            h = x;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    l = x;\n                } else {\n                    h = x;\n                }\n            }\n            lim_b = h;\n        }\n        {\n            var sum = 0;\n            var m = 1000;\n            var i;\n            for (i = 0; i <= m; ++i) {\n                var x = lim_a + i * (lim_b - lim_a) / m;\n                var y = s3_func_x(x, hf_slope);\n                sum += y;\n            }\n            {\n                var norm = (m + 1) / (sum * (lim_b - lim_a));\n                /* printf( \"norm = %lf\\n\",norm); */\n                return norm;\n            }\n        }\n    }\n\n    /**\n     *   The spreading function.  Values returned in units of energy\n     */\n    function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0)\n            tempx *= 3;\n        else\n            tempx *= 1.5;\n\n        if (tempx >= 0.5 && tempx <= 2.5) {\n            temp = tempx - 0.5;\n            x = 8.0 * (temp * temp - 2.0 * temp);\n        } else\n            x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5\n            * Math.sqrt(1.0 + tempx * tempx);\n\n        if (tempy <= -60.0)\n            return 0.0;\n\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10);\n\n        /**\n         * <PRE>\n         * Normalization.  The spreading function should be normalized so that:\n         * +inf\n         * /\n         * |  s3 [ bark ]  d(bark)   =  1\n         * /\n         * -inf\n         * </PRE>\n         */\n        tempx /= .6609193;\n        return tempx;\n    }\n\n    /**\n     * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\n     */\n    function freq2bark(freq) {\n        /* input: freq in hz output: barks */\n        if (freq < 0)\n            freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5\n            * Math.atan(freq * freq / (7.5 * 7.5));\n    }\n\n    function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0;\n        /* compute numlines, the number of spectral lines in each partition band */\n        /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n            var bark1;\n            var j2;\n            bark1 = freq2bark(sfreq * j);\n\n            b_frq[i] = sfreq * j;\n\n            for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\n            && j2 <= blksize / 2; j2++)\n                ;\n\n            numlines[i] = j2 - j;\n            ni = i + 1;\n\n            while (j < j2) {\n                partition[j++] = i;\n            }\n            if (j > blksize / 2) {\n                j = blksize / 2;\n                ++i;\n                break;\n            }\n        }\n        b_frq[i] = sfreq * j;\n\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n            var i1, i2, start, end;\n            var arg;\n            start = scalepos[sfb];\n            end = scalepos[sfb + 1];\n\n            i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n            if (i1 < 0)\n                i1 = 0;\n            i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n\n            if (i2 > blksize / 2)\n                i2 = blksize / 2;\n\n            bm[sfb] = (partition[i1] + partition[i2]) / 2;\n            bo[sfb] = partition[i2];\n            var f_tmp = sample_freq_frac * end;\n            /*\n             * calculate how much of this band belongs to current scalefactor\n             * band\n             */\n            bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\n                / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n            if (bo_w[sfb] < 0) {\n                bo_w[sfb] = 0;\n            } else {\n                if (bo_w[sfb] > 1) {\n                    bo_w[sfb] = 1;\n                }\n            }\n            /* setup stereo demasking thresholds */\n            /* formula reverse enginerred from plot in paper */\n            arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n            arg = ( Math.min(arg, 15.5) / 15.5);\n\n            mld[sfb] = Math.pow(10.0,\n                1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        }\n\n        /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n            var w = numlines[k];\n            var bark1, bark2;\n\n            bark1 = freq2bark(sfreq * (j));\n            bark2 = freq2bark(sfreq * (j + w - 1));\n            bval[k] = .5 * (bark1 + bark2);\n\n            bark1 = freq2bark(sfreq * (j - .5));\n            bark2 = freq2bark(sfreq * (j + w - .5));\n            bval_width[k] = bark2 - bark1;\n            j += w;\n        }\n\n        return ni;\n    }\n\n    function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\n        /*\n         * The s3 array is not linear in the bark scale.\n         *\n         * bval[x] should be used to get the bark value.\n         */\n        var j;\n        var numberOfNoneZero = 0;\n\n        /**\n         * <PRE>\n         * s[i][j], the value of the spreading function,\n         * centered at band j (masker), for band i (maskee)\n         *\n         * i.e.: sum over j to spread into signal barkval=i\n         * NOTE: i and j are used opposite as in the ISO docs\n         * </PRE>\n         */\n        if (use_old_s3) {\n            for (var i = 0; i < npart; i++) {\n                for (j = 0; j < npart; j++) {\n                    var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        } else {\n            for (j = 0; j < npart; j++) {\n                var hf_slope = 15 + Math.min(21 / bval[j], 12);\n                var s3_x_norm = norm_s3_func_x(hf_slope);\n                for (var i = 0; i < npart; i++) {\n                    var v = s3_x_norm\n                        * s3_func_x(bval[i] - bval[j], hf_slope)\n                        * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        }\n        for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][0] = j;\n\n            for (j = npart - 1; j > 0; j--) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][1] = j;\n            numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\n        }\n\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++)\n            for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\n                p[k++] = s3[i][j];\n\n        return p;\n    }\n\n    function stereo_demask(f) {\n        /* setup stereo demasking thresholds */\n        /* formula reverse enginerred from plot in paper */\n        var arg = freq2bark(f);\n        arg = (Math.min(arg, 15.5) / 15.5);\n\n        return Math.pow(10.0,\n            1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n    }\n\n    /**\n     * NOTE: the bitrate reduction from the inter-channel masking effect is low\n     * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\n     * does not use this feature. (Robert 071216)\n     */\n    this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13, bvl_b = 24;\n        var snr_l_a = 0, snr_l_b = 0;\n        var snr_s_a = -8.25, snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n\n        switch (gfp.experimentalZ) {\n            default:\n            case 0:\n                useOldS3 = true;\n                break;\n            case 1:\n                useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\n                    : true;\n                break;\n            case 2:\n                useOldS3 = false;\n                break;\n            case 3:\n                bvl_a = 8;\n                snr_l_a = -1.75;\n                snr_l_b = -0.0125;\n                snr_s_a = -8.25;\n                snr_s_b = -2.25;\n                break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\n        // the vbr header is long blocks\n\n        for (i = 0; i < 4; ++i) {\n            for (var j = 0; j < Encoder.CBANDS; ++j) {\n                gfc.nb_1[i][j] = 1e20;\n                gfc.nb_2[i][j] = 1e20;\n                gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                gfc.en[i].l[sb] = 1e20;\n                gfc.thm[i].l[sb] = 1e20;\n            }\n            for (var j = 0; j < 3; ++j) {\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    gfc.en[i].s[sb][j] = 1e20;\n                    gfc.thm[i].s[sb][j] = 1e20;\n                }\n                gfc.nsPsy.lastAttacks[i] = 0;\n            }\n            for (var j = 0; j < 9; j++)\n                gfc.nsPsy.last_en_subshort[i][j] = 10.;\n        }\n\n        /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\n\n        /*************************************************************************\n         * now compute the psychoacoustic model specific constants\n         ************************************************************************/\n        /* compute numlines, bo, bm, bval, bval_width, mld */\n\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\n            bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\n            Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\n            / (2.0 * 576), Encoder.SBMAX_l);\n        /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n            var snr = snr_l_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n            if (gfc.numlines_l[i] > 0) {\n                gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n            } else {\n                gfc.rnumlines_l[i] = 0;\n            }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\n            norm, useOldS3);\n\n        /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var x;\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n                var level;\n                /*\n                 * ATH below 100 Hz constant, not further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_l[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_l[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            /*\n             * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\n             * and lead-voice samples, but introduces some 3 kbps bit bloat too.\n             * TODO: Further refinement of the shape of this hack.\n             */\n            x = -20 + bval[i] * 20 / 10;\n            if (x > 6) {\n                x = 100;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8.;\n            gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\n        }\n\n        /************************************************************************\n         * do the same things for short blocks\n         ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\n            bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\n            Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\n            / (2.0 * 192), Encoder.SBMAX_s);\n\n        /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var x;\n            var snr = snr_s_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n                var level;\n                /* freq = Min(.1,freq); */\n                /*\n                 * ATH below 100 Hz constant, not\n                 * further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_s[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_s[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            x = (-7.0 + bval[i] * 7.0 / 12.0);\n            if (bval[i] > 12) {\n                x *= 1 + Math.log(1 + x) * 3.1;\n            }\n            if (bval[i] < 12) {\n                x *= 1 + Math.log(1 - x) * 2.3;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8;\n            gfc.minval_s[i] = Math.pow(10.0, x / 10)\n                * gfc.numlines_s[i];\n        }\n\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\n            norm, useOldS3);\n\n        init_mask_add_max_values();\n        fft.init_fft(gfc);\n\n        /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10\n            / (temporalmask_sustain_sec * sfreq / 192.0));\n\n        {\n            var msfix;\n            msfix = NS_MSFIX;\n            if ((gfp.exp_nspsytune & 2) != 0)\n                msfix = 1.0;\n            if (Math.abs(gfp.msfix) > 0.0)\n                msfix = gfp.msfix;\n            gfp.msfix = msfix;\n\n            /*\n             * spread only from npart_l bands. Normally, we use the spreading\n             * function to convolve from npart_l down to npart_l bands\n             */\n            for (var b = 0; b < gfc.npart_l; b++)\n                if (gfc.s3ind[b][1] > gfc.npart_l - 1)\n                    gfc.s3ind[b][1] = gfc.npart_l - 1;\n        }\n\n        /*\n         * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\n         * per second\n         */\n        var frame_duration = (576. * gfc.mode_gr / sfreq);\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01;\n        /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0;\n        /* on lead, allow adjust up to maximum */\n\n\n        if (gfp.ATHtype != -1) {\n            /* compute equal loudness weights (eql_w) */\n            var freq;\n            var freq_inc = gfp.out_samplerate\n                / (Encoder.BLKSIZE);\n            var eql_balance = 0.0;\n            freq = 0.0;\n            for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n                /* convert ATH dB to relative power (not dB) */\n                /* to determine eql_w */\n                freq += freq_inc;\n                gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n                eql_balance += gfc.ATH.eql_w[i];\n            }\n            eql_balance = 1.0 / eql_balance;\n            for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\n                gfc.ATH.eql_w[i] *= eql_balance;\n            }\n        }\n        {\n            for (var b = j = 0; b < gfc.npart_s; ++b) {\n                for (i = 0; i < gfc.numlines_s[b]; ++i) {\n                    ++j;\n                }\n            }\n            for (var b = j = 0; b < gfc.npart_l; ++b) {\n                for (i = 0; i < gfc.numlines_l[b]; ++i) {\n                    ++j;\n                }\n            }\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n            gfc.mld_cb_l[i] = stereo_demask(freq);\n            j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n            gfc.mld_cb_s[i] = stereo_demask(freq);\n            j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Those ATH formulas are returning their minimum value for input = -1\n     */\n    function ATHformula_GB(f, value) {\n        /**\n         * <PRE>\n         *  from Painter & Spanias\n         *           modified by Gabriel Bouvigne to better fit the reality\n         *           ath =    3.640 * pow(f,-0.8)\n         *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\n         *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\n         *           + 0.6* 0.001 * pow(f,4.0);\n         *\n         *\n         *           In the past LAME was using the Painter &Spanias formula.\n         *           But we had some recurrent problems with HF content.\n         *           We measured real ATH values, and found the older formula\n         *           to be inaccurate in the higher part. So we made this new\n         *           formula and this solved most of HF problematic test cases.\n         *           The tradeoff is that in VBR mode it increases a lot the\n         *           bitrate.\n         * </PRE>\n         */\n\n        /*\n         * This curve can be adjusted according to the VBR scale: it adjusts\n         * from something close to Painter & Spanias on V9 up to Bouvigne's\n         * formula for V0. This way the VBR bitrate is more balanced according\n         * to the -V value.\n         */\n\n        // the following Hack allows to ask for the lowest value\n        if (f < -.3)\n            f = 3410;\n\n        // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800\n            * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\n            * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\n            + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n    }\n\n    this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n            case 0:\n                ath = ATHformula_GB(f, 9);\n                break;\n            case 1:\n                // over sensitive, should probably be removed\n                ath = ATHformula_GB(f, -1);\n                break;\n            case 2:\n                ath = ATHformula_GB(f, 0);\n                break;\n            case 3:\n                // modification of GB formula by Roel\n                ath = ATHformula_GB(f, 1) + 6;\n                break;\n            case 4:\n                ath = ATHformula_GB(f, gfp.ATHcurve);\n                break;\n            default:\n                ath = ATHformula_GB(f, 0);\n                break;\n        }\n        return ath;\n    }\n\n}\n\n\n\nfunction Lame() {\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\n         * Rules:\n         *\n         * - if possible, sfb21 should NOT be used\n         */\n        var suggested_samplefreq = 44100;\n\n        if (input_samplefreq >= 48000)\n            suggested_samplefreq = 48000;\n        else if (input_samplefreq >= 44100)\n            suggested_samplefreq = 44100;\n        else if (input_samplefreq >= 32000)\n            suggested_samplefreq = 32000;\n        else if (input_samplefreq >= 24000)\n            suggested_samplefreq = 24000;\n        else if (input_samplefreq >= 22050)\n            suggested_samplefreq = 22050;\n        else if (input_samplefreq >= 16000)\n            suggested_samplefreq = 16000;\n        else if (input_samplefreq >= 12000)\n            suggested_samplefreq = 12000;\n        else if (input_samplefreq >= 11025)\n            suggested_samplefreq = 11025;\n        else if (input_samplefreq >= 8000)\n            suggested_samplefreq = 8000;\n\n        if (lowpassfreq == -1)\n            return suggested_samplefreq;\n\n        if (lowpassfreq <= 15960)\n            suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250)\n            suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220)\n            suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970)\n            suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230)\n            suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420)\n            suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510)\n            suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970)\n            suggested_samplefreq = 8000;\n\n        if (input_samplefreq < suggested_samplefreq) {\n            /*\n             * choose a valid MPEG sample frequency above the input sample\n             * frequency to avoid SFB21/12 bitrate bloat rh 061115\n             */\n            if (input_samplefreq > 44100) {\n                return 48000;\n            }\n            if (input_samplefreq > 32000) {\n                return 44100;\n            }\n            if (input_samplefreq > 24000) {\n                return 32000;\n            }\n            if (input_samplefreq > 22050) {\n                return 24000;\n            }\n            if (input_samplefreq > 16000) {\n                return 22050;\n            }\n            if (input_samplefreq > 12000) {\n                return 16000;\n            }\n            if (input_samplefreq > 11025) {\n                return 12000;\n            }\n            if (input_samplefreq > 8000) {\n                return 11025;\n            }\n            return 8000;\n        }\n        return suggested_samplefreq;\n    }\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n                gfc.highpass1 = 0;\n                gfc.highpass2 = 0;\n                System.err.println(\"Warning: highpass filter disabled.  \"\n                    + \"highpass frequency too small\\n\");\n            }\n        }\n\n        if (gfc.highpass2 > 0) {\n            var maxband = -1;\n            for (var band = 0; band <= 31; band++) {\n                var freq = band / 31.0;\n                /* this band and below will be zereod */\n                if (freq <= gfc.highpass1) {\n                    highpass_band = Math.max(highpass_band, band);\n                }\n                if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n                    maxband = Math.max(maxband, band);\n                }\n            }\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            gfc.highpass1 = highpass_band / 31.0;\n            if (maxband == -1) {\n                gfc.highpass2 = (highpass_band + .75) / 31.0;\n            } else {\n                gfc.highpass2 = (maxband + .75) / 31.0;\n            }\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                fc1 = filter_coef((gfc.highpass2 - freq)\n                    / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            /* no bitrate or compression ratio specified, use 11.025 */\n            if (BitStream.EQ(gfp.compression_ratio, 0))\n                gfp.compression_ratio = 11.025;\n            /*\n             * rate to compress a CD down to exactly 128000 bps\n             */\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n\n            if (gfp.out_samplerate == 0)\n                gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\n            /*\n             * round up with a margin of 3 %\n             */\n\n            /*\n             * choose a bitrate for the output samplerate which achieves\n             * specified compression ratio\n             */\n            gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\n\n            /* we need the version for the bitrate table look up */\n            gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n\n            if (!gfp.free_format) /*\n             * for non Free Format find the nearest allowed\n             * bitrate\n             */\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    var x = [19500, 19000, 18600, 18000, 17500, 16000,\n                        15600, 14900, 12500, 10000, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                    break;\n                }\n                default:\n                {\n                    var x = [19500, 19000, 18500, 18000, 17500, 16500,\n                        15500, 14500, 12500, 9500, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n                gfp.lowpassfreq = gfp.in_samplerate / 2;\n            }\n            gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\n                gfp.in_samplerate);\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n                gfp.internal_flags = null;\n                return -6;\n            }\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            if (gfc.hip != null) {\n                mpglib.hip_decode_exit(gfc.hip);\n            }\n            gfc.hip = mpglib.hip_decode_init();\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            gfc.highpass1 = 2. * gfp.highpassfreq;\n\n            if (gfp.highpasswidth >= 0)\n                gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\n            else\n            /* 0% above on default */\n                gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n\n            gfc.highpass1 /= gfp.out_samplerate;\n            gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n                if (gfc.lowpass1 < 0) /* has to be >= 0 */\n                    gfc.lowpass1 = 0;\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.lowpass1 = 0;\n            gfc.lowpass2 = 0;\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            gfp.internal_flags = null;\n            return -1;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    gfp.internal_flags = null;\n                    return -1;\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    gfc.iteration_loop = new ABRIterationLoop(qu);\n                }\n                break;\n            }\n        }\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            /* if the user didn't specify VBR_max_bitrate: */\n            gfc.VBR_min_bitrate = 1;\n            /*\n             * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n             */\n            gfc.VBR_max_bitrate = 14;\n            /*\n             * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n             */\n            if (gfp.out_samplerate < 16000)\n                gfc.VBR_max_bitrate = 8;\n            /* default: allow 64 kbps (MPEG-2.5) */\n            if (gfp.VBR_min_bitrate_kbps != 0) {\n                gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_min_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_min_bitrate < 0)\n                    return -1;\n            }\n            if (gfp.VBR_max_bitrate_kbps != 0) {\n                gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_max_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_max_bitrate < 0)\n                    return -1;\n            }\n            gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n            gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n            gfp.VBR_mean_bitrate_kbps = Math.min(\n                Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n            gfp.VBR_mean_bitrate_kbps = Math.max(\n                Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            gfc.PSY.mask_adjust += gfp.tune_value_a;\n            gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            /*\n             * delay due to resampling; needs to be fixed, if resampling code\n             * gets changed\n             */\n            samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            /* write a id3 tag to the bitstream */\n            id3.id3tag_write_v1(gfp);\n\n            imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n                mp3buffer_size_remaining, 0);\n\n            if (imp3 < 0) {\n                return imp3;\n            }\n            mp3count += imp3;\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\n                in_buffer[1][i] = 0.0;\n            }\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n\n    function NumUsed() {\n        this.num_used = 0;\n    }\n\n    /**\n     * Greatest common divisor.\n     * <p>\n     * Joint work of Euclid and M. Hendry\n     */\n    function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n    }\n\n    /**\n     * Resampling via FIR filter, blackman window.\n     */\n    function blackman(x, fcn, l) {\n        /*\n         * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n         * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n         */\n        var wcn = (Math.PI * fcn);\n\n        x /= l;\n        if (x < 0)\n            x = 0;\n        if (x > 1)\n            x = 1;\n        var x2 = x - .5;\n\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9)\n            return (wcn / Math.PI);\n        else\n            return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\n    }\n\n    function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i, j = 0, k;\n        /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate\n            / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC)\n            bpc = LameInternalFlags.BPC;\n\n        var intratio = (Math.abs(gfc.resample_ratio\n            - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00)\n            fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2)\n            --filter_l;\n        /* must be odd */\n        filter_l += intratio;\n        /* unless resample_ratio=int, it must be even */\n\n        var BLACKSIZE = filter_l + 1;\n        /* size of data needed for FIR */\n\n        if (gfc.fill_buffer_resample_init == 0) {\n            gfc.inbuf_old[0] = new_float(BLACKSIZE);\n            gfc.inbuf_old[1] = new_float(BLACKSIZE);\n            for (i = 0; i <= 2 * bpc; ++i)\n                gfc.blackfilt[i] = new_float(BLACKSIZE);\n\n            gfc.itime[0] = 0;\n            gfc.itime[1] = 0;\n\n            /* precompute blackman filter coefficients */\n            for (j = 0; j <= 2 * bpc; j++) {\n                var sum = 0.;\n                var offset = (j - bpc) / (2. * bpc);\n                for (i = 0; i <= filter_l; i++)\n                    sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\n                        filter_l);\n                for (i = 0; i <= filter_l; i++)\n                    gfc.blackfilt[j][i] /= sum;\n            }\n            gfc.fill_buffer_resample_init = 1;\n        }\n\n        var inbuf_old = gfc.inbuf_old[ch];\n\n        /* time of j'th element in inbuf = itime + j/ifreq; */\n        /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n            var time0;\n            var joff;\n\n            time0 = k * gfc.resample_ratio;\n            /* time of k'th output sample */\n            j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n            /* check if we need more input data */\n            if ((filter_l + j - filter_l / 2) >= len)\n                break;\n\n            /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n            /* but we want a window centered at time0. */\n            var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\n\n            /* find the closest precomputed window for this offset: */\n            joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\n            var xvalue = 0.;\n            for (i = 0; i <= filter_l; ++i) {\n                var j2 = i + j - filter_l / 2;\n                var y;\n                y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\n                + j2];\n                xvalue += y * gfc.blackfilt[joff][i];\n            }\n            outbuf[outbufPos + k] = xvalue;\n        }\n\n        /* k = number of samples added to outbuf */\n        /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n        /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n        /*\n         * adjust our input time counter. Incriment by the number of samples\n         * used, then normalize so that next output sample is at time 0, next\n         * input buffer is at time itime[ch]\n         */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n        /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n            for (i = 0; i < BLACKSIZE; i++)\n                inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\n                - BLACKSIZE];\n        } else {\n            /* shift in num_used.num_used samples into inbuf_old */\n            var n_shift = BLACKSIZE - num_used.num_used;\n            /*\n             * number of samples to\n             * shift\n             */\n\n            /*\n             * shift n_shift samples by num_used.num_used, to make room for the\n             * num_used new samples\n             */\n            for (i = 0; i < n_shift; ++i)\n                inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n            /* shift in the num_used.num_used samples */\n            for (j = 0; i < BLACKSIZE; ++i, ++j)\n                inbuf_old[i] = inbuf[in_bufferPos + j];\n\n        }\n        return k;\n        /* return the number samples created at the new samplerate */\n    }\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var numUsed = new NumUsed();\n                io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\n                    gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\n                    numUsed, ch);\n                io.n_in = numUsed.num_used;\n            }\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\n\n\nfunction GetAudio() {\n    var parse;\n    var mpg;\n\n    this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n    }\n}\n\n\nfunction Parse() {\n    var ver;\n    var id3;\n    var pre;\n\n    this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n    }\n}\n\nfunction MPGLib() {\n}\n\nfunction ID3Tag() {\n    var bits;\n    var ver;\n\n    this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n    }\n}\n\nfunction Mp3Encoder(channels, samplerate, kbps) {\n    if (arguments.length != 3) {\n        console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\n        channels = 1;\n        samplerate = 44100;\n        kbps = 128;\n    }\n    var lame = new Lame();\n    var gaud = new GetAudio();\n    var ga = new GainAnalysis();\n    var bs = new BitStream();\n    var p = new Presets();\n    var qupvt = new QuantizePVT();\n    var qu = new Quantize();\n    var vbr = new VBRTag();\n    var ver = new Version();\n    var id3 = new ID3Tag();\n    var rv = new Reservoir();\n    var tak = new Takehiro();\n    var parse = new Parse();\n    var mpg = new MPGLib();\n\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n    bs.setModules(ga, mpg, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n    gaud.setModules(parse, mpg);\n    parse.setModules(ver, id3, p);\n\n    var gfp = lame.lame_init();\n\n    gfp.num_channels = channels;\n    gfp.in_samplerate = samplerate;\n    gfp.out_samplerate = samplerate;//fix by xiangyuecn 2018-12-6 01:48:12 64kbps以下可能无声音，手动控制输出码率\n    gfp.brate = kbps;\n    gfp.mode = MPEGMode.STEREO;\n    gfp.quality = 3;\n    gfp.bWriteVbrTag = false;\n    gfp.disable_reservoir = true;\n    gfp.write_id3tag_automatic = false;\n\n    var retcode = lame.lame_init_params(gfp);\n    var maxSamples = 1152;\n    var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n    var mp3buf = new_byte(mp3buf_size);\n\n    this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n            right = left;\n        }\n        if (left.length > maxSamples) {\n            maxSamples = left.length;\n            mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n            mp3buf = new_byte(mp3buf_size);\n        }\n\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n\n    this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n}\n\n//fix 精简\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n//testFullLength();\nlamejs.Mp3Encoder = Mp3Encoder;\n}\n//fs=require('fs');\nlamejs();\n\n\nRecorder.lamejs=lamejs;\n\n//end3 ****结束copy lamejs*****\n})();","/*\nmp3编码器，需带上mp3-engine.js引擎使用\nhttps://github.com/xiangyuecn/Recorder\n\n当然最佳推荐使用mp3、wav格式，代码也是优先照顾这两种格式\n浏览器支持情况\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\n*/\n(function(){\n\"use strict\";\n\nRecorder.prototype.enc_mp3={\n\tstable:true\n\t,testmsg:\"采样率范围48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000\"\n};\n\n\n\n//*******标准UI线程转码支持函数************\n\nRecorder.prototype.mp3=function(res,True,False){\n\t\tvar This=this,set=This.set,size=res.length;\n\t\t\n\t\t//优先采用worker编码，太低版本下面用老方法提供兼容\n\t\tvar ctx=This.mp3_start(set);\n\t\tif(ctx){\n\t\t\tThis.mp3_encode(ctx,res);\n\t\t\tThis.mp3_complete(ctx,True,False,1);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//https://github.com/wangpengfei15975/recorder.js\n\t\t//https://github.com/zhuker/lamejs bug:采样率必须和源一致，不然8k时没有声音，有问题fix：https://github.com/zhuker/lamejs/pull/11\n\t\tvar mp3=new Recorder.lamejs.Mp3Encoder(1,set.sampleRate,set.bitRate);\n\t\t\n\t\tvar blockSize=57600;\n\t\tvar data=[];\n\t\t\n\t\tvar idx=0,mp3Size=0;\n\t\tvar run=function(){\n\t\t\tif(idx<size){\n\t\t\t\tvar buf=mp3.encodeBuffer(res.subarray(idx,idx+blockSize));\n\t\t\t\tif(buf.length>0){\n\t\t\t\t\tmp3Size+=buf.buffer.byteLength;\n\t\t\t\t\tdata.push(buf.buffer);\n\t\t\t\t};\n\t\t\t\tidx+=blockSize;\n\t\t\t\tsetTimeout(run);//尽量避免卡ui\n\t\t\t}else{\n\t\t\t\tvar buf=mp3.flush();\n\t\t\t\tif(buf.length>0){\n\t\t\t\t\tmp3Size+=buf.buffer.byteLength;\n\t\t\t\t\tdata.push(buf.buffer);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//去掉开头的标记信息帧\n\t\t\t\tvar meta=mp3TrimFix.fn(data,mp3Size,size,set.sampleRate);\n\t\t\t\tmp3TrimFixSetMeta(meta,set);\n\t\t\t\t\n\t\t\t\tTrue(new Blob(data,{type:\"audio/mp3\"}));\n\t\t\t};\n\t\t};\n\t\trun();\n\t}\n\n\n//********边录边转码(Worker)支持函数，如果提供就代表可能支持，否则只支持标准转码*********\n\n//全局共享一个Worker，后台串行执行。如果每次都开一个新的，编码速度可能会慢很多，可能是浏览器运行缓存的因素，并且可能瞬间产生多个并行操作占用大量cpu\nvar mp3Worker;\nRecorder.BindDestroy(\"mp3Worker\",function(){\n\tconsole.log(\"mp3Worker Destroy\");\n\tmp3Worker&&mp3Worker.terminate();\n\tmp3Worker=null;\n});\n\n\nRecorder.prototype.mp3_envCheck=function(envInfo,set){//检查环境下配置是否可用\n\tvar errMsg=\"\";\n\t//需要实时编码返回数据，此时需要检查环境是否有实时特性、和是否可实时编码\n\tif(set.takeoffEncodeChunk){\n\t\tif(!envInfo.canProcess){\n\t\t\terrMsg=envInfo.envName+\"环境不支持实时处理\";\n\t\t}else if(!newContext()){//浏览器不能创建实时编码环境\n\t\t\terrMsg=\"当前浏览器版本太低，无法实时处理\";\n\t\t};\n\t};\n\treturn errMsg;\n};\nRecorder.prototype.mp3_start=function(set){//如果返回null代表不支持\n\treturn newContext(set);\n};\nvar openList={id:0};\nvar newContext=function(setOrNull){\n\tvar worker=mp3Worker;\n\ttry{\n\t\tif(!worker){\n\t\t\tvar onmsg=function(e){\n\t\t\t\tvar ed=e.data;\n\t\t\t\tvar cur=wk_ctxs[ed.id];\n\t\t\t\tif(ed.action==\"init\"){\n\t\t\t\t\twk_ctxs[ed.id]={\n\t\t\t\t\t\tsampleRate:ed.sampleRate\n\t\t\t\t\t\t,bitRate:ed.bitRate\n\t\t\t\t\t\t,takeoff:ed.takeoff\n\t\t\t\t\t\t\n\t\t\t\t\t\t,mp3Size:0\n\t\t\t\t\t\t,pcmSize:0\n\t\t\t\t\t\t,encArr:[]\n\t\t\t\t\t\t,encObj:new wk_lame.Mp3Encoder(1,ed.sampleRate,ed.bitRate)\n\t\t\t\t\t};\n\t\t\t\t}else if(!cur){\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tswitch(ed.action){\n\t\t\t\tcase \"stop\":\n\t\t\t\t\tcur.encObj=null;\n\t\t\t\t\tdelete wk_ctxs[ed.id];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"encode\":\n\t\t\t\t\tcur.pcmSize+=ed.pcm.length;\n\t\t\t\t\tvar buf=cur.encObj.encodeBuffer(ed.pcm);\n\t\t\t\t\tif(buf.length>0){\n\t\t\t\t\t\tif(cur.takeoff){\n\t\t\t\t\t\t\tself.postMessage({action:\"takeoff\",id:ed.id,chunk:buf});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcur.mp3Size+=buf.buffer.byteLength;\n\t\t\t\t\t\t\tcur.encArr.push(buf.buffer);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"complete\":\n\t\t\t\t\tvar buf=cur.encObj.flush();\n\t\t\t\t\tif(buf.length>0){\n\t\t\t\t\t\tif(cur.takeoff){\n\t\t\t\t\t\t\tself.postMessage({action:\"takeoff\",id:ed.id,chunk:buf});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcur.mp3Size+=buf.buffer.byteLength;\n\t\t\t\t\t\t\tcur.encArr.push(buf.buffer);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t//去掉开头的标记信息帧\n\t\t\t\t\tvar meta=wk_mp3TrimFix.fn(cur.encArr,cur.mp3Size,cur.pcmSize,cur.sampleRate);\n\t\t\t\t\t\n\t\t\t\t\tself.postMessage({\n\t\t\t\t\t\taction:ed.action\n\t\t\t\t\t\t,id:ed.id\n\t\t\t\t\t\t,blob:new Blob(cur.encArr,{type:\"audio/mp3\"})\n\t\t\t\t\t\t,meta:meta\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//创建一个新Worker\n\t\t\tvar jsCode=\");wk_lame();var wk_ctxs={};self.onmessage=\"+onmsg;\n\t\t\tjsCode+=\";var wk_mp3TrimFix={rm:\"+mp3TrimFix.rm+\",fn:\"+mp3TrimFix.fn+\"}\";\n\t\t\t\n\t\t\tvar lamejsCode=Recorder.lamejs.toString();\n\t\t\tvar url=(window.URL||webkitURL).createObjectURL(new Blob([\"var wk_lame=(\",lamejsCode,jsCode], {type:\"text/javascript\"}));\n\t\t\t\n\t\t\tworker=new Worker(url);\n\t\t\tsetTimeout(function(){\n\t\t\t\t(window.URL||webkitURL).revokeObjectURL(url);//必须要释放，不然每次调用内存都明显泄露内存\n\t\t\t},10000);//chrome 83 file协议下如果直接释放，将会使WebWorker无法启动\n\t\t\t\n\t\t\tworker.onmessage=function(e){\n\t\t\t\tvar data=e.data;\n\t\t\t\tvar ctx=openList[data.id];\n\t\t\t\tif(ctx){\n\t\t\t\t\tif(data.action==\"takeoff\"){\n\t\t\t\t\t\t//取走实时生成的mp3数据\n\t\t\t\t\t\tctx.set.takeoffEncodeChunk(new Uint8Array(data.chunk.buffer));\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//complete\n\t\t\t\t\t\tctx.call&&ctx.call(data);\n\t\t\t\t\t\tctx.call=null;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tvar ctx={worker:worker,set:setOrNull,takeoffQueue:[]};\n\t\tif(setOrNull){\n\t\t\tctx.id=++openList.id;\n\t\t\topenList[ctx.id]=ctx;\n\t\t\t\n\t\t\tworker.postMessage({\n\t\t\t\taction:\"init\"\n\t\t\t\t,id:ctx.id\n\t\t\t\t,sampleRate:setOrNull.sampleRate\n\t\t\t\t,bitRate:setOrNull.bitRate\n\t\t\t\t,takeoff:!!setOrNull.takeoffEncodeChunk\n\t\t\t\t\n\t\t\t\t,x:new Int16Array(5)//低版本浏览器不支持序列化TypedArray\n\t\t\t});\n\t\t}else{\n\t\t\tworker.postMessage({\n\t\t\t\tx:new Int16Array(5)//低版本浏览器不支持序列化TypedArray\n\t\t\t});\n\t\t};\n\t\t\n\t\t\n\t\tmp3Worker=worker;\n\t\treturn ctx;\n\t}catch(e){//出错了就不要提供了\n\t\tworker&&worker.terminate();\n\t\t\n\t\tconsole.error(e);\n\t\treturn null;\n\t};\n};\nRecorder.prototype.mp3_stop=function(startCtx){\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"stop\"\n\t\t\t,id:startCtx.id\n\t\t});\n\t\tstartCtx.worker=null;\n\t\tdelete openList[startCtx.id];\n\t\t\n\t\t//疑似泄露检测 排除id\n\t\tvar opens=-1;\n\t\tfor(var k in openList){\n\t\t\topens++;\n\t\t};\n\t\tif(opens){\n\t\t\tconsole.warn(\"mp3 worker剩\"+opens+\"个在串行等待\");\n\t\t};\n\t};\n};\nRecorder.prototype.mp3_encode=function(startCtx,pcm){\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"encode\"\n\t\t\t,id:startCtx.id\n\t\t\t,pcm:pcm\n\t\t});\n\t};\n};\nRecorder.prototype.mp3_complete=function(startCtx,True,False,autoStop){\n\tvar This=this;\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.call=function(data){\n\t\t\tmp3TrimFixSetMeta(data.meta,startCtx.set);\n\t\t\tTrue(data.blob);\n\t\t\t\n\t\t\tif(autoStop){\n\t\t\t\tThis.mp3_stop(startCtx);\n\t\t\t};\n\t\t};\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"complete\"\n\t\t\t,id:startCtx.id\n\t\t});\n\t}else{\n\t\tFalse(\"mp3编码器未打开\");\n\t};\n};\n\n\n\n\n\n\n\n//*******辅助函数************\n\n/*读取lamejs编码出来的mp3信息，只能读特定格式，如果读取失败返回null\nmp3Buffers=[ArrayBuffer,...]\nlength=mp3Buffers的数据二进制总长度\n*/\nRecorder.mp3ReadMeta=function(mp3Buffers,length){\n\t//kill babel-polyfill ES6 Number.parseInt 不然放到Worker里面找不到方法\n\tvar parseInt_ES3=typeof(window)==\"object\"?window.parseInt:self.parseInt;\n\t\n\tvar u8arr0=new Uint8Array(mp3Buffers[0]||[]);\n\tif(u8arr0.length<4){\n\t\treturn null;\n\t};\n\tvar byteAt=function(idx,u8){\n\t\treturn (\"0000000\"+((u8||u8arr0)[idx]||0).toString(2)).substr(-8);\n\t};\n\tvar b2=byteAt(0)+byteAt(1);\n\tvar b4=byteAt(2)+byteAt(3);\n\t\n\tif(!/^1{11}/.test(b2)){//未发现帧同步\n\t\treturn null;\n\t};\n\tvar version=({\"00\":2.5,\"10\":2,\"11\":1})[b2.substr(11,2)];\n\tvar layer=({\"01\":3})[b2.substr(13,2)];//仅支持Layer3\n\tvar sampleRate=({ //lamejs -> Tables.samplerate_table\n\t\t\"1\":[44100, 48000, 32000]\n\t\t,\"2\":[22050, 24000, 16000]\n\t\t,\"2.5\":[11025, 12000, 8000]\n\t})[version];\n\tsampleRate&&(sampleRate=sampleRate[parseInt_ES3(b4.substr(4,2),2)]);\n\tvar bitRate=[ //lamejs -> Tables.bitrate_table\n\t\t[0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160] //MPEG 2 2.5\n\t\t,[0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320]//MPEG 1\n\t][version==1?1:0][parseInt_ES3(b4.substr(0,4),2)];\n\t\n\tif(!version || !layer || !bitRate || !sampleRate){\n\t\treturn null;\n\t};\n\t\n\tvar duration=Math.round(length*8/bitRate);\n\tvar frame=layer==1?384:layer==2?1152:version==1?1152:576;\n\tvar frameDurationFloat=frame/sampleRate*1000;\n\tvar frameSize=Math.floor((frame*bitRate)/8/sampleRate*1000);\n\t\n\t//检测是否存在Layer3帧填充1字节。这里只获取第二帧的填充信息，首帧永远没有填充。其他帧可能隔一帧出现一个填充，或者隔很多帧出现一个填充；目测是取决于frameSize未舍入时的小数部分，因为有些采样率的frameSize会出现小数（11025、22050、44100 典型的除不尽），然后字节数无法表示这种小数，就通过一定步长来填充弥补小数部分丢失\n\tvar hasPadding=0,seek=0;\n\tfor(var i=0;i<mp3Buffers.length;i++){\n\t\t//寻找第二帧\n\t\tvar buf=mp3Buffers[i];\n\t\tseek+=buf.byteLength;\n\t\tif(seek>=frameSize+3){\n\t\t\tvar buf8=new Uint8Array(buf);\n\t\t\tvar idx=buf.byteLength-(seek-(frameSize+3)+1);\n\t\t\tvar ib4=byteAt(idx,buf8);\n\t\t\thasPadding=ib4.charAt(6)==\"1\";\n\t\t\tbreak;\n\t\t};\n\t};\n\tif(hasPadding){\n\t\tframeSize++;\n\t};\n\t\n\t\n\treturn {\n\t\tversion:version //1 2 2.5 -> MPEG1 MPEG2 MPEG2.5\n\t\t,layer:layer//3 -> Layer3\n\t\t,sampleRate:sampleRate //采样率 hz\n\t\t,bitRate:bitRate //比特率 kbps\n\t\t\n\t\t,duration:duration //音频时长 ms\n\t\t,size:length //总长度 byte\n\t\t,hasPadding:hasPadding //是否存在1字节填充，首帧永远没有，这个值其实代表的第二帧是否有填充，并不代表其他帧的\n\t\t,frameSize:frameSize //每帧最大长度，含可能存在的1字节padding byte\n\t\t,frameDurationFloat:frameDurationFloat //每帧时长，含小数 ms\n\t};\n};\n\n//去掉lamejs开头的标记信息帧，免得mp3解码出来的时长比pcm的长太多\nvar mp3TrimFix={//minfiy keep name\nrm:Recorder.mp3ReadMeta\n,fn:function(mp3Buffers,length,pcmLength,pcmSampleRate){\n\tvar meta=this.rm(mp3Buffers,length);\n\tif(!meta){\n\t\treturn {err:\"mp3非预定格式\"};\n\t};\n\tvar pcmDuration=Math.round(pcmLength/pcmSampleRate*1000);\n\t\n\t//开头多出这么多帧，移除掉；正常情况下最多为2帧\n\tvar num=Math.floor((meta.duration-pcmDuration)/meta.frameDurationFloat);\n\tif(num>0){\n\t\tvar size=num*meta.frameSize-(meta.hasPadding?1:0);//首帧没有填充，第二帧可能有填充，这里假设最多为2帧（测试并未出现3帧以上情况），其他帧不管，就算出现了并且导致了错误后面自动容错\n\t\tlength-=size;\n\t\tvar arr0=0,arrs=[];\n\t\tfor(var i=0;i<mp3Buffers.length;i++){\n\t\t\tvar arr=mp3Buffers[i];\n\t\t\tif(size<=0){\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tif(size>=arr.byteLength){\n\t\t\t\tsize-=arr.byteLength;\n\t\t\t\tarrs.push(arr);\n\t\t\t\tmp3Buffers.splice(i,1);\n\t\t\t\ti--;\n\t\t\t}else{\n\t\t\t\tmp3Buffers[i]=arr.slice(size);\n\t\t\t\tarr0=arr;\n\t\t\t\tsize=0;\n\t\t\t};\n\t\t};\n\t\tvar checkMeta=this.rm(mp3Buffers,length);\n\t\tif(!checkMeta){\n\t\t\t//还原变更，应该不太可能会出现\n\t\t\tarr0&&(mp3Buffers[0]=arr0);\n\t\t\tfor(var i=0;i<arrs.length;i++){\n\t\t\t\tmp3Buffers.splice(i,0,arrs[i]);\n\t\t\t};\n\t\t\tmeta.err=\"fix后数据错误，已还原，错误原因不明\";\n\t\t};\n\t\t\n\t\tvar fix=meta.trimFix={};\n\t\tfix.remove=num;\n\t\tfix.removeDuration=Math.round(num*meta.frameDurationFloat);\n\t\tfix.duration=Math.round(length*8/meta.bitRate);\n\t};\n\treturn meta;\n}\n};\nvar mp3TrimFixSetMeta=function(meta,set){\n\tvar tag=\"MP3信息 \";\n\tif(meta.sampleRate&&meta.sampleRate!=set.sampleRate || meta.bitRate&&meta.bitRate!=set.bitRate){\n\t\tconsole.warn(tag+\"和设置的不匹配set:\"+set.bitRate+\"kbps \"+set.sampleRate+\"hz，已更新set:\"+meta.bitRate+\"kbps \"+meta.sampleRate+\"hz\",set);\n\t\tset.sampleRate=meta.sampleRate;\n\t\tset.bitRate=meta.bitRate;\n\t};\n\t\n\tvar trimFix=meta.trimFix;\n\tif(trimFix){\n\t\ttag+=\"Fix移除\"+trimFix.remove+\"帧\"+trimFix.removeDuration+\"ms -> \"+trimFix.duration+\"ms\";\n\t\tif(trimFix.remove>2){\n\t\t\tmeta.err=(meta.err?meta.err+\", \":\"\")+\"移除帧数过多\";\n\t\t};\n\t}else{\n\t\ttag+=(meta.duration||\"-\")+\"ms\";\n\t};\n\t\n\tif(meta.err){\n\t\tconsole.error(tag,meta.err,meta);\n\t}else{\n\t\tconsole.log(tag,meta);\n\t};\n};\n\n\n\t\n})();","/*\n录音\nhttps://github.com/xiangyuecn/Recorder\n*/\n(function(factory){\n\tfactory(window);\n\t//umd returnExports.js\n\tif(typeof(define)=='function' && define.amd){\n\t\tdefine(function(){\n\t\t\treturn Recorder;\n\t\t});\n\t};\n\tif(typeof(module)=='object' && module.exports){\n\t\tmodule.exports=Recorder;\n\t};\n}(function(window){\n\"use strict\";\n\n//兼容环境\nvar LM=\"2020-11-15 21:36:11\";\nvar NOOP=function(){};\n//end 兼容环境 ****从以下开始copy源码*****\n\nvar Recorder=function(set){\n\treturn new initFn(set);\n};\n//是否已经打开了录音，所有工作都已经准备好了，就等接收音频数据了\nRecorder.IsOpen=function(){\n\tvar stream=Recorder.Stream;\n\tif(stream){\n\t\tvar tracks=stream.getTracks&&stream.getTracks()||stream.audioTracks||[];\n\t\tvar track=tracks[0];\n\t\tif(track){\n\t\t\tvar state=track.readyState;\n\t\t\treturn state==\"live\"||state==track.LIVE;\n\t\t};\n\t};\n\treturn false;\n};\n/*H5录音时的AudioContext缓冲大小。会影响H5录音时的onProcess调用速率，相对于AudioContext.sampleRate=48000时，4096接近12帧/s，调节此参数可生成比较流畅的回调动画。\n\t取值256, 512, 1024, 2048, 4096, 8192, or 16384\n\t注意，取值不能过低，2048开始不同浏览器可能回调速率跟不上造成音质问题。\n\t一般无需调整，调整后需要先close掉已打开的录音，再open时才会生效。\n*/\nRecorder.BufferSize=4096;\n//销毁已持有的所有全局资源，当要彻底移除Recorder时需要显式的调用此方法\nRecorder.Destroy=function(){\n\tCLog(\"Recorder Destroy\");\n\tfor(var k in DestroyList){\n\t\tDestroyList[k]();\n\t};\n};\nvar DestroyList={};\n//登记一个需要销毁全局资源的处理方法\nRecorder.BindDestroy=function(key,call){\n\tDestroyList[key]=call;\n};\n//判断浏览器是否支持录音，随时可以调用。注意：仅仅是检测浏览器支持情况，不会判断和调起用户授权，不会判断是否支持特定格式录音。\nRecorder.Support=function(){\n\tvar AC=window.AudioContext;\n\tif(!AC){\n\t\tAC=window.webkitAudioContext;\n\t};\n\tif(!AC){\n\t\treturn false;\n\t};\n\tvar scope=navigator.mediaDevices||{};\n\tif(!scope.getUserMedia){\n\t\tscope=navigator;\n\t\tscope.getUserMedia||(scope.getUserMedia=scope.webkitGetUserMedia||scope.mozGetUserMedia||scope.msGetUserMedia);\n\t};\n\tif(!scope.getUserMedia){\n\t\treturn false;\n\t};\n\t\n\tRecorder.Scope=scope;\n\tif(!Recorder.Ctx||Recorder.Ctx.state==\"closed\"){\n\t\t//不能反复构造，低版本number of hardware contexts reached maximum (6)\n\t\tRecorder.Ctx=new AC();\n\t\t\n\t\tRecorder.BindDestroy(\"Ctx\",function(){\n\t\t\tvar ctx=Recorder.Ctx;\n\t\t\tctx&&ctx.close&&ctx.close();\n\t\t});\n\t};\n\treturn true;\n};\n/*初始化H5音频采集连接，因为Stream是全局的，Safari上断开后就无法再次进行连接使用，表现为静音，因此使用全部使用全局处理避免调用到disconnect；全局处理也有利于屏蔽底层细节，start时无需再调用底层接口，提升兼容、可靠性。*/\nvar Connect=function(){\n\tvar ctx=Recorder.Ctx,stream=Recorder.Stream;\n\tvar media=stream._m=ctx.createMediaStreamSource(stream);\n\tvar process=stream._p=(ctx.createScriptProcessor||ctx.createJavaScriptNode).call(ctx,Recorder.BufferSize,1,1);//单声道，省的数据处理复杂\n\t\n\tmedia.connect(process);\n\tprocess.connect(ctx.destination);\n\t\n\tvar calls=stream._call;\n\tprocess.onaudioprocess=function(e){\n\t\tfor(var k0 in calls){//has item\n\t\t\tvar o=e.inputBuffer.getChannelData(0);//块是共享的，必须复制出来\n\t\t\tvar size=o.length;\n\t\t\t\n\t\t\tvar pcm=new Int16Array(size);\n\t\t\tvar sum=0;\n\t\t\tfor(var j=0;j<size;j++){//floatTo16BitPCM \n\t\t\t\tvar s=Math.max(-1,Math.min(1,o[j]));\n\t\t\t\ts=s<0?s*0x8000:s*0x7FFF;\n\t\t\t\tpcm[j]=s;\n\t\t\t\tsum+=Math.abs(s);\n\t\t\t};\n\t\t\t\n\t\t\tfor(var k in calls){\n\t\t\t\tcalls[k](pcm,sum);\n\t\t\t};\n\t\t\t\n\t\t\treturn;\n\t\t};\n\t};\n};\nvar Disconnect=function(){\n\tvar stream=Recorder.Stream;\n\tif(stream._m){\n\t\tstream._m.disconnect();\n\t\tstream._p.disconnect();\n\t\tstream._p.onaudioprocess=stream._p=stream._m=null;\n\t};\n};\n\n/*对pcm数据的采样率进行转换\npcmDatas: [[Int16,...]] pcm片段列表\npcmSampleRate:48000 pcm数据的采样率\nnewSampleRate:16000 需要转换成的采样率，newSampleRate>=pcmSampleRate时不会进行任何处理，小于时会进行重新采样\nprevChunkInfo:{} 可选，上次调用时的返回值，用于连续转换，本次调用将从上次结束位置开始进行处理。或可自行定义一个ChunkInfo从pcmDatas指定的位置开始进行转换\noption:{ 可选，配置项\n\t\tframeSize:123456 帧大小，每帧的PCM Int16的数量，采样率转换后的pcm长度为frameSize的整数倍，用于连续转换。目前仅在mp3格式时才有用，frameSize取值为1152，这样编码出来的mp3时长和pcm的时长完全一致，否则会因为mp3最后一帧录音不够填满时添加填充数据导致mp3的时长变长。\n\t\tframeType:\"\" 帧类型，一般为rec.set.type，提供此参数时无需提供frameSize，会自动使用最佳的值给frameSize赋值，目前仅支持mp3=1152(MPEG1 Layer3的每帧采采样数)，其他类型=1。\n\t\t\t以上两个参数用于连续转换时使用，最多使用一个，不提供时不进行帧的特殊处理，提供时必须同时提供prevChunkInfo才有作用。最后一段数据处理时无需提供帧大小以便输出最后一丁点残留数据。\n\t}\n\n返回ChunkInfo:{\n\t//可定义，从指定位置开始转换到结尾\n\tindex:0 pcmDatas已处理到的索引\n\toffset:0.0 已处理到的index对应的pcm中的偏移的下一个位置\n\t\n\t//仅作为返回值\n\tframeNext:null||[Int16,...] 下一帧的部分数据，frameSize设置了的时候才可能会有\n\tsampleRate:16000 结果的采样率，<=newSampleRate\n\tdata:[Int16,...] 转换后的PCM结果；如果是连续转换，并且pcmDatas中并没有新数据时，data的长度可能为0\n}\n*/\nRecorder.SampleData=function(pcmDatas,pcmSampleRate,newSampleRate,prevChunkInfo,option){\n\tprevChunkInfo||(prevChunkInfo={});\n\tvar index=prevChunkInfo.index||0;\n\tvar offset=prevChunkInfo.offset||0;\n\t\n\tvar frameNext=prevChunkInfo.frameNext||[];\n\toption||(option={});\n\tvar frameSize=option.frameSize||1;\n\tif(option.frameType){\n\t\tframeSize=option.frameType==\"mp3\"?1152:1;\n\t};\n\t\n\tvar size=0;\n\tfor(var i=index;i<pcmDatas.length;i++){\n\t\tsize+=pcmDatas[i].length;\n\t};\n\tsize=Math.max(0,size-Math.floor(offset));\n\t\n\t//采样 https://www.cnblogs.com/blqw/p/3782420.html\n\tvar step=pcmSampleRate/newSampleRate;\n\tif(step>1){//新采样低于录音采样，进行抽样\n\t\tsize=Math.floor(size/step);\n\t}else{//新采样高于录音采样不处理，省去了插值处理\n\t\tstep=1;\n\t\tnewSampleRate=pcmSampleRate;\n\t};\n\t\n\tsize+=frameNext.length;\n\tvar res=new Int16Array(size);\n\tvar idx=0;\n\t//添加上一次不够一帧的剩余数据\n\tfor(var i=0;i<frameNext.length;i++){\n\t\tres[idx]=frameNext[i];\n\t\tidx++;\n\t};\n\t//处理数据\n\tfor (var nl=pcmDatas.length;index<nl;index++) {\n\t\tvar o=pcmDatas[index];\n\t\tvar i=offset,il=o.length;\n\t\twhile(i<il){\n\t\t\t//res[idx]=o[Math.round(i)]; 直接简单抽样\n\t\t\t\n\t\t\t//https://www.cnblogs.com/xiaoqi/p/6993912.html\n\t\t\t//当前点=当前点+到后面一个点之间的增量，音质比直接简单抽样好些\n\t\t\tvar before = Math.floor(i);\n\t\t\tvar after = Math.ceil(i);\n\t\t\tvar atPoint = i - before;\n\t\t\t\n\t\t\tvar beforeVal=o[before];\n\t\t\tvar afterVal=after<il ? o[after]\n\t\t\t\t: (//后个点越界了，查找下一个数组\n\t\t\t\t\t(pcmDatas[index+1]||[beforeVal])[0]||0\n\t\t\t\t);\n\t\t\tres[idx]=beforeVal+(afterVal-beforeVal)*atPoint;\n\t\t\t\n\t\t\tidx++;\n\t\t\ti+=step;//抽样\n\t\t};\n\t\toffset=i-il;\n\t};\n\t//帧处理\n\tframeNext=null;\n\tvar frameNextSize=res.length%frameSize;\n\tif(frameNextSize>0){\n\t\tvar u8Pos=(res.length-frameNextSize)*2;\n\t\tframeNext=new Int16Array(res.buffer.slice(u8Pos));\n\t\tres=new Int16Array(res.buffer.slice(0,u8Pos));\n\t};\n\t\n\treturn {\n\t\tindex:index\n\t\t,offset:offset\n\t\t\n\t\t,frameNext:frameNext\n\t\t,sampleRate:newSampleRate\n\t\t,data:res\n\t};\n};\n\n\n/*计算音量百分比的一个方法\npcmAbsSum: pcm Int16所有采样的绝对值的和\npcmLength: pcm长度\n返回值：0-100，主要当做百分比用\n注意：这个不是分贝，因此没用volume当做名称*/\nRecorder.PowerLevel=function(pcmAbsSum,pcmLength){\n\t/*计算音量 https://blog.csdn.net/jody1989/article/details/73480259\n\t更高灵敏度算法:\n\t\t限定最大感应值10000\n\t\t\t线性曲线：低音量不友好\n\t\t\t\tpower/10000*100 \n\t\t\t对数曲线：低音量友好，但需限定最低感应值\n\t\t\t\t(1+Math.log10(power/10000))*100\n\t*/\n\tvar power=(pcmAbsSum/pcmLength) || 0;//NaN\n\tvar level;\n\tif(power<1251){//1250的结果10%，更小的音量采用线性取值\n\t\tlevel=Math.round(power/1250*10);\n\t}else{\n\t\tlevel=Math.round(Math.min(100,Math.max(0,(1+Math.log(power/10000)/Math.log(10))*100)));\n\t};\n\treturn level;\n};\n\n\n\n\n//带时间的日志输出，CLog(msg,errOrLogMsg, logMsg...) err为数字时代表日志类型1:error 2:log默认 3:warn，否则当做内容输出，第一个参数不能是对象因为要拼接时间，后面可以接无数个输出参数\nvar CLog=function(msg,err){\n\tvar now=new Date();\n\tvar t=(\"0\"+now.getMinutes()).substr(-2)\n\t\t+\":\"+(\"0\"+now.getSeconds()).substr(-2)\n\t\t+\".\"+(\"00\"+now.getMilliseconds()).substr(-3);\n\tvar arr=[\"[\"+t+\" Recorder]\"+msg];\n\tvar a=arguments;\n\tvar i=2,fn=console.log;\n\tif(typeof(err)==\"number\"){\n\t\tfn=err==1?console.error:err==3?console.warn:fn;\n\t}else{\n\t\ti=1;\n\t};\n\tfor(;i<a.length;i++){\n\t\tarr.push(a[i]);\n\t};\n\tfn.apply(console,arr);\n};\nRecorder.CLog=CLog;\n\n\n\n\nvar ID=0;\nfunction initFn(set){\n\tthis.id=++ID;\n\t\n\t//如果开启了流量统计，这里将发送一个图片请求\n\tRecorder.Traffic&&Recorder.Traffic();\n\t\n\t\n\tvar o={\n\t\ttype:\"mp3\" //输出类型：mp3,wav，wav输出文件尺寸超大不推荐使用，但mp3编码支持会导致js文件超大，如果不需支持mp3可以使js文件大幅减小\n\t\t,bitRate:16 //比特率 wav:16或8位，MP3：8kbps 1k/s，8kbps 2k/s 录音文件很小\n\t\t\n\t\t,sampleRate:16000 //采样率，wav格式大小=sampleRate*时间；mp3此项对低比特率有影响，高比特率几乎无影响。\n\t\t\t\t\t//wav任意值，mp3取值范围：48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000\n\t\t\t\t\t//采样率参考https://www.cnblogs.com/devin87/p/mp3-recorder.html\n\t\t\n\t\t,onProcess:NOOP //fn(buffers,powerLevel,bufferDuration,bufferSampleRate,newBufferIdx,asyncEnd) buffers=[[Int16,...],...]：缓冲的PCM数据，为从开始录音到现在的所有pcm片段；powerLevel：当前缓冲的音量级别0-100，bufferDuration：已缓冲时长，bufferSampleRate：缓冲使用的采样率（当type支持边录边转码(Worker)时，此采样率和设置的采样率相同，否则不一定相同）；newBufferIdx:本次回调新增的buffer起始索引；asyncEnd:fn() 如果onProcess是异步的(返回值为true时)，处理完成时需要调用此回调，如果不是异步的请忽略此参数，此方法回调时必须是真异步（不能真异步时需用setTimeout包裹）。onProcess返回值：如果返回true代表开启异步模式，在某些大量运算的场合异步是必须的，必须在异步处理完成时调用asyncEnd(不能真异步时需用setTimeout包裹)，在onProcess执行后新增的buffer会全部替换成空数组，因此本回调开头应立即将newBufferIdx到本次回调结尾位置的buffer全部保存到另外一个数组内，处理完成后写回buffers中本次回调的结尾位置。\n\t\t\n\t\t//*******高级设置******\n\t\t//,disableEnvInFix:false 内部参数，禁用设备卡顿时音频输入丢失补偿功能\n\t\t\n\t\t//,takeoffEncodeChunk:NOOP //fn(chunkBytes) chunkBytes=[Uint8,...]：实时编码环境下接管编码器输出，当编码器实时编码出一块有效的二进制音频数据时实时回调此方法；参数为二进制的Uint8Array，就是编码出来的音频数据片段，所有的chunkBytes拼接在一起即为完整音频。本实现的想法最初由QQ2543775048提出\n\t\t\t\t//当提供此回调方法时，将接管编码器的数据输出，编码器内部将放弃存储生成的音频数据；环境要求比较苛刻：如果当前环境不支持实时编码处理，将在open时直接走fail逻辑\n\t\t\t\t//因此提供此回调后调用stop方法将无法获得有效的音频数据，因为编码器内没有音频数据，因此stop时返回的blob将是一个字节长度为0的blob\n\t\t\t\t//目前只有mp3格式实现了实时编码，在支持实时处理的环境中将会实时的将编码出来的mp3片段通过此方法回调，所有的chunkBytes拼接到一起即为完整的mp3，此种拼接的结果比mock方法实时生成的音质更加，因为天然避免了首尾的静默\n\t\t\t\t//目前除mp3外其他格式不可以提供此回调，提供了将在open时直接走fail逻辑\n\t};\n\t\n\tfor(var k in set){\n\t\to[k]=set[k];\n\t};\n\tthis.set=o;\n\t\n\tthis._S=9;//stop同步锁，stop可以阻止open过程中还未运行的start\n};\n//同步锁，控制对Stream的竞争；用于close时中断异步的open；一个对象open如果变化了都要阻止close，Stream的控制权交个新的对象\nRecorder.Sync={/*open*/O:9,/*close*/C:9};\n\nRecorder.prototype=initFn.prototype={\n\t//打开录音资源True(),False(msg,isUserNotAllow)，需要调用close。注意：此方法是异步的；一般使用时打开，用完立即关闭；可重复调用，可用来测试是否能录音\n\topen:function(True,False){\n\t\tvar This=this;\n\t\tTrue=True||NOOP;\n\t\tvar failCall=function(errMsg,isUserNotAllow){\n\t\t\tisUserNotAllow=!!isUserNotAllow;\n\t\t\tCLog(\"录音open失败：\"+errMsg+\",isUserNotAllow:\"+isUserNotAllow,1);\n\t\t\tFalse&&False(errMsg,isUserNotAllow);\n\t\t};\n\t\t\n\t\tvar ok=function(){\n\t\t\tCLog(\"open成功\");\n\t\t\tTrue();\n\t\t\t\n\t\t\tThis._SO=0;//解除stop对open中的start调用的阻止\n\t\t};\n\t\tvar codeFail=function(code,msg){\n\t\t\ttry{//跨域的优先检测一下\n\t\t\t\twindow.top.a;\n\t\t\t}catch(e){\n\t\t\t\tfailCall('无权录音(跨域，请尝试给iframe添加麦克风访问策略，如allow=\"camera;microphone\")');\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tif(/Permission|Allow/i.test(code)){\n\t\t\t\tfailCall(\"用户拒绝了录音权限\",true);\n\t\t\t}else if(window.isSecureContext===false){\n\t\t\t\tfailCall(\"无权录音(需https)\");\n\t\t\t}else if(/Found/i.test(code)){//可能是非安全环境导致的没有设备\n\t\t\t\tfailCall(msg+\"，无可用麦克风\");\n\t\t\t}else{\n\t\t\t\tfailCall(msg);\n\t\t\t};\n\t\t};\n\t\t\n\t\t//同步锁\n\t\tvar Lock=Recorder.Sync;\n\t\tvar lockOpen=++Lock.O,lockClose=Lock.C;\n\t\tThis._O=This._O_=lockOpen;//记住当前的open，如果变化了要阻止close，这里假定了新对象已取代当前对象并且不再使用\n\t\tThis._SO=This._S;//记住open过程中的stop，中途任何stop调用后都不能继续open中的start\n\t\tvar lockFail=function(){\n\t\t\t//允许多次open，但不允许任何一次close，或者自身已经调用了关闭\n\t\t\tif(lockClose!=Lock.C || !This._O){\n\t\t\t\tvar err=\"open被取消\";\n\t\t\t\tif(lockOpen==Lock.O){\n\t\t\t\t\t//无新的open，已经调用了close进行取消，此处应让上次的close明确生效\n\t\t\t\t\tThis.close();\n\t\t\t\t}else{\n\t\t\t\t\terr=\"open被中断\";\n\t\t\t\t};\n\t\t\t\tfailCall(err);\n\t\t\t\treturn true;\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\t//如果已打开就不要再打开了\n\t\tif(Recorder.IsOpen()){\n\t\t\tok();\n\t\t\treturn;\n\t\t};\n\t\tif(!Recorder.Support()){\n\t\t\tcodeFail(\"\",\"此浏览器不支持录音\");\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//环境配置检查\n\t\tvar checkMsg=This.envCheck({envName:\"H5\",canProcess:true});\n\t\tif(checkMsg){\n\t\t\tfailCall(\"不能录音：\"+checkMsg);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//请求权限，如果从未授权，一般浏览器会弹出权限请求弹框\n\t\tvar f1=function(stream){\n\t\t\tRecorder.Stream=stream;\n\t\t\tstream._call={};//此时is open，但并未connect，是允许绑定接收数据的\n\t\t\tif(lockFail())return;\n\t\t\t\n\t\t\t//https://github.com/xiangyuecn/Recorder/issues/14 获取到的track.readyState!=\"live\"，刚刚回调时可能是正常的，但过一下可能就被关掉了，原因不明。延迟一下保证真异步。对正常浏览器不影响\n\t\t\tsetTimeout(function(){\n\t\t\t\tif(lockFail())return;\n\t\t\t\t\n\t\t\t\tif(Recorder.IsOpen()){\n\t\t\t\t\tConnect();\n\t\t\t\t\tok();\n\t\t\t\t}else{\n\t\t\t\t\tfailCall(\"录音功能无效：无音频流\");\n\t\t\t\t};\n\t\t\t},100);\n\t\t};\n\t\tvar f2=function(e){\n\t\t\tvar code=e.name||e.message||e.code+\":\"+e;\n\t\t\tCLog(\"请求录音权限错误\",1,e);\n\t\t\t\n\t\t\tcodeFail(code,\"无法录音：\"+code);\n\t\t};\n\t\tvar pro=Recorder.Scope.getUserMedia({audio:true},f1,f2);\n\t\tif(pro&&pro.then){\n\t\t\tpro.then(f1)[True&&\"catch\"](f2); //fix 关键字，保证catch压缩时保持字符串形式\n\t\t};\n\t}\n\t//关闭释放录音资源\n\t,close:function(call){\n\t\tcall=call||NOOP;\n\t\t\n\t\tvar This=this;\n\t\tThis._stop();\n\t\t\n\t\tvar Lock=Recorder.Sync;\n\t\tThis._O=0;\n\t\tif(This._O_!=Lock.O){\n\t\t\t//唯一资源Stream的控制权已交给新对象，这里不能关闭。此处在每次都弹权限的浏览器内可能存在泄漏，新对象被拒绝权限可能不会调用close，忽略这种不处理\n\t\t\tCLog(\"close被忽略\",3);\n\t\t\tcall();\n\t\t\treturn;\n\t\t};\n\t\tLock.C++;//获得控制权\n\t\t\n\t\tvar stream=Recorder.Stream;\n\t\tif(stream){\n\t\t\tDisconnect();\n\t\t\t\n\t\t\tvar tracks=stream.getTracks&&stream.getTracks()||stream.audioTracks||[];\n\t\t\tfor(var i=0;i<tracks.length;i++){\n\t\t\t\tvar track=tracks[i];\n\t\t\t\ttrack.stop&&track.stop();\n\t\t\t};\n\t\t\tstream.stop&&stream.stop();\n\t\t};\n\t\t\n\t\tRecorder.Stream=0;\n\t\tCLog(\"close\");\n\t\tcall();\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/*模拟一段录音数据，后面可以调用stop进行编码，需提供pcm数据[1,2,3...]，pcm的采样率*/\n\t,mock:function(pcmData,pcmSampleRate){\n\t\tvar This=this;\n\t\tThis._stop();//清理掉已有的资源\n\t\t\n\t\tThis.isMock=1;\n\t\tThis.mockEnvInfo=null;\n\t\tThis.buffers=[pcmData];\n\t\tThis.recSize=pcmData.length;\n\t\tThis.srcSampleRate=pcmSampleRate;\n\t\treturn This;\n\t}\n\t,envCheck:function(envInfo){//平台环境下的可用性检查，任何时候都可以调用检查，返回errMsg:\"\"正常，\"失败原因\"\n\t\t//envInfo={envName:\"H5\",canProcess:true}\n\t\tvar errMsg,This=this,set=This.set;\n\t\t\n\t\t//编码器检查环境下配置是否可用\n\t\tif(!errMsg){\n\t\t\tif(This[set.type+\"_envCheck\"]){//编码器已实现环境检查\n\t\t\t\terrMsg=This[set.type+\"_envCheck\"](envInfo,set);\n\t\t\t}else{//未实现检查的手动检查配置是否有效\n\t\t\t\tif(set.takeoffEncodeChunk){\n\t\t\t\t\terrMsg=set.type+\"类型不支持设置takeoffEncodeChunk\";\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\treturn errMsg||\"\";\n\t}\n\t,envStart:function(mockEnvInfo,sampleRate){//平台环境相关的start调用\n\t\tvar This=this,set=This.set;\n\t\tThis.isMock=mockEnvInfo?1:0;//非H5环境需要启用mock，并提供envCheck需要的环境信息\n\t\tThis.mockEnvInfo=mockEnvInfo;\n\t\tThis.buffers=[];//数据缓冲\n\t\tThis.recSize=0;//数据大小\n\t\t\n\t\tThis.envInLast=0;//envIn接收到最后录音内容的时间\n\t\tThis.envInFirst=0;//envIn接收到的首个录音内容的录制时间\n\t\tThis.envInFix=0;//补偿的总时间\n\t\tThis.envInFixTs=[];//补偿计数列表\n\t\t\n\t\tset.sampleRate=Math.min(sampleRate,set.sampleRate);//engineCtx需要提前确定最终的采样率\n\t\tThis.srcSampleRate=sampleRate;\n\t\t\n\t\tThis.engineCtx=0;\n\t\t//此类型有边录边转码(Worker)支持\n\t\tif(This[set.type+\"_start\"]){\n\t\t\tvar engineCtx=This.engineCtx=This[set.type+\"_start\"](set);\n\t\t\tif(engineCtx){\n\t\t\t\tengineCtx.pcmDatas=[];\n\t\t\t\tengineCtx.pcmSize=0;\n\t\t\t};\n\t\t};\n\t}\n\t,envResume:function(){//和平台环境无关的恢复录音\n\t\t//重新开始计数\n\t\tthis.envInFixTs=[];\n\t}\n\t,envIn:function(pcm,sum){//和平台环境无关的pcm[Int16]输入\n\t\tvar This=this,set=This.set,engineCtx=This.engineCtx;\n\t\tvar bufferSampleRate=This.srcSampleRate;\n\t\tvar size=pcm.length;\n\t\tvar powerLevel=Recorder.PowerLevel(sum,size);\n\t\t\n\t\tvar buffers=This.buffers;\n\t\tvar bufferFirstIdx=buffers.length;//之前的buffer都是经过onProcess处理好的，不允许再修改\n\t\tbuffers.push(pcm);\n\t\t\n\t\t//有engineCtx时会被覆盖，这里保存一份\n\t\tvar buffersThis=buffers;\n\t\tvar bufferFirstIdxThis=bufferFirstIdx;\n\t\t\n\t\t//卡顿丢失补偿：因为设备很卡的时候导致H5接收到的数据量不够造成播放时候变速，结果比实际的时长要短，此处保证了不会变短，但不能修复丢失的音频数据造成音质变差。当前算法采用输入时间侦测下一帧是否需要添加补偿帧，需要(6次输入||超过1秒)以上才会开始侦测，如果滑动窗口内丢失超过1/3就会进行补偿\n\t\tvar now=Date.now();\n\t\tvar pcmTime=Math.round(size/bufferSampleRate*1000);\n\t\tThis.envInLast=now;\n\t\tif(This.buffers.length==1){//记下首个录音数据的录制时间\n\t\t\tThis.envInFirst=now-pcmTime;\n\t\t};\n\t\tvar envInFixTs=This.envInFixTs;\n\t\tenvInFixTs.splice(0,0,{t:now,d:pcmTime});\n\t\t//保留3秒的计数滑动窗口，另外超过3秒的停顿不补偿\n\t\tvar tsInStart=now,tsPcm=0;\n\t\tfor(var i=0;i<envInFixTs.length;i++){\n\t\t\tvar o=envInFixTs[i];\n\t\t\tif(now-o.t>3000){\n\t\t\t\tenvInFixTs.length=i;\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\ttsInStart=o.t;\n\t\t\ttsPcm+=o.d;\n\t\t};\n\t\t//达到需要的数据量，开始侦测是否需要补偿\n\t\tvar tsInPrev=envInFixTs[1];\n\t\tvar tsIn=now-tsInStart;\n\t\tvar lost=tsIn-tsPcm;\n\t\tif( lost>tsIn/3 && (tsInPrev&&tsIn>1000 || envInFixTs.length>=6) ){\n\t\t\t//丢失过多，开始执行补偿\n\t\t\tvar addTime=now-tsInPrev.t-pcmTime;//距离上次输入丢失这么多ms\n\t\t\tif(addTime>pcmTime/5){//丢失超过本帧的1/5\n\t\t\t\tvar fixOpen=!set.disableEnvInFix;\n\t\t\t\tCLog(\"[\"+now+\"]\"+(fixOpen?\"\":\"未\")+\"补偿\"+addTime+\"ms\",3);\n\t\t\t\tThis.envInFix+=addTime;\n\t\t\t\t\n\t\t\t\t//用静默进行补偿\n\t\t\t\tif(fixOpen){\n\t\t\t\t\tvar addPcm=new Int16Array(addTime*bufferSampleRate/1000);\n\t\t\t\t\tsize+=addPcm.length;\n\t\t\t\t\tbuffers.push(addPcm);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\tvar sizeOld=This.recSize,addSize=size;\n\t\tvar bufferSize=sizeOld+addSize;\n\t\tThis.recSize=bufferSize;//此值在onProcess后需要修正，可能新数据被修改\n\t\t\n\t\t\n\t\t//此类型有边录边转码(Worker)支持，开启实时转码\n\t\tif(engineCtx){\n\t\t\t//转换成set的采样率\n\t\t\tvar chunkInfo=Recorder.SampleData(buffers,bufferSampleRate,set.sampleRate,engineCtx.chunkInfo);\n\t\t\tengineCtx.chunkInfo=chunkInfo;\n\t\t\t\n\t\t\tsizeOld=engineCtx.pcmSize;\n\t\t\taddSize=chunkInfo.data.length;\n\t\t\tbufferSize=sizeOld+addSize;\n\t\t\tengineCtx.pcmSize=bufferSize;//此值在onProcess后需要修正，可能新数据被修改\n\t\t\t\n\t\t\tbuffers=engineCtx.pcmDatas;\n\t\t\tbufferFirstIdx=buffers.length;\n\t\t\tbuffers.push(chunkInfo.data);\n\t\t\tbufferSampleRate=chunkInfo.sampleRate;\n\t\t};\n\t\t\n\t\tvar duration=Math.round(bufferSize/bufferSampleRate*1000);\n\t\tvar bufferNextIdx=buffers.length;\n\t\tvar bufferNextIdxThis=buffersThis.length;\n\t\t\n\t\t//允许异步处理buffer数据\n\t\tvar asyncEnd=function(){\n\t\t\t//重新计算size，异步的早已减去添加的，同步的需去掉本次添加的然后重新计算\n\t\t\tvar num=asyncBegin?0:-addSize;\n\t\t\tvar hasClear=buffers[0]==null;\n\t\t\tfor(var i=bufferFirstIdx;i<bufferNextIdx;i++){\n\t\t\t\tvar buffer=buffers[i];\n\t\t\t\tif(buffer==null){//已被主动释放内存，比如长时间实时传输录音时\n\t\t\t\t\thasClear=1;\n\t\t\t\t}else{\n\t\t\t\t\tnum+=buffer.length;\n\t\t\t\t\t\n\t\t\t\t\t//推入后台边录边转码\n\t\t\t\t\tif(engineCtx&&buffer.length){\n\t\t\t\t\t\tThis[set.type+\"_encode\"](engineCtx,buffer);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//同步清理This.buffers，不管buffers到底清了多少个，buffersThis是使用不到的进行全清\n\t\t\tif(hasClear && engineCtx){\n\t\t\t\tvar i=bufferFirstIdxThis;\n\t\t\t\tif(buffersThis[0]){\n\t\t\t\t\ti=0;\n\t\t\t\t};\n\t\t\t\tfor(;i<bufferNextIdxThis;i++){\n\t\t\t\t\tbuffersThis[i]=null;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//统计修改后的size，如果异步发生clear要原样加回来，同步的无需操作\n\t\t\tif(hasClear){\n\t\t\t\tnum=asyncBegin?addSize:0;\n\t\t\t\t\n\t\t\t\tbuffers[0]=null;//彻底被清理\n\t\t\t};\n\t\t\tif(engineCtx){\n\t\t\t\tengineCtx.pcmSize+=num;\n\t\t\t}else{\n\t\t\t\tThis.recSize+=num;\n\t\t\t};\n\t\t};\n\t\t//实时回调处理数据，允许修改或替换上次回调以来新增的数据 ，但是不允许修改已处理过的，不允许增删第一维数组 ，允许将第二维数组任意修改替换成空数组也可以\n\t\tvar asyncBegin=set.onProcess(buffers,powerLevel,duration,bufferSampleRate,bufferFirstIdx,asyncEnd);\n\t\t\n\t\tif(asyncBegin===true){\n\t\t\t//开启了异步模式，onProcess已接管buffers新数据，立即清空，避免出现未处理的数据\n\t\t\tvar hasClear=0;\n\t\t\tfor(var i=bufferFirstIdx;i<bufferNextIdx;i++){\n\t\t\t\tif(buffers[i]==null){//已被主动释放内存，比如长时间实时传输录音时 ，但又要开启异步模式，此种情况是非法的\n\t\t\t\t\thasClear=1;\n\t\t\t\t}else{\n\t\t\t\t\tbuffers[i]=new Int16Array(0);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif(hasClear){\n\t\t\t\tCLog(\"未进入异步前不能清除buffers\",3);\n\t\t\t}else{\n\t\t\t\t//还原size，异步结束后再统计仅修改后的size，如果发生clear要原样加回来\n\t\t\t\tif(engineCtx){\n\t\t\t\t\tengineCtx.pcmSize-=addSize;\n\t\t\t\t}else{\n\t\t\t\t\tThis.recSize-=addSize;\n\t\t\t\t};\n\t\t\t};\n\t\t}else{\n\t\t\tasyncEnd();\n\t\t};\n\t}\n\t\n\t\n\t\n\t\n\t//开始录音，需先调用open；只要open成功时，调用此方法是安全的，如果未open强行调用导致的内部错误将不会有任何提示，stop时自然能得到错误\n\t,start:function(){\n\t\tif(!Recorder.IsOpen()){\n\t\t\tCLog(\"未open\",1);\n\t\t\treturn;\n\t\t};\n\t\tCLog(\"开始录音\");\n\t\t\n\t\tvar This=this,set=This.set,ctx=Recorder.Ctx;\n\t\tThis._stop();\n\t\tThis.state=0;\n\t\tThis.envStart(null,ctx.sampleRate);\n\t\t\n\t\t//检查open过程中stop是否已经调用过\n\t\tif(This._SO&&This._SO+1!=This._S){//上面调用过一次 _stop\n\t\t\t//open未完成就调用了stop，此种情况终止start。也应尽量避免出现此情况\n\t\t\tCLog(\"start被中断\",3);\n\t\t\treturn;\n\t\t};\n\t\tThis._SO=0;\n\t\t\n\t\tvar end=function(){\n\t\t\tThis.state=1;\n\t\t\tThis.resume();\n\t\t};\n\t\tif(ctx.state==\"suspended\"){\n\t\t\tctx.resume().then(function(){\n\t\t\t\tCLog(\"ctx resume\");\n\t\t\t\tend();\n\t\t\t});\n\t\t}else{\n\t\t\tend();\n\t\t};\n\t}\n\t/*暂停录音*/\n\t,pause:function(){\n\t\tvar This=this;\n\t\tif(This.state){\n\t\t\tThis.state=2;\n\t\t\tCLog(\"pause\");\n\t\t\tdelete Recorder.Stream._call[This.id];\n\t\t};\n\t}\n\t/*恢复录音*/\n\t,resume:function(){\n\t\tvar This=this;\n\t\tif(This.state){\n\t\t\tThis.state=1;\n\t\t\tCLog(\"resume\");\n\t\t\tThis.envResume();\n\t\t\t\n\t\t\tRecorder.Stream._call[This.id]=function(pcm,sum){\n\t\t\t\tif(This.state==1){\n\t\t\t\t\tThis.envIn(pcm,sum);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t}\n\t\n\t\n\t\n\t\n\t,_stop:function(keepEngine){\n\t\tvar This=this,set=This.set;\n\t\tif(!This.isMock){\n\t\t\tThis._S++;\n\t\t};\n\t\tif(This.state){\n\t\t\tThis.pause();\n\t\t\tThis.state=0;\n\t\t};\n\t\tif(!keepEngine && This[set.type+\"_stop\"]){\n\t\t\tThis[set.type+\"_stop\"](This.engineCtx);\n\t\t\tThis.engineCtx=0;\n\t\t};\n\t}\n\t/*\n\t结束录音并返回录音数据blob对象\n\t\tTrue(blob,duration) blob：录音数据audio/mp3|wav格式\n\t\t\t\t\t\t\tduration：录音时长，单位毫秒\n\t\tFalse(msg)\n\t\tautoClose:false 可选，是否自动调用close，默认为false\n\t*/\n\t,stop:function(True,False,autoClose){\n\t\tvar This=this,set=This.set,t1;\n\t\tCLog(\"Stop \"+(This.envInLast?This.envInLast-This.envInFirst+\"ms 补\"+This.envInFix+\"ms\":\"-\"));\n\t\t\n\t\tvar end=function(){\n\t\t\tThis._stop();//彻底关掉engineCtx\n\t\t\tif(autoClose){\n\t\t\t\tThis.close();\n\t\t\t};\n\t\t};\n\t\tvar err=function(msg){\n\t\t\tCLog(\"结束录音失败：\"+msg,1);\n\t\t\tFalse&&False(msg);\n\t\t\tend();\n\t\t};\n\t\tvar ok=function(blob,duration){\n\t\t\tCLog(\"结束录音 编码\"+(Date.now()-t1)+\"ms 音频\"+duration+\"ms/\"+blob.size+\"b\");\n\t\t\tif(set.takeoffEncodeChunk){//接管了输出，此时blob长度为0\n\t\t\t\tCLog(\"启用takeoffEncodeChunk后stop返回的blob长度为0不提供音频数据\",3);\n\t\t\t}else if(blob.size<Math.max(100,duration/2)){//1秒小于0.5k？\n\t\t\t\terr(\"生成的\"+set.type+\"无效\");\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tTrue&&True(blob,duration);\n\t\t\tend();\n\t\t};\n\t\tif(!This.isMock){\n\t\t\tif(!This.state){\n\t\t\t\terr(\"未开始录音\");\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tThis._stop(true);\n\t\t};\n\t\tvar size=This.recSize;\n\t\tif(!size){\n\t\t\terr(\"未采集到录音\");\n\t\t\treturn;\n\t\t};\n\t\tif(!This.buffers[0]){\n\t\t\terr(\"音频被释放\");\n\t\t\treturn;\n\t\t};\n\t\tif(!This[set.type]){\n\t\t\terr(\"未加载\"+set.type+\"编码器\");\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//环境配置检查，此处仅针对mock调用，因为open已经检查过了\n\t\tif(This.isMock){\n\t\t\tvar checkMsg=This.envCheck(This.mockEnvInfo||{envName:\"mock\",canProcess:false});//没有提供环境信息的mock时没有onProcess回调\n\t\t\tif(checkMsg){\n\t\t\t\terr(\"录音错误：\"+checkMsg);\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\t//此类型有边录边转码(Worker)支持\n\t\tvar engineCtx=This.engineCtx;\n\t\tif(This[set.type+\"_complete\"]&&engineCtx){\n\t\t\tvar duration=Math.round(engineCtx.pcmSize/set.sampleRate*1000);//采用后的数据长度和buffers的长度可能微小的不一致，是采样率连续转换的精度问题\n\t\t\t\n\t\t\tt1=Date.now();\n\t\t\tThis[set.type+\"_complete\"](engineCtx,function(blob){\n\t\t\t\tok(blob,duration);\n\t\t\t},err);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//标准UI线程转码，调整采样率\n\t\tt1=Date.now();\n\t\tvar chunk=Recorder.SampleData(This.buffers,This.srcSampleRate,set.sampleRate);\n\t\t\n\t\tset.sampleRate=chunk.sampleRate;\n\t\tvar res=chunk.data;\n\t\tvar duration=Math.round(res.length/set.sampleRate*1000);\n\t\t\n\t\tCLog(\"采样\"+size+\"->\"+res.length+\" 花:\"+(Date.now()-t1)+\"ms\");\n\t\t\n\t\tsetTimeout(function(){\n\t\t\tt1=Date.now();\n\t\t\tThis[set.type](res,function(blob){\n\t\t\t\tok(blob,duration);\n\t\t\t},function(msg){\n\t\t\t\terr(msg);\n\t\t\t});\n\t\t});\n\t}\n\n};\n\nif(window.Recorder){\n\twindow.Recorder.Destroy();\n};\nwindow.Recorder=Recorder;\n\n//end ****copy源码结束*****\nRecorder.LM=LM;\n\n//流量统计用1像素图片地址，设置为空将不参与统计\nRecorder.TrafficImgUrl=\"//ia.51.la/go1?id=20469973&pvFlag=1\";\nRecorder.Traffic=function(){\n\tvar imgUrl=Recorder.TrafficImgUrl;\n\tif(imgUrl){\n\t\tvar data=Recorder.Traffic;\n\t\tvar idf=location.href.replace(/#.*/,\"\");\n\t\t\n\t\tif(imgUrl.indexOf(\"//\")==0){\n\t\t\t//给url加上http前缀，如果是file协议下，不加前缀没法用\n\t\t\tif(/^https:/i.test(idf)){\n\t\t\t\timgUrl=\"https:\"+imgUrl;\n\t\t\t}else{\n\t\t\t\timgUrl=\"http:\"+imgUrl;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif(!data[idf]){\n\t\t\tdata[idf]=1;\n\t\t\t\n\t\t\tvar img=new Image();\n\t\t\timg.src=imgUrl;\n\t\t\tCLog(\"Traffic Analysis Image: Recorder.TrafficImgUrl=\"+Recorder.TrafficImgUrl);\n\t\t};\n\t};\n};\n\n}));","export class ByteArray {\r\n\r\n    constructor() {\r\n        this.list=[];\r\n        this.byteOffset=0;\r\n        this.length=0;\r\n    }\r\n\r\n    push(unit8Arr) {\r\n        this.list.push(unit8Arr);\r\n        this.length+=unit8Arr.length;\r\n    }\r\n\r\n    readBytes(len) {\r\n        if(len>0){\r\n            let rbuf=new Uint8Array(len);\r\n            let rbuf_ind=0;\r\n            while(rbuf_ind<len){\r\n                if(this.list.length>0){\r\n                    let tmpbuf=this.list.shift();\r\n                    let tmplen=tmpbuf.length;\r\n                    let last_len=len-rbuf_ind;\r\n                    if(tmplen>=last_len){\r\n                        //足夠了\r\n                        let tmpbuf2 = tmpbuf.subarray(0, last_len);\r\n                        rbuf.set(tmpbuf2,rbuf_ind);\r\n                        rbuf_ind+=tmpbuf2.length;\r\n                        if(last_len<tmplen){\r\n                            let newUint8Array = tmpbuf.subarray(last_len, tmplen);\r\n                            this.list.unshift(newUint8Array);\r\n                        }\r\n                        break;\r\n                    }else{\r\n                        rbuf.set(tmpbuf,rbuf_ind);\r\n                        rbuf_ind+=tmplen;\r\n                    }\r\n                }else{\r\n                    rbuf=rbuf.subarray(0, rbuf_ind);\r\n                    break;\r\n                }\r\n            }\r\n            this.length-=rbuf.length;\r\n            return rbuf;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}","\r\nexport class Util {\r\n    static isEmptyString(str) {\r\n        if (str == undefined || str == null || str == \"\") {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}","import {GPlayerEvent, GErrorType, GPlaybackControlStatus} from './player/gplayer-events';\r\nimport {GTalkerEvent, GTalkerConnectStatus, GTalkerConnectErrorType} from './talker/gtalker-events';\r\nimport {GHelperEvent} from \"./helper/ghelper-events.js\";\r\nimport {GPlayer} from './player/gplayer.js';\r\nimport { HttpFlvPlayer } from './player/httpflv-player.js';\r\nimport { HttpFlvTalker } from './talker/httpflv-talker.js';\r\nimport { GHelper } from \"./helper/ghelper.js\";\r\n\r\nfunction createPlayer(url, config = null) {\r\n  let player = new HttpFlvPlayer();\r\n  player.init(url, config);\r\n  return player;\r\n}\r\n\r\nfunction createTalker(downUrl, upUrl, imei, channel, config = null) {\r\n  let talker = new HttpFlvTalker();\r\n  if (!talker.init(downUrl, upUrl, imei, channel, config)) {\r\n    return null;\r\n  }\r\n  return talker;\r\n}\r\n\r\nfunction createHelper(url) {\r\n  let helper = new GHelper();\r\n  helper.init(url);\r\n  return helper;\r\n}\r\n\r\nfunction isHttpFlvSupported() {\r\n  return HttpFlvPlayer.isSupported();\r\n}\r\n\r\nfunction isTalkSupported() {\r\n  return HttpFlvTalker.isSupported();\r\n}\r\n\r\nlet gmediajs = {};\r\n\r\ngmediajs.createPlayer = createPlayer;\r\ngmediajs.isHttpFlvSupported = isHttpFlvSupported;\r\ngmediajs.HttpFlvPlayer = HttpFlvPlayer;\r\ngmediajs.GPlayerEvent = GPlayerEvent;\r\ngmediajs.GErrorType = GErrorType;\r\ngmediajs.GPlaybackControlStatus = GPlaybackControlStatus;\r\n\r\ngmediajs.createTalker = createTalker;\r\ngmediajs.isTalkSupported = isTalkSupported;\r\ngmediajs.HttpFlvTalker = HttpFlvTalker;\r\ngmediajs.GTalkerEvent = GTalkerEvent;\r\ngmediajs.GTalkerConnectStatus = GTalkerConnectStatus;\r\ngmediajs.GTalkerConnectErrorType = GTalkerConnectErrorType;\r\n\r\ngmediajs.createHelper = createHelper;\r\ngmediajs.GHelper = GHelper;\r\ngmediajs.GHelperEvent = GHelperEvent;\r\n\r\nexport default gmediajs;","export const GHelperEvent = {\r\n    MEDIA_STATE: 'media_state'\r\n};","import {GHelperEvent} from \"./ghelper-events.js\"\r\nexport class GHelper {\r\n    constructor() {\r\n        this.callMediaState = null;\r\n        this.connect = null;\r\n    }\r\n\r\n    init(url) {\r\n        this.connect = new WebSocket(url);\r\n        this.connect.onopen = this._onConnectOpen.bind(this);\r\n        this.connect.onmessage = this._onConnectMessage.bind(this);\r\n        this.connect.onclose = this._onConnectClose.bind(this);\r\n        this.connect.onerror = this._onConnectError.bind(this);\r\n    }\r\n\r\n    on(event, call) {\r\n        if (event = GHelperEvent.MEDIA_STATE) {\r\n            this.callMediaState = call;\r\n        }\r\n    }\r\n\r\n    off(event) {\r\n        if (event = GHelperEvent.MEDIA_STATE) {\r\n            this.callMediaState = null;\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.callMediaState = null;\r\n\r\n        if (this.connect != null) {\r\n            this.connect.close();\r\n            this.connect = null;\r\n        }\r\n    }\r\n\r\n    _onConnectOpen() {\r\n        this._sendConsumeMediaStateCmd();\r\n    }\r\n\r\n    _onConnectMessage(e) {\r\n        let head = JSON.parse(e.data);\r\n        if (head == null || head.type == null) {\r\n            return;\r\n        }\r\n\r\n        if (head.type == \"mediastate\" && this.callMediaState != null) {\r\n            this.callMediaState(head.data);\r\n        }\r\n    }\r\n\r\n    _onConnectClose() {\r\n        \r\n    }\r\n\r\n    _onConnectError() {\r\n        \r\n    }\r\n\r\n    _sendConsumeMediaStateCmd() {\r\n        let head = {}\r\n        head[\"cmd\"] = \"consume\";\r\n        head[\"type\"] = \"mediastate\";\r\n        head[\"id\"] = \"\";\r\n        head[\"data\"] = {};\r\n\r\n        let msg = JSON.stringify(head);\r\n\r\n        this.connect.send(msg);\r\n    }\r\n}","module.exports = require('./gmedia.js').default;","export const GPlayerEvent = {\r\n    ERROR: 'error',\r\n    MEDIA_SOURCE_END: 'media_source_end',\r\n    TIMEUPDATE: 'timeupdate',\r\n    STATISTICS_INFO: 'statistics_info',\r\n    MEDIA_STATE: 'media_state',\r\n    PLAYBACK_CONTROL_EVENT: 'playback_control_event',\r\n};\r\n\r\nexport const GErrorType = {\r\n    NETWORK_ERROR: 'NetworkError',\r\n    MEDIA_ERROR: 'MediaError',\r\n    OTHER_ERROR: 'OtherError'\r\n};\r\n\r\nexport const GPlaybackControlStatus = {\r\n    SeekStart: 0,\r\n    SeekFail: 1,\r\n    SeekSuccess: 2\r\n};\r\n","export class GPlayer {\r\n\r\n    constructor(typeName) {\r\n        this._type = typeName || 'undefined';\r\n    }\r\n\r\n    init(url, config) {\r\n    }\r\n\r\n    on(event, call) {\r\n\r\n    }\r\n\r\n    off(event) {\r\n\r\n    }\r\n\r\n    attachMediaElement(mediaElement) {  \r\n    }\r\n\r\n    load() {\r\n    }\r\n\r\n    play() {\r\n\r\n    }\r\n\r\n    capture() {\r\n\r\n    }\r\n\r\n    pause() {\r\n        \r\n    }\r\n\r\n    resume() {\r\n        \r\n    }\r\n\r\n    seekToNewestTime () {\r\n\r\n    }\r\n\r\n    seek(time) {\r\n\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n}","import {GPlayerEvent, GErrorType, GPlaybackControlStatus} from \"./gplayer-events.js\"\r\nimport {GPlayer} from \"./gplayer.js\"\r\nimport flvjs from \"flv-g7.js\";\r\n\r\nimport {GHelperEvent} from \"../helper/ghelper-events.js\";\r\nimport { GHelper } from \"../helper/ghelper.js\";\r\n\r\nconst PlaybackKey = \"g7-flv-video-playback\";\r\n\r\nconst PlaybackControl = {\r\n    None:0,\r\n    Active:1,\r\n    Passive:2\r\n}\r\n\r\nexport class HttpFlvPlayer extends GPlayer {\r\n\r\n    constructor () {\r\n        super('httpflv-player');\r\n        this.TAG = 'HttpFlvPlayer';\r\n        \r\n        this.player = null;\r\n        this.element = null;\r\n        this.isLive = true;\r\n\r\n        this.helpUrl = null;\r\n        this.helper = null;\r\n\r\n        this.playbackPlan = 1;\r\n        this.playbackControl = PlaybackControl.None;\r\n\r\n        this.streamEnd = false;\r\n        this.needSeek = false;\r\n        this.seeking = false;\r\n        this.seekTime = 0;\r\n        this.newPlayStartTime = 0;\r\n        this.lastSendSeekTs = 0;\r\n\r\n        this.callbackTimeUpdate = null;\r\n        this.callbackStatistics = null;\r\n        this.callbackError = null;\r\n        this.callbackMediaSourceEnd = null;\r\n        this.callbackMediaState = null;\r\n        this.callbackPlaybackControlEvent = null;\r\n\r\n        this.checkerSeek = null;\r\n\r\n        this.e = {\r\n            onTimeUpdate : this._onElementTime.bind(this)\r\n        };\r\n    }\r\n\r\n    static isSupported() {\r\n        return window.MediaSource &&\r\n            window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\r\n    }\r\n\r\n    init (url, config) {\r\n        this._checkConfig(config);\r\n        this.isLive = this._checkIfLive(url);  \r\n        this.playbackControl = this._checkPlaybackControl(url);  \r\n\r\n        this.player = flvjs.createPlayer({isLive:this.isLive, type:'flv',url:url}, {\r\n            lazyLoad: false,\r\n            enableStashBuffer: false,\r\n            deferLoadAfterSourceOpen:true\r\n        });\r\n\r\n        this.player.on(flvjs.Events.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\r\n        this.player.on(flvjs.Events.ERROR, this._onError.bind(this));\r\n        this.player.setMediaSourceEndCallback(this._onMediaSourceEnd.bind(this));\r\n        this.player.setStreamTimeCallback(this._onStreamTime.bind(this));\r\n    }\r\n\r\n    on(event, call) {\r\n        if (event === GPlayerEvent.TIMEUPDATE) {\r\n            this.callbackTimeUpdate = call;\r\n        }\r\n        else if (event === GPlayerEvent.STATISTICS_INFO) {\r\n            this.callbackStatistics = call;\r\n        }\r\n        else if (event === GPlayerEvent.ERROR) {\r\n            this.callbackError = call;\r\n        }\r\n        else if (event === GPlayerEvent.MEDIA_SOURCE_END) {\r\n            this.callbackMediaSourceEnd = call;\r\n        }\r\n        else if (event === GPlayerEvent.MEDIA_STATE) {\r\n            this.callbackMediaState = call;\r\n        }\r\n        else if (event === GPlayerEvent.PLAYBACK_CONTROL_EVENT) {\r\n            this.callbackPlaybackControlEvent = call;\r\n        }\r\n    }\r\n\r\n    off(event) {\r\n        if (event === GPlayerEvent.TIMEUPDATE) {\r\n            this.callbackTimeUpdate = null;\r\n        }\r\n        else if (event === GPlayerEvent.STATISTICS_INFO) {\r\n            this.callbackStatistics = null;\r\n        }\r\n        else if (event === GPlayerEvent.ERROR) {\r\n            this.callbackError = null;\r\n        }\r\n        else if (event === GPlayerEvent.MEDIA_SOURCE_END) {\r\n            this.callbackMediaSourceEnd = null;\r\n        }\r\n        else if (event === GPlayerEvent.MEDIA_STATE) {\r\n            this.callbackMediaState = null;\r\n        }\r\n        else if (event === GPlayerEvent.PLAYBACK_CONTROL_EVENT) {\r\n            this.callbackPlaybackControlEvent = null;\r\n        }\r\n    }\r\n\r\n    attachMediaElement(el) {\r\n        this.element = el;\r\n        this.element.addEventListener(\"timeupdate\", this.e.onTimeUpdate);\r\n        this.player.attachMediaElement(el);\r\n    }\r\n\r\n    load() {\r\n        if (this.helpUrl != null) {\r\n            this.helper = new GHelper();\r\n            this.helper.init(this.helpUrl);\r\n            this.helper.on(GHelperEvent.MEDIA_STATE,this._onMediaState.bind(this));\r\n        }\r\n\r\n        this.player.load();\r\n    }\r\n\r\n    play() {\r\n        this.player.play();\r\n    }\r\n\r\n    capture() {\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.width = this.element.videoWidth;\r\n        canvas.height = this.element.videoHeight;\r\n        canvas.getContext('2d').drawImage(this.element, 0, 0, canvas.width, canvas.height);\r\n        let dataurl = canvas.toDataURL();\r\n        return dataurl;\r\n    }\r\n\r\n    pause() {\r\n        this.element.pause();\r\n        return false;\r\n    }\r\n\r\n    resume() {\r\n        this.element.play();\r\n        return false;\r\n    }\r\n\r\n    seekToNewestTime () {\r\n        let buffered = this.element.buffered;\r\n        if (buffered.length > 0) { \r\n            let from = buffered.start(buffered.length -1);\r\n            let to = buffered.end(buffered.length -1);\r\n            this.element.currentTime = to;\r\n        }\r\n    }\r\n\r\n    seek(time) {\r\n        if (this.element == null) {\r\n            return false;\r\n        }\r\n        if (this.seeking) {\r\n            return false;\r\n        }\r\n        \r\n        if (this.callbackPlaybackControlEvent != null) {\r\n            this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekStart, \r\n                \"开始切换播放时间\");\r\n        }\r\n\r\n        if (!this._seekByCached(time)) {\r\n            return false;\r\n        }\r\n        if (this.playbackControl == PlaybackControl.Active) {\r\n            this._seekByActive(time);\r\n        }\r\n        else {\r\n            this._seekByPassive(time);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    destroy() {\r\n        if (this.helper != null) {\r\n            this.helper.destroy();\r\n        }\r\n\r\n        if (this.player != null) {\r\n            this.player.pause();\r\n            this.player.unload();\r\n            this.player.detachMediaElement();\r\n            this.player.destroy();\r\n            this.player = null;\r\n        }\r\n\r\n        if (this.element != null) {\r\n            this.element.removeEventListener(\"timeupdate\", this.e.onTimeUpdate);\r\n            this.element = null;\r\n        }\r\n    }\r\n\r\n    _checkConfig(config) {\r\n        if (config == null) {\r\n            return;\r\n        }\r\n\r\n        if (config.playbackPlan != null) {\r\n            this.playbackPlan = config.playbackPlan;\r\n        }\r\n\r\n        if (config.helpUrl != null) {\r\n            this.helpUrl = config.helpUrl;\r\n        }\r\n    }\r\n\r\n    _checkIfLive(url) {\r\n        if (url.indexOf(PlaybackKey) != -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _checkPlaybackControl(url) {\r\n        let arr = url.split('&stream=');\r\n        if (arr.length < 2 || arr[1].length < 3) {\r\n            return PlaybackControl.None;\r\n        }\r\n        let streamName = arr[1];\r\n        let deviceType = streamName.substring(0,3);\r\n        if (deviceType == '131') {\r\n            return PlaybackControl.Passive;\r\n        }\r\n        return PlaybackControl.Active;\r\n    }\r\n\r\n    _seekByCached(time) {\r\n        if (!this.streamEnd) {\r\n            return true;\r\n        }\r\n\r\n        this.seeking = true;\r\n\r\n        let bCached = false;\r\n        let buffered = this.element.buffered;\r\n        for (let i = 0; i < buffered.length; i++) {\r\n            let from = buffered.start(i);\r\n            let to = buffered.end(i);\r\n            if (time > from && time < to) {\r\n                bCached = true;\r\n            }\r\n        }\r\n\r\n        if (bCached && time > this.element.currentTime) {\r\n            this.element.currentTime = time;\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekSuccess,\r\n                    \"切换播放时间成功\");\r\n            }\r\n        }\r\n        else {\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekFail,\r\n                    \"缓冲流已结束，无法切换到未缓冲区域\");\r\n            }\r\n        }\r\n\r\n        this.seeking = false;\r\n        return false;\r\n    }\r\n\r\n    _seekByActive(time) {\r\n        this.seeking = true;\r\n\r\n        this.lastSendSeekTs = new Date().getTime();\r\n\r\n        this.checkerSeek = setTimeout(()=>{\r\n            this.needSeek = false;\r\n            this.seeking = false;\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekFail,\r\n                    \"切换播放时间失败，请重新尝试\");\r\n            }\r\n        },15*1000);\r\n\r\n        this.seekTime = time;\r\n        this.needSeek = true;\r\n    }\r\n\r\n    _seekByPassive(time) {\r\n        this.seeking = true;\r\n\r\n        this.seekTime = time;\r\n        //获取当前video标签解码缓存\r\n        let buffered = this.element.buffered;\r\n        if (buffered.length > 0) { \r\n            //由设备端控制回放的buffered只会产生一段\r\n            let from = buffered.start(0);\r\n            let to = buffered.end(0);\r\n            this.newPlayStartTime = to;\r\n\r\n            this.element.currentTime = this.newPlayStartTime;\r\n        }\r\n\r\n        setTimeout(()=>{\r\n            this.seeking = false;\r\n            if (this.callbackPlaybackControlEvent != null) {\r\n                this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekSuccess,\r\n                    \"切换播放时间成功\");\r\n            }\r\n        },1000);\r\n    }\r\n\r\n    _onMediaState(info) {\r\n        if (this.callbackMediaState != null) {\r\n            this.callbackMediaState(info);\r\n        }\r\n    }\r\n\r\n    _onStatisticsInfo(data) {\r\n        if (this.callbackStatistics != null) {\r\n            let info = {};\r\n            info.speed = data.speed;\r\n            this.callbackStatistics(info);\r\n        }\r\n    }\r\n\r\n    _onError(type, detail, errObj) {\r\n        if (this.callbackError != null) {\r\n            let gtype = type;\r\n            let gsubtype = detail;\r\n            let info = type;\r\n            this.callbackError(type, gsubtype, info);\r\n        }\r\n    }\r\n\r\n    _onMediaSourceEnd(info) {\r\n        this.streamEnd = true;\r\n        if (this.callbackMediaSourceEnd != null) {\r\n            this.callbackMediaSourceEnd();\r\n        }\r\n    }\r\n\r\n    _onElementTime(event) {\r\n        //回放方案1\r\n        if (this.playbackPlan == 1) {\r\n            if (this.callbackTimeUpdate != null && this.element != null) {\r\n                this.callbackTimeUpdate(this.element.currentTime);\r\n            }\r\n            return;\r\n        }\r\n\r\n        //回放方案2\r\n        if (this.playbackControl === PlaybackControl.Active) {\r\n            if (!this.seeking && this.callbackTimeUpdate != null && this.element != null) {\r\n                this.callbackTimeUpdate(this.element.currentTime);\r\n            }\r\n        }\r\n        else if (this.playbackControl === PlaybackControl.Passive) {\r\n            if (!this.seeking && this.callbackTimeUpdate != null && this.element != null) {\r\n                let curPlayTime = this.seekTime + (this.element.currentTime - this.newPlayStartTime);\r\n                this.callbackTimeUpdate(curPlayTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    _onStreamTime(time) {\r\n        if (this.needSeek) {\r\n            if (Math.abs(this.seekTime*1000 - time) >= 1000) {\r\n                return;\r\n            }\r\n\r\n            if (this.checkerSeek != null) {\r\n                clearTimeout(this.checkerSeek);\r\n                this.checkerSeek = null;\r\n            }\r\n\r\n            this.needSeek = false;\r\n            setTimeout(()=>{\r\n                this.seeking = false;\r\n                this.element.currentTime = time/1000;\r\n                let off = new Date().getTime() - this.lastSendSeekTs;\r\n                console.log(\"切换耗时: \" + off);\r\n                if (this.callbackPlaybackControlEvent != null) {\r\n                    this.callbackPlaybackControlEvent(GPlaybackControlStatus.SeekSuccess,\r\n                        \"切换播放时间成功\");\r\n                }\r\n            },1000);\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n","export const GTalkerEvent = {\r\n    CONNECT_STATUS: 'connect_status'\r\n};\r\n\r\nexport const GTalkerConnectStatus = {\r\n    ConnectSuccess: 'ConnectSuccess',\r\n    ConnectError: 'ConnectError'\r\n};\r\n\r\nexport const GTalkerConnectErrorType = {\r\n    DeviceNotResponding: 'DeviceNotResponding',\r\n    DeviceStopedResponding: 'DeviceStopedResponding',\r\n    DownLinkFail: 'DownLinkFail',\r\n    UpLinkFail: 'UpLinkFail',\r\n    WaitOpenMicrophoneTimeout: 'WaitOpenMicrophoneTimeout',\r\n    NotAllowOpenMicrophone: 'NotAllowOpenMicrophone'\r\n};","export class GTalker {\r\n\r\n    constructor(typeName) {\r\n        this._type = typeName || 'undefined';\r\n    }\r\n\r\n    init(downUrl, upUrl, imei, channel, config) {\r\n    }\r\n\r\n    on(event, call) {\r\n\r\n    }\r\n\r\n    off(event) {\r\n\r\n    }\r\n\r\n    attachMediaElement(element) {  \r\n    }\r\n\r\n    load() {\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n}","import {GTalkerEvent, GTalkerConnectStatus, GTalkerConnectErrorType} from \"./gtalker-events.js\"\r\nimport {GTalker} from \"./gtalker.js\"\r\nimport {ByteArray} from \"../common/bytearray.js\"\r\nimport {Util} from \"../common/util.js\"\r\n\r\nimport flvjs from \"flv-g7.js\";\r\n\r\nimport Recorder from 'recorder-core'\r\nimport 'recorder-core/src/engine/mp3'\r\nimport 'recorder-core/src/engine/mp3-engine'\r\n\r\nconst AudioBufLen = 640;\r\nconst DebugFlag = false;\r\n\r\nexport class HttpFlvTalker extends GTalker {\r\n\r\n    constructor () {\r\n        super('httpflv-talker');\r\n        this.TAG = 'HttpFlvTalker';\r\n\r\n        this.downUrl = null;\r\n        this.upUrl = null;\r\n        this.imei = null;\r\n        this.channel = null;\r\n        \r\n        this.player = null;\r\n        this.recorder = null;\r\n        this.sender = null;\r\n        this.element = null;\r\n\r\n        this.callbackConnectStatus = null;\r\n\r\n        this.byteArray = new ByteArray();\r\n\r\n        this.timerCheck = null;\r\n        this.timerSend = null;\r\n\r\n        this.hasReceiveServerData = false;\r\n        this.hasSendClientData = false;\r\n        this.hasWaitOpenMicrophoneTimeout = false;\r\n        this.hasDestory = false;\r\n    }\r\n\r\n    static isSupported() {\r\n        return typeof WebSocket != 'undefined' && Recorder.Support() && window.MediaSource &&\r\n            window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\r\n    }\r\n\r\n    init(downUrl, upUrl, imei, channel, config) {\r\n        this.downUrl = downUrl;\r\n        this.upUrl = upUrl;\r\n        this.imei = imei;\r\n        this.channel = channel;\r\n        if (!this._checkInputParam()) {\r\n            return false;\r\n        }\r\n\r\n        this._startPlayer(downUrl);\r\n        return true;\r\n    }\r\n\r\n    on(event, call) {\r\n        if (event === GTalkerEvent.CONNECT_STATUS) {\r\n            this.callbackConnectStatus = call;\r\n        }\r\n    }\r\n\r\n    off(event) {\r\n        if (event === GTalkerEvent.CONNECT_STATUS) {\r\n            this.callbackConnectStatus = null;\r\n        }\r\n    }\r\n\r\n    attachMediaElement(element) {  \r\n        this.element = element;\r\n\r\n        this.element.addEventListener(\"loadeddata\", this._onPlayerLoadedData.bind(this), {once: true});\r\n        this.player.on(flvjs.Events.ERROR, this._onPlayerError.bind(this));\r\n        this.player.setMediaSourceEndCallback(this._onPlayerMediaSourceEnd.bind(this));\r\n\r\n        this.player.attachMediaElement(element);\r\n    }\r\n\r\n    load() {\r\n        this.player.load();\r\n        this._startSender(this.upUrl);\r\n    }\r\n\r\n    destroy() {\r\n        this.hasDestory = true;\r\n\r\n        this._destroyPlayer();\r\n        this._destroySender();\r\n        this._destroyRecorder();\r\n        this._destroySendProc();\r\n    }\r\n\r\n    _checkInputParam() {\r\n        if (Util.isEmptyString(this.downUrl) || Util.isEmptyString(this.upUrl)) {\r\n            return false;\r\n        }\r\n        if (Util.isEmptyString(this.imei)) {\r\n            return false;\r\n        }\r\n        if (this.channel < 0 || this.channel > 255) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _startPlayer(url) {\r\n        this._destroyPlayer();\r\n\r\n        this.player = flvjs.createPlayer({isLive:true, type:'flv',url:url}, {\r\n            lazyLoad: false,\r\n            enableStashBuffer: false,\r\n            deferLoadAfterSourceOpen:true\r\n        });\r\n    }\r\n\r\n    _onPlayerLoadedData() {\r\n        if (DebugFlag) {\r\n            console.log(\"player loadedData\");\r\n        }\r\n\r\n        this.hasReceiveServerData = true;\r\n        if (this.hasSendClientData && this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectSuccess, \"\");\r\n        }\r\n    }\r\n\r\n    _onPlayerError(type, detail, errObj) {\r\n        if (DebugFlag) {\r\n            console.log(\"player error\");\r\n        }\r\n\r\n        if (this.callbackConnectStatus == null) {\r\n            return;\r\n        }\r\n\r\n        if (this.hasReceiveServerData) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.DownLinkFail);\r\n        }\r\n        else {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.DeviceNotResponding);\r\n        }\r\n    }\r\n\r\n    _onPlayerMediaSourceEnd(info) {\r\n        if (DebugFlag) {\r\n            console.log(\"player source end\");\r\n        }\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.DeviceStopedResponding);\r\n        }\r\n    }\r\n\r\n    _destroyPlayer() {\r\n        if (this.player != null) {\r\n            this.player.pause();\r\n            this.player.unload();\r\n            this.player.detachMediaElement();\r\n            this.player.destroy();\r\n            this.player = null;\r\n        }\r\n\r\n        if (this.element != null) {\r\n            this.element = null;\r\n        }\r\n    }\r\n\r\n    _startSender(url) {\r\n        this.sender = new WebSocket(url);\r\n        this.sender.onopen = this._onSenderOpen.bind(this);\r\n        this.sender.onmessage = this._onSenderMsg.bind(this);\r\n        this.sender.onclose = this._onSenderClose.bind(this);\r\n        this.sender.onerror = this._onSenderError.bind(this);\r\n    }\r\n\r\n    _onSenderOpen() {\r\n        if (DebugFlag) {\r\n            console.log(\"websocket open\");\r\n        }\r\n        \r\n        this._startRecorder();\r\n    }\r\n\r\n    _onSenderMsg(e) {\r\n        \r\n    }\r\n\r\n    _onSenderClose(e) {\r\n        if (DebugFlag) {\r\n            console.log(\"websocket close\");\r\n        }\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.UpLinkFail);\r\n        }\r\n    }\r\n\r\n    _onSenderError(e) {\r\n        if (DebugFlag) {\r\n            console.log(\"websocket error\");\r\n        }\r\n    }\r\n\r\n    _destroySender() {\r\n        this.sender.close();\r\n        this.sender = null;\r\n    }\r\n\r\n    _startRecorder() {\r\n        if (this.recorder) {\r\n            this.recorder.close();\r\n        }\r\n\r\n        this.recorder = Recorder({\r\n            type:\"mp3\",\r\n            sampleRate:8000,\r\n            bitRate:16,\r\n            onProcess:this._onReceiveMicrophoneData.bind(this)\r\n        });\r\n        this.timerCheck = setTimeout(this._timeoutCheckIfAllowOpenMicrophone.bind(this),10000);\r\n        this.recorder.open(this._onAllowOpenMicrophone.bind(this),\r\n            this._onNotAllowOpenMicrophone.bind(this));\r\n    }\r\n\r\n    _timeoutCheckIfAllowOpenMicrophone() {\r\n        if (DebugFlag) {\r\n            console.log(\"user WaitOpenMicrophone Timeout\");\r\n        }\r\n\r\n        this.hasWaitOpenMicrophoneTimeout = true;\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.WaitOpenMicrophoneTimeout);\r\n        }\r\n    }\r\n\r\n    _onAllowOpenMicrophone() {\r\n        if (DebugFlag) {\r\n            console.log(\"user AllowOpenMicrophone\");\r\n        }\r\n\r\n        if (this.hasWaitOpenMicrophoneTimeout) {\r\n            return;\r\n        }\r\n\r\n        clearTimeout(this.timerCheck);\r\n\r\n        this.hasSendClientData = true;\r\n        if (this.hasReceiveServerData && this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectSuccess, \"\");\r\n        }\r\n\r\n        this.recorder.start();\r\n        this._sendProc();\r\n    }\r\n\r\n    _onNotAllowOpenMicrophone(msg, isUserNotAllow) {\r\n        if (DebugFlag) {\r\n            console.log(\"user NotAllowOpenMicrophone\");\r\n        }\r\n\r\n        clearTimeout(this.timerCheck);\r\n\r\n        if (this.callbackConnectStatus != null) {\r\n            this.callbackConnectStatus(GTalkerConnectStatus.ConnectError, \r\n                GTalkerConnectErrorType.NotAllowOpenMicrophone);\r\n        }\r\n    }\r\n\r\n    _onReceiveMicrophoneData(buffers, powerLevel, bufferDuration, bufferSampleRate) {\r\n        let arrayBuf = buffers[buffers.length - 1].buffer; //Uint16Array To ArrayBuffer\r\n        let u8buf = new Uint8Array(arrayBuf); //ArrayBuffer To Uint8Array\r\n        this.byteArray.push(u8buf);\r\n    }\r\n\r\n    _destroyRecorder() {\r\n        this.recorder.close();\r\n        this.recorder = null;\r\n    }\r\n\r\n    _sendProc() {\r\n        if (this.hasDestory) {\r\n            return;\r\n        }\r\n\r\n        if (this.byteArray.length < AudioBufLen) {\r\n            this.timerSend = setTimeout(this._sendProc.bind(this), 5);\r\n        }\r\n        else {\r\n            let audioBuf = this.byteArray.readBytes(AudioBufLen);\r\n\r\n            let packer = new ByteArray();\r\n            packer.push(new Uint8Array([0x31,0x32,0x63,0x64]));\r\n            let arrImeiChar = this.imei.split('');\r\n            for (let i = 0; i < arrImeiChar.length; i++) {\r\n                packer.push(new Uint8Array([arrImeiChar[i].charCodeAt()]));\r\n            }\r\n            packer.push(new Uint8Array([parseInt(this.channel)]));\r\n            packer.push(new Uint8Array([Math.floor(AudioBufLen/256)]));\r\n            packer.push(new Uint8Array([AudioBufLen%256]));\r\n            packer.push(audioBuf);\r\n\r\n            let totalLen = 4 + arrImeiChar.length + 3 + AudioBufLen;\r\n            if (this.sender != null) {\r\n                this.sender.send(packer.readBytes(totalLen));\r\n            }\r\n\r\n            this._sendProc();\r\n        }\r\n    }\r\n\r\n    _destroySendProc() {\r\n        clearTimeout(this.timerSend);\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}